// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	statements           Statements
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	setExprs             SetExprs
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	triggerOrder         *TriggerOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const TRIGGERS = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const EACH = 57497
const ROW = 57498
const BEFORE = 57499
const FOLLOWS = 57500
const PRECEDES = 57501
const DEFINER = 57502
const BEGIN = 57503
const START = 57504
const TRANSACTION = 57505
const COMMIT = 57506
const ROLLBACK = 57507
const BIT = 57508
const TINYINT = 57509
const SMALLINT = 57510
const MEDIUMINT = 57511
const INT = 57512
const INTEGER = 57513
const BIGINT = 57514
const INTNUM = 57515
const REAL = 57516
const DOUBLE = 57517
const FLOAT_TYPE = 57518
const DECIMAL = 57519
const NUMERIC = 57520
const DEC = 57521
const FIXED = 57522
const PRECISION = 57523
const TIME = 57524
const TIMESTAMP = 57525
const DATETIME = 57526
const YEAR = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NATIONAL = 57535
const VARYING = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const LONG = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const ENUM = 57547
const GEOMETRY = 57548
const POINT = 57549
const LINESTRING = 57550
const POLYGON = 57551
const GEOMETRYCOLLECTION = 57552
const MULTIPOINT = 57553
const MULTILINESTRING = 57554
const MULTIPOLYGON = 57555
const NULLX = 57556
const AUTO_INCREMENT = 57557
const APPROXNUM = 57558
const SIGNED = 57559
const UNSIGNED = 57560
const ZEROFILL = 57561
const COLLATION = 57562
const DATABASES = 57563
const SCHEMAS = 57564
const TABLES = 57565
const VITESS_METADATA = 57566
const VSCHEMA = 57567
const FULL = 57568
const PROCESSLIST = 57569
const COLUMNS = 57570
const FIELDS = 57571
const ENGINES = 57572
const PLUGINS = 57573
const NAMES = 57574
const CHARSET = 57575
const GLOBAL = 57576
const SESSION = 57577
const ISOLATION = 57578
const LEVEL = 57579
const READ = 57580
const WRITE = 57581
const ONLY = 57582
const REPEATABLE = 57583
const COMMITTED = 57584
const UNCOMMITTED = 57585
const SERIALIZABLE = 57586
const CURRENT_TIMESTAMP = 57587
const DATABASE = 57588
const CURRENT_DATE = 57589
const CURRENT_TIME = 57590
const LOCALTIME = 57591
const LOCALTIMESTAMP = 57592
const UTC_DATE = 57593
const UTC_TIME = 57594
const UTC_TIMESTAMP = 57595
const REPLACE = 57596
const CONVERT = 57597
const CAST = 57598
const SUBSTR = 57599
const SUBSTRING = 57600
const GROUP_CONCAT = 57601
const SEPARATOR = 57602
const TIMESTAMPADD = 57603
const TIMESTAMPDIFF = 57604
const MATCH = 57605
const AGAINST = 57606
const BOOLEAN = 57607
const LANGUAGE = 57608
const WITH = 57609
const QUERY = 57610
const EXPANSION = 57611
const UNUSED = 57612
const ARRAY = 57613
const CUME_DIST = 57614
const DESCRIPTION = 57615
const DENSE_RANK = 57616
const EMPTY = 57617
const EXCEPT = 57618
const FIRST_VALUE = 57619
const GROUPING = 57620
const GROUPS = 57621
const JSON_TABLE = 57622
const LAG = 57623
const LAST_VALUE = 57624
const LATERAL = 57625
const LEAD = 57626
const MEMBER = 57627
const NTH_VALUE = 57628
const NTILE = 57629
const OF = 57630
const OVER = 57631
const PERCENT_RANK = 57632
const RANK = 57633
const RECURSIVE = 57634
const ROW_NUMBER = 57635
const SYSTEM = 57636
const WINDOW = 57637
const ACTIVE = 57638
const ADMIN = 57639
const BUCKETS = 57640
const CLONE = 57641
const COMPONENT = 57642
const DEFINITION = 57643
const ENFORCED = 57644
const EXCLUDE = 57645
const FOLLOWING = 57646
const GEOMCOLLECTION = 57647
const GET_MASTER_PUBLIC_KEY = 57648
const HISTOGRAM = 57649
const HISTORY = 57650
const INACTIVE = 57651
const INVISIBLE = 57652
const LOCKED = 57653
const MASTER_COMPRESSION_ALGORITHMS = 57654
const MASTER_PUBLIC_KEY_PATH = 57655
const MASTER_TLS_CIPHERSUITES = 57656
const MASTER_ZSTD_COMPRESSION_LEVEL = 57657
const NESTED = 57658
const NETWORK_NAMESPACE = 57659
const NOWAIT = 57660
const NULLS = 57661
const OJ = 57662
const OLD = 57663
const OPTIONAL = 57664
const ORDINALITY = 57665
const ORGANIZATION = 57666
const OTHERS = 57667
const PATH = 57668
const PERSIST = 57669
const PERSIST_ONLY = 57670
const PRECEDING = 57671
const PRIVILEGE_CHECKS_USER = 57672
const PROCESS = 57673
const RANDOM = 57674
const REFERENCE = 57675
const REQUIRE_ROW_FORMAT = 57676
const RESOURCE = 57677
const RESPECT = 57678
const RESTART = 57679
const RETAIN = 57680
const REUSE = 57681
const ROLE = 57682
const SECONDARY = 57683
const SECONDARY_ENGINE = 57684
const SECONDARY_LOAD = 57685
const SECONDARY_UNLOAD = 57686
const SKIP = 57687
const SRID = 57688
const THREAD_PRIORITY = 57689
const TIES = 57690
const UNBOUNDED = 57691
const VCPU = 57692
const VISIBLE = 57693

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 33,
	164, 78,
	-2, 725,
	-1, 41,
	168, 377,
	169, 377,
	-2, 365,
	-1, 48,
	1, 1028,
	369, 1028,
	-2, 396,
	-1, 336,
	114, 733,
	-2, 729,
	-1, 337,
	114, 734,
	-2, 730,
	-1, 407,
	84, 983,
	114, 983,
	-2, 67,
	-1, 408,
	84, 901,
	114, 901,
	-2, 68,
	-1, 413,
	84, 870,
	114, 870,
	-2, 693,
	-1, 415,
	84, 931,
	114, 931,
	-2, 695,
	-1, 601,
	5, 31,
	-2, 390,
	-1, 605,
	5, 31,
	-2, 389,
	-1, 732,
	1, 441,
	5, 441,
	12, 441,
	13, 441,
	14, 441,
	15, 441,
	17, 441,
	19, 441,
	29, 441,
	30, 441,
	44, 441,
	45, 441,
	46, 441,
	47, 441,
	48, 441,
	50, 441,
	51, 441,
	54, 441,
	55, 441,
	57, 441,
	58, 441,
	369, 441,
	-2, 466,
	-1, 735,
	55, 48,
	57, 48,
	-2, 52,
	-1, 900,
	114, 736,
	-2, 732,
	-1, 1106,
	56, 307,
	59, 307,
	-2, 272,
	-1, 1155,
	5, 32,
	-2, 530,
	-1, 1186,
	5, 31,
	-2, 670,
	-1, 1279,
	5, 31,
	-2, 69,
	-1, 1388,
	1, 485,
	5, 485,
	12, 485,
	13, 485,
	14, 485,
	15, 485,
	17, 485,
	19, 485,
	29, 485,
	30, 485,
	44, 485,
	45, 485,
	46, 485,
	47, 485,
	48, 485,
	50, 485,
	51, 485,
	54, 485,
	55, 485,
	57, 485,
	58, 485,
	369, 485,
	-2, 466,
	-1, 1489,
	5, 32,
	-2, 671,
	-1, 1519,
	5, 31,
	-2, 69,
	-1, 1557,
	5, 31,
	-2, 673,
	-1, 1643,
	5, 32,
	-2, 674,
	-1, 1693,
	369, 96,
	-2, 31,
}

const yyPrivate = 57344

const yyLast = 17522

var yyAct = [...]int{

	368, 54, 1692, 1688, 1710, 1687, 1698, 1076, 1453, 1647,
	1696, 7, 1631, 1401, 1571, 1324, 1695, 6, 1694, 5,
	337, 367, 1697, 8, 686, 1074, 1648, 1522, 987, 403,
	341, 1537, 1368, 876, 1027, 1402, 1369, 1502, 1234, 989,
	1018, 354, 685, 3, 1031, 985, 981, 64, 1017, 1069,
	315, 1365, 86, 1375, 1341, 54, 1052, 1379, 925, 1301,
	102, 1024, 1300, 102, 938, 1101, 1098, 320, 1212, 102,
	852, 961, 1271, 418, 983, 748, 972, 953, 728, 1012,
	1064, 902, 617, 623, 747, 956, 401, 406, 729, 629,
	965, 339, 324, 638, 102, 702, 1707, 310, 424, 102,
	450, 102, 836, 398, 737, 409, 63, 1295, 68, 1700,
	1658, 1686, 102, 1641, 436, 1675, 703, 1454, 1657, 102,
	1358, 1640, 1481, 423, 749, 381, 750, 387, 388, 385,
	386, 384, 383, 382, 88, 328, 70, 71, 72, 73,
	74, 389, 390, 1117, 1396, 334, 1397, 1398, 26, 1006,
	55, 29, 30, 1007, 1008, 572, 1116, 308, 1607, 651,
	650, 660, 661, 653, 654, 655, 656, 657, 658, 659,
	652, 31, 343, 662, 26, 81, 55, 29, 30, 304,
	1221, 598, 426, 1220, 428, 307, 1222, 1121, 55, 29,
	30, 26, 588, 55, 29, 30, 1115, 31, 61, 1254,
	1038, 96, 92, 93, 1326, 94, 962, 1040, 1544, 31,
	312, 1053, 314, 1040, 1044, 1046, 1058, 1045, 1053, 1065,
	1472, 1470, 571, 574, 61, 1716, 576, 83, 85, 305,
	306, 80, 299, 309, 1661, 1662, 1083, 90, 89, 97,
	446, 61, 1649, 1625, 866, 867, 1112, 1107, 1108, 1328,
	1106, 596, 1109, 1110, 597, 583, 584, 864, 427, 573,
	575, 1685, 1082, 1674, 1632, 1323, 966, 591, 1623, 301,
	1327, 592, 589, 590, 1523, 1524, 1032, 447, 87, 447,
	447, 1720, 1572, 865, 447, 1305, 447, 1119, 1122, 868,
	1714, 425, 447, 433, 102, 1574, 314, 436, 1532, 436,
	436, 54, 54, 1531, 436, 302, 436, 88, 1285, 827,
	1034, 602, 436, 819, 1320, 1211, 1210, 604, 1209, 603,
	1683, 54, 313, 990, 992, 1034, 1034, 421, 611, 273,
	91, 1614, 1034, 102, 1114, 1235, 671, 1129, 95, 673,
	1128, 674, 675, 601, 605, 1492, 1683, 1225, 1608, 1217,
	1165, 436, 1639, 1144, 874, 1053, 1162, 448, 1683, 570,
	1113, 1067, 1261, 626, 82, 1573, 625, 684, 1043, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	756, 701, 704, 704, 704, 710, 704, 704, 710, 704,
	718, 719, 720, 721, 722, 723, 609, 733, 743, 642,
	1118, 442, 1712, 991, 1033, 1713, 1013, 1711, 1420, 616,
	90, 89, 1530, 56, 662, 1120, 102, 102, 102, 1033,
	1033, 652, 1034, 1319, 662, 1002, 1033, 1316, 871, 1100,
	627, 436, 1309, 1305, 745, 409, 859, 1306, 102, 56,
	1313, 1315, 436, 637, 432, 447, 447, 1621, 593, 102,
	1160, 56, 1159, 102, 674, 675, 56, 1310, 102, 1421,
	674, 675, 853, 102, 1342, 436, 436, 1596, 751, 636,
	635, 727, 613, 635, 614, 1091, 580, 615, 705, 707,
	709, 711, 713, 715, 716, 77, 637, 607, 608, 637,
	676, 677, 678, 679, 680, 681, 682, 683, 606, 706,
	708, 736, 712, 714, 741, 717, 1344, 1030, 1034, 1099,
	429, 672, 1246, 1360, 954, 821, 1033, 1251, 1250, 577,
	578, 78, 1309, 1305, 582, 1408, 585, 1306, 595, 1622,
	1307, 1308, 599, 419, 632, 909, 828, 419, 1247, 437,
	438, 439, 440, 838, 1645, 854, 1161, 1310, 1346, 907,
	908, 906, 1252, 1350, 1244, 1345, 1517, 1343, 1092, 581,
	1245, 1721, 1348, 655, 656, 657, 658, 659, 652, 732,
	417, 662, 1551, 447, 447, 1347, 653, 654, 655, 656,
	657, 658, 659, 652, 447, 447, 662, 1514, 1349, 1351,
	954, 61, 1173, 436, 436, 102, 102, 102, 636, 635,
	102, 905, 1033, 1722, 436, 436, 877, 878, 1028, 1516,
	1029, 311, 926, 447, 927, 637, 1026, 1032, 1249, 1276,
	651, 650, 660, 661, 653, 654, 655, 656, 657, 658,
	659, 652, 102, 436, 662, 636, 635, 102, 650, 660,
	661, 653, 654, 655, 656, 657, 658, 659, 652, 436,
	24, 662, 637, 1672, 102, 610, 636, 635, 1274, 855,
	436, 1255, 892, 894, 895, 636, 635, 903, 893, 841,
	842, 873, 1362, 637, 54, 1223, 879, 1224, 1102, 1141,
	1142, 1143, 637, 395, 396, 839, 840, 1413, 1296, 688,
	1272, 1103, 651, 650, 660, 661, 653, 654, 655, 656,
	657, 658, 659, 652, 436, 1436, 662, 1671, 419, 1619,
	872, 1590, 880, 1566, 1676, 610, 1248, 319, 1508, 1673,
	881, 1653, 610, 1508, 1650, 943, 946, 636, 635, 1566,
	1635, 936, 955, 896, 984, 1508, 1624, 1585, 733, 436,
	436, 857, 733, 900, 637, 898, 102, 357, 356, 359,
	360, 361, 362, 1235, 102, 102, 358, 363, 102, 102,
	1566, 1615, 102, 102, 102, 1587, 929, 930, 1566, 1577,
	1581, 933, 935, 419, 932, 409, 1528, 940, 1456, 436,
	1566, 610, 1508, 1507, 1494, 610, 1491, 610, 951, 1451,
	901, 1447, 1444, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 1442, 1441,
	1428, 1427, 997, 843, 844, 1292, 999, 1291, 904, 1424,
	1425, 447, 1230, 447, 849, 850, 995, 1424, 1423, 1000,
	1089, 1004, 1003, 1022, 1054, 1055, 1056, 1057, 969, 610,
	102, 436, 1088, 436, 838, 1156, 610, 102, 102, 928,
	957, 102, 861, 863, 934, 610, 1580, 900, 835, 1015,
	834, 26, 833, 825, 1071, 1072, 1073, 823, 982, 822,
	820, 444, 102, 1414, 102, 102, 759, 758, 1213, 1213,
	1366, 102, 26, 744, 1184, 102, 102, 102, 102, 102,
	739, 1185, 1066, 1068, 739, 65, 937, 939, 990, 992,
	1145, 945, 948, 949, 950, 1035, 732, 1332, 744, 934,
	732, 61, 1556, 1487, 732, 974, 977, 978, 979, 975,
	1595, 976, 980, 969, 744, 1380, 1381, 960, 903, 963,
	964, 969, 61, 996, 740, 738, 742, 1156, 740, 26,
	738, 651, 650, 660, 661, 653, 654, 655, 656, 657,
	658, 659, 652, 1156, 968, 662, 1426, 1226, 1005, 1133,
	1156, 1178, 1134, 1177, 1087, 738, 1187, 1188, 875, 826,
	733, 733, 733, 733, 733, 900, 1150, 1015, 991, 321,
	61, 1325, 969, 1659, 1651, 984, 1588, 1205, 1146, 61,
	102, 102, 102, 102, 102, 1539, 1518, 733, 1189, 409,
	899, 1040, 102, 1497, 1153, 102, 1070, 1407, 1186, 102,
	1380, 1381, 1704, 1065, 1152, 1229, 1060, 102, 1208, 1059,
	1075, 1540, 1155, 1157, 1702, 1158, 1689, 936, 1207, 61,
	1172, 1164, 1432, 1383, 1167, 1168, 1169, 1366, 436, 1277,
	860, 1175, 830, 1176, 887, 1386, 1179, 1180, 1190, 1181,
	1182, 1193, 1385, 1147, 1148, 1149, 1196, 1202, 1227, 1191,
	1192, 1078, 1194, 1080, 1195, 1668, 1215, 330, 1216, 1204,
	1236, 1214, 1656, 1199, 1232, 1233, 1329, 54, 1200, 904,
	1130, 1218, 1666, 1039, 1554, 366, 1197, 447, 1139, 447,
	447, 1198, 1201, 1140, 978, 979, 436, 1138, 1256, 1257,
	325, 326, 1446, 1237, 1412, 1263, 1411, 436, 102, 436,
	436, 630, 631, 1231, 1014, 1270, 1019, 618, 1265, 1279,
	974, 977, 978, 979, 975, 757, 976, 980, 619, 628,
	445, 1485, 1264, 1273, 1266, 1267, 1268, 1269, 877, 878,
	1079, 1535, 732, 732, 732, 732, 732, 829, 1275, 1280,
	1095, 1302, 1314, 1318, 1484, 982, 102, 732, 1170, 1290,
	411, 1294, 630, 631, 1293, 436, 818, 1312, 1304, 732,
	1311, 1584, 1321, 1322, 322, 323, 1137, 316, 1601, 434,
	317, 65, 1600, 1542, 1136, 1213, 1371, 1166, 54, 1282,
	1283, 1284, 651, 650, 660, 661, 653, 654, 655, 656,
	657, 658, 659, 652, 1706, 1705, 662, 1370, 436, 436,
	1390, 1391, 1392, 1336, 1367, 409, 1353, 1335, 1359, 1352,
	1163, 1340, 851, 633, 1705, 1706, 436, 1611, 1410, 870,
	1372, 67, 899, 69, 47, 62, 1389, 1, 1303, 1339,
	1455, 1536, 1111, 1630, 1025, 1016, 436, 436, 1298, 436,
	436, 1384, 76, 416, 75, 1620, 1090, 579, 1377, 1387,
	1393, 1526, 281, 1023, 1242, 1404, 1241, 1238, 1253, 1400,
	1037, 1405, 1406, 1240, 1239, 1399, 1243, 765, 763, 764,
	762, 767, 766, 1395, 1036, 1299, 761, 1430, 1431, 284,
	404, 752, 634, 84, 48, 1529, 1317, 1338, 102, 1105,
	79, 858, 586, 587, 286, 670, 102, 1135, 1354, 1355,
	1219, 1356, 1357, 410, 1373, 1417, 1660, 622, 1599, 1541,
	1171, 699, 952, 1363, 1364, 342, 891, 1286, 355, 1288,
	1289, 352, 353, 733, 1094, 436, 1415, 1416, 102, 436,
	882, 1439, 1183, 1419, 436, 644, 340, 436, 436, 436,
	1422, 332, 1388, 102, 731, 724, 1440, 973, 971, 1479,
	1434, 970, 449, 831, 449, 449, 399, 1382, 1378, 449,
	730, 449, 1331, 594, 1437, 1019, 300, 449, 1480, 1606,
	886, 28, 66, 327, 620, 624, 19, 18, 17, 600,
	20, 21, 1409, 22, 16, 1450, 1468, 15, 14, 430,
	1460, 643, 32, 36, 35, 34, 10, 1461, 1281, 1081,
	1691, 436, 436, 436, 23, 13, 640, 1500, 12, 1486,
	436, 1462, 11, 9, 1677, 1495, 4, 1464, 436, 1504,
	1505, 318, 54, 25, 2, 1501, 687, 0, 1473, 1474,
	1227, 1435, 0, 0, 1506, 1510, 0, 700, 0, 0,
	0, 0, 1511, 102, 0, 0, 0, 1488, 1489, 1490,
	0, 1493, 0, 0, 0, 1525, 0, 0, 0, 0,
	0, 0, 0, 1499, 1519, 436, 1404, 0, 1533, 0,
	1513, 1438, 1515, 1463, 0, 1527, 0, 0, 1371, 0,
	411, 1558, 1443, 0, 0, 0, 753, 1512, 0, 0,
	734, 0, 1334, 0, 0, 732, 0, 817, 0, 1370,
	1521, 0, 436, 436, 0, 436, 0, 0, 436, 0,
	102, 0, 102, 1543, 1555, 1534, 0, 1583, 0, 436,
	449, 449, 1582, 1557, 1570, 1563, 1594, 0, 0, 436,
	99, 1565, 0, 1576, 1575, 1564, 1562, 0, 0, 303,
	0, 0, 0, 436, 0, 0, 0, 1371, 0, 54,
	436, 102, 1593, 0, 0, 1589, 1550, 0, 0, 0,
	0, 0, 0, 0, 400, 0, 0, 1597, 1370, 420,
	0, 422, 0, 1334, 1019, 1618, 1019, 436, 1567, 1612,
	1568, 1569, 431, 1578, 1616, 1579, 0, 0, 0, 441,
	0, 1613, 1627, 0, 0, 0, 0, 0, 0, 436,
	0, 0, 0, 0, 0, 1628, 436, 436, 0, 0,
	0, 1545, 1546, 1547, 1548, 1549, 1637, 1633, 0, 1552,
	1553, 1602, 1603, 1604, 1605, 436, 0, 1634, 1609, 1610,
	0, 1642, 409, 0, 102, 0, 0, 0, 0, 0,
	0, 1655, 0, 436, 0, 0, 0, 0, 449, 449,
	1663, 856, 0, 1618, 1667, 1664, 1665, 0, 1670, 449,
	449, 0, 436, 0, 0, 0, 0, 1678, 0, 0,
	436, 1682, 0, 1684, 54, 1690, 1699, 1681, 0, 1680,
	0, 1701, 1638, 1679, 1703, 1483, 0, 1669, 449, 1643,
	0, 0, 1586, 889, 890, 0, 0, 0, 54, 0,
	1717, 1715, 0, 1592, 883, 0, 1652, 0, 0, 0,
	0, 0, 0, 0, 0, 640, 1693, 0, 449, 0,
	0, 0, 0, 651, 650, 660, 661, 653, 654, 655,
	656, 657, 658, 659, 652, 0, 0, 662, 0, 0,
	1693, 0, 0, 0, 0, 1337, 687, 1019, 0, 0,
	941, 942, 0, 0, 0, 1626, 0, 0, 0, 931,
	0, 0, 0, 1629, 443, 651, 650, 660, 661, 653,
	654, 655, 656, 657, 658, 659, 652, 411, 0, 662,
	0, 0, 0, 0, 1718, 1719, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 959, 0, 0, 0, 0,
	0, 621, 1538, 612, 0, 0, 0, 0, 0, 1011,
	660, 661, 653, 654, 655, 656, 657, 658, 659, 652,
	411, 0, 662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 449, 1708, 0, 0, 0, 0,
	0, 100, 1041, 1042, 298, 1047, 1048, 1049, 1050, 1051,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 1062, 1063, 26, 27, 55, 29,
	30, 0, 331, 0, 0, 402, 412, 0, 1478, 0,
	100, 0, 100, 0, 0, 60, 726, 0, 735, 31,
	51, 52, 0, 100, 0, 0, 449, 0, 449, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 760, 0,
	0, 0, 42, 0, 0, 0, 61, 0, 0, 824,
	0, 0, 0, 400, 0, 0, 0, 0, 832, 0,
	1131, 1132, 0, 624, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 1538, 1019, 0, 0, 0, 0, 0,
	449, 0, 0, 0, 651, 650, 660, 661, 653, 654,
	655, 656, 657, 658, 659, 652, 0, 294, 662, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 57, 38,
	37, 40, 0, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 1154, 0, 291, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	59, 58, 1174, 0, 49, 50, 39, 651, 650, 660,
	661, 653, 654, 655, 656, 657, 658, 659, 652, 0,
	0, 662, 0, 0, 0, 0, 0, 0, 43, 44,
	0, 45, 46, 0, 411, 274, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 292, 293, 845, 846, 847, 0, 0,
	848, 0, 0, 0, 0, 100, 651, 650, 660, 661,
	653, 654, 655, 656, 657, 658, 659, 652, 0, 0,
	662, 0, 0, 449, 0, 0, 0, 0, 283, 0,
	0, 0, 862, 0, 0, 290, 0, 869, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 1258, 1259, 1260,
	1262, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 449, 0, 449, 449, 0, 0, 0, 1475,
	0, 0, 287, 278, 279, 0, 288, 289, 297, 0,
	0, 0, 280, 282, 0, 276, 296, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 100, 100,
	0, 0, 0, 0, 0, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 100,
	449, 0, 0, 0, 0, 0, 0, 0, 0, 998,
	100, 1361, 0, 0, 100, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 837, 651, 650, 660, 661, 653,
	654, 655, 656, 657, 658, 659, 652, 0, 0, 662,
	411, 0, 0, 1374, 1376, 0, 646, 0, 649, 0,
	0, 1394, 0, 0, 663, 664, 665, 666, 667, 668,
	669, 1376, 647, 648, 645, 651, 650, 660, 661, 653,
	654, 655, 656, 657, 658, 659, 652, 0, 0, 662,
	0, 449, 449, 1151, 449, 1403, 0, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 1084, 1085, 0,
	0, 1086, 0, 651, 650, 660, 661, 653, 654, 655,
	656, 657, 658, 659, 652, 1418, 0, 662, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 1123, 1124, 1125, 1126, 1127,
	651, 650, 660, 661, 653, 654, 655, 656, 657, 658,
	659, 652, 0, 0, 662, 0, 100, 100, 100, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 1449, 0, 0, 0, 0, 1452,
	0, 0, 1457, 1458, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 1465, 1466, 100, 1467,
	1482, 0, 1469, 0, 1471, 0, 0, 0, 0, 687,
	0, 0, 0, 0, 0, 100, 0, 0, 1496, 0,
	0, 1498, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1503, 1503, 1503, 0,
	0, 0, 0, 0, 0, 449, 0, 1509, 0, 0,
	0, 0, 0, 1503, 0, 0, 0, 0, 0, 0,
	0, 331, 331, 0, 0, 0, 331, 331, 331, 331,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 331, 331, 331, 0, 100, 0, 0,
	449, 0, 0, 0, 0, 100, 993, 0, 0, 100,
	100, 0, 0, 100, 1001, 837, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 1559, 1560, 0,
	1561, 0, 0, 1503, 0, 0, 0, 0, 1287, 0,
	0, 0, 0, 0, 1403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1591, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 1330, 0, 100, 100,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 1096, 1097, 787, 1636, 687,
	0, 0, 100, 0, 1403, 0, 100, 100, 100, 100,
	100, 449, 449, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 331, 0,
	1644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1654, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 331, 1503, 0, 0, 774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 0,
	412, 100, 100, 100, 100, 100, 1433, 0, 0, 0,
	788, 0, 0, 1203, 0, 0, 100, 0, 0, 0,
	993, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 801, 804, 805, 806, 807, 808, 809, 0, 810,
	811, 812, 813, 814, 815, 816, 0, 789, 790, 791,
	792, 768, 772, 802, 769, 775, 771, 773, 770, 0,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 793, 794, 795, 796, 797, 798, 799, 800, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	803, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1646, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 545, 0, 502, 560, 475, 492, 568,
	493, 496, 533, 460, 515, 186, 490, 0, 479, 455,
	485, 456, 477, 504, 132, 474, 547, 518, 559, 158,
	558, 508, 100, 566, 160, 524, 0, 232, 174, 0,
	0, 506, 549, 513, 542, 501, 534, 465, 523, 561,
	491, 531, 562, 0, 0, 0, 435, 0, 1020, 1021,
	0, 0, 0, 0, 0, 122, 0, 528, 556, 487,
	530, 532, 454, 525, 0, 458, 461, 567, 552, 482,
	483, 1228, 0, 0, 0, 0, 0, 0, 505, 514,
	539, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	480, 0, 522, 412, 0, 0, 462, 459, 0, 0,
	503, 0, 0, 0, 464, 100, 481, 540, 0, 451,
	140, 0, 0, 544, 551, 500, 0, 262, 555, 498,
	497, 205, 0, 236, 143, 157, 118, 104, 114, 0,
	142, 183, 212, 216, 488, 452, 548, 478, 486, 126,
	484, 214, 193, 253, 0, 521, 195, 213, 161, 242,
	206, 251, 252, 263, 264, 239, 260, 268, 229, 0,
	0, 0, 0, 0, 0, 107, 238, 250, 123, 224,
	109, 248, 235, 172, 152, 153, 108, 0, 210, 131,
	138, 128, 185, 0, 0, 0, 245, 246, 127, 271,
	115, 259, 111, 116, 258, 179, 0, 0, 0, 241,
	249, 173, 166, 0, 110, 247, 171, 165, 156, 135,
	145, 203, 163, 204, 146, 176, 175, 177, 0, 457,
	0, 233, 256, 272, 120, 473, 0, 240, 266, 267,
	0, 0, 121, 139, 134, 202, 178, 117, 148, 230,
	155, 162, 209, 270, 192, 215, 124, 255, 231, 469,
	472, 467, 468, 516, 517, 563, 564, 565, 541, 463,
	0, 470, 471, 0, 546, 553, 554, 520, 103, 112,
	159, 269, 207, 137, 257, 453, 466, 130, 476, 0,
	0, 489, 494, 495, 507, 509, 510, 511, 512, 519,
	526, 527, 529, 535, 536, 537, 538, 543, 550, 569,
	105, 106, 113, 119, 125, 129, 133, 136, 141, 144,
	147, 149, 150, 151, 154, 164, 167, 168, 169, 170,
	180, 181, 182, 184, 187, 188, 189, 190, 191, 194,
	196, 197, 198, 199, 200, 201, 208, 211, 217, 218,
	219, 220, 221, 222, 223, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 265, 557, 545, 0, 502,
	560, 475, 492, 568, 493, 496, 533, 460, 515, 186,
	490, 0, 479, 455, 485, 456, 477, 504, 132, 474,
	547, 518, 559, 158, 558, 508, 0, 566, 160, 524,
	0, 232, 174, 0, 0, 506, 549, 513, 542, 501,
	534, 465, 523, 561, 491, 531, 562, 0, 0, 0,
	435, 0, 1020, 1021, 0, 0, 0, 0, 0, 122,
	0, 528, 556, 487, 530, 532, 454, 525, 0, 458,
	461, 567, 552, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 505, 514, 539, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 480, 0, 522, 0, 0, 0,
	462, 459, 0, 0, 503, 0, 0, 0, 464, 0,
	481, 540, 0, 451, 140, 0, 0, 544, 551, 500,
	0, 262, 555, 498, 497, 205, 0, 236, 143, 157,
	118, 104, 114, 0, 142, 183, 212, 216, 488, 452,
	548, 478, 486, 126, 484, 214, 193, 253, 0, 521,
	195, 213, 161, 242, 206, 251, 252, 263, 264, 239,
	260, 268, 229, 0, 0, 0, 0, 0, 0, 107,
	238, 250, 123, 224, 109, 248, 235, 172, 152, 153,
	108, 0, 210, 131, 138, 128, 185, 0, 0, 0,
	245, 246, 127, 271, 115, 259, 111, 116, 258, 179,
	0, 0, 0, 241, 249, 173, 166, 0, 110, 247,
	171, 165, 156, 135, 145, 203, 163, 204, 146, 176,
	175, 177, 0, 457, 0, 233, 256, 272, 120, 473,
	0, 240, 266, 267, 0, 0, 121, 139, 134, 202,
	178, 117, 148, 230, 155, 162, 209, 270, 192, 215,
	124, 255, 231, 469, 472, 467, 468, 516, 517, 563,
	564, 565, 541, 463, 0, 470, 471, 0, 546, 553,
	554, 520, 103, 112, 159, 269, 207, 137, 257, 453,
	466, 130, 476, 0, 0, 489, 494, 495, 507, 509,
	510, 511, 512, 519, 526, 527, 529, 535, 536, 537,
	538, 543, 550, 569, 105, 106, 113, 119, 125, 129,
	133, 136, 141, 144, 147, 149, 150, 151, 154, 164,
	167, 168, 169, 170, 180, 181, 182, 184, 187, 188,
	189, 190, 191, 194, 196, 197, 198, 199, 200, 201,
	208, 211, 217, 218, 219, 220, 221, 222, 223, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 265,
	557, 545, 0, 502, 560, 475, 492, 568, 493, 496,
	533, 460, 515, 186, 490, 0, 479, 455, 485, 456,
	477, 504, 132, 474, 547, 518, 559, 158, 558, 508,
	0, 566, 160, 524, 0, 232, 174, 0, 0, 506,
	549, 513, 542, 501, 534, 465, 523, 561, 491, 531,
	562, 0, 0, 0, 435, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 528, 556, 487, 530, 532,
	454, 525, 0, 458, 461, 567, 552, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 505, 514, 539, 499,
	0, 0, 0, 0, 0, 0, 1333, 0, 480, 0,
	522, 0, 0, 0, 462, 459, 0, 0, 503, 0,
	0, 0, 464, 0, 481, 540, 0, 451, 140, 0,
	0, 544, 551, 500, 0, 262, 555, 498, 497, 205,
	0, 236, 143, 157, 118, 104, 114, 0, 142, 183,
	212, 216, 488, 452, 548, 478, 486, 126, 484, 214,
	193, 253, 0, 521, 195, 213, 161, 242, 206, 251,
	252, 263, 264, 239, 260, 268, 229, 0, 0, 0,
	0, 0, 0, 107, 238, 250, 123, 224, 109, 248,
	235, 172, 152, 153, 108, 0, 210, 131, 138, 128,
	185, 0, 0, 0, 245, 246, 127, 271, 115, 259,
	111, 116, 258, 179, 0, 0, 0, 241, 249, 173,
	166, 0, 110, 247, 171, 165, 156, 135, 145, 203,
	163, 204, 146, 176, 175, 177, 0, 457, 0, 233,
	256, 272, 120, 473, 0, 240, 266, 267, 0, 0,
	121, 139, 134, 202, 178, 117, 148, 230, 155, 162,
	209, 270, 192, 215, 124, 255, 231, 469, 472, 467,
	468, 516, 517, 563, 564, 565, 541, 463, 0, 470,
	471, 0, 546, 553, 554, 520, 103, 112, 159, 269,
	207, 137, 257, 453, 466, 130, 476, 0, 0, 489,
	494, 495, 507, 509, 510, 511, 512, 519, 526, 527,
	529, 535, 536, 537, 538, 543, 550, 569, 105, 106,
	113, 119, 125, 129, 133, 136, 141, 144, 147, 149,
	150, 151, 154, 164, 167, 168, 169, 170, 180, 181,
	182, 184, 187, 188, 189, 190, 191, 194, 196, 197,
	198, 199, 200, 201, 208, 211, 217, 218, 219, 220,
	221, 222, 223, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 265, 557, 545, 0, 502, 560, 475,
	492, 568, 493, 496, 533, 460, 515, 186, 490, 0,
	479, 455, 485, 456, 477, 504, 132, 474, 547, 518,
	559, 158, 558, 508, 0, 566, 160, 524, 0, 232,
	174, 0, 0, 506, 549, 513, 542, 501, 534, 465,
	523, 561, 491, 531, 562, 61, 0, 0, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 528,
	556, 487, 530, 532, 454, 525, 0, 458, 461, 567,
	552, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	505, 514, 539, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 480, 0, 522, 0, 0, 0, 462, 459,
	0, 0, 503, 0, 0, 0, 464, 0, 481, 540,
	0, 451, 140, 0, 0, 544, 551, 500, 0, 262,
	555, 498, 497, 205, 0, 236, 143, 157, 118, 104,
	114, 0, 142, 183, 212, 216, 488, 452, 548, 478,
	486, 126, 484, 214, 193, 253, 0, 521, 195, 213,
	161, 242, 206, 251, 252, 263, 264, 239, 260, 268,
	229, 0, 0, 0, 0, 0, 0, 107, 238, 250,
	123, 224, 109, 248, 235, 172, 152, 153, 108, 0,
	210, 131, 138, 128, 185, 0, 0, 0, 245, 246,
	127, 271, 115, 259, 111, 116, 258, 179, 0, 0,
	0, 241, 249, 173, 166, 0, 110, 247, 171, 165,
	156, 135, 145, 203, 163, 204, 146, 176, 175, 177,
	0, 457, 0, 233, 256, 272, 120, 473, 0, 240,
	266, 267, 0, 0, 121, 139, 134, 202, 178, 117,
	148, 230, 155, 162, 209, 270, 192, 215, 124, 255,
	231, 469, 472, 467, 468, 516, 517, 563, 564, 565,
	541, 463, 0, 470, 471, 0, 546, 553, 554, 520,
	103, 112, 159, 269, 207, 137, 257, 453, 466, 130,
	476, 0, 0, 489, 494, 495, 507, 509, 510, 511,
	512, 519, 526, 527, 529, 535, 536, 537, 538, 543,
	550, 569, 105, 106, 113, 119, 125, 129, 133, 136,
	141, 144, 147, 149, 150, 151, 154, 164, 167, 168,
	169, 170, 180, 181, 182, 184, 187, 188, 189, 190,
	191, 194, 196, 197, 198, 199, 200, 201, 208, 211,
	217, 218, 219, 220, 221, 222, 223, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 265, 557, 545,
	0, 502, 560, 475, 492, 568, 493, 496, 533, 460,
	515, 186, 490, 0, 479, 455, 485, 456, 477, 504,
	132, 474, 547, 518, 559, 158, 558, 508, 0, 566,
	160, 524, 0, 232, 174, 0, 0, 506, 549, 513,
	542, 501, 534, 465, 523, 561, 491, 531, 562, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 528, 556, 487, 530, 532, 454, 525,
	0, 458, 461, 567, 552, 482, 483, 0, 0, 0,
	0, 0, 0, 0, 505, 514, 539, 499, 0, 0,
	0, 0, 0, 0, 1002, 0, 480, 0, 522, 0,
	0, 0, 462, 459, 0, 0, 503, 0, 0, 0,
	464, 0, 481, 540, 0, 451, 140, 0, 0, 544,
	551, 500, 0, 262, 555, 498, 497, 205, 0, 236,
	143, 157, 118, 104, 114, 0, 142, 183, 212, 216,
	488, 452, 548, 478, 486, 126, 484, 214, 193, 253,
	0, 521, 195, 213, 161, 242, 206, 251, 252, 263,
	264, 239, 260, 268, 229, 0, 0, 0, 0, 0,
	0, 107, 238, 250, 123, 224, 109, 248, 235, 172,
	152, 153, 108, 0, 210, 131, 138, 128, 185, 0,
	0, 0, 245, 246, 127, 271, 115, 259, 111, 116,
	258, 179, 0, 0, 0, 241, 249, 173, 166, 0,
	110, 247, 171, 165, 156, 135, 145, 203, 163, 204,
	146, 176, 175, 177, 0, 457, 0, 233, 256, 272,
	120, 473, 0, 240, 266, 267, 0, 0, 121, 139,
	134, 202, 178, 117, 148, 230, 155, 162, 209, 270,
	192, 215, 124, 255, 231, 469, 472, 467, 468, 516,
	517, 563, 564, 565, 541, 463, 0, 470, 471, 0,
	546, 553, 554, 520, 103, 112, 159, 269, 207, 137,
	257, 453, 466, 130, 476, 0, 0, 489, 494, 495,
	507, 509, 510, 511, 512, 519, 526, 527, 529, 535,
	536, 537, 538, 543, 550, 569, 105, 106, 113, 119,
	125, 129, 133, 136, 141, 144, 147, 149, 150, 151,
	154, 164, 167, 168, 169, 170, 180, 181, 182, 184,
	187, 188, 189, 190, 191, 194, 196, 197, 198, 199,
	200, 201, 208, 211, 217, 218, 219, 220, 221, 222,
	223, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 265, 557, 545, 0, 502, 560, 475, 492, 568,
	493, 496, 533, 460, 515, 186, 490, 0, 479, 455,
	485, 456, 477, 504, 132, 474, 547, 518, 559, 158,
	558, 508, 0, 566, 160, 524, 0, 232, 174, 0,
	0, 506, 549, 513, 542, 501, 534, 465, 523, 561,
	491, 531, 562, 0, 0, 0, 336, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 528, 556, 487,
	530, 532, 454, 525, 0, 458, 461, 567, 552, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 505, 514,
	539, 499, 0, 0, 0, 0, 0, 0, 897, 0,
	480, 0, 522, 0, 0, 0, 462, 459, 0, 0,
	503, 0, 0, 0, 464, 0, 481, 540, 0, 451,
	140, 0, 0, 544, 551, 500, 0, 262, 555, 498,
	497, 205, 0, 236, 143, 157, 118, 104, 114, 0,
	142, 183, 212, 216, 488, 452, 548, 478, 486, 126,
	484, 214, 193, 253, 0, 521, 195, 213, 161, 242,
	206, 251, 252, 263, 264, 239, 260, 268, 229, 0,
	0, 0, 0, 0, 0, 107, 238, 250, 123, 224,
	109, 248, 235, 172, 152, 153, 108, 0, 210, 131,
	138, 128, 185, 0, 0, 0, 245, 246, 127, 271,
	115, 259, 111, 116, 258, 179, 0, 0, 0, 241,
	249, 173, 166, 0, 110, 247, 171, 165, 156, 135,
	145, 203, 163, 204, 146, 176, 175, 177, 0, 457,
	0, 233, 256, 272, 120, 473, 0, 240, 266, 267,
	0, 0, 121, 139, 134, 202, 178, 117, 148, 230,
	155, 162, 209, 270, 192, 215, 124, 255, 231, 469,
	472, 467, 468, 516, 517, 563, 564, 565, 541, 463,
	0, 470, 471, 0, 546, 553, 554, 520, 103, 112,
	159, 269, 207, 137, 257, 453, 466, 130, 476, 0,
	0, 489, 494, 495, 507, 509, 510, 511, 512, 519,
	526, 527, 529, 535, 536, 537, 538, 543, 550, 569,
	105, 106, 113, 119, 125, 129, 133, 136, 141, 144,
	147, 149, 150, 151, 154, 164, 167, 168, 169, 170,
	180, 181, 182, 184, 187, 188, 189, 190, 191, 194,
	196, 197, 198, 199, 200, 201, 208, 211, 217, 218,
	219, 220, 221, 222, 223, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 265, 557, 545, 0, 502,
	560, 475, 492, 568, 493, 496, 533, 460, 515, 186,
	490, 0, 479, 455, 485, 456, 477, 504, 132, 474,
	547, 518, 559, 158, 558, 508, 0, 566, 160, 524,
	0, 232, 174, 0, 0, 506, 549, 513, 542, 501,
	534, 465, 523, 561, 491, 531, 562, 0, 0, 0,
	435, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 528, 556, 487, 530, 532, 454, 525, 0, 458,
	461, 567, 552, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 505, 514, 539, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 480, 0, 522, 0, 0, 0,
	462, 459, 0, 0, 503, 0, 0, 0, 464, 0,
	481, 540, 0, 451, 140, 0, 0, 544, 551, 500,
	0, 262, 555, 498, 497, 205, 0, 236, 143, 157,
	118, 104, 114, 0, 142, 183, 212, 216, 488, 452,
	548, 478, 486, 126, 484, 214, 193, 253, 0, 521,
	195, 213, 161, 242, 206, 251, 252, 263, 264, 239,
	260, 268, 229, 0, 0, 0, 0, 0, 0, 107,
	238, 250, 123, 224, 109, 248, 235, 172, 152, 153,
	108, 0, 210, 131, 138, 128, 185, 0, 0, 0,
	245, 246, 127, 271, 115, 259, 111, 116, 258, 179,
	0, 0, 0, 241, 249, 173, 166, 0, 110, 247,
	171, 165, 156, 135, 145, 203, 163, 204, 146, 176,
	175, 177, 0, 457, 0, 233, 256, 272, 120, 473,
	0, 240, 266, 267, 0, 0, 121, 139, 134, 202,
	178, 117, 148, 230, 155, 162, 209, 270, 192, 215,
	124, 255, 231, 469, 472, 467, 468, 516, 517, 563,
	564, 565, 541, 463, 0, 470, 471, 0, 546, 553,
	554, 520, 103, 112, 159, 269, 207, 137, 257, 453,
	466, 130, 476, 0, 0, 489, 494, 495, 507, 509,
	510, 511, 512, 519, 526, 527, 529, 535, 536, 537,
	538, 543, 550, 569, 105, 106, 113, 119, 125, 129,
	133, 136, 141, 144, 147, 149, 150, 151, 154, 164,
	167, 168, 169, 170, 180, 181, 182, 184, 187, 188,
	189, 190, 191, 194, 196, 197, 198, 199, 200, 201,
	208, 211, 217, 218, 219, 220, 221, 222, 223, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 265,
	557, 545, 0, 502, 560, 475, 492, 568, 493, 496,
	533, 460, 515, 186, 490, 0, 479, 455, 485, 456,
	477, 504, 132, 474, 547, 518, 559, 158, 558, 508,
	0, 566, 160, 524, 0, 232, 174, 0, 0, 506,
	549, 513, 542, 501, 534, 465, 523, 561, 491, 531,
	562, 0, 0, 0, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 528, 556, 487, 530, 532,
	454, 525, 0, 458, 461, 567, 552, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 505, 514, 539, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 480, 0,
	522, 0, 0, 0, 462, 459, 0, 0, 503, 0,
	0, 0, 464, 0, 481, 540, 0, 451, 140, 0,
	0, 544, 551, 500, 0, 262, 555, 498, 497, 205,
	0, 236, 143, 157, 118, 104, 114, 0, 142, 183,
	212, 216, 488, 452, 548, 478, 486, 126, 484, 214,
	193, 253, 0, 521, 195, 213, 161, 242, 206, 251,
	252, 263, 264, 239, 260, 268, 229, 0, 0, 0,
	0, 0, 0, 107, 238, 250, 123, 224, 109, 248,
	235, 172, 152, 153, 108, 0, 210, 131, 138, 128,
	185, 0, 0, 0, 245, 246, 127, 271, 115, 259,
	111, 116, 258, 179, 0, 0, 0, 241, 249, 173,
	166, 0, 110, 247, 171, 165, 156, 135, 145, 203,
	163, 204, 146, 176, 175, 177, 0, 457, 0, 233,
	256, 272, 120, 473, 0, 240, 266, 267, 0, 0,
	121, 139, 134, 202, 178, 117, 148, 230, 155, 162,
	209, 270, 192, 215, 124, 255, 231, 469, 472, 467,
	468, 516, 517, 563, 564, 565, 541, 463, 0, 470,
	471, 0, 546, 553, 554, 520, 103, 112, 159, 269,
	207, 137, 257, 453, 466, 130, 476, 0, 0, 489,
	494, 495, 507, 509, 510, 511, 512, 519, 526, 527,
	529, 535, 536, 537, 538, 543, 550, 569, 105, 106,
	113, 119, 125, 129, 133, 136, 141, 144, 147, 149,
	150, 151, 154, 164, 167, 168, 169, 170, 180, 181,
	182, 184, 187, 188, 189, 190, 191, 194, 196, 197,
	198, 199, 200, 201, 208, 211, 217, 218, 219, 220,
	221, 222, 223, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 265, 557, 545, 0, 502, 560, 475,
	492, 568, 493, 496, 533, 460, 515, 186, 490, 0,
	479, 455, 485, 456, 477, 504, 132, 474, 547, 518,
	559, 158, 558, 508, 0, 566, 160, 524, 0, 232,
	174, 0, 0, 506, 549, 513, 542, 501, 534, 465,
	523, 561, 491, 531, 562, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 528,
	556, 487, 530, 532, 454, 525, 0, 458, 461, 567,
	552, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	505, 514, 539, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 480, 0, 522, 0, 0, 0, 462, 459,
	0, 0, 503, 0, 0, 0, 464, 0, 481, 540,
	0, 451, 140, 0, 0, 544, 551, 500, 0, 262,
	555, 498, 497, 205, 0, 236, 143, 157, 118, 104,
	114, 0, 142, 183, 212, 216, 488, 452, 548, 478,
	486, 126, 484, 214, 193, 253, 0, 521, 195, 213,
	161, 242, 206, 251, 252, 263, 264, 239, 260, 268,
	229, 0, 0, 0, 0, 0, 0, 107, 238, 250,
	123, 224, 109, 248, 235, 172, 152, 153, 108, 0,
	210, 131, 138, 128, 185, 0, 0, 0, 245, 246,
	127, 271, 115, 259, 111, 116, 258, 179, 0, 0,
	0, 241, 249, 173, 166, 0, 110, 247, 171, 165,
	156, 135, 145, 203, 163, 204, 146, 176, 175, 177,
	0, 457, 0, 233, 256, 272, 120, 473, 0, 240,
	266, 267, 0, 0, 121, 139, 134, 202, 178, 117,
	148, 230, 155, 162, 209, 270, 192, 215, 124, 255,
	231, 469, 472, 467, 468, 516, 517, 563, 564, 565,
	541, 463, 0, 470, 471, 0, 546, 553, 554, 520,
	103, 112, 159, 269, 207, 137, 257, 453, 466, 130,
	476, 0, 0, 489, 494, 495, 507, 509, 510, 511,
	512, 519, 526, 527, 529, 535, 536, 537, 538, 543,
	550, 569, 105, 106, 113, 119, 125, 129, 133, 136,
	141, 144, 147, 149, 150, 151, 154, 164, 167, 168,
	169, 170, 180, 181, 182, 184, 187, 188, 189, 190,
	191, 194, 196, 197, 198, 199, 200, 201, 208, 211,
	217, 218, 219, 220, 221, 222, 223, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 265, 186, 0,
	0, 0, 0, 338, 0, 0, 0, 132, 335, 0,
	0, 0, 158, 0, 0, 0, 380, 160, 0, 0,
	232, 174, 0, 0, 0, 0, 369, 370, 0, 0,
	0, 0, 0, 0, 1009, 0, 61, 0, 0, 336,
	357, 356, 359, 360, 361, 362, 0, 0, 122, 358,
	363, 364, 365, 1010, 0, 0, 333, 350, 0, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 393, 0, 349, 0, 0,
	344, 345, 346, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 371, 0, 0, 0,
	262, 0, 0, 391, 205, 0, 236, 143, 157, 118,
	104, 114, 0, 142, 183, 212, 216, 377, 0, 0,
	0, 0, 126, 0, 214, 193, 253, 0, 0, 195,
	213, 161, 242, 206, 251, 252, 263, 264, 239, 260,
	268, 229, 0, 0, 0, 0, 0, 0, 107, 238,
	250, 123, 224, 109, 248, 235, 172, 152, 153, 108,
	0, 210, 131, 138, 128, 185, 0, 0, 0, 245,
	246, 127, 271, 115, 259, 111, 116, 258, 179, 0,
	0, 0, 241, 249, 173, 166, 0, 110, 247, 171,
	165, 156, 135, 145, 203, 163, 204, 146, 176, 175,
	177, 0, 0, 0, 233, 256, 272, 120, 0, 0,
	240, 266, 267, 0, 0, 121, 139, 134, 202, 178,
	117, 148, 230, 155, 162, 209, 270, 192, 215, 124,
	255, 231, 381, 392, 387, 388, 385, 386, 384, 383,
	382, 394, 372, 373, 374, 375, 378, 0, 389, 390,
	376, 103, 112, 159, 269, 207, 137, 257, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 106, 113, 119, 125, 129, 133,
	136, 141, 144, 147, 149, 150, 151, 154, 164, 167,
	168, 169, 170, 180, 181, 182, 184, 187, 188, 189,
	190, 191, 194, 196, 197, 198, 199, 200, 201, 208,
	211, 217, 218, 219, 220, 221, 222, 223, 225, 226,
	227, 228, 234, 237, 243, 244, 254, 261, 265, 186,
	0, 0, 0, 0, 338, 0, 0, 0, 132, 335,
	0, 0, 0, 158, 0, 0, 0, 380, 160, 0,
	0, 232, 174, 0, 0, 0, 0, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 610,
	336, 357, 356, 359, 360, 361, 362, 0, 0, 122,
	358, 363, 364, 365, 0, 0, 0, 333, 350, 0,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 348, 0, 0, 0, 0, 393, 0, 349, 0,
	0, 344, 345, 346, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 371, 0, 0,
	0, 262, 0, 0, 391, 205, 0, 236, 143, 157,
	118, 104, 114, 0, 142, 183, 212, 216, 377, 0,
	0, 0, 0, 126, 0, 214, 193, 253, 0, 0,
	195, 213, 161, 242, 206, 251, 252, 263, 264, 239,
	260, 268, 229, 0, 0, 0, 0, 0, 0, 107,
	238, 250, 123, 224, 109, 248, 235, 172, 152, 153,
	108, 0, 210, 131, 138, 128, 185, 0, 0, 0,
	245, 246, 127, 271, 115, 259, 111, 116, 258, 179,
	0, 0, 0, 241, 249, 173, 166, 0, 110, 247,
	171, 165, 156, 135, 145, 203, 163, 204, 146, 176,
	175, 177, 0, 0, 0, 233, 256, 272, 120, 0,
	0, 240, 266, 267, 0, 0, 121, 139, 134, 202,
	178, 117, 148, 230, 155, 162, 209, 270, 192, 215,
	124, 255, 231, 381, 392, 387, 388, 385, 386, 384,
	383, 382, 394, 372, 373, 374, 375, 378, 0, 389,
	390, 376, 103, 112, 159, 269, 207, 137, 257, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 106, 113, 119, 125, 129,
	133, 136, 141, 144, 147, 149, 150, 151, 154, 164,
	167, 168, 169, 170, 180, 181, 182, 184, 187, 188,
	189, 190, 191, 194, 196, 197, 198, 199, 200, 201,
	208, 211, 217, 218, 219, 220, 221, 222, 223, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 265,
	186, 0, 0, 0, 0, 338, 0, 0, 0, 132,
	335, 0, 0, 0, 158, 0, 0, 0, 380, 160,
	0, 0, 232, 174, 0, 0, 0, 0, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 336, 357, 356, 359, 360, 361, 362, 0, 0,
	122, 358, 363, 364, 365, 0, 0, 0, 333, 350,
	0, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 348, 329, 0, 0, 0, 393, 0, 349,
	0, 0, 344, 345, 346, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 371, 0,
	0, 0, 262, 0, 0, 391, 205, 0, 236, 143,
	157, 118, 104, 114, 0, 142, 183, 212, 216, 377,
	0, 0, 0, 0, 126, 0, 214, 193, 253, 0,
	0, 195, 213, 161, 242, 206, 251, 252, 263, 264,
	239, 260, 268, 229, 0, 0, 0, 0, 0, 0,
	107, 238, 250, 123, 224, 109, 248, 235, 172, 152,
	153, 108, 0, 210, 131, 138, 128, 185, 0, 0,
	0, 245, 246, 127, 271, 115, 259, 111, 116, 258,
	179, 0, 0, 0, 241, 249, 173, 166, 0, 110,
	247, 171, 165, 156, 135, 145, 203, 163, 204, 146,
	176, 175, 177, 0, 0, 0, 233, 256, 272, 120,
	0, 0, 240, 266, 267, 0, 0, 121, 139, 134,
	202, 178, 117, 148, 230, 155, 162, 209, 270, 192,
	215, 124, 255, 231, 381, 392, 387, 388, 385, 386,
	384, 383, 382, 394, 372, 373, 374, 375, 378, 0,
	389, 390, 376, 103, 112, 159, 269, 207, 137, 257,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 106, 113, 119, 125,
	129, 133, 136, 141, 144, 147, 149, 150, 151, 154,
	164, 167, 168, 169, 170, 180, 181, 182, 184, 187,
	188, 189, 190, 191, 194, 196, 197, 198, 199, 200,
	201, 208, 211, 217, 218, 219, 220, 221, 222, 223,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	265, 186, 0, 0, 0, 0, 338, 0, 0, 0,
	132, 335, 0, 0, 0, 158, 0, 0, 0, 380,
	160, 0, 0, 232, 174, 0, 0, 0, 0, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 336, 357, 947, 359, 360, 361, 362, 0,
	0, 122, 358, 363, 364, 365, 0, 0, 0, 333,
	350, 0, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 348, 329, 0, 0, 0, 393, 0,
	349, 0, 0, 344, 345, 346, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 0, 371,
	0, 0, 0, 262, 0, 0, 391, 205, 0, 236,
	143, 157, 118, 104, 114, 0, 142, 183, 212, 216,
	377, 0, 0, 0, 0, 126, 0, 214, 193, 253,
	0, 0, 195, 213, 161, 242, 206, 251, 252, 263,
	264, 239, 260, 268, 229, 0, 0, 0, 0, 0,
	0, 107, 238, 250, 123, 224, 109, 248, 235, 172,
	152, 153, 108, 0, 210, 131, 138, 128, 185, 0,
	0, 0, 245, 246, 127, 271, 115, 259, 111, 116,
	258, 179, 0, 0, 0, 241, 249, 173, 166, 0,
	110, 247, 171, 165, 156, 135, 145, 203, 163, 204,
	146, 176, 175, 177, 0, 0, 0, 233, 256, 272,
	120, 0, 0, 240, 266, 267, 0, 0, 121, 139,
	134, 202, 178, 117, 148, 230, 155, 162, 209, 270,
	192, 215, 124, 255, 231, 381, 392, 387, 388, 385,
	386, 384, 383, 382, 394, 372, 373, 374, 375, 378,
	0, 389, 390, 376, 103, 112, 159, 269, 207, 137,
	257, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 106, 113, 119,
	125, 129, 133, 136, 141, 144, 147, 149, 150, 151,
	154, 164, 167, 168, 169, 170, 180, 181, 182, 184,
	187, 188, 189, 190, 191, 194, 196, 197, 198, 199,
	200, 201, 208, 211, 217, 218, 219, 220, 221, 222,
	223, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 265, 186, 0, 0, 0, 0, 338, 0, 0,
	0, 132, 335, 0, 0, 0, 158, 0, 0, 0,
	380, 160, 0, 0, 232, 174, 0, 0, 0, 0,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 336, 357, 944, 359, 360, 361, 362,
	0, 0, 122, 358, 363, 364, 365, 0, 0, 0,
	333, 350, 0, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 348, 329, 0, 0, 0, 393,
	0, 349, 0, 0, 344, 345, 346, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	371, 0, 0, 0, 262, 0, 0, 391, 205, 0,
	236, 143, 157, 118, 104, 114, 0, 142, 183, 212,
	216, 377, 0, 0, 0, 0, 126, 0, 214, 193,
	253, 0, 0, 195, 213, 161, 242, 206, 251, 252,
	263, 264, 239, 260, 268, 229, 0, 0, 0, 0,
	0, 0, 107, 238, 250, 123, 224, 109, 248, 235,
	172, 152, 153, 108, 0, 210, 131, 138, 128, 185,
	0, 0, 0, 245, 246, 127, 271, 115, 259, 111,
	116, 258, 179, 0, 0, 0, 241, 249, 173, 166,
	0, 110, 247, 171, 165, 156, 135, 145, 203, 163,
	204, 146, 176, 175, 177, 0, 0, 0, 233, 256,
	272, 120, 0, 0, 240, 266, 267, 0, 0, 121,
	139, 134, 202, 178, 117, 148, 230, 155, 162, 209,
	270, 192, 215, 124, 255, 231, 381, 392, 387, 388,
	385, 386, 384, 383, 382, 394, 372, 373, 374, 375,
	378, 0, 389, 390, 376, 103, 112, 159, 269, 207,
	137, 257, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 106, 113,
	119, 125, 129, 133, 136, 141, 144, 147, 149, 150,
	151, 154, 164, 167, 168, 169, 170, 180, 181, 182,
	184, 187, 188, 189, 190, 191, 194, 196, 197, 198,
	199, 200, 201, 208, 211, 217, 218, 219, 220, 221,
	222, 223, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 265, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	338, 0, 0, 0, 132, 335, 0, 0, 0, 158,
	0, 0, 0, 380, 160, 0, 0, 232, 174, 0,
	0, 0, 0, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 336, 357, 356, 359,
	360, 361, 362, 0, 0, 122, 358, 363, 364, 365,
	0, 0, 0, 333, 350, 0, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 348, 0, 0,
	0, 0, 393, 0, 349, 0, 0, 344, 345, 346,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 0, 371, 0, 0, 0, 262, 0, 0,
	391, 205, 0, 236, 143, 157, 118, 104, 114, 0,
	142, 183, 212, 216, 377, 0, 0, 0, 0, 126,
	0, 214, 193, 253, 0, 0, 195, 213, 161, 242,
	206, 251, 252, 263, 264, 239, 260, 268, 229, 0,
	0, 0, 0, 0, 0, 107, 238, 250, 123, 224,
	109, 248, 235, 172, 152, 153, 108, 0, 210, 131,
	138, 128, 185, 0, 0, 0, 245, 246, 127, 271,
	115, 259, 111, 116, 258, 179, 0, 0, 0, 241,
	249, 173, 166, 0, 110, 247, 171, 165, 156, 135,
	145, 203, 163, 204, 146, 176, 175, 177, 0, 0,
	0, 233, 256, 272, 120, 0, 0, 240, 266, 267,
	0, 0, 121, 139, 134, 202, 178, 117, 148, 230,
	155, 162, 209, 270, 192, 215, 124, 255, 231, 381,
	392, 387, 388, 385, 386, 384, 383, 382, 394, 372,
	373, 374, 375, 378, 0, 389, 390, 376, 103, 112,
	159, 269, 207, 137, 257, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 106, 113, 119, 125, 129, 133, 136, 141, 144,
	147, 149, 150, 151, 154, 164, 167, 168, 169, 170,
	180, 181, 182, 184, 187, 188, 189, 190, 191, 194,
	196, 197, 198, 199, 200, 201, 208, 211, 217, 218,
	219, 220, 221, 222, 223, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 265, 186, 0, 0, 0,
	0, 338, 0, 0, 0, 132, 335, 0, 0, 0,
	158, 0, 0, 0, 380, 160, 0, 0, 232, 174,
	0, 0, 0, 0, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 336, 357, 356,
	359, 360, 361, 362, 0, 0, 122, 358, 363, 364,
	365, 0, 0, 0, 333, 350, 0, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 348, 0,
	0, 0, 0, 393, 0, 349, 0, 0, 344, 345,
	346, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 371, 0, 0, 0, 262, 0,
	0, 391, 205, 0, 236, 143, 157, 118, 104, 114,
	0, 142, 183, 212, 216, 377, 0, 0, 0, 0,
	126, 0, 214, 193, 253, 0, 0, 195, 213, 161,
	242, 206, 251, 252, 263, 264, 239, 260, 268, 229,
	0, 0, 0, 0, 0, 0, 107, 238, 250, 123,
	224, 109, 248, 235, 172, 152, 153, 108, 0, 210,
	131, 138, 128, 185, 0, 0, 0, 245, 246, 127,
	271, 115, 259, 111, 116, 258, 179, 0, 0, 0,
	241, 249, 173, 166, 0, 110, 247, 171, 165, 156,
	135, 145, 203, 163, 204, 146, 176, 175, 177, 0,
	0, 0, 233, 256, 272, 120, 0, 0, 240, 266,
	267, 0, 0, 121, 139, 134, 202, 178, 117, 148,
	230, 155, 162, 209, 270, 192, 215, 124, 255, 231,
	381, 392, 387, 388, 385, 386, 384, 383, 382, 394,
	372, 373, 374, 375, 378, 0, 389, 390, 376, 103,
	112, 159, 269, 207, 137, 257, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 106, 113, 119, 125, 129, 133, 136, 141,
	144, 147, 149, 150, 151, 154, 164, 167, 168, 169,
	170, 180, 181, 182, 184, 187, 188, 189, 190, 191,
	194, 196, 197, 198, 199, 200, 201, 208, 211, 217,
	218, 219, 220, 221, 222, 223, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 265, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 158, 0, 0, 0, 380, 160, 0, 0, 232,
	174, 0, 0, 0, 0, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 336, 357,
	356, 359, 360, 361, 362, 0, 0, 122, 358, 363,
	364, 365, 0, 0, 0, 0, 350, 0, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 348,
	0, 0, 0, 0, 393, 0, 349, 0, 0, 344,
	345, 346, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 0, 0, 371, 0, 0, 0, 262,
	0, 0, 391, 205, 0, 236, 143, 157, 118, 104,
	114, 0, 142, 183, 212, 216, 377, 0, 0, 0,
	0, 126, 0, 214, 193, 253, 0, 1709, 195, 213,
	161, 242, 206, 251, 252, 263, 264, 239, 260, 268,
	229, 0, 0, 0, 0, 0, 0, 107, 238, 250,
	123, 224, 109, 248, 235, 172, 152, 153, 108, 0,
	210, 131, 138, 128, 185, 0, 0, 0, 245, 246,
	127, 271, 115, 259, 111, 116, 258, 179, 0, 0,
	0, 241, 249, 173, 166, 0, 110, 247, 171, 165,
	156, 135, 145, 203, 163, 204, 146, 176, 175, 177,
	0, 0, 0, 233, 256, 272, 120, 0, 0, 240,
	266, 267, 0, 0, 121, 139, 134, 202, 178, 117,
	148, 230, 155, 162, 209, 270, 192, 215, 124, 255,
	231, 381, 392, 387, 388, 385, 386, 384, 383, 382,
	394, 372, 373, 374, 375, 378, 0, 389, 390, 376,
	103, 112, 159, 269, 207, 137, 257, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 106, 113, 119, 125, 129, 133, 136,
	141, 144, 147, 149, 150, 151, 154, 164, 167, 168,
	169, 170, 180, 181, 182, 184, 187, 188, 189, 190,
	191, 194, 196, 197, 198, 199, 200, 201, 208, 211,
	217, 218, 219, 220, 221, 222, 223, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 265, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 158, 0, 0, 0, 380, 160, 0, 0,
	232, 174, 0, 0, 0, 0, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 610, 336,
	357, 356, 359, 360, 361, 362, 0, 0, 122, 358,
	363, 364, 365, 0, 0, 0, 0, 350, 0, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 393, 0, 349, 0, 0,
	344, 345, 346, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 371, 0, 0, 0,
	262, 0, 0, 391, 205, 0, 236, 143, 157, 118,
	104, 114, 0, 142, 183, 212, 216, 377, 0, 0,
	0, 0, 126, 0, 214, 193, 253, 0, 0, 195,
	213, 161, 242, 206, 251, 252, 263, 264, 239, 260,
	268, 229, 0, 0, 0, 0, 0, 0, 107, 238,
	250, 123, 224, 109, 248, 235, 172, 152, 153, 108,
	0, 210, 131, 138, 128, 185, 0, 0, 0, 245,
	246, 127, 271, 115, 259, 111, 116, 258, 179, 0,
	0, 0, 241, 249, 173, 166, 0, 110, 247, 171,
	165, 156, 135, 145, 203, 163, 204, 146, 176, 175,
	177, 0, 0, 0, 233, 256, 272, 120, 0, 0,
	240, 266, 267, 0, 0, 121, 139, 134, 202, 178,
	117, 148, 230, 155, 162, 209, 270, 192, 215, 124,
	255, 231, 381, 392, 387, 388, 385, 386, 384, 383,
	382, 394, 372, 373, 374, 375, 378, 0, 389, 390,
	376, 103, 112, 159, 269, 207, 137, 257, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 106, 113, 119, 125, 129, 133,
	136, 141, 144, 147, 149, 150, 151, 154, 164, 167,
	168, 169, 170, 180, 181, 182, 184, 187, 188, 189,
	190, 191, 194, 196, 197, 198, 199, 200, 201, 208,
	211, 217, 218, 219, 220, 221, 222, 223, 225, 226,
	227, 228, 234, 237, 243, 244, 254, 261, 265, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 158, 0, 0, 0, 380, 160, 0,
	0, 232, 174, 0, 0, 0, 0, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	336, 357, 356, 359, 360, 361, 362, 0, 0, 122,
	358, 363, 364, 365, 0, 0, 0, 0, 350, 0,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 348, 0, 0, 0, 0, 393, 0, 349, 0,
	0, 344, 345, 346, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 371, 0, 0,
	0, 262, 0, 0, 391, 205, 0, 236, 143, 157,
	118, 104, 114, 0, 142, 183, 212, 216, 377, 0,
	0, 0, 0, 126, 0, 214, 193, 253, 0, 0,
	195, 213, 161, 242, 206, 251, 252, 263, 264, 239,
	260, 268, 229, 0, 0, 0, 0, 0, 0, 107,
	238, 250, 123, 224, 109, 248, 235, 172, 152, 153,
	108, 0, 210, 131, 138, 128, 185, 0, 0, 0,
	245, 246, 127, 271, 115, 259, 111, 116, 258, 179,
	0, 0, 0, 241, 249, 173, 166, 0, 110, 247,
	171, 165, 156, 135, 145, 203, 163, 204, 146, 176,
	175, 177, 0, 0, 0, 233, 256, 272, 120, 0,
	0, 240, 266, 267, 0, 0, 121, 139, 134, 202,
	178, 117, 148, 230, 155, 162, 209, 270, 192, 215,
	124, 255, 231, 381, 392, 387, 388, 385, 386, 384,
	383, 382, 394, 372, 373, 374, 375, 378, 0, 389,
	390, 376, 103, 112, 159, 269, 207, 137, 257, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 106, 113, 119, 125, 129,
	133, 136, 141, 144, 147, 149, 150, 151, 154, 164,
	167, 168, 169, 170, 180, 181, 182, 184, 187, 188,
	189, 190, 191, 194, 196, 197, 198, 199, 200, 201,
	208, 211, 217, 218, 219, 220, 221, 222, 223, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 265,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 158, 0, 0, 0, 0, 160,
	0, 0, 232, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 650, 660,
	661, 653, 654, 655, 656, 657, 658, 659, 652, 0,
	0, 662, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 205, 0, 236, 143,
	157, 118, 104, 114, 0, 142, 183, 212, 216, 0,
	0, 0, 0, 0, 126, 0, 214, 193, 253, 0,
	0, 195, 213, 161, 242, 206, 251, 252, 263, 264,
	239, 260, 268, 229, 0, 0, 0, 0, 0, 0,
	107, 238, 250, 123, 224, 109, 248, 235, 172, 152,
	153, 108, 0, 210, 131, 138, 128, 185, 0, 0,
	0, 245, 246, 127, 271, 115, 259, 111, 116, 258,
	179, 0, 0, 0, 241, 249, 173, 166, 0, 110,
	247, 171, 165, 156, 135, 145, 203, 163, 204, 146,
	176, 175, 177, 0, 0, 0, 233, 256, 272, 120,
	0, 0, 240, 266, 267, 0, 0, 121, 139, 134,
	202, 178, 117, 148, 230, 155, 162, 209, 270, 192,
	215, 124, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 112, 159, 269, 207, 137, 257,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 106, 113, 119, 125,
	129, 133, 136, 141, 144, 147, 149, 150, 151, 154,
	164, 167, 168, 169, 170, 180, 181, 182, 184, 187,
	188, 189, 190, 191, 194, 196, 197, 198, 199, 200,
	201, 208, 211, 217, 218, 219, 220, 221, 222, 223,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	265, 186, 0, 0, 0, 988, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 158, 0, 0, 0, 0,
	160, 0, 0, 232, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 990, 992, 0, 0, 0,
	0, 0, 101, 0, 994, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 262, 0, 991, 0, 205, 0, 236,
	143, 157, 118, 104, 114, 0, 142, 183, 212, 216,
	0, 0, 0, 0, 0, 126, 0, 214, 193, 253,
	0, 0, 195, 213, 161, 242, 206, 251, 252, 263,
	264, 239, 260, 268, 229, 0, 0, 0, 0, 0,
	0, 107, 238, 250, 123, 224, 109, 248, 235, 172,
	152, 153, 108, 0, 210, 131, 138, 128, 185, 0,
	0, 0, 245, 246, 127, 271, 115, 259, 111, 116,
	258, 179, 0, 0, 0, 241, 249, 173, 166, 0,
	110, 247, 171, 165, 156, 135, 145, 203, 163, 204,
	146, 176, 175, 177, 0, 0, 0, 233, 256, 272,
	120, 0, 0, 240, 266, 267, 0, 0, 121, 139,
	134, 202, 178, 117, 148, 230, 155, 162, 209, 270,
	192, 215, 124, 255, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 112, 159, 269, 207, 137,
	257, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 106, 113, 119,
	125, 129, 133, 136, 141, 144, 147, 149, 150, 151,
	154, 164, 167, 168, 169, 170, 180, 181, 182, 184,
	187, 188, 189, 190, 191, 194, 196, 197, 198, 199,
	200, 201, 208, 211, 217, 218, 219, 220, 221, 222,
	223, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 265, 186, 0, 0, 0, 988, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 158, 0, 0, 0,
	0, 160, 0, 0, 232, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 990, 992, 0, 0,
	0, 0, 0, 101, 0, 994, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 262, 0, 991, 0, 205, 0,
	236, 143, 157, 118, 104, 114, 0, 142, 183, 212,
	216, 0, 0, 0, 0, 0, 126, 0, 214, 193,
	253, 0, 0, 986, 213, 161, 242, 206, 251, 252,
	263, 264, 239, 260, 268, 229, 0, 0, 0, 0,
	0, 0, 107, 238, 250, 123, 224, 109, 248, 235,
	172, 152, 153, 108, 0, 210, 131, 138, 128, 185,
	0, 0, 0, 245, 246, 127, 271, 115, 259, 111,
	116, 258, 179, 0, 0, 0, 241, 249, 173, 166,
	0, 110, 247, 171, 165, 156, 135, 145, 203, 163,
	204, 146, 176, 175, 177, 0, 0, 0, 233, 256,
	272, 120, 0, 0, 240, 266, 267, 0, 0, 121,
	139, 134, 202, 178, 117, 148, 230, 155, 162, 209,
	270, 192, 215, 124, 255, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 112, 159, 269, 207,
	137, 257, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 106, 113,
	119, 125, 129, 133, 136, 141, 144, 147, 149, 150,
	151, 154, 164, 167, 168, 169, 170, 180, 181, 182,
	184, 187, 188, 189, 190, 191, 194, 196, 197, 198,
	199, 200, 201, 208, 211, 217, 218, 219, 220, 221,
	222, 223, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 265, 186, 0, 0, 0, 639, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 158, 0, 0,
	0, 0, 160, 0, 0, 232, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 435, 0, 641, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 636,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 637, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 262, 0, 0, 0, 205,
	0, 236, 143, 157, 118, 104, 114, 0, 142, 183,
	212, 216, 0, 0, 0, 0, 0, 126, 0, 214,
	193, 253, 0, 0, 195, 213, 161, 242, 206, 251,
	252, 263, 264, 239, 260, 268, 229, 0, 0, 0,
	0, 0, 0, 107, 238, 250, 123, 224, 109, 248,
	235, 172, 152, 153, 108, 0, 210, 131, 138, 128,
	185, 0, 0, 0, 245, 246, 127, 271, 115, 259,
	111, 116, 258, 179, 0, 0, 0, 241, 249, 173,
	166, 0, 110, 247, 171, 165, 156, 135, 145, 203,
	163, 204, 146, 176, 175, 177, 0, 0, 0, 233,
	256, 272, 120, 0, 0, 240, 266, 267, 0, 0,
	121, 139, 134, 202, 178, 117, 148, 230, 155, 162,
	209, 270, 192, 215, 124, 255, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 112, 159, 269,
	207, 137, 257, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 106,
	113, 119, 125, 129, 133, 136, 141, 144, 147, 149,
	150, 151, 154, 164, 167, 168, 169, 170, 180, 181,
	182, 184, 187, 188, 189, 190, 191, 194, 196, 197,
	198, 199, 200, 201, 208, 211, 217, 218, 219, 220,
	221, 222, 223, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 265, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	158, 0, 0, 0, 0, 160, 0, 0, 232, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 435, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 262, 0,
	0, 0, 205, 0, 236, 143, 157, 118, 104, 114,
	0, 142, 183, 212, 216, 0, 0, 0, 0, 0,
	126, 0, 214, 193, 253, 0, 0, 195, 213, 161,
	242, 206, 251, 252, 263, 264, 239, 260, 268, 229,
	0, 0, 0, 0, 0, 0, 107, 238, 250, 123,
	224, 109, 248, 235, 172, 152, 153, 108, 0, 210,
	131, 138, 128, 185, 0, 0, 0, 245, 246, 127,
	271, 115, 259, 111, 116, 258, 179, 0, 0, 0,
	241, 249, 173, 166, 0, 110, 247, 171, 165, 156,
	135, 145, 203, 163, 204, 146, 176, 175, 177, 0,
	0, 0, 233, 256, 272, 120, 0, 0, 240, 266,
	267, 0, 0, 121, 139, 134, 202, 178, 117, 148,
	230, 155, 162, 209, 270, 192, 215, 124, 255, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	112, 159, 269, 207, 137, 257, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 106, 113, 119, 125, 129, 133, 136, 141,
	144, 147, 149, 150, 151, 154, 164, 167, 168, 169,
	170, 180, 181, 182, 184, 187, 188, 189, 190, 191,
	194, 196, 197, 198, 199, 200, 201, 208, 211, 217,
	218, 219, 220, 221, 222, 223, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 265, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 158, 0, 0, 0, 0, 160, 0, 0, 232,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	994, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 205, 0, 236, 143, 157, 118, 104,
	114, 0, 142, 183, 212, 216, 0, 0, 0, 0,
	0, 126, 0, 214, 193, 253, 0, 0, 195, 213,
	161, 242, 206, 251, 252, 263, 264, 239, 260, 268,
	229, 0, 0, 0, 0, 0, 0, 107, 238, 250,
	123, 224, 109, 248, 235, 172, 152, 153, 108, 0,
	210, 131, 138, 128, 185, 0, 0, 0, 245, 246,
	127, 271, 115, 259, 111, 116, 258, 179, 0, 0,
	0, 241, 249, 173, 166, 0, 110, 247, 171, 165,
	156, 135, 145, 203, 163, 204, 146, 176, 175, 177,
	0, 0, 0, 233, 256, 272, 120, 0, 0, 240,
	266, 267, 0, 0, 121, 139, 134, 202, 178, 117,
	148, 230, 155, 162, 209, 270, 192, 215, 124, 255,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 112, 159, 269, 207, 137, 257, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1206, 0, 0, 0, 0, 0,
	0, 0, 105, 106, 113, 119, 125, 129, 133, 136,
	141, 144, 147, 149, 150, 151, 154, 164, 167, 168,
	169, 170, 180, 181, 182, 184, 187, 188, 189, 190,
	191, 194, 196, 197, 198, 199, 200, 201, 208, 211,
	217, 218, 219, 220, 221, 222, 223, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 265, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 158, 0, 0, 0, 0, 160,
	0, 0, 232, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 205, 0, 236, 143,
	157, 118, 104, 114, 0, 142, 183, 212, 216, 0,
	0, 0, 0, 0, 126, 0, 214, 193, 253, 0,
	0, 195, 213, 161, 242, 206, 251, 252, 263, 264,
	239, 260, 268, 229, 0, 0, 0, 0, 0, 0,
	107, 238, 250, 123, 224, 109, 248, 235, 172, 152,
	153, 108, 0, 210, 131, 138, 128, 185, 0, 0,
	0, 245, 246, 127, 271, 115, 259, 111, 116, 258,
	179, 0, 0, 0, 241, 249, 173, 166, 0, 110,
	247, 171, 165, 156, 135, 145, 203, 163, 204, 146,
	176, 175, 177, 0, 0, 0, 233, 256, 272, 120,
	0, 0, 240, 266, 267, 0, 0, 121, 139, 134,
	202, 178, 117, 148, 230, 155, 162, 209, 270, 192,
	215, 124, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 112, 159, 269, 207, 137, 257,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 106, 113, 119, 125,
	129, 133, 136, 141, 144, 147, 149, 150, 151, 154,
	164, 167, 168, 169, 170, 180, 181, 182, 184, 187,
	188, 189, 190, 191, 194, 196, 197, 198, 199, 200,
	201, 208, 211, 217, 218, 219, 220, 221, 222, 223,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	265, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 158, 0, 0, 0, 0,
	160, 0, 0, 232, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 884, 0, 0, 885, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 205, 0, 236,
	143, 157, 118, 104, 114, 0, 142, 183, 212, 216,
	0, 0, 0, 0, 0, 126, 0, 214, 193, 253,
	0, 0, 195, 213, 161, 242, 206, 251, 252, 263,
	264, 239, 260, 268, 229, 0, 0, 0, 0, 0,
	0, 107, 238, 250, 123, 224, 109, 248, 235, 172,
	152, 153, 108, 0, 210, 131, 138, 128, 185, 0,
	0, 0, 245, 246, 127, 271, 115, 259, 111, 116,
	258, 179, 0, 0, 0, 241, 249, 173, 166, 0,
	110, 247, 171, 165, 156, 135, 145, 203, 163, 204,
	146, 176, 175, 177, 0, 0, 0, 233, 256, 272,
	120, 0, 0, 240, 266, 267, 0, 0, 121, 139,
	134, 202, 178, 117, 148, 230, 155, 162, 209, 270,
	192, 215, 124, 255, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 112, 159, 269, 207, 137,
	257, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 106, 113, 119,
	125, 129, 133, 136, 141, 144, 147, 149, 150, 151,
	154, 164, 167, 168, 169, 170, 180, 181, 182, 184,
	187, 188, 189, 190, 191, 194, 196, 197, 198, 199,
	200, 201, 208, 211, 217, 218, 219, 220, 221, 222,
	223, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 265, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 755, 0, 0, 0, 158, 0, 0, 0,
	0, 160, 0, 0, 232, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 435, 0, 754, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 205, 0,
	236, 143, 157, 118, 104, 114, 0, 142, 183, 212,
	216, 0, 0, 0, 0, 0, 126, 0, 214, 193,
	253, 0, 0, 195, 213, 161, 242, 206, 251, 252,
	263, 264, 239, 260, 268, 229, 0, 0, 0, 0,
	0, 0, 107, 238, 250, 123, 224, 109, 248, 235,
	172, 152, 153, 108, 0, 210, 131, 138, 128, 185,
	0, 0, 0, 245, 246, 127, 271, 115, 259, 111,
	116, 258, 179, 0, 0, 0, 241, 249, 173, 166,
	0, 110, 247, 171, 165, 156, 135, 145, 203, 163,
	204, 146, 176, 175, 177, 0, 0, 0, 233, 256,
	272, 120, 0, 0, 240, 266, 267, 0, 0, 121,
	139, 134, 202, 178, 117, 148, 230, 155, 162, 209,
	270, 192, 215, 124, 255, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 112, 159, 269, 207,
	137, 257, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 106, 113,
	119, 125, 129, 133, 136, 141, 144, 147, 149, 150,
	151, 154, 164, 167, 168, 169, 170, 180, 181, 182,
	184, 187, 188, 189, 190, 191, 194, 196, 197, 198,
	199, 200, 201, 208, 211, 217, 218, 219, 220, 221,
	222, 223, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 265, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 158, 0, 0,
	0, 0, 160, 0, 0, 232, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 994, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 262, 0, 0, 0, 205,
	0, 236, 143, 157, 118, 104, 114, 0, 142, 183,
	212, 216, 0, 0, 0, 0, 0, 126, 0, 214,
	193, 253, 0, 0, 195, 213, 161, 242, 206, 251,
	252, 263, 264, 239, 260, 268, 229, 0, 0, 0,
	0, 0, 0, 107, 238, 250, 123, 224, 109, 248,
	235, 172, 152, 153, 108, 0, 210, 131, 138, 128,
	185, 0, 0, 0, 245, 246, 127, 271, 115, 259,
	111, 116, 258, 179, 0, 0, 0, 241, 249, 173,
	166, 0, 110, 247, 171, 165, 156, 135, 145, 203,
	163, 204, 146, 176, 175, 177, 0, 0, 0, 233,
	256, 272, 120, 0, 0, 240, 266, 267, 0, 0,
	121, 139, 134, 202, 178, 117, 148, 230, 155, 162,
	209, 270, 192, 215, 124, 255, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 112, 159, 269,
	207, 137, 257, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 106,
	113, 119, 125, 129, 133, 136, 141, 144, 147, 149,
	150, 151, 154, 164, 167, 168, 169, 170, 180, 181,
	182, 184, 187, 188, 189, 190, 191, 194, 196, 197,
	198, 199, 200, 201, 208, 211, 217, 218, 219, 220,
	221, 222, 223, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 265, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 158, 0,
	0, 0, 0, 160, 0, 0, 232, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 262, 0, 0, 0,
	205, 0, 236, 143, 157, 118, 104, 114, 0, 142,
	183, 212, 216, 0, 0, 0, 0, 0, 126, 0,
	214, 193, 253, 0, 0, 195, 213, 161, 242, 206,
	251, 252, 263, 264, 239, 260, 268, 229, 0, 0,
	0, 0, 0, 0, 107, 238, 250, 123, 224, 109,
	248, 235, 172, 152, 153, 108, 0, 210, 131, 138,
	128, 185, 0, 0, 0, 245, 246, 127, 271, 115,
	259, 111, 116, 258, 179, 0, 0, 0, 241, 249,
	173, 166, 0, 110, 247, 171, 165, 156, 135, 145,
	203, 163, 204, 146, 176, 175, 177, 0, 0, 0,
	233, 256, 272, 120, 0, 0, 240, 266, 267, 0,
	0, 121, 139, 134, 202, 178, 117, 148, 230, 155,
	162, 209, 270, 192, 215, 124, 255, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 112, 159,
	269, 207, 137, 257, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	106, 113, 119, 125, 129, 133, 136, 141, 144, 147,
	149, 150, 151, 154, 164, 167, 168, 169, 170, 180,
	181, 182, 184, 187, 188, 189, 190, 191, 194, 196,
	197, 198, 199, 200, 201, 208, 211, 217, 218, 219,
	220, 221, 222, 223, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 265, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 158,
	0, 0, 0, 0, 160, 0, 0, 232, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 435, 0, 641, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 205, 0, 236, 143, 157, 118, 104, 114, 0,
	142, 183, 212, 216, 0, 0, 0, 0, 0, 126,
	0, 214, 193, 253, 0, 0, 195, 213, 161, 242,
	206, 251, 252, 263, 264, 239, 260, 268, 229, 0,
	0, 0, 0, 0, 0, 107, 238, 250, 123, 224,
	109, 248, 235, 172, 152, 153, 108, 0, 210, 131,
	138, 128, 185, 0, 0, 0, 245, 246, 127, 271,
	115, 259, 111, 116, 258, 179, 0, 0, 0, 241,
	249, 173, 166, 0, 110, 247, 171, 165, 156, 135,
	145, 203, 163, 204, 146, 176, 175, 177, 0, 0,
	0, 233, 256, 272, 120, 0, 0, 240, 266, 267,
	0, 0, 121, 139, 134, 202, 178, 117, 148, 230,
	155, 162, 209, 270, 192, 215, 124, 255, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 112,
	159, 269, 207, 137, 257, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 106, 113, 119, 125, 129, 133, 136, 141, 144,
	147, 149, 150, 151, 154, 164, 167, 168, 169, 170,
	180, 181, 182, 184, 187, 188, 189, 190, 191, 194,
	196, 197, 198, 199, 200, 201, 208, 211, 217, 218,
	219, 220, 221, 222, 223, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 265, 186, 0, 0, 0,
	0, 0, 0, 0, 725, 132, 0, 0, 0, 0,
	158, 0, 0, 0, 0, 160, 0, 0, 232, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 262, 0,
	0, 0, 205, 0, 236, 143, 157, 118, 104, 114,
	0, 142, 183, 212, 216, 0, 0, 0, 0, 0,
	126, 0, 214, 193, 253, 0, 0, 195, 213, 161,
	242, 206, 251, 252, 263, 264, 239, 260, 268, 229,
	0, 0, 0, 0, 0, 0, 107, 238, 250, 123,
	224, 109, 248, 235, 172, 152, 153, 108, 0, 210,
	131, 138, 128, 185, 0, 0, 0, 245, 246, 127,
	271, 115, 259, 111, 116, 258, 179, 0, 0, 0,
	241, 249, 173, 166, 0, 110, 247, 171, 165, 156,
	135, 145, 203, 163, 204, 146, 176, 175, 177, 0,
	0, 0, 233, 256, 272, 120, 0, 0, 240, 266,
	267, 0, 0, 121, 139, 134, 202, 178, 117, 148,
	230, 155, 162, 209, 270, 192, 215, 124, 255, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	112, 159, 269, 207, 137, 257, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 106, 113, 119, 125, 129, 133, 136, 141,
	144, 147, 149, 150, 151, 154, 164, 167, 168, 169,
	170, 180, 181, 182, 184, 187, 188, 189, 190, 191,
	194, 196, 197, 198, 199, 200, 201, 208, 211, 217,
	218, 219, 220, 221, 222, 223, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 265, 397, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 158, 0,
	0, 0, 0, 160, 0, 0, 232, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 262, 0, 0, 0,
	205, 0, 236, 143, 157, 118, 104, 114, 0, 142,
	183, 212, 216, 0, 0, 0, 0, 0, 126, 0,
	214, 193, 253, 0, 0, 195, 213, 161, 242, 206,
	251, 252, 263, 264, 239, 260, 268, 229, 0, 0,
	0, 0, 0, 0, 107, 238, 250, 123, 224, 109,
	248, 235, 172, 152, 153, 108, 0, 210, 131, 138,
	128, 185, 0, 0, 0, 245, 246, 127, 271, 115,
	259, 111, 116, 258, 179, 0, 0, 0, 241, 249,
	173, 166, 0, 110, 247, 171, 165, 156, 135, 145,
	203, 163, 204, 146, 176, 175, 177, 0, 0, 0,
	233, 256, 272, 120, 0, 0, 240, 266, 267, 0,
	0, 121, 139, 134, 202, 178, 117, 148, 230, 155,
	162, 209, 270, 192, 215, 124, 255, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 112, 159,
	269, 207, 137, 257, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	106, 113, 119, 125, 129, 133, 136, 141, 144, 147,
	149, 150, 151, 154, 164, 167, 168, 169, 170, 180,
	181, 182, 184, 187, 188, 189, 190, 191, 194, 196,
	197, 198, 199, 200, 201, 208, 211, 217, 218, 219,
	220, 221, 222, 223, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 265, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 158,
	0, 0, 0, 0, 160, 0, 0, 232, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 0, 0, 98, 0, 0, 262, 0, 0,
	0, 205, 0, 236, 143, 157, 118, 104, 114, 0,
	142, 183, 212, 216, 0, 0, 0, 0, 0, 126,
	0, 214, 193, 253, 0, 0, 195, 213, 161, 242,
	206, 251, 252, 263, 264, 239, 260, 268, 229, 0,
	0, 0, 0, 0, 0, 107, 238, 250, 123, 224,
	109, 248, 235, 172, 152, 153, 108, 0, 210, 131,
	138, 128, 185, 0, 0, 0, 245, 246, 127, 271,
	115, 259, 111, 116, 258, 179, 0, 0, 0, 241,
	249, 173, 166, 0, 110, 247, 171, 165, 156, 135,
	145, 203, 163, 204, 146, 176, 175, 177, 0, 0,
	0, 233, 256, 272, 120, 0, 0, 240, 266, 267,
	0, 0, 121, 139, 134, 202, 178, 117, 148, 230,
	155, 162, 209, 270, 192, 215, 124, 255, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 112,
	159, 269, 207, 137, 257, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 106, 113, 119, 125, 129, 133, 136, 141, 144,
	147, 149, 150, 151, 154, 164, 167, 168, 169, 170,
	180, 181, 182, 184, 187, 188, 189, 190, 191, 194,
	196, 197, 198, 199, 200, 201, 208, 211, 217, 218,
	219, 220, 221, 222, 223, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 265, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	158, 0, 0, 0, 0, 160, 0, 0, 232, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 262, 0,
	0, 0, 205, 0, 236, 143, 157, 118, 104, 114,
	0, 142, 183, 212, 216, 0, 0, 0, 0, 0,
	126, 0, 214, 193, 253, 0, 0, 195, 213, 161,
	242, 206, 251, 252, 263, 264, 239, 260, 268, 229,
	0, 0, 0, 0, 0, 0, 107, 238, 250, 123,
	224, 109, 248, 235, 172, 152, 153, 108, 0, 210,
	131, 138, 128, 185, 0, 0, 0, 245, 246, 127,
	271, 115, 259, 111, 116, 258, 179, 0, 0, 0,
	241, 249, 173, 166, 0, 110, 247, 171, 165, 156,
	135, 145, 203, 163, 204, 146, 176, 175, 177, 0,
	0, 0, 233, 256, 272, 120, 0, 0, 240, 266,
	267, 0, 0, 121, 139, 134, 202, 178, 117, 148,
	230, 155, 162, 209, 270, 192, 215, 124, 255, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	112, 159, 269, 207, 137, 257, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 106, 113, 119, 125, 129, 133, 136, 141,
	144, 147, 149, 150, 151, 154, 164, 167, 168, 169,
	170, 180, 181, 182, 184, 187, 188, 189, 190, 191,
	194, 196, 197, 198, 199, 200, 201, 208, 211, 217,
	218, 219, 220, 221, 222, 223, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 265, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 158, 0, 0, 0, 0, 160, 0, 0, 232,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 205, 0, 236, 143, 157, 118, 104,
	114, 0, 142, 183, 212, 216, 0, 0, 0, 0,
	0, 126, 0, 214, 193, 253, 0, 0, 195, 213,
	161, 242, 206, 251, 252, 263, 264, 239, 260, 268,
	229, 0, 0, 0, 0, 0, 0, 107, 238, 250,
	123, 224, 109, 248, 235, 172, 152, 153, 108, 0,
	210, 131, 138, 128, 185, 0, 0, 0, 245, 246,
	127, 271, 115, 259, 111, 116, 258, 179, 0, 0,
	0, 241, 249, 173, 166, 0, 110, 247, 171, 165,
	156, 135, 145, 203, 163, 204, 146, 176, 175, 177,
	0, 0, 0, 233, 256, 272, 120, 0, 0, 240,
	266, 267, 0, 0, 121, 139, 134, 202, 178, 117,
	148, 230, 155, 162, 209, 270, 192, 215, 124, 255,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 112, 159, 269, 207, 137, 257, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 106, 113, 119, 125, 129, 133, 136,
	141, 144, 147, 149, 150, 151, 154, 164, 167, 168,
	169, 170, 180, 181, 182, 184, 187, 188, 189, 190,
	191, 194, 196, 197, 198, 199, 200, 201, 208, 211,
	217, 218, 219, 220, 221, 222, 223, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 265, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 158, 0, 0, 0, 0, 160, 0, 0,
	232, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	262, 0, 0, 0, 205, 0, 236, 143, 157, 118,
	104, 114, 0, 142, 183, 212, 216, 0, 0, 0,
	0, 0, 126, 0, 214, 193, 253, 0, 0, 195,
	213, 161, 242, 206, 251, 252, 263, 264, 239, 260,
	268, 229, 0, 0, 0, 0, 0, 0, 107, 238,
	250, 123, 224, 109, 248, 235, 172, 152, 153, 108,
	0, 210, 131, 138, 128, 185, 0, 0, 0, 245,
	246, 127, 271, 115, 259, 111, 414, 258, 179, 0,
	0, 0, 241, 249, 173, 166, 0, 110, 247, 171,
	165, 156, 135, 145, 203, 163, 204, 146, 176, 175,
	177, 0, 0, 0, 233, 256, 272, 120, 0, 0,
	240, 266, 267, 0, 0, 121, 139, 134, 202, 415,
	413, 148, 230, 155, 162, 209, 270, 192, 215, 124,
	255, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 112, 159, 269, 207, 137, 257, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 106, 113, 119, 125, 129, 133,
	136, 141, 144, 147, 149, 150, 151, 154, 164, 167,
	168, 169, 170, 180, 181, 182, 184, 187, 188, 189,
	190, 191, 194, 196, 197, 198, 199, 200, 201, 208,
	211, 217, 218, 219, 220, 221, 222, 223, 225, 226,
	227, 228, 234, 237, 243, 244, 254, 261, 265, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 158, 0, 0, 0, 0, 160, 0,
	0, 232, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 262, 0, 0, 0, 205, 0, 236, 143, 157,
	118, 104, 114, 0, 142, 183, 212, 216, 0, 0,
	0, 0, 0, 126, 0, 214, 193, 253, 0, 0,
	195, 213, 161, 242, 206, 251, 252, 263, 264, 239,
	260, 268, 229, 0, 0, 0, 0, 0, 0, 107,
	238, 250, 123, 224, 109, 248, 235, 172, 152, 153,
	108, 0, 210, 131, 138, 128, 185, 0, 0, 0,
	245, 246, 127, 271, 115, 259, 111, 116, 258, 179,
	0, 0, 0, 241, 249, 173, 166, 0, 110, 247,
	171, 165, 156, 135, 145, 203, 163, 204, 146, 176,
	175, 177, 0, 0, 0, 233, 256, 272, 120, 0,
	0, 240, 266, 267, 0, 0, 121, 139, 134, 202,
	178, 117, 148, 230, 155, 162, 209, 270, 192, 215,
	124, 255, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 112, 159, 269, 207, 137, 257, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 106, 113, 119, 125, 129,
	133, 136, 141, 144, 147, 149, 150, 151, 154, 164,
	167, 168, 169, 170, 180, 181, 182, 184, 187, 188,
	189, 190, 191, 194, 196, 197, 198, 199, 200, 201,
	208, 211, 217, 218, 219, 220, 221, 222, 223, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 265,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 158, 0, 0, 0, 0, 160,
	0, 0, 232, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 205, 0, 236, 143,
	157, 118, 104, 114, 0, 142, 183, 212, 216, 0,
	0, 0, 0, 0, 126, 0, 214, 193, 253, 0,
	0, 195, 213, 161, 242, 206, 251, 252, 263, 264,
	239, 260, 268, 229, 0, 0, 0, 0, 0, 0,
	107, 238, 746, 123, 224, 109, 248, 235, 172, 152,
	153, 108, 0, 210, 131, 138, 128, 185, 0, 0,
	0, 245, 246, 127, 271, 115, 259, 111, 414, 258,
	179, 0, 0, 0, 241, 249, 173, 166, 0, 110,
	247, 171, 165, 156, 135, 145, 203, 163, 204, 146,
	176, 175, 177, 0, 0, 0, 233, 256, 272, 120,
	0, 0, 240, 266, 267, 0, 0, 121, 139, 134,
	202, 415, 413, 148, 230, 155, 162, 209, 270, 192,
	215, 124, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 112, 159, 269, 207, 137, 257,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 106, 113, 119, 125,
	129, 133, 136, 141, 144, 147, 149, 150, 151, 154,
	164, 167, 168, 169, 170, 180, 181, 182, 184, 187,
	188, 189, 190, 191, 194, 196, 197, 198, 199, 200,
	201, 208, 211, 217, 218, 219, 220, 221, 222, 223,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	265, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 158, 0, 0, 0, 0,
	160, 0, 0, 232, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 205, 0, 236,
	143, 157, 118, 104, 114, 0, 142, 183, 212, 216,
	0, 0, 0, 0, 0, 126, 0, 214, 193, 253,
	0, 0, 195, 213, 161, 242, 206, 251, 252, 263,
	264, 239, 260, 268, 229, 0, 0, 0, 0, 0,
	0, 107, 238, 405, 123, 224, 109, 248, 235, 172,
	152, 153, 108, 0, 210, 131, 138, 128, 185, 0,
	0, 0, 245, 246, 127, 271, 115, 259, 111, 414,
	258, 179, 0, 0, 0, 241, 249, 173, 166, 0,
	110, 247, 171, 165, 156, 135, 145, 203, 163, 204,
	146, 176, 175, 177, 0, 0, 0, 233, 256, 272,
	120, 0, 0, 240, 266, 267, 0, 0, 121, 139,
	134, 202, 415, 413, 408, 407, 155, 162, 209, 270,
	192, 215, 124, 255, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 112, 159, 269, 207, 137,
	257, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 106, 113, 119,
	125, 129, 133, 136, 141, 144, 147, 149, 150, 151,
	154, 164, 167, 168, 169, 170, 180, 181, 182, 184,
	187, 188, 189, 190, 191, 194, 196, 197, 198, 199,
	200, 201, 208, 211, 217, 218, 219, 220, 221, 222,
	223, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 265,
}
var yyPact = [...]int{

	1870, -1000, -263, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1166, 1226, -1000, -1000, -1000, -1000,
	-1000, -1000, 429, 101, -1000, -1000, -1000, 203, 75, 15047,
	202, 1945, 15749, -1000, 52, -1000, -1000, 148, 15749, -1000,
	-1000, -55, -83, -1000, 933, -1000, -1000, 80, -1000, -1000,
	-1000, -1000, -1000, -1000, 1160, 1164, 973, 1154, 1058, -1000,
	7282, 164, 164, 14696, 17153, -1000, -1000, 478, 15749, 199,
	15749, -148, 158, 158, 94, 158, -1000, 426, -1000, -1000,
	-1000, 15749, 160, 15398, 160, 160, 160, 160, 15749, -1000,
	287, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15749, 812, 1101, 4409, 96, 4409, 4409,
	-1000, 465, -1000, 4409, 87, 4409, 27, 436, 82, 14,
	-1000, 4409, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	185, 933, 414, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	657, 201, 15749, 355, -1000, 1098, 8698, 8698, 1166, -1000,
	933, -1000, -1000, -1000, 1091, -1000, -1000, 467, 1212, -1000,
	11155, 285, -1000, 8698, 2200, 924, -1000, -1000, 924, -1000,
	-1000, 226, -1000, -1000, 9751, 9751, 9751, 9751, 9751, 9751,
	9751, 9751, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 924, -1000, 8347, 924,
	924, 924, 924, 924, 924, 924, 924, 924, 924, 8698,
	924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
	924, 924, 924, 924, 924, 14338, 13636, 15749, 883, 879,
	-1000, -1000, 284, 851, 16802, -129, -1000, -1000, -1000, 384,
	12934, -1000, 266, -1000, 1096, -1000, 819, 15749, -1000, 2638,
	-1000, 15398, 1144, 183, 811, 439, 810, 808, 15749, 804,
	912, 178, 15749, 1124, 988, -1000, -1000, 15749, 803, 801,
	799, -1000, 6229, -1000, 4409, 4409, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	158, 158, 4409, 4409, 15749, 15749, 15749, -1000, -1000, 15749,
	-1000, -1000, -1000, 4409, 4409, -1000, 1211, 451, 451, -1000,
	-1000, -1000, -1000, 8698, -1000, 9751, 344, -1000, 986, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 793, -1000, -1000, -1000,
	-1000, 15749, 4409, 91, 117, 118, 15749, -1000, 1220, 334,
	653, 240, 911, -1000, 582, 1160, 657, 1058, 12583, 999,
	-1000, -1000, -1000, 15749, -1000, 8698, 8698, 592, -1000, 13987,
	-1000, -1000, 5137, 352, 9751, 535, 457, 9751, 9751, 9751,
	9751, 9751, 9751, 9751, 9751, 9751, 9751, 9751, 9751, 9751,
	9751, 9751, 553, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 790, -1000, 933, 687, 687, 305, 305, 305, 305,
	305, 305, 305, 10102, 1142, 657, 797, 561, 8347, 7282,
	7282, 657, 8698, 8698, 7984, 7633, 7282, 7282, 1142, 434,
	561, 16451, -1000, -1000, 9400, -1000, -1000, -1000, -1000, -1000,
	657, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15398, 15398,
	7282, 7282, 7282, 7282, 107, 15749, -1000, 925, 1076, -1000,
	-1000, -1000, 1133, 12232, 10804, 107, 878, 13636, 15749, -1000,
	-1000, 13636, 15749, 4773, 16100, 851, -129, 901, -1000, -105,
	-103, 6580, 297, -1000, -1000, -1000, 5865, -1000, 3681, 474,
	847, -1000, -35, -1000, -1000, -1000, 945, -1000, 945, 157,
	11, 945, 945, 945, 945, 945, 5, 5, 5, 5,
	12, -1000, -1000, -1000, -1000, -1000, 963, 960, -1000, 945,
	945, 945, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	957, 163, 957, 950, 950, 950, 950, 965, -1000, 15749,
	4409, 1117, 4409, 88, -1000, -1000, 15749, 15749, 908, -1000,
	15749, 907, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 783, 771, -1000, -1000, -1000, -1000, -1000, 464, -1000,
	-1000, 15749, 1128, 15749, 15749, 417, 561, 525, -1000, 630,
	15749, -1000, 128, -1000, 15749, 15749, 15749, 15749, 15749, 218,
	-1000, 1040, 8698, 8698, 5865, 8698, -1000, -1000, -1000, 1098,
	-1000, 1142, 1165, -1000, 1061, 1052, 7282, -1000, -1000, 352,
	398, -1000, -1000, 609, -1000, -1000, -1000, -1000, 239, 924,
	-1000, 2275, -1000, -1000, -1000, -1000, 535, 9751, 9751, 9751,
	525, 2275, 2238, 1723, 542, 305, 462, 462, 315, 315,
	315, 315, 315, 477, 477, -1000, -1000, -1000, 657, -1000,
	-1000, -1000, 7282, -1000, 8698, -1000, 657, 788, -1000, 788,
	-1000, 395, 524, 345, 1209, 788, 339, 1176, 788, 788,
	788, 7282, 510, -1000, 8698, 657, -1000, 597, 906, 904,
	788, 657, 903, 788, 788, 855, 924, -1000, 16100, 13636,
	13636, 13636, 13636, 13636, -1000, 1020, 1012, -1000, 1042, 1029,
	1048, 15749, -1000, 781, 12232, -1000, 924, -1000, 11869, 271,
	190, 188, 187, -1000, -1000, 1173, 13636, 866, -1000, 866,
	-1000, 235, -1000, -1000, 901, -129, -75, -1000, -1000, -1000,
	-1000, 561, -1000, 616, -1000, 233, 900, 3317, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 959, 763, -1000, 1079, 291,
	276, 694, 1069, -1000, -1000, -1000, 484, -37, -1000, -1000,
	599, 5, 5, 945, 945, 151, 945, -1000, 5, -1000,
	-1000, -1000, 297, 1089, 297, 297, 297, 297, 5, 629,
	629, -1000, -1000, -1000, -1000, 596, -1000, 957, -1000, -1000,
	557, -1000, -1000, -1000, 985, 15398, 933, 1127, -1000, -1000,
	-1000, 1181, -1000, -1000, 177, -1000, 4409, 15749, 4409, 4409,
	1173, 758, 756, 451, 417, -198, -1000, -1000, -1000, 627,
	8698, -1000, 9751, -1000, -1000, -1000, 388, 298, 292, 150,
	150, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 106, 926, -1000, -1000, -1000, -1000, 38, 83,
	1035, 561, 561, -1000, -1000, 15749, -1000, -1000, -1000, -1000,
	896, -1000, -1000, -1000, 4045, 7282, -1000, 525, 2275, 1680,
	-1000, 9751, -1000, 657, 561, -1000, 7282, -1000, -1000, 354,
	553, 354, 9751, 9751, -1000, 9751, 9751, -1000, -161, -1000,
	880, 430, -1000, 8698, 591, -1000, -1000, 9751, 9751, -1000,
	-1000, -1000, -1000, 983, 16100, 924, -1000, 11518, 15398, 867,
	1076, 956, 979, 871, -1000, -1000, -1000, -1000, 1008, -1000,
	1001, -1000, -1000, -1000, -1000, 15398, 9751, 271, -1000, 924,
	924, 924, 1166, 8698, 866, -1000, -1000, 324, -1000, -1000,
	-111, -113, -1000, -1000, -1000, 5501, 3681, -1000, 3681, 15398,
	133, -1000, 694, 694, -1000, -1000, -1000, 951, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 455, 9751, 1219, -1000, 1072,
	-1000, 1070, 626, -1000, -1000, 815, 297, 297, 5, -1000,
	-1000, 945, -1000, 297, -1000, 349, -1000, -1000, -1000, -1000,
	297, 770, -1000, 762, 899, -1000, 753, 15749, -1000, -1000,
	-1000, 978, -1000, -1000, -1000, 15749, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 417, -1000, 9751, -1000, 561, 2275, -1000,
	649, -1000, 694, 274, -1000, -1000, -1000, 750, 1069, -1000,
	-1000, 749, -1000, 733, 15398, 1068, 732, 15749, 15398, -1000,
	-1000, 714, 730, 15398, -167, 719, 15398, 15398, 15398, -1000,
	-1000, 1173, 13636, -1000, -1000, 657, -1000, 9751, 2275, -1000,
	-1000, 657, 945, 945, -1000, 945, 950, -1000, 945, 33,
	945, 32, 657, 657, 2160, 1991, 1932, 1869, 924, -155,
	-1000, 561, 8698, 1638, 1097, -1000, 1104, 826, 856, -1000,
	-1000, 6931, 657, 729, 231, 727, -1000, 1166, -1000, -1000,
	8698, 947, -1000, 8698, -1000, -1000, -1000, 727, 846, -1000,
	15398, 15398, 15398, 1160, 561, -1000, -1000, -1000, -1000, 3317,
	-1000, 725, -1000, 945, -1000, -1000, -1000, 15398, -1000, 2275,
	-137, -1000, -1000, -1000, -1000, -1000, -1000, 297, -1000, -1000,
	-1000, -1000, -1000, 5, 526, 5, 547, -1000, 494, 940,
	-1000, 933, 15749, -1000, -1000, 2275, 714, 127, -1000, 965,
	291, 133, -1000, -1000, -1000, -1000, 717, 281, -1000, 167,
	127, 714, 1115, -1000, 5501, -1000, -1000, 939, 966, -1000,
	1170, 874, -1000, 2275, -1000, -1000, 149, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9751, 9751, 9751, 9751, 9751,
	657, 511, 561, 9751, 9751, 1050, -1000, 924, -1000, -1000,
	876, 15398, 15398, -1000, 15398, 1160, 561, 15398, 561, 10453,
	-1000, 13285, 723, -1000, 723, 723, -1000, 227, 15398, 1114,
	711, -1000, -1000, 297, -1000, 297, 798, 712, 15398, -1000,
	1152, 679, -1000, -1000, 706, 930, 694, -1000, -1000, 652,
	-1000, -1000, 15398, -1000, 127, 924, 863, -1000, 383, 15398,
	15749, 1168, 1162, -1000, -1000, 597, 597, 597, 597, 64,
	-1000, -1000, 597, 597, 1218, -1000, 924, -1000, 933, 217,
	-1000, -1000, -1000, 703, -1000, 271, 15398, -1000, -1000, -1000,
	227, -1000, 650, 363, 468, -1000, -1000, 123, -1000, -1000,
	-1000, -1000, 678, -1000, 71, -1000, -1000, -1000, 15398, 965,
	-1000, -1000, -1000, -1000, 105, 5501, 3681, 672, -1000, -1000,
	8698, 8698, -1000, -1000, -1000, -1000, 657, 70, -172, -1000,
	-1000, 16100, 856, 657, 15398, -1000, -1000, -1000, -1000, -1000,
	482, -1000, -1000, 15749, 227, 69, -1000, 666, 928, -1000,
	664, -1000, 15398, -1000, -1000, 926, 561, 852, -1000, 1031,
	-165, -176, 851, -1000, -1000, -1000, 927, -1000, 227, 59,
	227, 15398, -1000, 105, 1046, -167, -1000, 1024, -1000, 15398,
	-1000, 648, 594, -1000, 661, -1000, 102, -1000, -169, 656,
	180, -1000, -1000, 227, 99, -174, 972, -1000, -1000, -1000,
	-1000, -1000, -1000, 168, -1000, 924, -177, 970, 958, 1195,
	-1000, -273, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9049,
	-1000, -1000, 1216, -1000, 1214, 261, 261, 142, 597, 657,
	-1000, -1000, -1000, 141, 533, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1434, 42, 650, 1433, 1431, 1426, 18, 16, 10,
	22, 1424, 1423, 1422, 1418, 1415, 1414, 6, 2, 1410,
	1409, 1408, 1406, 1405, 1404, 1403, 1402, 1399, 1398, 1397,
	1394, 1393, 1391, 1390, 1389, 1388, 1387, 1386, 108, 1383,
	1382, 1381, 89, 1380, 92, 1379, 1378, 1376, 65, 206,
	71, 64, 1067, 1373, 1372, 74, 78, 88, 1370, 57,
	1368, 1367, 103, 1366, 1363, 1361, 76, 1358, 1357, 1500,
	1355, 86, 1354, 45, 28, 68, 1351, 1346, 1345, 1342,
	91, 145, 1340, 1334, 1332, 41, 1331, 1328, 116, 1326,
	81, 24, 32, 21, 36, 1325, 172, 30, 1322, 77,
	1321, 1320, 1319, 1318, 47, 1317, 27, 1316, 83, 7,
	33, 50, 82, 1314, 37, 90, 53, 51, 29, 84,
	1313, 87, 75, 1310, 1307, 611, 1305, 1304, 70, 1303,
	1302, 66, 1301, 444, 98, 52, 1300, 1299, 1296, 1295,
	46, 62, 1294, 1293, 179, 240, 100, 20, 1085, 357,
	93, 1292, 25, 1291, 1811, 102, 39, 58, 1290, 1289,
	54, 1286, 1284, 1282, 1281, 1280, 1279, 1278, 1277, 1083,
	1276, 1274, 1273, 56, 79, 1270, 1268, 80, 49, 1267,
	1266, 1264, 72, 73, 1263, 61, 44, 1262, 1261, 1257,
	1256, 38, 1255, 1254, 1253, 1252, 1245, 48, 40, 1244,
	35, 13, 14, 26, 9, 34, 1243, 12, 1242, 31,
	1241, 8, 1240, 15, 59, 4, 5, 3, 1238, 1237,
	1235, 0, 85, 104, 1234, 1233, 95,
}
var yyR1 = [...]int{

	0, 219, 220, 220, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 41, 41, 8,
	9, 9, 9, 9, 223, 223, 64, 64, 62, 62,
	63, 63, 115, 115, 10, 10, 10, 10, 119, 119,
	122, 122, 122, 123, 123, 123, 123, 158, 158, 109,
	12, 12, 12, 12, 12, 12, 12, 12, 143, 143,
	20, 20, 21, 21, 21, 107, 107, 107, 11, 11,
	11, 11, 11, 17, 19, 19, 18, 18, 18, 18,
	18, 18, 213, 213, 212, 211, 211, 210, 210, 209,
	26, 193, 195, 195, 194, 194, 194, 194, 183, 162,
	162, 162, 162, 162, 162, 162, 161, 161, 161, 161,
	165, 165, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 164, 164, 164, 164, 164, 164, 164, 164, 166,
	166, 166, 166, 166, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 168,
	168, 168, 168, 168, 168, 168, 168, 182, 182, 169,
	169, 177, 177, 178, 178, 178, 175, 175, 176, 176,
	179, 179, 171, 172, 180, 173, 173, 173, 174, 174,
	174, 181, 181, 181, 181, 170, 184, 184, 204, 204,
	203, 203, 202, 202, 202, 192, 192, 199, 199, 199,
	199, 199, 187, 187, 187, 186, 186, 188, 188, 191,
	191, 201, 201, 200, 185, 185, 205, 205, 205, 205,
	205, 189, 189, 190, 190, 190, 216, 217, 215, 215,
	215, 215, 215, 196, 196, 196, 197, 197, 197, 198,
	198, 198, 218, 218, 22, 22, 22, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 106, 106, 106, 24, 25,
	25, 25, 25, 25, 25, 25, 25, 141, 141, 214,
	214, 214, 214, 214, 208, 206, 206, 207, 207, 13,
	27, 27, 14, 14, 14, 14, 14, 14, 15, 15,
	28, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 53, 129, 129, 127, 127, 130, 130, 128,
	128, 128, 131, 131, 131, 132, 132, 159, 159, 159,
	30, 30, 35, 35, 36, 37, 142, 142, 33, 33,
	34, 34, 34, 34, 47, 47, 224, 224, 32, 32,
	31, 31, 31, 31, 16, 225, 38, 39, 39, 40,
	40, 40, 44, 44, 44, 42, 42, 42, 43, 43,
	50, 50, 49, 49, 51, 51, 51, 51, 151, 151,
	151, 150, 150, 54, 54, 55, 55, 56, 56, 57,
	57, 57, 57, 72, 72, 73, 73, 73, 73, 73,
	83, 83, 114, 114, 116, 116, 58, 58, 58, 58,
	59, 59, 60, 60, 61, 61, 140, 140, 156, 156,
	65, 65, 65, 67, 66, 66, 66, 66, 68, 68,
	70, 70, 69, 69, 71, 74, 74, 74, 74, 75,
	75, 52, 52, 52, 52, 52, 52, 52, 126, 126,
	77, 77, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 89, 89, 89, 89, 89, 89, 78, 78,
	78, 78, 78, 78, 78, 48, 48, 90, 90, 90,
	96, 91, 91, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 86, 86, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 226, 226,
	88, 87, 87, 87, 87, 87, 87, 45, 45, 45,
	45, 45, 157, 157, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 100, 100, 46,
	46, 98, 98, 99, 101, 101, 97, 97, 97, 80,
	80, 80, 80, 80, 80, 80, 80, 82, 82, 82,
	102, 102, 103, 103, 104, 104, 105, 105, 108, 110,
	110, 110, 111, 111, 111, 111, 112, 112, 112, 79,
	79, 79, 79, 79, 79, 113, 113, 113, 113, 117,
	117, 92, 92, 94, 94, 93, 95, 118, 118, 121,
	121, 121, 121, 120, 120, 120, 153, 153, 153, 124,
	124, 133, 133, 134, 134, 125, 125, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 139, 139, 138,
	138, 138, 135, 135, 135, 136, 136, 152, 152, 148,
	148, 149, 149, 154, 154, 155, 155, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 221, 222, 144, 145,
	145, 145,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 15, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 1, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 3, 0,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 3, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 3, 3, 2, 4,
	5, 2, 3, 4, 2, 2, 3, 3, 3, 3,
	3, 4, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 3, 1, 0, 3, 3, 0, 2,
	2, 2, 1, 2, 1, 2, 5, 4, 0, 1,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 1, 3, 3, 3, 1, 10, 11, 11, 12,
	12, 1, 1, 0, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 0, 2, 1, 1, 1, 6, 10, 9,
	7, 7, 7, 9, 7, 12, 14, 7, 7, 9,
	9, 10, 5, 6, 8, 0, 1, 2, 4, 7,
	5, 5, 5, 12, 7, 5, 9, 0, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 4, 4, 4, 4, 3, 2,
	3, 4, 4, 3, 6, 6, 4, 4, 4, 4,
	4, 3, 3, 2, 6, 2, 3, 4, 3, 7,
	6, 5, 4, 2, 4, 3, 4, 3, 3, 5,
	2, 3, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 0, 3, 1, 1, 2, 2,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 2, 6, 1, 4, 6, 3, 2,
	0, 3, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 5, 6, 4, 4, 3,
	6, 6, 6, 8, 8, 8, 8, 9, 4, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -219, -1, -2, -6, -7, -8, -9, -10, -12,
	-22, -13, -14, -15, -28, -29, -30, -35, -36, -37,
	-33, -32, -31, -16, -3, -4, 6, 7, -41, 9,
	10, 29, -26, 117, -23, -24, -25, 120, 119, 156,
	121, 149, 52, 178, 179, 181, 182, -224, -142, 154,
	155, 30, 31, 123, -221, 8, 271, 118, 151, 150,
	25, 56, -220, 369, -104, 15, -40, 5, -38, -225,
	-38, -38, -38, -38, -38, -193, -195, 56, 92, -136,
	130, 74, 263, 126, -143, 127, -135, 177, 33, 137,
	136, 127, 127, 128, 130, 263, 126, 164, 127, -69,
	-154, 59, -147, 281, 140, 313, 314, 178, 189, 183,
	217, 205, 282, 315, 141, 203, 206, 250, 139, 316,
	237, 245, 68, 181, 259, 317, 152, 201, 194, 318,
	290, 192, 27, 319, 247, 222, 320, 286, 193, 246,
	123, 321, 143, 137, 322, 223, 227, 323, 251, 324,
	325, 326, 187, 188, 327, 253, 221, 138, 32, 283,
	37, 161, 254, 225, 328, 220, 215, 329, 330, 331,
	332, 219, 186, 214, 41, 229, 228, 230, 249, 208,
	333, 334, 335, 144, 336, 195, 18, 337, 338, 339,
	340, 341, 257, 155, 342, 159, 343, 344, 345, 346,
	347, 348, 248, 224, 226, 134, 163, 285, 349, 255,
	191, 350, 145, 160, 154, 258, 146, 351, 352, 353,
	354, 355, 356, 357, 182, 358, 359, 360, 361, 171,
	252, 261, 40, 234, 362, 185, 136, 363, 179, 168,
	240, 212, 162, 364, 365, 199, 200, 218, 184, 213,
	180, 164, 165, 156, 366, 260, 235, 287, 207, 204,
	169, 367, 130, 166, 167, 368, 241, 242, 170, 284,
	256, 202, 236, 127, 110, 206, 250, 117, 238, 239,
	247, -187, 248, 163, -159, 127, -127, 237, 241, 242,
	170, 59, 128, 129, 32, 252, 251, 243, -154, 180,
	-47, 121, 157, -69, -144, -144, -144, 240, 240, -144,
	-2, -125, 130, 242, 132, -111, 17, 16, -5, -3,
	-221, 6, 20, 21, -44, 42, 43, -39, -51, 101,
	-52, -154, -76, 76, -81, 28, 59, -147, 23, -80,
	-77, -97, -95, -96, 110, 111, 112, 99, 100, 107,
	77, 113, -86, -84, -85, -87, 61, 60, 69, 62,
	63, 64, 65, 70, 71, 72, -148, -93, -221, 46,
	47, 126, 272, 273, 274, 275, 280, 147, 276, 79,
	36, 262, 270, 269, 268, 266, 267, 264, 265, 278,
	279, 133, 263, 105, 271, -125, -125, 11, -62, -63,
	-69, -71, -154, -118, -158, 180, -121, 252, 251, -97,
	-120, -148, -154, 250, 206, 249, -194, 92, -183, 59,
	-69, 128, -69, 271, -134, 133, -134, 164, -134, 84,
	-27, -69, -133, 133, -148, 59, -147, -133, -133, -133,
	-133, -69, 114, -69, 59, 29, -145, -221, -149, -148,
	-146, 122, 148, 288, 75, 22, 24, 232, 78, 110,
	16, 79, 109, 272, 117, 50, 289, 264, 265, 262,
	274, 275, 263, 238, 28, 10, 291, 25, 150, 21,
	103, 119, 82, 83, 153, 23, 151, 72, 147, 294,
	19, 53, 11, 13, 295, 296, 14, 133, 132, 94,
	128, 48, 8, 113, 26, 91, 44, 297, 34, 298,
	299, 300, 301, 46, 92, 17, 266, 267, 30, 302,
	280, 158, 105, 51, 38, 76, 303, 304, 70, 305,
	73, 54, 74, 15, 49, 306, 307, 308, 309, 93,
	120, 271, 47, 310, 126, 6, 277, 29, 149, 45,
	311, 127, 81, 278, 279, 131, 71, 5, 33, 31,
	9, 52, 55, 268, 269, 270, 36, 80, 12, 312,
	263, 126, 59, 163, 127, 164, 130, -145, -145, -189,
	11, 94, -145, 168, 169, -145, -130, -129, 165, 245,
	246, 240, 244, 12, -53, 92, 169, 240, 167, -145,
	-34, -2, -9, -7, -8, -2, 84, -144, -144, -222,
	58, 127, -69, 117, 119, 122, 54, -112, 19, 30,
	-52, -154, -105, -108, -52, -104, -2, -38, 38, -42,
	20, 21, 67, 11, -151, 75, 74, 91, -150, 22,
	-148, 61, 114, -52, -78, 94, 76, 92, 93, 78,
	96, 95, 106, 99, 100, 101, 102, 103, 104, 105,
	97, 98, 109, 84, 85, 86, 87, 88, 89, 90,
	-126, -221, -96, -221, 115, 116, -81, -81, -81, -81,
	-81, -81, -81, -81, -221, -2, -91, -52, -221, -221,
	-221, -221, -221, -221, -221, -221, -221, -221, -221, -100,
	-52, -221, -226, -88, -221, -226, -88, -226, -88, -226,
	-221, -226, -88, -226, -88, -226, -226, -88, -221, -221,
	-221, -221, -221, -221, -70, 26, -69, -55, -56, -57,
	-58, -72, -96, -221, -69, -69, -62, -223, 57, 11,
	55, -223, 57, 114, 57, -118, 180, -119, -122, 253,
	255, 84, -153, -148, 61, 28, 114, 29, 58, 57,
	-69, -161, -165, -167, -166, -168, -163, -164, 203, 206,
	210, 208, 204, 209, 110, 207, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 29, 152, 199,
	200, 201, 202, 223, 224, 225, 226, 227, 228, 229,
	230, 183, 205, 282, 184, 185, 186, 187, 188, 189,
	191, 192, 193, 194, 195, 196, 197, -148, 22, 130,
	59, 76, 59, 59, -69, 59, 57, 131, -62, 23,
	54, -64, -69, 59, 59, 59, -155, -154, -146, -145,
	-145, -134, -134, -145, -145, -69, -69, -69, -69, -145,
	-145, 11, -128, 11, 94, -128, -52, -81, -132, 92,
	54, 59, -69, -145, 166, 166, 127, 127, 171, -69,
	9, 94, 57, 18, 114, 57, -110, 24, 25, -111,
	-222, -44, -82, -148, 62, 65, -43, 45, -69, -52,
	-52, -89, 70, 76, 71, 72, -150, 101, -155, -149,
	-146, -81, -90, -93, -96, 66, 94, 92, 93, 78,
	-81, -81, -81, -81, -81, -81, -81, -81, -81, -81,
	-81, -81, -81, -81, -81, -157, 59, 61, 59, -80,
	-80, -148, -42, -222, 57, -222, -2, -49, -51, -49,
	-222, -52, -52, -97, 61, -49, -97, 61, -49, -49,
	-49, -42, -98, -99, 80, -97, -222, -81, -148, -148,
	-49, -50, -49, -49, -49, -115, 159, -69, 29, 57,
	-65, -67, -66, -68, 44, 48, 50, 45, 46, 47,
	51, -140, 22, -55, -221, -73, 159, -74, 22, -156,
	52, 132, 53, -154, 61, -115, 55, -55, -69, -55,
	-71, -154, 101, -121, -119, 57, 254, 256, 257, 54,
	73, -52, -174, 109, -149, -155, -196, -197, -198, -149,
	61, 62, -183, -184, -185, -199, 142, -205, 134, 136,
	33, -186, 143, 128, 34, 58, -162, -175, 235, -169,
	56, -169, -169, 211, 203, 206, 204, -169, -169, -169,
	-169, -169, -173, 206, -173, -173, -173, -173, 204, 56,
	56, -169, -169, -169, -177, 56, -177, 198, -177, -178,
	56, -178, -178, -178, -152, 55, -109, -69, -145, 23,
	-145, -20, 174, 148, -69, -69, -69, 57, 59, 59,
	-190, 11, 94, -69, -83, 22, -154, -154, -131, 92,
	12, -48, 153, 61, -69, -137, 122, 119, 120, 124,
	125, -208, 118, 232, 206, 68, 28, 15, 272, 159,
	287, 59, 160, -69, -69, -69, -69, -69, 122, 119,
	40, -52, -52, -108, -112, -124, 19, 11, 36, 36,
	-49, 70, 71, 72, 114, -221, -90, -81, -81, -81,
	-48, 75, -222, -50, -52, -222, 57, -222, -222, 57,
	55, 22, 11, 11, -222, 11, 11, -222, -222, -222,
	-49, -101, -99, 82, -52, -222, -222, 57, 57, -222,
	-222, -222, -222, -79, 29, 36, -2, -221, -221, -118,
	-56, -57, -57, -56, -57, 44, 44, 44, 49, 44,
	49, 44, -66, -154, -222, -221, 305, -156, -74, 128,
	128, 128, -75, 12, -55, -75, -75, 114, -122, -123,
	258, 255, 261, 59, 61, 114, 57, -198, 84, 56,
	59, 34, -186, -186, -191, 59, -191, 34, -179, -171,
	-172, -180, -181, -170, 70, 76, 28, 54, 232, 134,
	34, 33, 68, -176, 236, 62, -173, -173, -169, -169,
	-169, 211, -169, -173, -174, 29, -174, -174, -174, -174,
	-173, -182, 61, -182, 62, -177, 62, 54, -148, -2,
	22, -21, 8, 9, 10, 131, -145, -69, -145, -145,
	-75, 59, 59, -128, -131, 305, 61, -52, -81, -144,
	-141, -214, -186, -218, -185, 135, 139, 142, 143, 134,
	159, -141, -214, 142, -186, 143, 135, -138, -186, 131,
	22, -141, -141, 159, -213, 55, 166, 232, 166, 41,
	-69, -54, 11, 101, -149, -50, -48, 75, -81, -222,
	-51, -160, 110, 203, 152, 201, 194, 221, 208, 234,
	199, 235, -157, -160, -81, -81, -81, -81, 281, -104,
	83, -52, 81, -81, -81, -117, 54, -118, -92, -94,
	-93, -221, -2, -113, -148, -116, -148, -75, -60, -59,
	54, 55, -61, 54, -59, 44, 44, -116, -81, -74,
	-221, -221, -221, -104, -52, -75, 255, 259, 260, -197,
	-198, -201, -200, -148, -205, -191, -191, 56, 70, -81,
	9, 34, 34, 61, 58, -174, -174, -173, -169, -174,
	59, 110, -174, 58, 57, 58, 57, 58, 57, -69,
	-109, -109, 54, -69, -131, -81, 56, -183, -144, -191,
	-135, 59, 59, -144, 59, -148, 34, 59, -69, -148,
	-183, 59, -148, -211, 284, -212, 59, -148, -148, -148,
	-75, -55, -222, -81, -222, -169, -169, -169, -178, -169,
	188, -169, 188, -222, -222, 19, 19, 19, 19, -221,
	-46, 277, -52, 57, 57, 27, -117, 57, -222, -222,
	-222, 57, 114, -222, 57, -104, -52, 56, -52, -222,
	-74, -140, -114, -148, -114, -114, -111, 58, 57, -169,
	-114, -85, -174, -173, 61, -173, 62, 62, 56, -2,
	-69, -183, -106, 147, 148, -152, -188, -186, 59, -139,
	131, 22, 131, -106, -183, 26, -210, -209, -149, 56,
	55, -102, 13, -173, 59, -81, -81, -81, -81, -81,
	-222, 61, -81, -81, 34, -94, 36, -2, -221, -148,
	-148, -148, -111, -114, -73, -156, 57, -222, -222, -222,
	-203, -202, 55, 138, 68, -200, -110, 58, -174, -174,
	58, 58, -201, -109, 19, 58, -144, 59, 56, -191,
	59, -148, -144, -106, -221, 57, 84, -114, -69, -103,
	14, 16, -222, -222, -222, -222, -45, 94, 284, -222,
	-222, 9, -92, -2, 114, 58, -74, -148, -202, 59,
	-192, 84, 61, 145, 58, 172, -144, -201, -152, -144,
	-206, -207, 159, -209, -198, 58, -52, -91, -222, 282,
	51, 285, -118, -222, -148, 62, -69, -204, -203, 173,
	58, 56, -222, 57, -148, -213, 41, 283, 286, 56,
	-107, 175, 176, -204, -201, -207, 36, -211, 41, -114,
	-109, 59, 59, 58, 161, 284, 58, -11, -17, -10,
	-7, -8, -9, 178, -204, 162, 285, -216, -217, 54,
	-109, -19, -18, -2, -7, -8, -9, -10, -17, -221,
	286, -217, 54, -216, 54, 10, 9, 369, -81, 158,
	-215, 146, 141, 144, 29, -215, 83, -18, -222, -222,
	140, 28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 654, 0, 405, 405, 405, 405,
	405, 405, 0, -2, 274, 275, 276, 0, 0, 0,
	0, -2, 381, 382, 0, 384, 385, 394, -2, 1028,
	1028, 0, 0, 1028, 0, 37, 38, 705, 397, 386,
	387, 1026, 1, 3, 662, 0, 0, 409, 412, 407,
	0, 705, 705, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 703, 703, 0, 703, 726, 0, 722, 723,
	724, 0, 701, 0, 701, 701, 701, 701, 0, 329,
	482, 733, 734, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 0, 0, 0, 1029, 0, 1029, 1029,
	343, 0, 345, 1029, 0, 1029, 0, 353, 0, 0,
	360, 1029, 232, 233, 234, 378, 379, 366, 380, 383,
	0, 0, 0, 398, 399, 400, 401, 1028, 1028, 404,
	31, 0, 0, 0, 706, 666, 0, 0, 654, 33,
	0, 405, 410, 411, 415, 413, 414, 406, 0, 424,
	428, 0, 491, 0, 496, 498, -2, -2, 0, 533,
	534, 535, 536, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 562, 563, 564, 639, 640, 641, 642,
	643, 644, 645, 646, 500, 501, 636, 686, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 598, 598, 598, 598, 598, 598, 598, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 50, 482, 54, 0, 1003, 687, -2, -2, 0,
	0, 636, 0, -2, 869, -2, 0, 0, 114, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 729, 730, 0, 0, 0,
	0, 328, 0, 330, 1029, 1029, 333, 1030, 1031, 731,
	732, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	703, 703, 1029, 1029, 0, 0, 0, 341, 342, 0,
	251, 252, 346, 1029, 1029, 348, 0, 369, 369, 367,
	368, 363, 364, 0, 355, 0, 375, 357, 358, 361,
	388, -2, 391, 392, 393, -2, 0, 402, 403, 32,
	1027, 0, 1029, 0, 0, 0, 0, 26, 0, 0,
	663, 0, 655, 656, 659, 662, 31, 412, 0, 418,
	416, 417, 408, 0, 425, 0, 0, 0, 429, 0,
	431, 432, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 518, 519, 520, 521, 522, 523, 524,
	497, 0, 511, 0, 0, 0, 553, 554, 555, 556,
	557, 558, 559, 0, 415, 31, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 415, 0,
	628, 0, 582, 590, 0, 583, 591, 584, 592, 585,
	0, 586, 593, 587, 594, 588, 589, 595, 0, 0,
	0, 420, 0, 0, 52, 0, 481, 0, 435, 437,
	438, 439, -2, 0, 485, -2, 0, 0, 0, 44,
	45, 0, 0, 0, 0, 55, 1003, 57, 58, 0,
	0, 0, 208, 696, 697, 698, 0, 694, 263, 0,
	0, 119, 196, 127, 128, 129, 189, 131, 189, 189,
	0, 189, 189, 189, 189, 189, 205, 205, 205, 205,
	205, 172, 173, 174, 175, 176, 0, 0, 149, 189,
	189, 189, 153, 179, 180, 181, 182, 183, 184, 185,
	186, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	191, 191, 191, 193, 193, 193, 193, 727, 69, 0,
	1029, 0, 1029, 0, 110, 79, 0, 0, 322, 702,
	0, 324, 46, 325, 326, 327, 483, 735, 736, 331,
	332, 0, 0, 336, 337, 338, 339, 340, 253, 347,
	352, 0, 450, 0, 0, 372, 354, 525, 356, 0,
	0, 395, 0, 298, 0, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 0, 658, 660, 661, 666,
	34, 415, 0, 647, 0, 0, 0, 419, 29, 492,
	493, 495, 512, 0, 514, 516, 430, 426, 0, 637,
	-2, 502, 503, 527, 528, 529, 0, 0, 0, 0,
	525, 507, 0, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 552, 612, 613, 0, 550,
	551, 560, 420, 530, 0, 685, 31, 0, 422, 0,
	569, 0, 0, 535, 639, 0, 535, 639, 0, 0,
	0, 0, 634, 631, 0, 0, 599, 0, 0, 0,
	0, 0, 421, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 0, 0, 470, 0, 0, 473, 0, 0,
	0, 0, 467, 0, 0, 443, 948, 445, 0, 485,
	0, 0, 0, 468, 469, 489, 0, 489, 49, 489,
	51, 0, 484, 688, 56, 0, 0, 61, 62, 689,
	690, 691, 692, 0, 637, 0, 111, 264, 266, 269,
	270, 271, 115, 116, 117, 0, 0, 245, 0, 0,
	239, 239, 0, 235, 236, 113, 118, 198, 197, 130,
	0, 205, 205, 189, 189, 189, 189, 158, 205, 161,
	164, 165, 208, 0, 208, 208, 208, 208, 205, 0,
	0, 150, 151, 152, 141, 0, 142, 191, 144, 145,
	0, 146, 147, 148, 0, 0, 0, 0, 75, 704,
	76, 0, 80, 81, 0, 320, 1029, 0, 1029, 1029,
	489, 0, 0, 369, 372, 0, 370, 371, 351, 0,
	0, 362, 0, 376, 359, 1028, -2, 307, 719, 307,
	307, 292, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 0, 102, 300, 302, 301, 305, 0, 0,
	0, 664, 665, 657, 27, 0, 699, 700, 648, 649,
	433, 513, 515, 517, 0, 420, 504, 525, 508, 0,
	505, 0, 499, 0, 532, -2, 0, 567, 568, 0,
	0, 0, 0, 0, 605, 0, 0, 606, 0, 578,
	654, 0, 632, 0, 0, 581, 600, 0, 0, 601,
	602, 603, 604, 679, 0, 0, -2, 0, 0, 489,
	436, 462, 464, 0, 459, 471, 472, 474, 0, 476,
	0, 478, 479, 440, 442, 0, 0, 485, 449, 0,
	0, 0, 654, 0, 489, 42, 43, 0, 59, 60,
	0, 0, 66, 209, 210, 0, 0, 267, 0, 0,
	0, 227, 239, 239, 230, 240, 231, 0, 120, 121,
	122, 123, 124, 125, 200, 0, 0, 0, 204, 0,
	212, 214, 0, 126, 199, 0, 208, 208, 205, 156,
	157, 189, 162, 208, 166, 0, 167, 168, 169, 170,
	208, 0, 187, 0, 0, 143, 0, 0, 728, -2,
	69, 0, 82, 83, 84, 0, 323, 47, 334, 335,
	344, 254, 255, 372, 350, 0, 373, 374, 526, 277,
	0, 1028, 239, 0, 293, 308, 309, 310, 311, 312,
	313, 0, 1028, 310, 0, 311, 0, 0, 0, 720,
	721, 0, 0, 0, 105, 0, 0, 0, 0, 668,
	28, 489, 0, 427, 638, 0, 506, 0, 509, 565,
	423, 0, 189, 189, 617, 189, 193, 620, 189, 622,
	189, 625, 0, 0, 0, 0, 0, 0, 0, 629,
	580, 635, 0, 0, 0, 35, 0, 679, 669, 681,
	683, 0, 31, 0, 675, 0, 454, 654, 456, 463,
	0, 0, 457, 0, 458, 475, 477, 0, -2, 448,
	0, 0, 0, 662, 490, 41, 63, 64, 65, 265,
	268, 0, 241, 189, 244, 228, 229, 0, 201, 202,
	0, 211, 213, 215, 190, 154, 155, 208, 163, 159,
	206, 207, 171, 205, 0, 205, 0, 194, 0, 0,
	73, 0, 0, 321, 349, 451, 0, 295, 280, 727,
	237, 273, 281, 282, 287, 288, 0, 0, 284, 0,
	295, 0, 0, 299, 0, 103, 104, 0, 0, 304,
	650, 434, 566, 510, 570, 614, 205, 618, 619, 621,
	623, 624, 626, 572, 571, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 0, 36, 0, 684, -2,
	0, 0, 0, 53, 0, 662, 460, 0, 465, 485,
	446, 0, 0, 452, 0, 0, 40, 217, 0, 659,
	0, 203, 160, 208, 188, 208, 0, 0, 0, -2,
	0, 0, 1028, 296, 0, 0, 239, 238, 294, 0,
	717, 718, 0, 1028, 295, 0, 106, 107, 0, 0,
	0, 652, 0, 615, 616, 0, 0, 0, 0, 607,
	579, 630, 0, 0, 0, 682, 0, -2, 0, 677,
	676, 455, 39, 0, 444, 485, 0, 486, 487, 488,
	216, 220, 0, 225, 0, 242, 243, 0, 177, 178,
	192, 195, 0, 74, 0, 1028, 279, 297, 0, 727,
	283, 289, 290, 1028, 0, 0, 0, 0, 306, 30,
	0, 0, 573, 575, 574, 576, 0, 0, 0, 596,
	597, 0, 672, 31, 0, 461, 447, 453, 221, 222,
	0, 226, 224, 0, 218, 0, 278, 0, 0, 291,
	0, 315, 0, 108, 109, 102, 653, 651, 577, 0,
	0, 0, 680, -2, 678, 223, 0, 72, 219, 85,
	218, 0, 314, 0, 0, 105, 608, 0, 611, 0,
	69, 0, 0, 285, 0, 316, 0, 303, 609, 0,
	0, 86, 87, 218, 0, 0, 246, 69, 88, 89,
	90, 91, 92, 0, 286, 0, 0, 247, 248, 0,
	77, 0, 94, -2, 97, 98, 99, 100, 101, 0,
	610, 249, 0, 250, 0, 0, 0, 0, 0, 0,
	256, 258, 259, 0, 0, 257, 93, 95, 317, 318,
	260, 261, 262,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 369,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:343
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:348
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:353
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:377
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:383
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:401
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:408
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:424
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:428
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:435
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:447
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:469
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:475
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:492
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:493
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:497
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:501
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:507
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:511
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:526
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:530
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:536
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:605
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:619
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:625
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:641
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:650
		{
			yyVAL.empty = struct{}{}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:654
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.str = BeforeStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:664
		{
			yyVAL.str = AfterStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.str = InsertStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.str = UpdateStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = DeleteStr
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:683
		{
			yyVAL.triggerOrder = nil
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:687
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:707
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:717
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:733
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:748
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:764
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:770
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:776
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:787
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:809
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:817
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:823
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:845
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:863
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:881
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1171
		{
			yyVAL.sqlVal = nil
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1184
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1192
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1202
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1210
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1219
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1246
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = ""
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1265
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1284
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.colKeyOpt = colKey
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1292
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1302
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1308
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1312
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1317
		{
			yyVAL.indexOptions = nil
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1321
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1337
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1341
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1346
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1352
		{
			yyVAL.str = ""
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1356
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1366
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1378
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1384
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1388
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1398
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1407
		{
			yyVAL.str = ""
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1411
		{
			yyVAL.str = yyDollar[1].str
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1416
		{
			yyVAL.str = ""
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1426
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1430
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1436
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1442
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1446
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 246:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1453
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 247:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1457
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 248:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1461
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 249:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1465
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 250:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1469
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1479
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1498
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1504
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1514
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1539
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = yyDollar[1].str
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1561
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1565
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1569
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1593
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 279:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1600
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1623
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 285:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 286:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1636
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 289:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1649
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 291:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1656
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1662
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1666
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1678
		{
			yyVAL.columnOrder = nil
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1686
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 299:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1768
		{
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1781
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 317:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1797
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 318:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1801
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1817
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1825
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1833
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1837
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1845
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1849
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1853
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1878
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1883
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1887
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1891
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1900
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1904
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1908
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1928
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1932
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1936
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1944
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1948
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1952
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1957
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1967
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1975
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1979
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1985
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1993
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1998
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2002
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2006
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2010
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2024
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2030
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.str = "full "
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2080
		{
			yyVAL.showFilter = nil
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2084
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2088
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2094
		{
			yyVAL.showFilter = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2098
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = ""
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2108
		{
			yyVAL.str = SessionStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = GlobalStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.statement = &Begin{}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2132
		{
			yyVAL.statement = &Begin{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.statement = &Commit{}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.statement = &Rollback{}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2187
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2191
		{
			yyVAL.statement = &OtherRead{}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2197
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2201
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2205
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2219
		{
			setAllowComments(yylex, true)
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2223
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2229
		{
			yyVAL.bytes2 = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2233
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = UnionStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.str = UnionAllStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = UnionDistinctStr
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = SQLCacheStr
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2273
		{
			yyVAL.str = DistinctStr
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2278
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.str = StraightJoinHint
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2287
		{
			yyVAL.selectExprs = nil
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2301
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2311
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2319
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2339
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2344
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2348
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2382
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2393
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2404
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2408
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2412
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2416
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2420
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = nil
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2451
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2468
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2472
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2476
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2480
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2486
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2488
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2492
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2494
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2498
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2503
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2510
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
			yyVAL.str = JoinStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.str = JoinStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.str = JoinStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.str = StraightJoinStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.str = LeftJoinStr
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2540
		{
			yyVAL.str = LeftJoinStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2544
		{
			yyVAL.str = RightJoinStr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2548
		{
			yyVAL.str = RightJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2554
		{
			yyVAL.str = NaturalJoinStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2582
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2593
		{
			yyVAL.indexHints = nil
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2597
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2601
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2605
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2650
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2654
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.str = IsNullStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = IsNotNullStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = IsTrueStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.str = IsNotTrueStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.str = IsFalseStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.str = IsNotFalseStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.str = EqualStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			yyVAL.str = LessThanStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.str = GreaterThanStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2750
		{
			yyVAL.str = LessEqualStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.str = GreaterEqualStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.str = NotEqualStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = nil
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2791
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2801
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2907
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2961
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2969
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2973
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 571:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 573:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2989
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2993
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 576:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2997
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 577:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3009
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3013
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3017
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3040
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3045
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3056
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 597:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3107
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3117
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3133
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3143
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3147
		{
			yyVAL.str = BooleanModeStr
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3151
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3155
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			yyVAL.str = QueryExpansionStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3175
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3179
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3183
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3191
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3195
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3225
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3230
		{
			yyVAL.expr = nil
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3234
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3239
		{
			yyVAL.str = string("")
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3243
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3253
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3259
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = nil
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3268
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3278
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3282
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3308
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3312
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.expr = &NullVal{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3331
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3335
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3340
		{
			yyVAL.exprs = nil
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3344
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3349
		{
			yyVAL.expr = nil
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3353
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3358
		{
			yyVAL.orderBy = nil
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3362
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3372
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3378
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3383
		{
			yyVAL.str = AscScr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.str = AscScr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			yyVAL.str = DescScr
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3396
		{
			yyVAL.limit = nil
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3400
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3404
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3408
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3413
		{
			yyVAL.str = ""
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3417
		{
			yyVAL.str = ForUpdateStr
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3421
		{
			yyVAL.str = ShareModeStr
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3434
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3442
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3447
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3451
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3455
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3462
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3466
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3470
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3474
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3479
		{
			yyVAL.setExprs = nil
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3483
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3489
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3493
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3499
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3503
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3509
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3525
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3529
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3535
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3539
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3543
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3554
		{
			yyVAL.bytes = []byte("charset")
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.expr = &Default{}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3578
		{
			yyVAL.byt = 0
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3580
		{
			yyVAL.byt = 1
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3583
		{
			yyVAL.byt = 0
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3585
		{
			yyVAL.byt = 1
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3588
		{
			yyVAL.str = ""
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.str = IgnoreStr
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3596
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3598
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3600
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3602
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3604
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3606
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3608
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3610
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3616
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3618
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3621
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3629
		{
			yyVAL.str = UniqueStr
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3631
		{
			yyVAL.str = FulltextStr
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3633
		{
			yyVAL.str = SpatialStr
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3636
		{
			yyVAL.str = ""
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3638
		{
			yyVAL.str = yyDollar[1].str
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3641
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3643
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3647
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3651
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3658
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3668
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3675
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3990
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3999
		{
			decNesting(yylex)
		}
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4004
		{
			skipToEnd(yylex)
		}
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4009
		{
			skipToEnd(yylex)
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4013
		{
			skipToEnd(yylex)
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4017
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
