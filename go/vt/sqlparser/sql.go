// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	statements           Statements
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	setExprs             SetExprs
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	triggerOrder         *TriggerOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const TRIGGERS = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const EACH = 57497
const ROW = 57498
const BEFORE = 57499
const FOLLOWS = 57500
const PRECEDES = 57501
const DEFINER = 57502
const BEGIN = 57503
const START = 57504
const TRANSACTION = 57505
const COMMIT = 57506
const ROLLBACK = 57507
const BIT = 57508
const TINYINT = 57509
const SMALLINT = 57510
const MEDIUMINT = 57511
const INT = 57512
const INTEGER = 57513
const BIGINT = 57514
const INTNUM = 57515
const REAL = 57516
const DOUBLE = 57517
const FLOAT_TYPE = 57518
const DECIMAL = 57519
const NUMERIC = 57520
const DEC = 57521
const FIXED = 57522
const PRECISION = 57523
const TIME = 57524
const TIMESTAMP = 57525
const DATETIME = 57526
const YEAR = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NATIONAL = 57535
const VARYING = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const LONG = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const ENUM = 57547
const GEOMETRY = 57548
const POINT = 57549
const LINESTRING = 57550
const POLYGON = 57551
const GEOMETRYCOLLECTION = 57552
const MULTIPOINT = 57553
const MULTILINESTRING = 57554
const MULTIPOLYGON = 57555
const NULLX = 57556
const AUTO_INCREMENT = 57557
const APPROXNUM = 57558
const SIGNED = 57559
const UNSIGNED = 57560
const ZEROFILL = 57561
const COLLATION = 57562
const DATABASES = 57563
const SCHEMAS = 57564
const TABLES = 57565
const VITESS_METADATA = 57566
const VSCHEMA = 57567
const FULL = 57568
const PROCESSLIST = 57569
const COLUMNS = 57570
const FIELDS = 57571
const ENGINES = 57572
const PLUGINS = 57573
const NAMES = 57574
const CHARSET = 57575
const GLOBAL = 57576
const SESSION = 57577
const ISOLATION = 57578
const LEVEL = 57579
const READ = 57580
const WRITE = 57581
const ONLY = 57582
const REPEATABLE = 57583
const COMMITTED = 57584
const UNCOMMITTED = 57585
const SERIALIZABLE = 57586
const CURRENT_TIMESTAMP = 57587
const DATABASE = 57588
const CURRENT_DATE = 57589
const CURRENT_TIME = 57590
const LOCALTIME = 57591
const LOCALTIMESTAMP = 57592
const UTC_DATE = 57593
const UTC_TIME = 57594
const UTC_TIMESTAMP = 57595
const REPLACE = 57596
const CONVERT = 57597
const CAST = 57598
const SUBSTR = 57599
const SUBSTRING = 57600
const GROUP_CONCAT = 57601
const SEPARATOR = 57602
const TIMESTAMPADD = 57603
const TIMESTAMPDIFF = 57604
const MATCH = 57605
const AGAINST = 57606
const BOOLEAN = 57607
const LANGUAGE = 57608
const WITH = 57609
const QUERY = 57610
const EXPANSION = 57611
const UNUSED = 57612
const ARRAY = 57613
const CUME_DIST = 57614
const DESCRIPTION = 57615
const DENSE_RANK = 57616
const EMPTY = 57617
const EXCEPT = 57618
const FIRST_VALUE = 57619
const GROUPING = 57620
const GROUPS = 57621
const JSON_TABLE = 57622
const LAG = 57623
const LAST_VALUE = 57624
const LATERAL = 57625
const LEAD = 57626
const MEMBER = 57627
const NTH_VALUE = 57628
const NTILE = 57629
const OF = 57630
const OVER = 57631
const PERCENT_RANK = 57632
const RANK = 57633
const RECURSIVE = 57634
const ROW_NUMBER = 57635
const SYSTEM = 57636
const WINDOW = 57637
const ACTIVE = 57638
const ADMIN = 57639
const BUCKETS = 57640
const CLONE = 57641
const COMPONENT = 57642
const DEFINITION = 57643
const ENFORCED = 57644
const EXCLUDE = 57645
const FOLLOWING = 57646
const GEOMCOLLECTION = 57647
const GET_MASTER_PUBLIC_KEY = 57648
const HISTOGRAM = 57649
const HISTORY = 57650
const INACTIVE = 57651
const INVISIBLE = 57652
const LOCKED = 57653
const MASTER_COMPRESSION_ALGORITHMS = 57654
const MASTER_PUBLIC_KEY_PATH = 57655
const MASTER_TLS_CIPHERSUITES = 57656
const MASTER_ZSTD_COMPRESSION_LEVEL = 57657
const NESTED = 57658
const NETWORK_NAMESPACE = 57659
const NOWAIT = 57660
const NULLS = 57661
const OJ = 57662
const OLD = 57663
const OPTIONAL = 57664
const ORDINALITY = 57665
const ORGANIZATION = 57666
const OTHERS = 57667
const PATH = 57668
const PERSIST = 57669
const PERSIST_ONLY = 57670
const PRECEDING = 57671
const PRIVILEGE_CHECKS_USER = 57672
const PROCESS = 57673
const RANDOM = 57674
const REFERENCE = 57675
const REQUIRE_ROW_FORMAT = 57676
const RESOURCE = 57677
const RESPECT = 57678
const RESTART = 57679
const RETAIN = 57680
const REUSE = 57681
const ROLE = 57682
const SECONDARY = 57683
const SECONDARY_ENGINE = 57684
const SECONDARY_LOAD = 57685
const SECONDARY_UNLOAD = 57686
const SKIP = 57687
const SRID = 57688
const THREAD_PRIORITY = 57689
const TIES = 57690
const UNBOUNDED = 57691
const VCPU = 57692
const VISIBLE = 57693

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 33,
	164, 78,
	-2, 724,
	-1, 41,
	168, 376,
	169, 376,
	-2, 364,
	-1, 48,
	1, 1027,
	369, 1027,
	-2, 395,
	-1, 335,
	114, 732,
	-2, 728,
	-1, 336,
	114, 733,
	-2, 729,
	-1, 406,
	84, 982,
	114, 982,
	-2, 67,
	-1, 407,
	84, 900,
	114, 900,
	-2, 68,
	-1, 412,
	84, 869,
	114, 869,
	-2, 692,
	-1, 414,
	84, 930,
	114, 930,
	-2, 694,
	-1, 599,
	5, 31,
	-2, 389,
	-1, 603,
	5, 31,
	-2, 388,
	-1, 730,
	1, 440,
	5, 440,
	12, 440,
	13, 440,
	14, 440,
	15, 440,
	17, 440,
	19, 440,
	29, 440,
	30, 440,
	44, 440,
	45, 440,
	46, 440,
	47, 440,
	48, 440,
	50, 440,
	51, 440,
	54, 440,
	55, 440,
	57, 440,
	58, 440,
	369, 440,
	-2, 465,
	-1, 733,
	55, 48,
	57, 48,
	-2, 52,
	-1, 897,
	114, 735,
	-2, 731,
	-1, 1103,
	56, 307,
	59, 307,
	-2, 272,
	-1, 1152,
	5, 32,
	-2, 529,
	-1, 1183,
	5, 31,
	-2, 669,
	-1, 1276,
	5, 31,
	-2, 69,
	-1, 1385,
	1, 484,
	5, 484,
	12, 484,
	13, 484,
	14, 484,
	15, 484,
	17, 484,
	19, 484,
	29, 484,
	30, 484,
	44, 484,
	45, 484,
	46, 484,
	47, 484,
	48, 484,
	50, 484,
	51, 484,
	54, 484,
	55, 484,
	57, 484,
	58, 484,
	369, 484,
	-2, 465,
	-1, 1486,
	5, 32,
	-2, 670,
	-1, 1516,
	5, 31,
	-2, 69,
	-1, 1554,
	5, 31,
	-2, 672,
	-1, 1640,
	5, 32,
	-2, 673,
	-1, 1690,
	369, 96,
	-2, 31,
}

const yyPrivate = 57344

const yyLast = 17437

var yyAct = [...]int{

	367, 54, 1689, 1685, 1707, 1684, 1499, 1644, 1693, 7,
	1628, 1695, 1073, 1450, 1692, 6, 683, 3, 1398, 1321,
	336, 1365, 1691, 5, 1694, 8, 1568, 1519, 1071, 340,
	402, 1534, 873, 1645, 684, 366, 984, 314, 1231, 1399,
	982, 986, 1366, 1028, 353, 978, 1015, 1024, 1362, 1066,
	417, 86, 1095, 1372, 446, 54, 1338, 1014, 1009, 922,
	101, 1376, 1209, 101, 1297, 935, 1021, 319, 1098, 101,
	980, 309, 1298, 958, 444, 746, 849, 1049, 1268, 950,
	1061, 899, 64, 615, 969, 953, 621, 727, 745, 448,
	962, 405, 338, 726, 101, 400, 636, 423, 323, 101,
	397, 101, 833, 735, 408, 1704, 63, 1292, 1697, 1655,
	68, 1683, 101, 1638, 435, 1672, 1451, 1654, 101, 1355,
	1637, 700, 1478, 422, 96, 92, 93, 1003, 94, 627,
	570, 1394, 1395, 1004, 1005, 1393, 327, 701, 70, 71,
	72, 73, 74, 1251, 747, 333, 748, 596, 307, 380,
	1114, 386, 387, 384, 385, 383, 382, 381, 1218, 306,
	1035, 1217, 586, 1113, 1219, 388, 389, 1050, 1037, 55,
	29, 30, 342, 26, 1323, 55, 29, 30, 311, 303,
	313, 425, 26, 427, 55, 29, 30, 1037, 1062, 26,
	31, 55, 29, 30, 1118, 1469, 31, 569, 572, 1041,
	1043, 574, 1042, 1112, 1055, 31, 1050, 1604, 649, 648,
	658, 659, 651, 652, 653, 654, 655, 656, 657, 650,
	595, 1467, 660, 61, 298, 959, 1658, 1659, 1646, 304,
	305, 1622, 61, 308, 571, 573, 1080, 589, 864, 61,
	1324, 590, 587, 588, 581, 582, 594, 863, 1325, 861,
	1713, 1541, 1682, 1109, 1104, 1105, 426, 1103, 1671, 1106,
	1107, 95, 1079, 649, 648, 658, 659, 651, 652, 653,
	654, 655, 656, 657, 650, 1629, 445, 660, 445, 445,
	1320, 963, 865, 445, 1620, 445, 862, 1711, 1520, 1521,
	312, 445, 300, 101, 1116, 1119, 435, 1029, 435, 435,
	54, 54, 1717, 435, 1302, 435, 424, 1243, 600, 1529,
	432, 435, 1248, 1247, 602, 88, 599, 603, 1569, 313,
	54, 1099, 601, 1258, 88, 987, 989, 1528, 301, 1282,
	1064, 1571, 101, 1244, 568, 669, 624, 825, 671, 1680,
	817, 1111, 1040, 1208, 1207, 1680, 1206, 1249, 420, 1241,
	435, 1636, 575, 576, 1680, 1242, 81, 580, 609, 583,
	272, 1031, 91, 672, 673, 597, 682, 1110, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 1162,
	699, 702, 702, 702, 708, 702, 702, 708, 702, 716,
	717, 718, 719, 720, 721, 607, 731, 1605, 1050, 1709,
	623, 1570, 1710, 1611, 1708, 988, 614, 1115, 83, 85,
	1489, 1126, 80, 1246, 1125, 101, 101, 101, 90, 89,
	1222, 1214, 1117, 1159, 1141, 871, 754, 90, 89, 741,
	435, 625, 56, 408, 743, 640, 1527, 101, 56, 440,
	1339, 435, 1031, 445, 445, 1010, 1317, 56, 101, 1031,
	1417, 660, 101, 650, 56, 1030, 660, 101, 1031, 87,
	999, 101, 633, 435, 435, 431, 725, 1232, 868, 611,
	850, 612, 856, 1088, 613, 635, 1031, 1618, 635, 418,
	578, 1593, 1341, 672, 673, 77, 605, 606, 749, 674,
	675, 676, 677, 678, 679, 680, 681, 734, 1097, 634,
	633, 1418, 739, 703, 705, 707, 709, 711, 713, 714,
	670, 1245, 416, 1027, 1031, 604, 635, 836, 837, 704,
	706, 78, 710, 712, 1343, 715, 906, 672, 673, 1347,
	835, 1342, 826, 1340, 428, 1357, 1030, 1158, 1345, 418,
	904, 905, 903, 1030, 951, 82, 874, 875, 870, 1306,
	1302, 1344, 1030, 851, 1303, 1316, 1089, 1310, 1312, 1313,
	436, 437, 438, 579, 1346, 1348, 819, 1718, 730, 591,
	1030, 445, 445, 951, 1307, 1170, 1306, 1302, 1096, 1405,
	630, 1303, 445, 445, 1304, 1305, 1642, 869, 24, 634,
	633, 435, 435, 101, 101, 101, 634, 633, 101, 1514,
	61, 1307, 435, 435, 634, 633, 635, 1513, 1030, 1719,
	902, 445, 1273, 635, 1025, 1271, 1026, 1157, 310, 1156,
	1252, 635, 1023, 1029, 653, 654, 655, 656, 657, 650,
	101, 435, 660, 634, 633, 101, 634, 633, 1619, 923,
	1359, 924, 889, 891, 892, 840, 841, 435, 890, 593,
	635, 1548, 101, 635, 1511, 318, 846, 847, 435, 1669,
	1220, 876, 1221, 852, 1410, 1293, 838, 839, 1138, 1139,
	1140, 1269, 54, 356, 355, 358, 359, 360, 361, 900,
	1100, 1433, 357, 362, 418, 860, 1668, 686, 1563, 1673,
	394, 395, 1505, 1670, 608, 896, 1650, 608, 1505, 1647,
	1563, 1632, 435, 933, 1505, 1621, 742, 1616, 1563, 1612,
	877, 651, 652, 653, 654, 655, 656, 657, 650, 1587,
	1232, 660, 940, 943, 878, 1584, 1563, 1574, 1582, 952,
	897, 418, 981, 1525, 893, 1453, 731, 435, 435, 854,
	731, 1563, 608, 895, 101, 1505, 1504, 1491, 608, 1488,
	608, 1578, 101, 101, 1448, 1444, 101, 101, 1441, 1439,
	101, 101, 101, 1438, 1289, 926, 927, 1425, 1424, 930,
	932, 1288, 408, 1421, 1422, 937, 1227, 435, 658, 659,
	651, 652, 653, 654, 655, 656, 657, 650, 898, 1086,
	660, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 994, 1085, 1019, 1011,
	996, 1016, 929, 1421, 1420, 737, 901, 966, 608, 445,
	26, 445, 1153, 608, 992, 925, 948, 931, 608, 737,
	858, 835, 832, 1001, 1000, 831, 997, 823, 101, 435,
	821, 435, 820, 1181, 897, 101, 101, 818, 954, 101,
	1182, 757, 756, 1051, 1052, 1053, 1054, 1012, 442, 738,
	1577, 740, 1068, 1069, 1070, 1363, 26, 1411, 742, 101,
	61, 101, 101, 738, 1032, 736, 931, 1210, 101, 1210,
	1484, 65, 101, 101, 101, 101, 101, 329, 1592, 1481,
	1063, 1065, 26, 1075, 1329, 1077, 1553, 1142, 966, 971,
	974, 975, 976, 972, 730, 973, 977, 1423, 730, 1377,
	1378, 1223, 730, 934, 936, 1002, 61, 61, 942, 945,
	946, 947, 966, 1153, 742, 965, 896, 649, 648, 658,
	659, 651, 652, 653, 654, 655, 656, 657, 650, 900,
	1153, 660, 61, 993, 957, 736, 960, 961, 971, 974,
	975, 976, 972, 966, 973, 977, 1153, 1175, 1174, 1130,
	1131, 897, 1084, 1184, 1185, 736, 872, 731, 731, 731,
	731, 731, 824, 1656, 1012, 320, 1147, 1648, 1585, 1183,
	1536, 1515, 981, 1037, 1202, 1143, 1494, 101, 101, 101,
	101, 101, 1067, 1404, 731, 408, 1186, 1062, 933, 101,
	1377, 1378, 101, 1150, 1226, 1057, 101, 1056, 1322, 1072,
	1537, 1149, 1701, 1699, 101, 1686, 1429, 1380, 1363, 1152,
	1154, 1274, 1155, 1205, 857, 61, 828, 1204, 1161, 1169,
	884, 1164, 1165, 1166, 1196, 435, 1194, 1383, 1172, 1197,
	1173, 1195, 1382, 1176, 1177, 1193, 1178, 1179, 1192, 1665,
	1144, 1145, 1146, 324, 325, 1188, 1189, 1212, 1191, 1213,
	1187, 1224, 1199, 1190, 1211, 1653, 1201, 1233, 1326, 1016,
	1229, 1230, 1127, 1663, 54, 1136, 901, 1198, 1215, 975,
	976, 628, 629, 1135, 445, 1551, 445, 445, 1443, 1234,
	1276, 1409, 1408, 435, 1228, 1262, 1036, 755, 443, 626,
	1482, 874, 875, 365, 435, 101, 435, 435, 1261, 1137,
	1263, 1264, 1265, 1266, 616, 1532, 1253, 1254, 315, 1076,
	827, 1277, 1092, 1260, 979, 617, 628, 629, 1581, 816,
	321, 322, 1598, 1267, 316, 65, 1270, 1597, 1134, 730,
	730, 730, 730, 730, 1291, 1272, 1133, 1299, 1311, 1315,
	1287, 979, 1539, 101, 730, 1210, 1703, 1702, 1283, 1163,
	1285, 1286, 435, 1279, 1280, 1281, 730, 1290, 1160, 1308,
	1301, 1318, 1319, 848, 1167, 631, 1702, 1309, 410, 1703,
	1608, 987, 989, 1368, 1407, 54, 867, 67, 69, 47,
	62, 1, 1300, 1452, 1533, 1108, 1331, 433, 1627, 1022,
	1013, 1369, 76, 618, 622, 435, 435, 1387, 1388, 1389,
	415, 408, 1364, 1333, 75, 1350, 1332, 1349, 1367, 1337,
	641, 1617, 1087, 435, 649, 648, 658, 659, 651, 652,
	653, 654, 655, 656, 657, 650, 1336, 577, 660, 1523,
	280, 1386, 1020, 435, 435, 1295, 435, 435, 1239, 1374,
	1356, 1238, 1381, 1235, 1250, 685, 1384, 1034, 1237, 1236,
	1240, 988, 763, 761, 762, 760, 698, 765, 1402, 1403,
	764, 1033, 1397, 759, 1392, 1401, 283, 1331, 1016, 403,
	1016, 1396, 1296, 750, 632, 84, 48, 1526, 1314, 1427,
	1428, 1102, 1390, 79, 1335, 101, 855, 584, 585, 285,
	668, 1132, 1216, 101, 409, 1351, 1352, 1370, 1353, 1354,
	1657, 620, 1412, 1413, 1596, 1538, 1168, 697, 949, 1416,
	1360, 1361, 341, 888, 354, 351, 1419, 352, 1091, 879,
	731, 1180, 435, 1414, 642, 101, 435, 1334, 1436, 339,
	331, 435, 729, 1431, 435, 435, 435, 722, 1434, 1385,
	101, 970, 1437, 968, 967, 829, 1476, 649, 648, 658,
	659, 651, 652, 653, 654, 655, 656, 657, 650, 1447,
	398, 660, 1379, 1375, 728, 1328, 592, 299, 1477, 447,
	1603, 447, 447, 883, 28, 66, 447, 326, 447, 1406,
	19, 1457, 18, 1465, 447, 1501, 1502, 17, 598, 20,
	1458, 21, 22, 16, 15, 14, 429, 32, 435, 435,
	435, 1507, 36, 1483, 35, 34, 10, 435, 1459, 1278,
	1078, 1688, 1497, 23, 1461, 435, 13, 12, 1503, 54,
	11, 1498, 9, 638, 1674, 1470, 1471, 4, 1432, 317,
	25, 2, 0, 1224, 0, 1516, 0, 0, 0, 0,
	101, 1016, 1508, 0, 1485, 1486, 1487, 1492, 1490, 0,
	0, 0, 0, 0, 0, 1522, 0, 0, 0, 0,
	1496, 0, 435, 1509, 0, 1530, 0, 0, 1435, 853,
	1460, 1524, 0, 0, 1518, 1368, 1401, 0, 1555, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 1531,
	1512, 1560, 730, 0, 1554, 0, 1535, 410, 0, 435,
	435, 0, 435, 751, 0, 435, 0, 101, 0, 101,
	1367, 886, 887, 0, 815, 0, 435, 1552, 0, 1580,
	1559, 0, 0, 1591, 1579, 0, 435, 1561, 1567, 1573,
	1562, 1540, 0, 1594, 0, 1572, 447, 447, 0, 0,
	435, 0, 0, 0, 1368, 0, 54, 435, 101, 1590,
	0, 0, 1586, 1547, 0, 0, 0, 0, 0, 1575,
	0, 1576, 1610, 0, 685, 1609, 0, 0, 938, 939,
	0, 0, 0, 0, 435, 1564, 0, 1565, 1566, 1367,
	0, 0, 0, 0, 1615, 0, 0, 0, 0, 1613,
	0, 0, 0, 0, 1624, 0, 435, 0, 0, 0,
	0, 0, 0, 435, 435, 1625, 0, 0, 1542, 1543,
	1544, 1545, 1546, 0, 1630, 0, 1549, 1550, 1599, 1600,
	1601, 1602, 435, 1634, 0, 1606, 1607, 1008, 408, 1639,
	1631, 101, 0, 0, 0, 0, 0, 1535, 1016, 0,
	435, 0, 1652, 0, 732, 1660, 0, 0, 0, 0,
	0, 1662, 0, 1666, 0, 0, 1664, 1661, 0, 435,
	1667, 0, 1615, 0, 447, 447, 1679, 435, 1681, 1675,
	619, 54, 1678, 1696, 0, 447, 447, 1687, 1698, 1635,
	1677, 1700, 1676, 0, 98, 0, 1640, 1690, 293, 1583,
	0, 0, 0, 302, 0, 54, 0, 1714, 1712, 0,
	1589, 0, 0, 1649, 447, 0, 0, 0, 0, 0,
	99, 1690, 0, 297, 0, 290, 0, 0, 399, 99,
	880, 0, 0, 419, 0, 421, 0, 0, 0, 0,
	0, 638, 0, 0, 447, 0, 430, 0, 0, 0,
	0, 330, 439, 0, 401, 411, 0, 1128, 1129, 99,
	622, 99, 1623, 0, 0, 0, 0, 608, 0, 0,
	1626, 0, 99, 0, 0, 0, 273, 0, 99, 0,
	0, 0, 0, 276, 0, 928, 0, 0, 0, 0,
	0, 1715, 1716, 284, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 410, 649, 648, 658, 659, 651, 652,
	653, 654, 655, 656, 657, 650, 0, 0, 660, 1151,
	955, 956, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 1171,
	785, 0, 1705, 0, 0, 0, 410, 0, 0, 1480,
	0, 0, 1475, 0, 0, 0, 0, 0, 447, 0,
	447, 0, 0, 1038, 1039, 0, 1044, 1045, 1046, 1047,
	1048, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 1059, 1060, 649, 648, 658,
	659, 651, 652, 653, 654, 655, 656, 657, 650, 0,
	0, 660, 0, 286, 277, 278, 0, 287, 288, 296,
	0, 0, 0, 279, 281, 0, 275, 295, 294, 0,
	0, 772, 447, 0, 447, 0, 0, 441, 649, 648,
	658, 659, 651, 652, 653, 654, 655, 656, 657, 650,
	0, 0, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 786, 0, 0, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 0, 0, 0, 0,
	0, 0, 99, 0, 799, 802, 803, 804, 805, 806,
	807, 0, 808, 809, 810, 811, 812, 813, 814, 0,
	787, 788, 789, 790, 766, 770, 800, 767, 773, 769,
	771, 768, 0, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 791, 792, 793, 794, 795, 796,
	797, 798, 0, 0, 0, 0, 0, 0, 0, 724,
	0, 733, 0, 0, 0, 0, 0, 0, 1358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 410,
	0, 758, 0, 0, 0, 99, 99, 99, 1474, 0,
	0, 0, 822, 0, 411, 0, 399, 0, 0, 0,
	0, 830, 0, 801, 0, 0, 0, 99, 1391, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 99, 0, 0, 0, 0, 99, 447, 0,
	0, 834, 0, 0, 0, 0, 0, 26, 27, 55,
	29, 30, 0, 0, 0, 0, 0, 1255, 1256, 1257,
	1259, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	31, 51, 52, 0, 649, 648, 658, 659, 651, 652,
	653, 654, 655, 656, 657, 650, 0, 0, 660, 0,
	0, 0, 0, 42, 0, 0, 1275, 61, 0, 0,
	0, 0, 0, 644, 0, 647, 0, 447, 0, 447,
	447, 661, 662, 663, 664, 665, 666, 667, 0, 645,
	646, 643, 649, 648, 658, 659, 651, 652, 653, 654,
	655, 656, 657, 650, 0, 0, 660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 843, 844,
	0, 0, 845, 0, 0, 0, 0, 0, 33, 57,
	38, 37, 40, 0, 53, 447, 0, 1479, 0, 0,
	0, 0, 0, 99, 99, 99, 685, 1473, 99, 0,
	0, 0, 0, 0, 859, 1493, 0, 0, 1495, 866,
	41, 59, 58, 0, 0, 49, 50, 39, 0, 0,
	1472, 0, 0, 0, 0, 410, 885, 0, 1371, 1373,
	99, 0, 0, 0, 0, 99, 0, 0, 0, 43,
	44, 0, 45, 46, 0, 0, 1373, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 447, 447, 0, 447,
	1400, 0, 0, 649, 648, 658, 659, 651, 652, 653,
	654, 655, 656, 657, 650, 0, 0, 660, 0, 0,
	0, 0, 0, 0, 0, 1415, 649, 648, 658, 659,
	651, 652, 653, 654, 655, 656, 657, 650, 330, 330,
	660, 0, 0, 330, 330, 330, 330, 0, 964, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 995, 56, 0, 0, 0, 0, 0, 0, 330,
	330, 330, 330, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 99, 990, 0, 1442, 99, 99, 0, 1446,
	99, 998, 834, 411, 1449, 1148, 0, 1454, 1455, 1456,
	0, 0, 0, 0, 0, 834, 1462, 1463, 0, 1464,
	0, 0, 1466, 0, 1468, 649, 648, 658, 659, 651,
	652, 653, 654, 655, 656, 657, 650, 0, 0, 660,
	649, 648, 658, 659, 651, 652, 653, 654, 655, 656,
	657, 650, 1074, 0, 660, 0, 0, 0, 0, 1081,
	1082, 0, 0, 1083, 0, 1633, 685, 0, 0, 0,
	0, 1500, 1500, 1500, 0, 0, 0, 1506, 99, 0,
	447, 0, 0, 1090, 0, 99, 99, 0, 1500, 99,
	0, 0, 1101, 0, 0, 0, 1120, 1121, 1122, 1123,
	1124, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 1093, 1094, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 99, 99, 99, 99, 99, 0, 0, 0,
	0, 0, 834, 0, 0, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 648, 658, 659, 651, 652,
	653, 654, 655, 656, 657, 650, 0, 0, 660, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1556, 1557, 0, 1558, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1400,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 1400,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 1588, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 411, 99, 99, 99,
	99, 99, 0, 0, 0, 0, 0, 0, 0, 1200,
	0, 0, 99, 0, 0, 0, 990, 1614, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1400,
	0, 0, 0, 0, 0, 0, 447, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 1641, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1651, 0, 0, 0, 0, 0, 1284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 990, 0, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 543, 0,
	500, 558, 473, 490, 566, 491, 494, 531, 458, 513,
	185, 488, 0, 477, 453, 483, 454, 475, 502, 131,
	472, 545, 516, 557, 157, 556, 506, 0, 564, 159,
	522, 0, 231, 173, 0, 1643, 504, 547, 511, 540,
	499, 532, 463, 521, 559, 489, 529, 560, 0, 411,
	0, 434, 0, 1017, 1018, 0, 0, 0, 0, 0,
	121, 99, 526, 554, 485, 528, 530, 452, 523, 0,
	456, 459, 565, 550, 480, 481, 1225, 0, 0, 0,
	0, 0, 0, 503, 512, 537, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 478, 0, 520, 0, 0,
	0, 460, 457, 0, 0, 501, 0, 0, 0, 462,
	0, 479, 538, 0, 449, 139, 0, 0, 542, 549,
	498, 0, 261, 553, 496, 495, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 486,
	450, 546, 476, 484, 125, 482, 213, 192, 252, 0,
	519, 194, 212, 160, 241, 205, 250, 251, 262, 263,
	238, 259, 267, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 270, 114, 258, 110, 115, 257,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 455, 0, 232, 255, 271, 119,
	471, 0, 239, 265, 266, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 269, 191,
	214, 123, 254, 230, 467, 470, 465, 466, 514, 515,
	561, 562, 563, 539, 461, 0, 468, 469, 0, 544,
	551, 552, 518, 102, 111, 158, 268, 206, 136, 256,
	451, 464, 129, 474, 0, 0, 487, 492, 493, 505,
	507, 508, 509, 510, 517, 524, 525, 527, 533, 534,
	535, 536, 541, 548, 567, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	264, 555, 543, 0, 500, 558, 473, 490, 566, 491,
	494, 531, 458, 513, 185, 488, 0, 477, 453, 483,
	454, 475, 502, 131, 472, 545, 516, 557, 157, 556,
	506, 0, 564, 159, 522, 0, 231, 173, 0, 0,
	504, 547, 511, 540, 499, 532, 463, 521, 559, 489,
	529, 560, 0, 0, 0, 434, 0, 1017, 1018, 0,
	0, 0, 0, 0, 121, 0, 526, 554, 485, 528,
	530, 452, 523, 0, 456, 459, 565, 550, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 503, 512, 537,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 478,
	0, 520, 0, 0, 0, 460, 457, 0, 0, 501,
	0, 0, 0, 462, 0, 479, 538, 0, 449, 139,
	0, 0, 542, 549, 498, 0, 261, 553, 496, 495,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 486, 450, 546, 476, 484, 125, 482,
	213, 192, 252, 0, 519, 194, 212, 160, 241, 205,
	250, 251, 262, 263, 238, 259, 267, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 270, 114,
	258, 110, 115, 257, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 455, 0,
	232, 255, 271, 119, 471, 0, 239, 265, 266, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 269, 191, 214, 123, 254, 230, 467, 470,
	465, 466, 514, 515, 561, 562, 563, 539, 461, 0,
	468, 469, 0, 544, 551, 552, 518, 102, 111, 158,
	268, 206, 136, 256, 451, 464, 129, 474, 0, 0,
	487, 492, 493, 505, 507, 508, 509, 510, 517, 524,
	525, 527, 533, 534, 535, 536, 541, 548, 567, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 264, 555, 543, 0, 500, 558,
	473, 490, 566, 491, 494, 531, 458, 513, 185, 488,
	0, 477, 453, 483, 454, 475, 502, 131, 472, 545,
	516, 557, 157, 556, 506, 0, 564, 159, 522, 0,
	231, 173, 0, 0, 504, 547, 511, 540, 499, 532,
	463, 521, 559, 489, 529, 560, 0, 0, 0, 434,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	526, 554, 485, 528, 530, 452, 523, 0, 456, 459,
	565, 550, 480, 481, 0, 0, 0, 0, 0, 0,
	0, 503, 512, 537, 497, 0, 0, 0, 0, 0,
	0, 1330, 0, 478, 0, 520, 0, 0, 0, 460,
	457, 0, 0, 501, 0, 0, 0, 462, 0, 479,
	538, 0, 449, 139, 0, 0, 542, 549, 498, 0,
	261, 553, 496, 495, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 486, 450, 546,
	476, 484, 125, 482, 213, 192, 252, 0, 519, 194,
	212, 160, 241, 205, 250, 251, 262, 263, 238, 259,
	267, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 270, 114, 258, 110, 115, 257, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 455, 0, 232, 255, 271, 119, 471, 0,
	239, 265, 266, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 269, 191, 214, 123,
	254, 230, 467, 470, 465, 466, 514, 515, 561, 562,
	563, 539, 461, 0, 468, 469, 0, 544, 551, 552,
	518, 102, 111, 158, 268, 206, 136, 256, 451, 464,
	129, 474, 0, 0, 487, 492, 493, 505, 507, 508,
	509, 510, 517, 524, 525, 527, 533, 534, 535, 536,
	541, 548, 567, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 264, 555,
	543, 0, 500, 558, 473, 490, 566, 491, 494, 531,
	458, 513, 185, 488, 0, 477, 453, 483, 454, 475,
	502, 131, 472, 545, 516, 557, 157, 556, 506, 0,
	564, 159, 522, 0, 231, 173, 0, 0, 504, 547,
	511, 540, 499, 532, 463, 521, 559, 489, 529, 560,
	61, 0, 0, 434, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 526, 554, 485, 528, 530, 452,
	523, 0, 456, 459, 565, 550, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 503, 512, 537, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 478, 0, 520,
	0, 0, 0, 460, 457, 0, 0, 501, 0, 0,
	0, 462, 0, 479, 538, 0, 449, 139, 0, 0,
	542, 549, 498, 0, 261, 553, 496, 495, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 486, 450, 546, 476, 484, 125, 482, 213, 192,
	252, 0, 519, 194, 212, 160, 241, 205, 250, 251,
	262, 263, 238, 259, 267, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 270, 114, 258, 110,
	115, 257, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 455, 0, 232, 255,
	271, 119, 471, 0, 239, 265, 266, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	269, 191, 214, 123, 254, 230, 467, 470, 465, 466,
	514, 515, 561, 562, 563, 539, 461, 0, 468, 469,
	0, 544, 551, 552, 518, 102, 111, 158, 268, 206,
	136, 256, 451, 464, 129, 474, 0, 0, 487, 492,
	493, 505, 507, 508, 509, 510, 517, 524, 525, 527,
	533, 534, 535, 536, 541, 548, 567, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 264, 555, 543, 0, 500, 558, 473, 490,
	566, 491, 494, 531, 458, 513, 185, 488, 0, 477,
	453, 483, 454, 475, 502, 131, 472, 545, 516, 557,
	157, 556, 506, 0, 564, 159, 522, 0, 231, 173,
	0, 0, 504, 547, 511, 540, 499, 532, 463, 521,
	559, 489, 529, 560, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 526, 554,
	485, 528, 530, 452, 523, 0, 456, 459, 565, 550,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 503,
	512, 537, 497, 0, 0, 0, 0, 0, 0, 999,
	0, 478, 0, 520, 0, 0, 0, 460, 457, 0,
	0, 501, 0, 0, 0, 462, 0, 479, 538, 0,
	449, 139, 0, 0, 542, 549, 498, 0, 261, 553,
	496, 495, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 486, 450, 546, 476, 484,
	125, 482, 213, 192, 252, 0, 519, 194, 212, 160,
	241, 205, 250, 251, 262, 263, 238, 259, 267, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	270, 114, 258, 110, 115, 257, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	455, 0, 232, 255, 271, 119, 471, 0, 239, 265,
	266, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 269, 191, 214, 123, 254, 230,
	467, 470, 465, 466, 514, 515, 561, 562, 563, 539,
	461, 0, 468, 469, 0, 544, 551, 552, 518, 102,
	111, 158, 268, 206, 136, 256, 451, 464, 129, 474,
	0, 0, 487, 492, 493, 505, 507, 508, 509, 510,
	517, 524, 525, 527, 533, 534, 535, 536, 541, 548,
	567, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 264, 555, 543, 0,
	500, 558, 473, 490, 566, 491, 494, 531, 458, 513,
	185, 488, 0, 477, 453, 483, 454, 475, 502, 131,
	472, 545, 516, 557, 157, 556, 506, 0, 564, 159,
	522, 0, 231, 173, 0, 0, 504, 547, 511, 540,
	499, 532, 463, 521, 559, 489, 529, 560, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 526, 554, 485, 528, 530, 452, 523, 0,
	456, 459, 565, 550, 480, 481, 0, 0, 0, 0,
	0, 0, 0, 503, 512, 537, 497, 0, 0, 0,
	0, 0, 0, 894, 0, 478, 0, 520, 0, 0,
	0, 460, 457, 0, 0, 501, 0, 0, 0, 462,
	0, 479, 538, 0, 449, 139, 0, 0, 542, 549,
	498, 0, 261, 553, 496, 495, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 486,
	450, 546, 476, 484, 125, 482, 213, 192, 252, 0,
	519, 194, 212, 160, 241, 205, 250, 251, 262, 263,
	238, 259, 267, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 270, 114, 258, 110, 115, 257,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 455, 0, 232, 255, 271, 119,
	471, 0, 239, 265, 266, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 269, 191,
	214, 123, 254, 230, 467, 470, 465, 466, 514, 515,
	561, 562, 563, 539, 461, 0, 468, 469, 0, 544,
	551, 552, 518, 102, 111, 158, 268, 206, 136, 256,
	451, 464, 129, 474, 0, 0, 487, 492, 493, 505,
	507, 508, 509, 510, 517, 524, 525, 527, 533, 534,
	535, 536, 541, 548, 567, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	264, 555, 543, 0, 500, 558, 473, 490, 566, 491,
	494, 531, 458, 513, 185, 488, 0, 477, 453, 483,
	454, 475, 502, 131, 472, 545, 516, 557, 157, 556,
	506, 0, 564, 159, 522, 0, 231, 173, 0, 0,
	504, 547, 511, 540, 499, 532, 463, 521, 559, 489,
	529, 560, 0, 0, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 526, 554, 485, 528,
	530, 452, 523, 0, 456, 459, 565, 550, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 503, 512, 537,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 478,
	0, 520, 0, 0, 0, 460, 457, 0, 0, 501,
	0, 0, 0, 462, 0, 479, 538, 0, 449, 139,
	0, 0, 542, 549, 498, 0, 261, 553, 496, 495,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 486, 450, 546, 476, 484, 125, 482,
	213, 192, 252, 0, 519, 194, 212, 160, 241, 205,
	250, 251, 262, 263, 238, 259, 267, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 270, 114,
	258, 110, 115, 257, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 455, 0,
	232, 255, 271, 119, 471, 0, 239, 265, 266, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 269, 191, 214, 123, 254, 230, 467, 470,
	465, 466, 514, 515, 561, 562, 563, 539, 461, 0,
	468, 469, 0, 544, 551, 552, 518, 102, 111, 158,
	268, 206, 136, 256, 451, 464, 129, 474, 0, 0,
	487, 492, 493, 505, 507, 508, 509, 510, 517, 524,
	525, 527, 533, 534, 535, 536, 541, 548, 567, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 264, 555, 543, 0, 500, 558,
	473, 490, 566, 491, 494, 531, 458, 513, 185, 488,
	0, 477, 453, 483, 454, 475, 502, 131, 472, 545,
	516, 557, 157, 556, 506, 0, 564, 159, 522, 0,
	231, 173, 0, 0, 504, 547, 511, 540, 499, 532,
	463, 521, 559, 489, 529, 560, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	526, 554, 485, 528, 530, 452, 523, 0, 456, 459,
	565, 550, 480, 481, 0, 0, 0, 0, 0, 0,
	0, 503, 512, 537, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 478, 0, 520, 0, 0, 0, 460,
	457, 0, 0, 501, 0, 0, 0, 462, 0, 479,
	538, 0, 449, 139, 0, 0, 542, 549, 498, 0,
	261, 553, 496, 495, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 486, 450, 546,
	476, 484, 125, 482, 213, 192, 252, 0, 519, 194,
	212, 160, 241, 205, 250, 251, 262, 263, 238, 259,
	267, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 270, 114, 258, 110, 115, 257, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 455, 0, 232, 255, 271, 119, 471, 0,
	239, 265, 266, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 269, 191, 214, 123,
	254, 230, 467, 470, 465, 466, 514, 515, 561, 562,
	563, 539, 461, 0, 468, 469, 0, 544, 551, 552,
	518, 102, 111, 158, 268, 206, 136, 256, 451, 464,
	129, 474, 0, 0, 487, 492, 493, 505, 507, 508,
	509, 510, 517, 524, 525, 527, 533, 534, 535, 536,
	541, 548, 567, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 264, 555,
	543, 0, 500, 558, 473, 490, 566, 491, 494, 531,
	458, 513, 185, 488, 0, 477, 453, 483, 454, 475,
	502, 131, 472, 545, 516, 557, 157, 556, 506, 0,
	564, 159, 522, 0, 231, 173, 0, 0, 504, 547,
	511, 540, 499, 532, 463, 521, 559, 489, 529, 560,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 526, 554, 485, 528, 530, 452,
	523, 0, 456, 459, 565, 550, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 503, 512, 537, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 478, 0, 520,
	0, 0, 0, 460, 457, 0, 0, 501, 0, 0,
	0, 462, 0, 479, 538, 0, 449, 139, 0, 0,
	542, 549, 498, 0, 261, 553, 496, 495, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 486, 450, 546, 476, 484, 125, 482, 213, 192,
	252, 0, 519, 194, 212, 160, 241, 205, 250, 251,
	262, 263, 238, 259, 267, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 270, 114, 258, 110,
	115, 257, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 455, 0, 232, 255,
	271, 119, 471, 0, 239, 265, 266, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	269, 191, 214, 123, 254, 230, 467, 470, 465, 466,
	514, 515, 561, 562, 563, 539, 461, 0, 468, 469,
	0, 544, 551, 552, 518, 102, 111, 158, 268, 206,
	136, 256, 451, 464, 129, 474, 0, 0, 487, 492,
	493, 505, 507, 508, 509, 510, 517, 524, 525, 527,
	533, 534, 535, 536, 541, 548, 567, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 264, 185, 0, 0, 0, 0, 337, 0,
	0, 0, 131, 334, 0, 0, 0, 157, 0, 0,
	0, 379, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 368, 369, 0, 0, 0, 0, 0, 0, 1006,
	0, 61, 0, 0, 335, 356, 355, 358, 359, 360,
	361, 0, 0, 121, 357, 362, 363, 364, 1007, 0,
	0, 332, 349, 0, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 347, 0, 0, 0, 0,
	392, 0, 348, 0, 0, 343, 344, 345, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 370, 0, 0, 0, 261, 0, 0, 390, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 376, 0, 0, 0, 0, 125, 0, 213,
	192, 252, 0, 0, 194, 212, 160, 241, 205, 250,
	251, 262, 263, 238, 259, 267, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 270, 114, 258,
	110, 115, 257, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 0, 0, 232,
	255, 271, 119, 0, 0, 239, 265, 266, 0, 0,
	120, 138, 133, 201, 177, 116, 147, 229, 154, 161,
	208, 269, 191, 214, 123, 254, 230, 380, 391, 386,
	387, 384, 385, 383, 382, 381, 393, 371, 372, 373,
	374, 377, 0, 388, 389, 375, 102, 111, 158, 268,
	206, 136, 256, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 264, 185, 0, 0, 0, 0, 337,
	0, 0, 0, 131, 334, 0, 0, 0, 157, 0,
	0, 0, 379, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 608, 335, 356, 355, 358, 359,
	360, 361, 0, 0, 121, 357, 362, 363, 364, 0,
	0, 0, 332, 349, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 347, 0, 0, 0,
	0, 392, 0, 348, 0, 0, 343, 344, 345, 350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 370, 0, 0, 0, 261, 0, 0, 390,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 376, 0, 0, 0, 0, 125, 0,
	213, 192, 252, 0, 0, 194, 212, 160, 241, 205,
	250, 251, 262, 263, 238, 259, 267, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 270, 114,
	258, 110, 115, 257, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 255, 271, 119, 0, 0, 239, 265, 266, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 269, 191, 214, 123, 254, 230, 380, 391,
	386, 387, 384, 385, 383, 382, 381, 393, 371, 372,
	373, 374, 377, 0, 388, 389, 375, 102, 111, 158,
	268, 206, 136, 256, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 264, 185, 0, 0, 0, 0,
	337, 0, 0, 0, 131, 334, 0, 0, 0, 157,
	0, 0, 0, 379, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 335, 356, 355, 358,
	359, 360, 361, 0, 0, 121, 357, 362, 363, 364,
	0, 0, 0, 332, 349, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 347, 328, 0,
	0, 0, 392, 0, 348, 0, 0, 343, 344, 345,
	350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 370, 0, 0, 0, 261, 0, 0,
	390, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 376, 0, 0, 0, 0, 125,
	0, 213, 192, 252, 0, 0, 194, 212, 160, 241,
	205, 250, 251, 262, 263, 238, 259, 267, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 270,
	114, 258, 110, 115, 257, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 255, 271, 119, 0, 0, 239, 265, 266,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 269, 191, 214, 123, 254, 230, 380,
	391, 386, 387, 384, 385, 383, 382, 381, 393, 371,
	372, 373, 374, 377, 0, 388, 389, 375, 102, 111,
	158, 268, 206, 136, 256, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 264, 185, 0, 0, 0,
	0, 337, 0, 0, 0, 131, 334, 0, 0, 0,
	157, 0, 0, 0, 379, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 335, 356, 944,
	358, 359, 360, 361, 0, 0, 121, 357, 362, 363,
	364, 0, 0, 0, 332, 349, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 347, 328,
	0, 0, 0, 392, 0, 348, 0, 0, 343, 344,
	345, 350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 370, 0, 0, 0, 261, 0,
	0, 390, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 376, 0, 0, 0, 0,
	125, 0, 213, 192, 252, 0, 0, 194, 212, 160,
	241, 205, 250, 251, 262, 263, 238, 259, 267, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	270, 114, 258, 110, 115, 257, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 255, 271, 119, 0, 0, 239, 265,
	266, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 269, 191, 214, 123, 254, 230,
	380, 391, 386, 387, 384, 385, 383, 382, 381, 393,
	371, 372, 373, 374, 377, 0, 388, 389, 375, 102,
	111, 158, 268, 206, 136, 256, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 264, 185, 0, 0,
	0, 0, 337, 0, 0, 0, 131, 334, 0, 0,
	0, 157, 0, 0, 0, 379, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 335, 356,
	941, 358, 359, 360, 361, 0, 0, 121, 357, 362,
	363, 364, 0, 0, 0, 332, 349, 0, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 347,
	328, 0, 0, 0, 392, 0, 348, 0, 0, 343,
	344, 345, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 370, 0, 0, 0, 261,
	0, 0, 390, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 376, 0, 0, 0,
	0, 125, 0, 213, 192, 252, 0, 0, 194, 212,
	160, 241, 205, 250, 251, 262, 263, 238, 259, 267,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 270, 114, 258, 110, 115, 257, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 255, 271, 119, 0, 0, 239,
	265, 266, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 269, 191, 214, 123, 254,
	230, 380, 391, 386, 387, 384, 385, 383, 382, 381,
	393, 371, 372, 373, 374, 377, 0, 388, 389, 375,
	102, 111, 158, 268, 206, 136, 256, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 264, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 337, 0, 0, 0, 131,
	334, 0, 0, 0, 157, 0, 0, 0, 379, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 335, 356, 355, 358, 359, 360, 361, 0, 0,
	121, 357, 362, 363, 364, 0, 0, 0, 332, 349,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 347, 0, 0, 0, 0, 392, 0, 348,
	0, 0, 343, 344, 345, 350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 370, 0,
	0, 0, 261, 0, 0, 390, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 376,
	0, 0, 0, 0, 125, 0, 213, 192, 252, 0,
	0, 194, 212, 160, 241, 205, 250, 251, 262, 263,
	238, 259, 267, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 270, 114, 258, 110, 115, 257,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 255, 271, 119,
	0, 0, 239, 265, 266, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 269, 191,
	214, 123, 254, 230, 380, 391, 386, 387, 384, 385,
	383, 382, 381, 393, 371, 372, 373, 374, 377, 0,
	388, 389, 375, 102, 111, 158, 268, 206, 136, 256,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	264, 185, 0, 0, 0, 0, 337, 0, 0, 0,
	131, 334, 0, 0, 0, 157, 0, 0, 0, 379,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 335, 356, 355, 358, 359, 360, 361, 0,
	0, 121, 357, 362, 363, 364, 0, 0, 0, 332,
	349, 0, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 347, 0, 0, 0, 0, 392, 0,
	348, 0, 0, 343, 344, 345, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 370,
	0, 0, 0, 261, 0, 0, 390, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	376, 0, 0, 0, 0, 125, 0, 213, 192, 252,
	0, 0, 194, 212, 160, 241, 205, 250, 251, 262,
	263, 238, 259, 267, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 270, 114, 258, 110, 115,
	257, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 255, 271,
	119, 0, 0, 239, 265, 266, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 269,
	191, 214, 123, 254, 230, 380, 391, 386, 387, 384,
	385, 383, 382, 381, 393, 371, 372, 373, 374, 377,
	0, 388, 389, 375, 102, 111, 158, 268, 206, 136,
	256, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 264, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	379, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 335, 356, 355, 358, 359, 360, 361,
	0, 0, 121, 357, 362, 363, 364, 0, 0, 0,
	0, 349, 0, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 347, 0, 0, 0, 0, 392,
	0, 348, 0, 0, 343, 344, 345, 350, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	370, 0, 0, 0, 261, 0, 0, 390, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 376, 0, 0, 0, 0, 125, 0, 213, 192,
	252, 0, 1706, 194, 212, 160, 241, 205, 250, 251,
	262, 263, 238, 259, 267, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 270, 114, 258, 110,
	115, 257, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 255,
	271, 119, 0, 0, 239, 265, 266, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	269, 191, 214, 123, 254, 230, 380, 391, 386, 387,
	384, 385, 383, 382, 381, 393, 371, 372, 373, 374,
	377, 0, 388, 389, 375, 102, 111, 158, 268, 206,
	136, 256, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 264, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 379, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 608, 335, 356, 355, 358, 359, 360,
	361, 0, 0, 121, 357, 362, 363, 364, 0, 0,
	0, 0, 349, 0, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 347, 0, 0, 0, 0,
	392, 0, 348, 0, 0, 343, 344, 345, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 370, 0, 0, 0, 261, 0, 0, 390, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 376, 0, 0, 0, 0, 125, 0, 213,
	192, 252, 0, 0, 194, 212, 160, 241, 205, 250,
	251, 262, 263, 238, 259, 267, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 270, 114, 258,
	110, 115, 257, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 0, 0, 232,
	255, 271, 119, 0, 0, 239, 265, 266, 0, 0,
	120, 138, 133, 201, 177, 116, 147, 229, 154, 161,
	208, 269, 191, 214, 123, 254, 230, 380, 391, 386,
	387, 384, 385, 383, 382, 381, 393, 371, 372, 373,
	374, 377, 0, 388, 389, 375, 102, 111, 158, 268,
	206, 136, 256, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 264, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 157, 0,
	0, 0, 379, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 335, 356, 355, 358, 359,
	360, 361, 0, 0, 121, 357, 362, 363, 364, 0,
	0, 0, 0, 349, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 347, 0, 0, 0,
	0, 392, 0, 348, 0, 0, 343, 344, 345, 350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 370, 0, 0, 0, 261, 0, 0, 390,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 376, 0, 0, 0, 0, 125, 0,
	213, 192, 252, 0, 0, 194, 212, 160, 241, 205,
	250, 251, 262, 263, 238, 259, 267, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 270, 114,
	258, 110, 115, 257, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 255, 271, 119, 0, 0, 239, 265, 266, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 269, 191, 214, 123, 254, 230, 380, 391,
	386, 387, 384, 385, 383, 382, 381, 393, 371, 372,
	373, 374, 377, 0, 388, 389, 375, 102, 111, 158,
	268, 206, 136, 256, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 264, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 648, 658, 659, 651, 652, 653, 654,
	655, 656, 657, 650, 0, 0, 660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 261, 0, 0,
	0, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 0, 0, 0, 0, 0, 125,
	0, 213, 192, 252, 0, 0, 194, 212, 160, 241,
	205, 250, 251, 262, 263, 238, 259, 267, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 270,
	114, 258, 110, 115, 257, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 255, 271, 119, 0, 0, 239, 265, 266,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 269, 191, 214, 123, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 268, 206, 136, 256, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 264, 185, 0, 0, 0,
	985, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 989, 0, 0, 0, 0, 0, 100, 0, 991,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 261, 0,
	988, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 252, 0, 0, 194, 212, 160,
	241, 205, 250, 251, 262, 263, 238, 259, 267, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	270, 114, 258, 110, 115, 257, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 255, 271, 119, 0, 0, 239, 265,
	266, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 269, 191, 214, 123, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 158, 268, 206, 136, 256, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 264, 185, 0, 0,
	0, 985, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 987, 989, 0, 0, 0, 0, 0, 100, 0,
	991, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 261,
	0, 988, 0, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 0, 0, 0, 0,
	0, 125, 0, 213, 192, 252, 0, 0, 983, 212,
	160, 241, 205, 250, 251, 262, 263, 238, 259, 267,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 270, 114, 258, 110, 115, 257, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 255, 271, 119, 0, 0, 239,
	265, 266, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 269, 191, 214, 123, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 268, 206, 136, 256, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 264, 185, 0,
	0, 0, 637, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 434,
	0, 639, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 634, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	261, 0, 0, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 252, 0, 0, 194,
	212, 160, 241, 205, 250, 251, 262, 263, 238, 259,
	267, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 270, 114, 258, 110, 115, 257, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 255, 271, 119, 0, 0,
	239, 265, 266, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 269, 191, 214, 123,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 268, 206, 136, 256, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 264, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 434, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 261, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 252,
	0, 0, 194, 212, 160, 241, 205, 250, 251, 262,
	263, 238, 259, 267, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 270, 114, 258, 110, 115,
	257, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 255, 271,
	119, 0, 0, 239, 265, 266, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 269,
	191, 214, 123, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 268, 206, 136,
	256, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 264, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 991, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 261, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	252, 0, 0, 194, 212, 160, 241, 205, 250, 251,
	262, 263, 238, 259, 267, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 270, 114, 258, 110,
	115, 257, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 255,
	271, 119, 0, 0, 239, 265, 266, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	269, 191, 214, 123, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 268, 206,
	136, 256, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1203,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 264, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 261, 0, 0,
	0, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 0, 0, 0, 0, 0, 125,
	0, 213, 192, 252, 0, 0, 194, 212, 160, 241,
	205, 250, 251, 262, 263, 238, 259, 267, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 270,
	114, 258, 110, 115, 257, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 255, 271, 119, 0, 0, 239, 265, 266,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 269, 191, 214, 123, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 268, 206, 136, 256, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 264, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 434, 0, 0,
	881, 0, 0, 882, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 261, 0,
	0, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 252, 0, 0, 194, 212, 160,
	241, 205, 250, 251, 262, 263, 238, 259, 267, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	270, 114, 258, 110, 115, 257, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 255, 271, 119, 0, 0, 239, 265,
	266, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 269, 191, 214, 123, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 158, 268, 206, 136, 256, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 264, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 753, 0, 0,
	0, 157, 0, 0, 0, 0, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 434, 0,
	752, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 261,
	0, 0, 0, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 0, 0, 0, 0,
	0, 125, 0, 213, 192, 252, 0, 0, 194, 212,
	160, 241, 205, 250, 251, 262, 263, 238, 259, 267,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 270, 114, 258, 110, 115, 257, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 255, 271, 119, 0, 0, 239,
	265, 266, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 269, 191, 214, 123, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 268, 206, 136, 256, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 264, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 991, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	261, 0, 0, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 252, 0, 0, 194,
	212, 160, 241, 205, 250, 251, 262, 263, 238, 259,
	267, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 270, 114, 258, 110, 115, 257, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 255, 271, 119, 0, 0,
	239, 265, 266, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 269, 191, 214, 123,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 268, 206, 136, 256, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 264, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 261, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 252, 0, 0,
	194, 212, 160, 241, 205, 250, 251, 262, 263, 238,
	259, 267, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 270, 114, 258, 110, 115, 257, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 255, 271, 119, 0,
	0, 239, 265, 266, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 269, 191, 214,
	123, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 268, 206, 136, 256, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 264,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 434, 0, 639, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 261, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 252, 0,
	0, 194, 212, 160, 241, 205, 250, 251, 262, 263,
	238, 259, 267, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 270, 114, 258, 110, 115, 257,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 255, 271, 119,
	0, 0, 239, 265, 266, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 269, 191,
	214, 123, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 268, 206, 136, 256,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	264, 185, 0, 0, 0, 0, 0, 0, 0, 723,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 261, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 252,
	0, 0, 194, 212, 160, 241, 205, 250, 251, 262,
	263, 238, 259, 267, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 270, 114, 258, 110, 115,
	257, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 255, 271,
	119, 0, 0, 239, 265, 266, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 269,
	191, 214, 123, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 268, 206, 136,
	256, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 264, 396, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 261, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 252, 0, 0,
	194, 212, 160, 241, 205, 250, 251, 262, 263, 238,
	259, 267, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 270, 114, 258, 110, 115, 257, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 255, 271, 119, 0,
	0, 239, 265, 266, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 269, 191, 214,
	123, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 268, 206, 136, 256, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 264,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 97,
	0, 0, 261, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 252, 0,
	0, 194, 212, 160, 241, 205, 250, 251, 262, 263,
	238, 259, 267, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 270, 114, 258, 110, 115, 257,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 255, 271, 119,
	0, 0, 239, 265, 266, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 269, 191,
	214, 123, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 268, 206, 136, 256,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	264, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 434, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 261, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 252,
	0, 0, 194, 212, 160, 241, 205, 250, 251, 262,
	263, 238, 259, 267, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 270, 114, 258, 110, 115,
	257, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 255, 271,
	119, 0, 0, 239, 265, 266, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 269,
	191, 214, 123, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 268, 206, 136,
	256, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 264, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 261, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	252, 0, 0, 194, 212, 160, 241, 205, 250, 251,
	262, 263, 238, 259, 267, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 270, 114, 258, 110,
	115, 257, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 255,
	271, 119, 0, 0, 239, 265, 266, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	269, 191, 214, 123, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 268, 206,
	136, 256, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 264, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 261, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 252, 0, 0, 194, 212, 160, 241, 205, 250,
	251, 262, 263, 238, 259, 267, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 270, 114, 258,
	110, 413, 257, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 0, 0, 232,
	255, 271, 119, 0, 0, 239, 265, 266, 0, 0,
	120, 138, 133, 201, 414, 412, 147, 229, 154, 161,
	208, 269, 191, 214, 123, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 111, 158, 268,
	206, 136, 256, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 264, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 261, 0, 0, 0,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 0, 0, 0, 0, 0, 125, 0,
	213, 192, 252, 0, 0, 194, 212, 160, 241, 205,
	250, 251, 262, 263, 238, 259, 267, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 270, 114,
	258, 110, 115, 257, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 255, 271, 119, 0, 0, 239, 265, 266, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 269, 191, 214, 123, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 111, 158,
	268, 206, 136, 256, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 264, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 261, 0, 0,
	0, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 0, 0, 0, 0, 0, 125,
	0, 213, 192, 252, 0, 0, 194, 212, 160, 241,
	205, 250, 251, 262, 263, 238, 259, 267, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 744, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 270,
	114, 258, 110, 413, 257, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 255, 271, 119, 0, 0, 239, 265, 266,
	0, 0, 120, 138, 133, 201, 414, 412, 147, 229,
	154, 161, 208, 269, 191, 214, 123, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 268, 206, 136, 256, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 264, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 261, 0,
	0, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 252, 0, 0, 194, 212, 160,
	241, 205, 250, 251, 262, 263, 238, 259, 267, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 404, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	270, 114, 258, 110, 413, 257, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 255, 271, 119, 0, 0, 239, 265,
	266, 0, 0, 120, 138, 133, 201, 414, 412, 407,
	406, 154, 161, 208, 269, 191, 214, 123, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 158, 268, 206, 136, 256, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 264,
}
var yyPact = [...]int{

	2121, -1000, -263, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1120, 1182, -1000, -1000, -1000, -1000,
	-1000, -1000, 429, 282, -1000, -1000, -1000, 235, -2, 14962,
	233, 1666, 15664, -1000, 44, -1000, -1000, 171, 15664, -1000,
	-1000, -81, -92, -1000, 886, -1000, -1000, 48, -1000, -1000,
	-1000, -1000, -1000, -1000, 1101, 1118, 969, 1110, 1011, -1000,
	7197, 187, 187, 14611, 17068, -1000, -1000, 420, 15664, 220,
	15664, -148, 173, 173, 92, 173, -1000, 450, -1000, -1000,
	-1000, 15664, 177, 15313, 177, 177, 177, 15664, -1000, 325,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15664, 799, 1069, 4324, 71, 4324, 4324, -1000,
	469, -1000, 4324, 76, 4324, -3, 557, 77, -20, -1000,
	4324, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 183,
	886, 431, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 636,
	231, 15664, 352, -1000, 1095, 8613, 8613, 1120, -1000, 886,
	-1000, -1000, -1000, 1061, -1000, -1000, 513, 1164, -1000, 11070,
	321, -1000, 8613, 2107, 861, -1000, -1000, 861, -1000, -1000,
	248, -1000, -1000, 9666, 9666, 9666, 9666, 9666, 9666, 9666,
	9666, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 861, -1000, 8262, 861, 861,
	861, 861, 861, 861, 861, 861, 861, 861, 8613, 861,
	861, 861, 861, 861, 861, 861, 861, 861, 861, 861,
	861, 861, 861, 861, 14253, 13551, 15664, 818, 804, -1000,
	-1000, 315, 649, 16717, -109, -1000, -1000, -1000, 404, 12849,
	-1000, 312, -1000, 1068, -1000, 794, 15664, -1000, 1811, -1000,
	15313, 1107, 210, 788, 490, 783, 781, 15664, 778, 915,
	206, 15664, 1097, 972, -1000, -1000, 15664, 776, 773, -1000,
	6144, -1000, 4324, 4324, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 173, 173,
	4324, 4324, 15664, 15664, 15664, -1000, -1000, 15664, -1000, -1000,
	-1000, 4324, 4324, -1000, 1162, 459, 459, -1000, -1000, -1000,
	-1000, 8613, -1000, 9666, 380, -1000, 970, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 771, -1000, -1000, -1000, -1000, 15664,
	4324, 83, 120, 111, 15664, -1000, 1177, 374, 530, 311,
	909, -1000, 522, 1101, 636, 1011, 12498, 985, -1000, -1000,
	-1000, 15664, -1000, 8613, 8613, 572, -1000, 13902, -1000, -1000,
	5052, 384, 9666, 544, 448, 9666, 9666, 9666, 9666, 9666,
	9666, 9666, 9666, 9666, 9666, 9666, 9666, 9666, 9666, 9666,
	580, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 766,
	-1000, 886, 613, 613, 342, 342, 342, 342, 342, 342,
	342, 10017, 1106, 636, 770, 425, 8262, 7197, 7197, 636,
	8613, 8613, 7899, 7548, 7197, 7197, 1106, 464, 425, 16366,
	-1000, -1000, 9315, -1000, -1000, -1000, -1000, -1000, 636, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15313, 15313, 7197, 7197,
	7197, 7197, 122, 15664, -1000, 896, 904, -1000, -1000, -1000,
	1102, 12147, 10719, 122, 888, 13551, 15664, -1000, -1000, 13551,
	15664, 4688, 16015, 649, -109, 858, -1000, -127, -123, 6495,
	336, -1000, -1000, -1000, 5780, -1000, 3596, 480, 816, -1000,
	-75, -1000, -1000, -1000, 927, -1000, 927, 131, -4, 927,
	927, 927, 927, 927, -39, -39, -39, -39, 0, -1000,
	-1000, -1000, -1000, -1000, 951, 949, -1000, 927, 927, 927,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 941, 132,
	941, 936, 936, 936, 936, 954, -1000, 15664, 4324, 1096,
	4324, 88, -1000, -1000, 15664, 15664, 908, -1000, 15664, 905,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 748, 730,
	-1000, -1000, -1000, -1000, -1000, 462, -1000, -1000, 15664, 1100,
	15664, 15664, 486, 425, 168, -1000, 619, 15664, -1000, 135,
	-1000, 15664, 15664, 15664, 15664, 15664, 292, -1000, 1032, 8613,
	8613, 5780, 8613, -1000, -1000, -1000, 1095, -1000, 1106, 1127,
	-1000, 1047, 1039, 7197, -1000, -1000, 384, 387, -1000, -1000,
	598, -1000, -1000, -1000, -1000, 310, 861, -1000, 2365, -1000,
	-1000, -1000, -1000, 544, 9666, 9666, 9666, 168, 2365, 2350,
	681, 2469, 342, 523, 523, 347, 347, 347, 347, 347,
	612, 612, -1000, -1000, -1000, 636, -1000, -1000, -1000, 7197,
	-1000, 8613, -1000, 636, 765, -1000, 765, -1000, 562, 515,
	412, 1157, 765, 368, 1148, 765, 765, 765, 7197, 493,
	-1000, 8613, 636, -1000, 1709, 901, 900, 765, 636, 899,
	765, 765, 814, 861, -1000, 16015, 13551, 13551, 13551, 13551,
	13551, -1000, 1004, 1001, -1000, 992, 990, 1033, 15664, -1000,
	760, 12147, -1000, 861, -1000, 11784, 273, 218, 216, 215,
	-1000, -1000, 1143, 13551, 865, -1000, 865, -1000, 307, -1000,
	-1000, 858, -109, -97, -1000, -1000, -1000, -1000, 425, -1000,
	601, -1000, 306, 854, 3232, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 948, 717, -1000, 1060, 327, 408, 661, 1055,
	-1000, -1000, -1000, 279, -93, -1000, -1000, 558, -39, -39,
	927, 927, 112, 927, -1000, -39, -1000, -1000, -1000, 336,
	1066, 336, 336, 336, 336, -39, 610, 610, -1000, -1000,
	-1000, -1000, 553, -1000, 941, -1000, -1000, 550, -1000, -1000,
	-1000, 967, 15313, 886, 1099, -1000, -1000, -1000, 1155, -1000,
	-1000, 198, -1000, 4324, 15664, 4324, 4324, 1143, 712, 705,
	459, 486, -198, -1000, -1000, -1000, 604, 8613, -1000, 9666,
	-1000, -1000, -1000, 442, 415, 424, 169, 169, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 121,
	953, -1000, -1000, -1000, -1000, 8, 82, 1027, 425, 425,
	-1000, -1000, 15664, -1000, -1000, -1000, -1000, 883, -1000, -1000,
	-1000, 3960, 7197, -1000, 168, 2365, 1262, -1000, 9666, -1000,
	636, 425, -1000, 7197, -1000, -1000, 330, 580, 330, 9666,
	9666, -1000, 9666, 9666, -1000, -162, -1000, 866, 452, -1000,
	8613, 559, -1000, -1000, 9666, 9666, -1000, -1000, -1000, -1000,
	964, 16015, 861, -1000, 11433, 15313, 867, 904, 946, 963,
	855, -1000, -1000, -1000, -1000, 998, -1000, 993, -1000, -1000,
	-1000, -1000, 15313, 9666, 273, -1000, 861, 861, 861, 1120,
	8613, 865, -1000, -1000, 359, -1000, -1000, -120, -128, -1000,
	-1000, -1000, 5416, 3596, -1000, 3596, 15313, 154, -1000, 661,
	661, -1000, -1000, -1000, 937, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 509, 9666, 1175, -1000, 1058, -1000, 1057, 603,
	-1000, -1000, 809, 336, 336, -39, -1000, -1000, 927, -1000,
	336, -1000, 391, -1000, -1000, -1000, -1000, 336, 756, -1000,
	716, 850, -1000, 710, 15664, -1000, -1000, -1000, 962, -1000,
	-1000, -1000, 15664, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	486, -1000, 9666, -1000, 425, 2365, -1000, 625, -1000, 661,
	291, -1000, -1000, -1000, 704, 1055, -1000, -1000, 700, -1000,
	699, 15313, 1054, 696, 15664, 15313, -1000, -1000, 672, 695,
	15313, -168, 676, 15313, 15313, 15313, -1000, -1000, 1143, 13551,
	-1000, -1000, 636, -1000, 9666, 2365, -1000, -1000, 636, 927,
	927, -1000, 927, 936, -1000, 927, 33, 927, 7, 636,
	636, 2261, 2238, 2059, 1833, 861, -155, -1000, 425, 8613,
	1792, 832, -1000, 1073, 811, 823, -1000, -1000, 6846, 636,
	692, 296, 690, -1000, 1120, -1000, -1000, 8613, 930, -1000,
	8613, -1000, -1000, -1000, 690, 1129, -1000, 15313, 15313, 15313,
	1101, 425, -1000, -1000, -1000, -1000, 3232, -1000, 688, -1000,
	927, -1000, -1000, -1000, 15313, -1000, 2365, -113, -1000, -1000,
	-1000, -1000, -1000, -1000, 336, -1000, -1000, -1000, -1000, -1000,
	-39, 593, -39, 545, -1000, 537, 925, -1000, 886, 15664,
	-1000, -1000, 2365, 672, 141, -1000, 954, 327, 154, -1000,
	-1000, -1000, -1000, 674, 305, -1000, 178, 141, 672, 1089,
	-1000, 5416, -1000, -1000, 924, 955, -1000, 1139, 841, -1000,
	2365, -1000, -1000, 192, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9666, 9666, 9666, 9666, 9666, 636, 590, 425,
	9666, 9666, 1051, -1000, 861, -1000, -1000, 860, 15313, 15313,
	-1000, 15313, 1101, 425, 15313, 425, 10368, -1000, 13200, 684,
	-1000, 684, 684, -1000, 263, 15313, 1077, 669, -1000, -1000,
	336, -1000, 336, 802, 693, 15313, -1000, 1109, 670, -1000,
	-1000, 666, 922, 661, -1000, -1000, 660, -1000, -1000, 15313,
	-1000, 141, 861, 831, -1000, 397, 15313, 15664, 1123, 1116,
	-1000, -1000, 1709, 1709, 1709, 1709, 113, -1000, -1000, 1709,
	1709, 1171, -1000, 861, -1000, 886, 289, -1000, -1000, -1000,
	651, -1000, 273, 15313, -1000, -1000, -1000, 263, -1000, 648,
	393, 577, -1000, -1000, 139, -1000, -1000, -1000, -1000, 647,
	-1000, 59, -1000, -1000, -1000, 15313, 954, -1000, -1000, -1000,
	-1000, 116, 5416, 3596, 643, -1000, -1000, 8613, 8613, -1000,
	-1000, -1000, -1000, 636, 69, -172, -1000, -1000, 16015, 823,
	636, 15313, -1000, -1000, -1000, -1000, -1000, 524, -1000, -1000,
	15664, 263, 55, -1000, 641, 921, -1000, 639, -1000, 15313,
	-1000, -1000, 953, 425, 819, -1000, 1024, -166, -177, 649,
	-1000, -1000, -1000, 917, -1000, 263, 51, 263, 15313, -1000,
	116, 1037, -168, -1000, 1008, -1000, 15313, -1000, 627, 600,
	-1000, 635, -1000, 97, -1000, -169, 631, 161, -1000, -1000,
	263, 90, -174, 961, -1000, -1000, -1000, -1000, -1000, -1000,
	176, -1000, 861, -178, 959, 958, 1147, -1000, -264, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8964, -1000, -1000, 1170,
	-1000, 1166, 258, 258, 167, 1709, 636, -1000, -1000, -1000,
	162, 539, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1441, 16, 588, 1440, 1439, 1437, 22, 14, 8,
	24, 1434, 1432, 1430, 1427, 1426, 1423, 11, 2, 1421,
	1420, 1419, 1416, 1415, 1414, 1412, 1407, 1406, 1405, 1404,
	1403, 1402, 1401, 1399, 1398, 1397, 1392, 1390, 110, 1387,
	1385, 1384, 129, 1383, 98, 1380, 1378, 1377, 68, 225,
	73, 65, 887, 1376, 1375, 70, 93, 87, 1374, 61,
	1373, 1372, 100, 1370, 1355, 1354, 84, 1353, 1351, 1654,
	1347, 95, 1342, 40, 36, 62, 1340, 1339, 1334, 1331,
	92, 145, 1329, 1328, 1327, 44, 1325, 1324, 137, 1323,
	81, 34, 21, 35, 42, 1322, 172, 29, 1318, 79,
	1317, 1316, 1315, 1314, 82, 1311, 27, 1310, 86, 12,
	32, 37, 83, 1307, 6, 90, 53, 48, 30, 88,
	1304, 91, 75, 1302, 1301, 618, 1300, 1299, 76, 1298,
	1297, 52, 1296, 465, 97, 51, 1293, 1291, 1288, 1287,
	45, 64, 1286, 1285, 179, 74, 89, 20, 1103, 54,
	96, 1284, 28, 1283, 1680, 102, 41, 59, 1279, 1276,
	56, 1273, 1271, 1270, 1267, 1265, 1264, 1263, 1262, 1096,
	1260, 1259, 1258, 77, 58, 1257, 1254, 80, 49, 1253,
	1251, 1248, 78, 50, 1242, 66, 43, 1240, 1239, 1237,
	1222, 38, 1221, 1214, 1210, 1202, 1200, 57, 46, 1199,
	39, 18, 26, 33, 7, 47, 1198, 10, 1195, 31,
	1194, 13, 1193, 19, 72, 4, 5, 3, 1192, 1191,
	1190, 0, 85, 103, 1189, 1188, 121,
}
var yyR1 = [...]int{

	0, 219, 220, 220, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 41, 41, 8,
	9, 9, 9, 9, 223, 223, 64, 64, 62, 62,
	63, 63, 115, 115, 10, 10, 10, 10, 119, 119,
	122, 122, 122, 123, 123, 123, 123, 158, 158, 109,
	12, 12, 12, 12, 12, 12, 12, 12, 143, 143,
	20, 20, 21, 21, 21, 107, 107, 107, 11, 11,
	11, 11, 11, 17, 19, 19, 18, 18, 18, 18,
	18, 18, 213, 213, 212, 211, 211, 210, 210, 209,
	26, 193, 195, 195, 194, 194, 194, 194, 183, 162,
	162, 162, 162, 162, 162, 162, 161, 161, 161, 161,
	165, 165, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 164, 164, 164, 164, 164, 164, 164, 164, 166,
	166, 166, 166, 166, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 168,
	168, 168, 168, 168, 168, 168, 168, 182, 182, 169,
	169, 177, 177, 178, 178, 178, 175, 175, 176, 176,
	179, 179, 171, 172, 180, 173, 173, 173, 174, 174,
	174, 181, 181, 181, 181, 170, 184, 184, 204, 204,
	203, 203, 202, 202, 202, 192, 192, 199, 199, 199,
	199, 199, 187, 187, 187, 186, 186, 188, 188, 191,
	191, 201, 201, 200, 185, 185, 205, 205, 205, 205,
	205, 189, 189, 190, 190, 190, 216, 217, 215, 215,
	215, 215, 215, 196, 196, 196, 197, 197, 197, 198,
	198, 198, 218, 218, 22, 22, 22, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 106, 106, 106, 24, 25,
	25, 25, 25, 25, 25, 25, 25, 141, 141, 214,
	214, 214, 214, 214, 208, 206, 206, 207, 207, 13,
	27, 27, 14, 14, 14, 14, 14, 15, 15, 28,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 53, 129, 129, 127, 127, 130, 130, 128, 128,
	128, 131, 131, 131, 132, 132, 159, 159, 159, 30,
	30, 35, 35, 36, 37, 142, 142, 33, 33, 34,
	34, 34, 34, 47, 47, 224, 224, 32, 32, 31,
	31, 31, 31, 16, 225, 38, 39, 39, 40, 40,
	40, 44, 44, 44, 42, 42, 42, 43, 43, 50,
	50, 49, 49, 51, 51, 51, 51, 151, 151, 151,
	150, 150, 54, 54, 55, 55, 56, 56, 57, 57,
	57, 57, 72, 72, 73, 73, 73, 73, 73, 83,
	83, 114, 114, 116, 116, 58, 58, 58, 58, 59,
	59, 60, 60, 61, 61, 140, 140, 156, 156, 65,
	65, 65, 67, 66, 66, 66, 66, 68, 68, 70,
	70, 69, 69, 71, 74, 74, 74, 74, 75, 75,
	52, 52, 52, 52, 52, 52, 52, 126, 126, 77,
	77, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 89, 89, 89, 89, 89, 89, 78, 78, 78,
	78, 78, 78, 78, 48, 48, 90, 90, 90, 96,
	91, 91, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 86, 86, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 226, 226, 88,
	87, 87, 87, 87, 87, 87, 45, 45, 45, 45,
	45, 157, 157, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 100, 100, 46, 46,
	98, 98, 99, 101, 101, 97, 97, 97, 80, 80,
	80, 80, 80, 80, 80, 80, 82, 82, 82, 102,
	102, 103, 103, 104, 104, 105, 105, 108, 110, 110,
	110, 111, 111, 111, 111, 112, 112, 112, 79, 79,
	79, 79, 79, 79, 113, 113, 113, 113, 117, 117,
	92, 92, 94, 94, 93, 95, 118, 118, 121, 121,
	121, 121, 120, 120, 120, 153, 153, 153, 124, 124,
	133, 133, 134, 134, 125, 125, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 139, 139, 138, 138,
	138, 135, 135, 135, 136, 136, 152, 152, 148, 148,
	149, 149, 154, 154, 155, 155, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 221, 222, 144, 145, 145,
	145,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 15, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 1, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 3, 0,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 3, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 3, 3, 2, 4,
	5, 2, 3, 4, 2, 2, 3, 3, 3, 3,
	3, 4, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 3, 1, 0, 3, 3, 0, 2,
	2, 2, 1, 2, 1, 2, 5, 4, 0, 1,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 1, 3, 3, 3, 1, 10, 11, 11, 12,
	12, 1, 1, 0, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 0, 2, 1, 1, 1, 6, 10, 9,
	7, 7, 7, 9, 7, 12, 14, 7, 7, 9,
	9, 10, 5, 6, 8, 0, 1, 2, 4, 7,
	5, 5, 5, 12, 7, 5, 9, 0, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 4, 4, 4, 3, 2, 3,
	4, 4, 3, 6, 6, 4, 4, 4, 4, 4,
	3, 3, 2, 6, 2, 3, 4, 3, 7, 6,
	5, 4, 2, 4, 3, 4, 3, 3, 5, 2,
	3, 3, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 0, 3, 1, 1, 2, 2, 2,
	2, 3, 3, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	1, 3, 2, 6, 1, 4, 6, 3, 2, 0,
	3, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 5, 6, 4, 4, 3, 6,
	6, 6, 8, 8, 8, 8, 9, 4, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -219, -1, -2, -6, -7, -8, -9, -10, -12,
	-22, -13, -14, -15, -28, -29, -30, -35, -36, -37,
	-33, -32, -31, -16, -3, -4, 6, 7, -41, 9,
	10, 29, -26, 117, -23, -24, -25, 120, 119, 156,
	121, 149, 52, 178, 179, 181, 182, -224, -142, 154,
	155, 30, 31, 123, -221, 8, 271, 118, 151, 150,
	25, 56, -220, 369, -104, 15, -40, 5, -38, -225,
	-38, -38, -38, -38, -38, -193, -195, 56, 92, -136,
	130, 74, 263, 126, -143, 127, -135, 177, 33, 137,
	136, 127, 127, 128, 130, 263, 126, 127, -69, -154,
	59, -147, 281, 140, 313, 314, 178, 189, 183, 217,
	205, 282, 315, 141, 203, 206, 250, 139, 316, 237,
	245, 68, 181, 259, 317, 152, 201, 194, 318, 290,
	192, 27, 319, 247, 222, 320, 286, 193, 246, 123,
	321, 143, 137, 322, 223, 227, 323, 251, 324, 325,
	326, 187, 188, 327, 253, 221, 138, 32, 283, 37,
	161, 254, 225, 328, 220, 215, 329, 330, 331, 332,
	219, 186, 214, 41, 229, 228, 230, 249, 208, 333,
	334, 335, 144, 336, 195, 18, 337, 338, 339, 340,
	341, 257, 155, 342, 159, 343, 344, 345, 346, 347,
	348, 248, 224, 226, 134, 163, 285, 349, 255, 191,
	350, 145, 160, 154, 258, 146, 351, 352, 353, 354,
	355, 356, 357, 182, 358, 359, 360, 361, 171, 252,
	261, 40, 234, 362, 185, 136, 363, 179, 168, 240,
	212, 162, 364, 365, 199, 200, 218, 184, 213, 180,
	164, 165, 156, 366, 260, 235, 287, 207, 204, 169,
	367, 130, 166, 167, 368, 241, 242, 170, 284, 256,
	202, 236, 127, 110, 206, 250, 117, 238, 239, 247,
	-187, 248, 163, -159, 127, -127, 237, 241, 242, 170,
	59, 128, 129, 32, 252, 251, 243, -154, 180, -47,
	121, 157, -69, -144, -144, -144, 240, 240, -144, -2,
	-125, 130, 242, 132, -111, 17, 16, -5, -3, -221,
	6, 20, 21, -44, 42, 43, -39, -51, 101, -52,
	-154, -76, 76, -81, 28, 59, -147, 23, -80, -77,
	-97, -95, -96, 110, 111, 112, 99, 100, 107, 77,
	113, -86, -84, -85, -87, 61, 60, 69, 62, 63,
	64, 65, 70, 71, 72, -148, -93, -221, 46, 47,
	126, 272, 273, 274, 275, 280, 147, 276, 79, 36,
	262, 270, 269, 268, 266, 267, 264, 265, 278, 279,
	133, 263, 105, 271, -125, -125, 11, -62, -63, -69,
	-71, -154, -118, -158, 180, -121, 252, 251, -97, -120,
	-148, -154, 250, 206, 249, -194, 92, -183, 59, -69,
	128, -69, 271, -134, 133, -134, 164, -134, 84, -27,
	-69, -133, 133, -148, 59, -147, -133, -133, -133, -69,
	114, -69, 59, 29, -145, -221, -149, -148, -146, 122,
	148, 288, 75, 22, 24, 232, 78, 110, 16, 79,
	109, 272, 117, 50, 289, 264, 265, 262, 274, 275,
	263, 238, 28, 10, 291, 25, 150, 21, 103, 119,
	82, 83, 153, 23, 151, 72, 147, 294, 19, 53,
	11, 13, 295, 296, 14, 133, 132, 94, 128, 48,
	8, 113, 26, 91, 44, 297, 34, 298, 299, 300,
	301, 46, 92, 17, 266, 267, 30, 302, 280, 158,
	105, 51, 38, 76, 303, 304, 70, 305, 73, 54,
	74, 15, 49, 306, 307, 308, 309, 93, 120, 271,
	47, 310, 126, 6, 277, 29, 149, 45, 311, 127,
	81, 278, 279, 131, 71, 5, 33, 31, 9, 52,
	55, 268, 269, 270, 36, 80, 12, 312, 263, 126,
	59, 163, 127, 164, 130, -145, -145, -189, 11, 94,
	-145, 168, 169, -145, -130, -129, 165, 245, 246, 240,
	244, 12, -53, 92, 169, 240, 167, -145, -34, -2,
	-9, -7, -8, -2, 84, -144, -144, -222, 58, 127,
	-69, 117, 119, 122, 54, -112, 19, 30, -52, -154,
	-105, -108, -52, -104, -2, -38, 38, -42, 20, 21,
	67, 11, -151, 75, 74, 91, -150, 22, -148, 61,
	114, -52, -78, 94, 76, 92, 93, 78, 96, 95,
	106, 99, 100, 101, 102, 103, 104, 105, 97, 98,
	109, 84, 85, 86, 87, 88, 89, 90, -126, -221,
	-96, -221, 115, 116, -81, -81, -81, -81, -81, -81,
	-81, -81, -221, -2, -91, -52, -221, -221, -221, -221,
	-221, -221, -221, -221, -221, -221, -221, -100, -52, -221,
	-226, -88, -221, -226, -88, -226, -88, -226, -221, -226,
	-88, -226, -88, -226, -226, -88, -221, -221, -221, -221,
	-221, -221, -70, 26, -69, -55, -56, -57, -58, -72,
	-96, -221, -69, -69, -62, -223, 57, 11, 55, -223,
	57, 114, 57, -118, 180, -119, -122, 253, 255, 84,
	-153, -148, 61, 28, 114, 29, 58, 57, -69, -161,
	-165, -167, -166, -168, -163, -164, 203, 206, 210, 208,
	204, 209, 110, 207, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 29, 152, 199, 200, 201,
	202, 223, 224, 225, 226, 227, 228, 229, 230, 183,
	205, 282, 184, 185, 186, 187, 188, 189, 191, 192,
	193, 194, 195, 196, 197, -148, 22, 130, 59, 76,
	59, 59, -69, 59, 57, 131, -62, 23, 54, -64,
	-69, 59, 59, -155, -154, -146, -145, -145, -134, -134,
	-145, -145, -69, -69, -69, -69, -145, -145, 11, -128,
	11, 94, -128, -52, -81, -132, 92, 54, 59, -69,
	-145, 166, 166, 127, 127, 171, -69, 9, 94, 57,
	18, 114, 57, -110, 24, 25, -111, -222, -44, -82,
	-148, 62, 65, -43, 45, -69, -52, -52, -89, 70,
	76, 71, 72, -150, 101, -155, -149, -146, -81, -90,
	-93, -96, 66, 94, 92, 93, 78, -81, -81, -81,
	-81, -81, -81, -81, -81, -81, -81, -81, -81, -81,
	-81, -81, -157, 59, 61, 59, -80, -80, -148, -42,
	-222, 57, -222, -2, -49, -51, -49, -222, -52, -52,
	-97, 61, -49, -97, 61, -49, -49, -49, -42, -98,
	-99, 80, -97, -222, -81, -148, -148, -49, -50, -49,
	-49, -49, -115, 159, -69, 29, 57, -65, -67, -66,
	-68, 44, 48, 50, 45, 46, 47, 51, -140, 22,
	-55, -221, -73, 159, -74, 22, -156, 52, 132, 53,
	-154, 61, -115, 55, -55, -69, -55, -71, -154, 101,
	-121, -119, 57, 254, 256, 257, 54, 73, -52, -174,
	109, -149, -155, -196, -197, -198, -149, 61, 62, -183,
	-184, -185, -199, 142, -205, 134, 136, 33, -186, 143,
	128, 34, 58, -162, -175, 235, -169, 56, -169, -169,
	211, 203, 206, 204, -169, -169, -169, -169, -169, -173,
	206, -173, -173, -173, -173, 204, 56, 56, -169, -169,
	-169, -177, 56, -177, 198, -177, -178, 56, -178, -178,
	-178, -152, 55, -109, -69, -145, 23, -145, -20, 174,
	148, -69, -69, -69, 57, 59, 59, -190, 11, 94,
	-69, -83, 22, -154, -154, -131, 92, 12, -48, 153,
	61, -69, -137, 122, 119, 120, 124, 125, -208, 118,
	232, 206, 68, 28, 15, 272, 159, 287, 59, 160,
	-69, -69, -69, -69, -69, 122, 119, 40, -52, -52,
	-108, -112, -124, 19, 11, 36, 36, -49, 70, 71,
	72, 114, -221, -90, -81, -81, -81, -48, 75, -222,
	-50, -52, -222, 57, -222, -222, 57, 55, 22, 11,
	11, -222, 11, 11, -222, -222, -222, -49, -101, -99,
	82, -52, -222, -222, 57, 57, -222, -222, -222, -222,
	-79, 29, 36, -2, -221, -221, -118, -56, -57, -57,
	-56, -57, 44, 44, 44, 49, 44, 49, 44, -66,
	-154, -222, -221, 305, -156, -74, 128, 128, 128, -75,
	12, -55, -75, -75, 114, -122, -123, 258, 255, 261,
	59, 61, 114, 57, -198, 84, 56, 59, 34, -186,
	-186, -191, 59, -191, 34, -179, -171, -172, -180, -181,
	-170, 70, 76, 28, 54, 232, 134, 34, 33, 68,
	-176, 236, 62, -173, -173, -169, -169, -169, 211, -169,
	-173, -174, 29, -174, -174, -174, -174, -173, -182, 61,
	-182, 62, -177, 62, 54, -148, -2, 22, -21, 8,
	9, 10, 131, -145, -69, -145, -145, -75, 59, 59,
	-128, -131, 305, 61, -52, -81, -144, -141, -214, -186,
	-218, -185, 135, 139, 142, 143, 134, 159, -141, -214,
	142, -186, 143, 135, -138, -186, 131, 22, -141, -141,
	159, -213, 55, 166, 232, 166, 41, -69, -54, 11,
	101, -149, -50, -48, 75, -81, -222, -51, -160, 110,
	203, 152, 201, 194, 221, 208, 234, 199, 235, -157,
	-160, -81, -81, -81, -81, 281, -104, 83, -52, 81,
	-81, -81, -117, 54, -118, -92, -94, -93, -221, -2,
	-113, -148, -116, -148, -75, -60, -59, 54, 55, -61,
	54, -59, 44, 44, -116, -81, -74, -221, -221, -221,
	-104, -52, -75, 255, 259, 260, -197, -198, -201, -200,
	-148, -205, -191, -191, 56, 70, -81, 9, 34, 34,
	61, 58, -174, -174, -173, -169, -174, 59, 110, -174,
	58, 57, 58, 57, 58, 57, -69, -109, -109, 54,
	-69, -131, -81, 56, -183, -144, -191, -135, 59, 59,
	-144, 59, -148, 34, 59, -69, -148, -183, 59, -148,
	-211, 284, -212, 59, -148, -148, -148, -75, -55, -222,
	-81, -222, -169, -169, -169, -178, -169, 188, -169, 188,
	-222, -222, 19, 19, 19, 19, -221, -46, 277, -52,
	57, 57, 27, -117, 57, -222, -222, -222, 57, 114,
	-222, 57, -104, -52, 56, -52, -222, -74, -140, -114,
	-148, -114, -114, -111, 58, 57, -169, -114, -85, -174,
	-173, 61, -173, 62, 62, 56, -2, -69, -183, -106,
	147, 148, -152, -188, -186, 59, -139, 131, 22, 131,
	-106, -183, 26, -210, -209, -149, 56, 55, -102, 13,
	-173, 59, -81, -81, -81, -81, -81, -222, 61, -81,
	-81, 34, -94, 36, -2, -221, -148, -148, -148, -111,
	-114, -73, -156, 57, -222, -222, -222, -203, -202, 55,
	138, 68, -200, -110, 58, -174, -174, 58, 58, -201,
	-109, 19, 58, -144, 59, 56, -191, 59, -148, -144,
	-106, -221, 57, 84, -114, -69, -103, 14, 16, -222,
	-222, -222, -222, -45, 94, 284, -222, -222, 9, -92,
	-2, 114, 58, -74, -148, -202, 59, -192, 84, 61,
	145, 58, 172, -144, -201, -152, -144, -206, -207, 159,
	-209, -198, 58, -52, -91, -222, 282, 51, 285, -118,
	-222, -148, 62, -69, -204, -203, 173, 58, 56, -222,
	57, -148, -213, 41, 283, 286, 56, -107, 175, 176,
	-204, -201, -207, 36, -211, 41, -114, -109, 59, 59,
	58, 161, 284, 58, -11, -17, -10, -7, -8, -9,
	178, -204, 162, 285, -216, -217, 54, -109, -19, -18,
	-2, -7, -8, -9, -10, -17, -221, 286, -217, 54,
	-216, 54, 10, 9, 369, -81, 158, -215, 146, 141,
	144, 29, -215, 83, -18, -222, -222, 140, 28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 653, 0, 404, 404, 404, 404,
	404, 404, 0, -2, 274, 275, 276, 0, 0, 0,
	0, -2, 380, 381, 0, 383, 384, 393, -2, 1027,
	1027, 0, 0, 1027, 0, 37, 38, 704, 396, 385,
	386, 1025, 1, 3, 661, 0, 0, 408, 411, 406,
	0, 704, 704, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 702, 702, 0, 702, 725, 0, 721, 722,
	723, 0, 700, 0, 700, 700, 700, 0, 328, 481,
	732, 733, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 0, 0, 0, 1028, 0, 1028, 1028, 342,
	0, 344, 1028, 0, 1028, 0, 352, 0, 0, 359,
	1028, 232, 233, 234, 377, 378, 365, 379, 382, 0,
	0, 0, 397, 398, 399, 400, 1027, 1027, 403, 31,
	0, 0, 0, 705, 665, 0, 0, 653, 33, 0,
	404, 409, 410, 414, 412, 413, 405, 0, 423, 427,
	0, 490, 0, 495, 497, -2, -2, 0, 532, 533,
	534, 535, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 560, 561, 562, 563, 638, 639, 640, 641, 642,
	643, 644, 645, 499, 500, 635, 685, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	597, 597, 597, 597, 597, 597, 597, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	50, 481, 54, 0, 1002, 686, -2, -2, 0, 0,
	635, 0, -2, 868, -2, 0, 0, 114, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 728, 729, 0, 0, 0, 327,
	0, 329, 1028, 1028, 332, 1029, 1030, 730, 731, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 702, 702,
	1028, 1028, 0, 0, 0, 340, 341, 0, 251, 252,
	345, 1028, 1028, 347, 0, 368, 368, 366, 367, 362,
	363, 0, 354, 0, 374, 356, 357, 360, 387, -2,
	390, 391, 392, -2, 0, 401, 402, 32, 1026, 0,
	1028, 0, 0, 0, 0, 26, 0, 0, 662, 0,
	654, 655, 658, 661, 31, 411, 0, 417, 415, 416,
	407, 0, 424, 0, 0, 0, 428, 0, 430, 431,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 517, 518, 519, 520, 521, 522, 523, 496, 0,
	510, 0, 0, 0, 552, 553, 554, 555, 556, 557,
	558, 0, 414, 31, 0, 530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 627, 0,
	581, 589, 0, 582, 590, 583, 591, 584, 0, 585,
	592, 586, 593, 587, 588, 594, 0, 0, 0, 419,
	0, 0, 52, 0, 480, 0, 434, 436, 437, 438,
	-2, 0, 484, -2, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 55, 1002, 57, 58, 0, 0, 0,
	208, 695, 696, 697, 0, 693, 263, 0, 0, 119,
	196, 127, 128, 129, 189, 131, 189, 189, 0, 189,
	189, 189, 189, 189, 205, 205, 205, 205, 205, 172,
	173, 174, 175, 176, 0, 0, 149, 189, 189, 189,
	153, 179, 180, 181, 182, 183, 184, 185, 186, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 191, 191,
	191, 193, 193, 193, 193, 726, 69, 0, 1028, 0,
	1028, 0, 110, 79, 0, 0, 322, 701, 0, 324,
	46, 325, 326, 482, 734, 735, 330, 331, 0, 0,
	335, 336, 337, 338, 339, 253, 346, 351, 0, 449,
	0, 0, 371, 353, 524, 355, 0, 0, 394, 0,
	298, 0, 0, 0, 0, 0, 0, 666, 0, 0,
	0, 0, 0, 657, 659, 660, 665, 34, 414, 0,
	646, 0, 0, 0, 418, 29, 491, 492, 494, 511,
	0, 513, 515, 429, 425, 0, 636, -2, 501, 502,
	526, 527, 528, 0, 0, 0, 0, 524, 506, 0,
	537, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 551, 611, 612, 0, 549, 550, 559, 419,
	529, 0, 684, 31, 0, 421, 0, 568, 0, 0,
	534, 638, 0, 534, 638, 0, 0, 0, 0, 633,
	630, 0, 0, 598, 0, 0, 0, 0, 0, 420,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 0,
	0, 469, 0, 0, 472, 0, 0, 0, 0, 466,
	0, 0, 442, 947, 444, 0, 484, 0, 0, 0,
	467, 468, 488, 0, 488, 49, 488, 51, 0, 483,
	687, 56, 0, 0, 61, 62, 688, 689, 690, 691,
	0, 636, 0, 111, 264, 266, 269, 270, 271, 115,
	116, 117, 0, 0, 245, 0, 0, 239, 239, 0,
	235, 236, 113, 118, 198, 197, 130, 0, 205, 205,
	189, 189, 189, 189, 158, 205, 161, 164, 165, 208,
	0, 208, 208, 208, 208, 205, 0, 0, 150, 151,
	152, 141, 0, 142, 191, 144, 145, 0, 146, 147,
	148, 0, 0, 0, 0, 75, 703, 76, 0, 80,
	81, 0, 320, 1028, 0, 1028, 1028, 488, 0, 0,
	368, 371, 0, 369, 370, 350, 0, 0, 361, 0,
	375, 358, 1027, -2, 307, 718, 307, 307, 292, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 0,
	102, 300, 302, 301, 305, 0, 0, 0, 663, 664,
	656, 27, 0, 698, 699, 647, 648, 432, 512, 514,
	516, 0, 419, 503, 524, 507, 0, 504, 0, 498,
	0, 531, -2, 0, 566, 567, 0, 0, 0, 0,
	0, 604, 0, 0, 605, 0, 577, 653, 0, 631,
	0, 0, 580, 599, 0, 0, 600, 601, 602, 603,
	678, 0, 0, -2, 0, 0, 488, 435, 461, 463,
	0, 458, 470, 471, 473, 0, 475, 0, 477, 478,
	439, 441, 0, 0, 484, 448, 0, 0, 0, 653,
	0, 488, 42, 43, 0, 59, 60, 0, 0, 66,
	209, 210, 0, 0, 267, 0, 0, 0, 227, 239,
	239, 230, 240, 231, 0, 120, 121, 122, 123, 124,
	125, 200, 0, 0, 0, 204, 0, 212, 214, 0,
	126, 199, 0, 208, 208, 205, 156, 157, 189, 162,
	208, 166, 0, 167, 168, 169, 170, 208, 0, 187,
	0, 0, 143, 0, 0, 727, -2, 69, 0, 82,
	83, 84, 0, 323, 47, 333, 334, 343, 254, 255,
	371, 349, 0, 372, 373, 525, 277, 0, 1027, 239,
	0, 293, 308, 309, 310, 311, 312, 313, 0, 1027,
	310, 0, 311, 0, 0, 0, 719, 720, 0, 0,
	0, 105, 0, 0, 0, 0, 667, 28, 488, 0,
	426, 637, 0, 505, 0, 508, 564, 422, 0, 189,
	189, 616, 189, 193, 619, 189, 621, 189, 624, 0,
	0, 0, 0, 0, 0, 0, 628, 579, 634, 0,
	0, 0, 35, 0, 678, 668, 680, 682, 0, 31,
	0, 674, 0, 453, 653, 455, 462, 0, 0, 456,
	0, 457, 474, 476, 0, -2, 447, 0, 0, 0,
	661, 489, 41, 63, 64, 65, 265, 268, 0, 241,
	189, 244, 228, 229, 0, 201, 202, 0, 211, 213,
	215, 190, 154, 155, 208, 163, 159, 206, 207, 171,
	205, 0, 205, 0, 194, 0, 0, 73, 0, 0,
	321, 348, 450, 0, 295, 280, 726, 237, 273, 281,
	282, 287, 288, 0, 0, 284, 0, 295, 0, 0,
	299, 0, 103, 104, 0, 0, 304, 649, 433, 565,
	509, 569, 613, 205, 617, 618, 620, 622, 623, 625,
	571, 570, 0, 0, 0, 0, 0, 0, 0, 632,
	0, 0, 0, 36, 0, 683, -2, 0, 0, 0,
	53, 0, 661, 459, 0, 464, 484, 445, 0, 0,
	451, 0, 0, 40, 217, 0, 658, 0, 203, 160,
	208, 188, 208, 0, 0, 0, -2, 0, 0, 1027,
	296, 0, 0, 239, 238, 294, 0, 716, 717, 0,
	1027, 295, 0, 106, 107, 0, 0, 0, 651, 0,
	614, 615, 0, 0, 0, 0, 606, 578, 629, 0,
	0, 0, 681, 0, -2, 0, 676, 675, 454, 39,
	0, 443, 484, 0, 485, 486, 487, 216, 220, 0,
	225, 0, 242, 243, 0, 177, 178, 192, 195, 0,
	74, 0, 1027, 279, 297, 0, 726, 283, 289, 290,
	1027, 0, 0, 0, 0, 306, 30, 0, 0, 572,
	574, 573, 575, 0, 0, 0, 595, 596, 0, 671,
	31, 0, 460, 446, 452, 221, 222, 0, 226, 224,
	0, 218, 0, 278, 0, 0, 291, 0, 315, 0,
	108, 109, 102, 652, 650, 576, 0, 0, 0, 679,
	-2, 677, 223, 0, 72, 219, 85, 218, 0, 314,
	0, 0, 105, 607, 0, 610, 0, 69, 0, 0,
	285, 0, 316, 0, 303, 608, 0, 0, 86, 87,
	218, 0, 0, 246, 69, 88, 89, 90, 91, 92,
	0, 286, 0, 0, 247, 248, 0, 77, 0, 94,
	-2, 97, 98, 99, 100, 101, 0, 609, 249, 0,
	250, 0, 0, 0, 0, 0, 0, 256, 258, 259,
	0, 0, 257, 93, 95, 317, 318, 260, 261, 262,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 369,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:343
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:348
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:353
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:377
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:383
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:401
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:408
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:424
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:428
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:435
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:447
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:469
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:475
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:492
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:493
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:497
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:501
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:507
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:511
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:526
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:530
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:536
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:605
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:619
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:625
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:641
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:650
		{
			yyVAL.empty = struct{}{}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:654
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.str = BeforeStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:664
		{
			yyVAL.str = AfterStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.str = InsertStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.str = UpdateStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = DeleteStr
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:683
		{
			yyVAL.triggerOrder = nil
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:687
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:707
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:717
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:733
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:748
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:764
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:770
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:776
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:787
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:809
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:817
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:823
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:845
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:863
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:881
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1171
		{
			yyVAL.sqlVal = nil
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1184
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1192
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1202
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1210
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1219
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1246
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = ""
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1265
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1284
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.colKeyOpt = colKey
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1292
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1302
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1308
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1312
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1317
		{
			yyVAL.indexOptions = nil
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1321
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1337
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1341
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1346
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1352
		{
			yyVAL.str = ""
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1356
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1366
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1378
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1384
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1388
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1398
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1407
		{
			yyVAL.str = ""
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1411
		{
			yyVAL.str = yyDollar[1].str
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1416
		{
			yyVAL.str = ""
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1426
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1430
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1436
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1442
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1446
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 246:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1453
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 247:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1457
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 248:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1461
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 249:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1465
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 250:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1469
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1479
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1498
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1504
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1514
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1539
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = yyDollar[1].str
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1561
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1565
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1569
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1593
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 279:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1600
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1623
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 285:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 286:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1636
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 289:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1649
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 291:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1656
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1662
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1666
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1678
		{
			yyVAL.columnOrder = nil
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1686
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 299:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1768
		{
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1781
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 317:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1797
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 318:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1801
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1817
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1825
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1833
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1837
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1845
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1849
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1870
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1875
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1879
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1883
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1887
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1892
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1900
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1904
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1908
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1928
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1936
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1944
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1949
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1967
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1971
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1985
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1990
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1994
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1998
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2002
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2016
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2022
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = ""
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = "full "
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2072
		{
			yyVAL.showFilter = nil
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2080
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2086
		{
			yyVAL.showFilter = nil
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2096
		{
			yyVAL.str = ""
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
			yyVAL.str = SessionStr
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = GlobalStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.statement = &Begin{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.statement = &Begin{}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.statement = &Commit{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.statement = &Rollback{}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2146
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2164
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2179
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2183
		{
			yyVAL.statement = &OtherRead{}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2207
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2211
		{
			setAllowComments(yylex, true)
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2221
		{
			yyVAL.bytes2 = nil
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = UnionStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = UnionAllStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = UnionDistinctStr
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = ""
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = SQLCacheStr
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2257
		{
			yyVAL.str = ""
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = DistinctStr
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2270
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.str = StraightJoinHint
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2279
		{
			yyVAL.selectExprs = nil
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2289
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2293
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2303
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2311
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2316
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2324
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2331
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2336
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2374
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2385
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2396
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2400
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2404
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2408
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = nil
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2443
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2460
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2464
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2468
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2472
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2480
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2484
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2486
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2490
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2495
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2502
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = JoinStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2512
		{
			yyVAL.str = JoinStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.str = JoinStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.str = StraightJoinStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2528
		{
			yyVAL.str = LeftJoinStr
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2532
		{
			yyVAL.str = LeftJoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.str = RightJoinStr
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2540
		{
			yyVAL.str = RightJoinStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.str = NaturalJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2564
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2574
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2580
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2585
		{
			yyVAL.indexHints = nil
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2589
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2593
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2597
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = nil
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2642
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2652
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2656
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = IsNullStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.str = IsNotNullStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.str = IsTrueStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = IsNotTrueStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = IsFalseStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.str = IsNotFalseStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = EqualStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2734
		{
			yyVAL.str = LessThanStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.str = GreaterThanStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			yyVAL.str = LessEqualStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.str = GreaterEqualStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2750
		{
			yyVAL.str = NotEqualStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = nil
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2763
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2891
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2921
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 565:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2961
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 569:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2969
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 571:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2973
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 572:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 573:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2989
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 576:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2993
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2997
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 578:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3009
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3023
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3037
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3058
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3071
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3076
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3099
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3117
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3135
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3139
		{
			yyVAL.str = BooleanModeStr
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3143
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 609:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3147
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3151
		{
			yyVAL.str = QueryExpansionStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3167
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3171
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3175
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3183
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3187
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3197
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3209
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = nil
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3231
		{
			yyVAL.str = string("")
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3235
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3245
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3251
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3256
		{
			yyVAL.expr = nil
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3266
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3270
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3274
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3280
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3284
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3308
		{
			yyVAL.expr = &NullVal{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3314
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3327
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3332
		{
			yyVAL.exprs = nil
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3336
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3341
		{
			yyVAL.expr = nil
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3345
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3350
		{
			yyVAL.orderBy = nil
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3354
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3360
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3364
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3370
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3375
		{
			yyVAL.str = AscScr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3379
		{
			yyVAL.str = AscScr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3383
		{
			yyVAL.str = DescScr
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3388
		{
			yyVAL.limit = nil
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3392
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3396
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3400
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3405
		{
			yyVAL.str = ""
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3409
		{
			yyVAL.str = ForUpdateStr
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3413
		{
			yyVAL.str = ShareModeStr
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3426
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3434
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3439
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3443
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3447
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3454
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3458
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3462
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3466
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3471
		{
			yyVAL.setExprs = nil
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3475
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3485
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3495
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3501
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3517
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3521
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3527
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3531
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3535
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3546
		{
			yyVAL.bytes = []byte("charset")
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3553
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3557
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.expr = &Default{}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3570
		{
			yyVAL.byt = 0
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3572
		{
			yyVAL.byt = 1
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3575
		{
			yyVAL.byt = 0
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3577
		{
			yyVAL.byt = 1
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3580
		{
			yyVAL.str = ""
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3582
		{
			yyVAL.str = IgnoreStr
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3586
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3588
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3592
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3596
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3598
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3600
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3602
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3604
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3608
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3610
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3613
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3615
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3617
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3621
		{
			yyVAL.str = UniqueStr
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.str = FulltextStr
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.str = SpatialStr
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3628
		{
			yyVAL.str = ""
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3630
		{
			yyVAL.str = yyDollar[1].str
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3633
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3635
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3639
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3643
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3650
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3656
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3667
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3982
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3991
		{
			decNesting(yylex)
		}
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3996
		{
			skipToEnd(yylex)
		}
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4001
		{
			skipToEnd(yylex)
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4005
		{
			skipToEnd(yylex)
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4009
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
