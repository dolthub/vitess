// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const VINDEX = 57490
const VINDEXES = 57491
const STATUS = 57492
const VARIABLES = 57493
const WARNINGS = 57494
const SEQUENCE = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const MEDIUMINT = 57504
const INT = 57505
const INTEGER = 57506
const BIGINT = 57507
const INTNUM = 57508
const REAL = 57509
const DOUBLE = 57510
const FLOAT_TYPE = 57511
const DECIMAL = 57512
const NUMERIC = 57513
const DEC = 57514
const FIXED = 57515
const PRECISION = 57516
const TIME = 57517
const TIMESTAMP = 57518
const DATETIME = 57519
const YEAR = 57520
const CHAR = 57521
const VARCHAR = 57522
const BOOL = 57523
const CHARACTER = 57524
const VARBINARY = 57525
const NCHAR = 57526
const NVARCHAR = 57527
const NATIONAL = 57528
const VARYING = 57529
const TEXT = 57530
const TINYTEXT = 57531
const MEDIUMTEXT = 57532
const LONGTEXT = 57533
const LONG = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const ENUM = 57540
const GEOMETRY = 57541
const POINT = 57542
const LINESTRING = 57543
const POLYGON = 57544
const GEOMETRYCOLLECTION = 57545
const MULTIPOINT = 57546
const MULTILINESTRING = 57547
const MULTIPOLYGON = 57548
const NULLX = 57549
const AUTO_INCREMENT = 57550
const APPROXNUM = 57551
const SIGNED = 57552
const UNSIGNED = 57553
const ZEROFILL = 57554
const COLLATION = 57555
const DATABASES = 57556
const SCHEMAS = 57557
const TABLES = 57558
const VITESS_METADATA = 57559
const VSCHEMA = 57560
const FULL = 57561
const PROCESSLIST = 57562
const COLUMNS = 57563
const FIELDS = 57564
const ENGINES = 57565
const PLUGINS = 57566
const NAMES = 57567
const CHARSET = 57568
const GLOBAL = 57569
const SESSION = 57570
const ISOLATION = 57571
const LEVEL = 57572
const READ = 57573
const WRITE = 57574
const ONLY = 57575
const REPEATABLE = 57576
const COMMITTED = 57577
const UNCOMMITTED = 57578
const SERIALIZABLE = 57579
const CURRENT_TIMESTAMP = 57580
const DATABASE = 57581
const CURRENT_DATE = 57582
const CURRENT_TIME = 57583
const LOCALTIME = 57584
const LOCALTIMESTAMP = 57585
const UTC_DATE = 57586
const UTC_TIME = 57587
const UTC_TIMESTAMP = 57588
const REPLACE = 57589
const CONVERT = 57590
const CAST = 57591
const SUBSTR = 57592
const SUBSTRING = 57593
const GROUP_CONCAT = 57594
const SEPARATOR = 57595
const TIMESTAMPADD = 57596
const TIMESTAMPDIFF = 57597
const MATCH = 57598
const AGAINST = 57599
const BOOLEAN = 57600
const LANGUAGE = 57601
const WITH = 57602
const QUERY = 57603
const EXPANSION = 57604
const UNUSED = 57605
const ARRAY = 57606
const CUME_DIST = 57607
const DESCRIPTION = 57608
const DENSE_RANK = 57609
const EMPTY = 57610
const EXCEPT = 57611
const FIRST_VALUE = 57612
const GROUPING = 57613
const GROUPS = 57614
const JSON_TABLE = 57615
const LAG = 57616
const LAST_VALUE = 57617
const LATERAL = 57618
const LEAD = 57619
const MEMBER = 57620
const NTH_VALUE = 57621
const NTILE = 57622
const OF = 57623
const OVER = 57624
const PERCENT_RANK = 57625
const RANK = 57626
const RECURSIVE = 57627
const ROW_NUMBER = 57628
const SYSTEM = 57629
const WINDOW = 57630
const ACTIVE = 57631
const ADMIN = 57632
const BUCKETS = 57633
const CLONE = 57634
const COMPONENT = 57635
const DEFINITION = 57636
const ENFORCED = 57637
const EXCLUDE = 57638
const FOLLOWING = 57639
const GEOMCOLLECTION = 57640
const GET_MASTER_PUBLIC_KEY = 57641
const HISTOGRAM = 57642
const HISTORY = 57643
const INACTIVE = 57644
const INVISIBLE = 57645
const LOCKED = 57646
const MASTER_COMPRESSION_ALGORITHMS = 57647
const MASTER_PUBLIC_KEY_PATH = 57648
const MASTER_TLS_CIPHERSUITES = 57649
const MASTER_ZSTD_COMPRESSION_LEVEL = 57650
const NESTED = 57651
const NETWORK_NAMESPACE = 57652
const NOWAIT = 57653
const NULLS = 57654
const OJ = 57655
const OLD = 57656
const OPTIONAL = 57657
const ORDINALITY = 57658
const ORGANIZATION = 57659
const OTHERS = 57660
const PATH = 57661
const PERSIST = 57662
const PERSIST_ONLY = 57663
const PRECEDING = 57664
const PRIVILEGE_CHECKS_USER = 57665
const PROCESS = 57666
const RANDOM = 57667
const REFERENCE = 57668
const REQUIRE_ROW_FORMAT = 57669
const RESOURCE = 57670
const RESPECT = 57671
const RESTART = 57672
const RETAIN = 57673
const REUSE = 57674
const ROLE = 57675
const SECONDARY = 57676
const SECONDARY_ENGINE = 57677
const SECONDARY_LOAD = 57678
const SECONDARY_UNLOAD = 57679
const SKIP = 57680
const SRID = 57681
const THREAD_PRIORITY = 57682
const TIES = 57683
const UNBOUNDED = 57684
const VCPU = 57685
const VISIBLE = 57686

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	167, 350,
	168, 350,
	-2, 338,
	-1, 48,
	1, 1001,
	362, 1001,
	-2, 369,
	-1, 332,
	114, 707,
	-2, 703,
	-1, 333,
	114, 708,
	-2, 704,
	-1, 403,
	84, 957,
	-2, 67,
	-1, 404,
	84, 875,
	-2, 68,
	-1, 409,
	84, 844,
	-2, 667,
	-1, 411,
	84, 905,
	-2, 669,
	-1, 591,
	5, 31,
	-2, 363,
	-1, 595,
	5, 31,
	-2, 362,
	-1, 722,
	1, 414,
	5, 414,
	12, 414,
	13, 414,
	14, 414,
	15, 414,
	17, 414,
	19, 414,
	29, 414,
	30, 414,
	44, 414,
	45, 414,
	46, 414,
	47, 414,
	48, 414,
	50, 414,
	51, 414,
	54, 414,
	55, 414,
	57, 414,
	58, 414,
	362, 414,
	-2, 437,
	-1, 725,
	55, 48,
	57, 48,
	-2, 52,
	-1, 885,
	114, 710,
	-2, 706,
	-1, 1086,
	56, 282,
	59, 282,
	-2, 247,
	-1, 1136,
	5, 32,
	-2, 501,
	-1, 1168,
	5, 31,
	-2, 641,
	-1, 1262,
	5, 31,
	-2, 69,
	-1, 1369,
	1, 456,
	5, 456,
	12, 456,
	13, 456,
	14, 456,
	15, 456,
	17, 456,
	19, 456,
	29, 456,
	30, 456,
	44, 456,
	45, 456,
	46, 456,
	47, 456,
	48, 456,
	50, 456,
	51, 456,
	54, 456,
	55, 456,
	57, 456,
	58, 456,
	362, 456,
	-2, 437,
	-1, 1468,
	5, 32,
	-2, 642,
	-1, 1500,
	5, 31,
	-2, 69,
	-1, 1537,
	5, 31,
	-2, 644,
	-1, 1621,
	5, 32,
	-2, 645,
}

const yyPrivate = 57344

const yyLast = 17139

var yyAct = [...]int{

	333, 1664, 1652, 1625, 1651, 1609, 1483, 1432, 1551, 1301,
	676, 1217, 1003, 1347, 861, 1517, 974, 1382, 1383, 1348,
	1502, 1171, 1061, 1059, 1012, 1626, 976, 311, 363, 972,
	350, 1037, 1172, 968, 1076, 300, 1344, 85, 1002, 535,
	99, 1016, 1360, 99, 1354, 1277, 1319, 1009, 838, 99,
	910, 337, 1278, 923, 1049, 1254, 738, 1054, 408, 64,
	675, 3, 959, 822, 719, 1196, 938, 718, 948, 1081,
	613, 607, 887, 397, 99, 413, 970, 952, 402, 99,
	737, 99, 628, 320, 541, 301, 302, 394, 399, 305,
	99, 727, 413, 63, 7, 1097, 99, 693, 68, 6,
	5, 1655, 1635, 1650, 619, 1619, 1646, 1433, 1096, 949,
	1634, 1618, 692, 1336, 1460, 306, 335, 540, 94, 90,
	91, 739, 92, 740, 324, 1377, 70, 71, 72, 73,
	74, 1205, 1378, 1379, 1204, 994, 995, 1206, 993, 1101,
	588, 304, 26, 27, 55, 29, 30, 26, 1095, 55,
	29, 30, 560, 308, 303, 310, 1237, 563, 1023, 1524,
	326, 60, 1038, 1050, 999, 31, 51, 52, 543, 544,
	1586, 641, 640, 650, 651, 643, 644, 645, 646, 647,
	648, 649, 642, 1303, 1025, 652, 1025, 1451, 42, 581,
	1449, 852, 61, 582, 579, 580, 586, 61, 1092, 1087,
	1088, 1043, 1086, 1038, 1089, 1090, 377, 587, 383, 384,
	381, 382, 380, 379, 378, 1029, 1031, 295, 1030, 290,
	574, 575, 385, 386, 562, 565, 86, 405, 567, 1645,
	851, 1305, 849, 1649, 853, 297, 1610, 1300, 953, 1099,
	1102, 1503, 1504, 1304, 1602, 1017, 287, 1668, 93, 1672,
	1552, 1282, 542, 33, 57, 38, 37, 40, 309, 53,
	548, 564, 566, 1554, 1511, 86, 1297, 81, 850, 310,
	99, 298, 808, 413, 1512, 413, 413, 1264, 1019, 1094,
	413, 814, 413, 977, 979, 41, 59, 58, 413, 1195,
	49, 50, 39, 1194, 1320, 1193, 1019, 270, 1052, 1038,
	538, 1019, 601, 269, 273, 1093, 89, 43, 44, 99,
	45, 46, 664, 665, 281, 288, 289, 1000, 943, 83,
	84, 1218, 1109, 80, 1593, 1108, 1471, 413, 1307, 88,
	87, 1146, 1244, 1553, 1028, 1617, 1322, 1201, 1157, 597,
	598, 1229, 1125, 1019, 859, 1098, 1234, 1233, 733, 632,
	279, 554, 558, 1587, 561, 1401, 286, 591, 595, 1666,
	1100, 606, 1667, 978, 1665, 652, 989, 1230, 88, 87,
	839, 1324, 1018, 1510, 615, 1296, 1328, 616, 1323, 1293,
	1321, 1235, 856, 1227, 844, 1326, 271, 364, 54, 1228,
	1018, 592, 99, 99, 99, 1018, 594, 593, 1325, 625,
	56, 413, 1143, 1073, 1019, 56, 1402, 413, 547, 627,
	642, 1327, 1329, 652, 77, 627, 617, 283, 274, 275,
	1078, 284, 285, 293, 603, 894, 604, 276, 278, 605,
	272, 292, 291, 1600, 1575, 664, 665, 1018, 1358, 892,
	893, 891, 54, 1286, 1282, 571, 741, 1232, 1283, 82,
	78, 1290, 1292, 840, 316, 596, 641, 640, 650, 651,
	643, 644, 645, 646, 647, 648, 649, 642, 1287, 717,
	652, 626, 625, 610, 614, 536, 696, 698, 1340, 702,
	704, 726, 707, 583, 1015, 1019, 1074, 731, 627, 735,
	633, 695, 697, 699, 701, 703, 705, 706, 1018, 939,
	1077, 550, 551, 552, 1286, 1282, 664, 665, 534, 1283,
	536, 1338, 1284, 1285, 1082, 650, 651, 643, 644, 645,
	646, 647, 648, 649, 642, 677, 810, 652, 572, 1287,
	626, 625, 1673, 1389, 330, 99, 690, 1142, 1231, 413,
	939, 1141, 1154, 1140, 307, 99, 61, 627, 99, 622,
	1623, 99, 1601, 405, 24, 99, 890, 413, 413, 1498,
	626, 625, 1497, 585, 413, 413, 99, 413, 99, 1259,
	1257, 99, 862, 863, 1674, 413, 413, 627, 1238, 1018,
	877, 879, 880, 1531, 362, 1013, 878, 1014, 1495, 626,
	625, 1394, 1273, 1011, 1017, 1255, 645, 646, 647, 648,
	649, 642, 99, 413, 652, 1083, 627, 99, 1122, 1123,
	1124, 1357, 911, 824, 912, 1598, 391, 392, 1207, 413,
	1208, 315, 626, 625, 99, 599, 858, 568, 569, 1569,
	413, 1218, 573, 1415, 576, 815, 536, 1546, 1647, 627,
	589, 1489, 1644, 864, 1630, 600, 827, 828, 640, 650,
	651, 643, 644, 645, 646, 647, 648, 649, 642, 407,
	559, 652, 559, 559, 888, 857, 1566, 559, 536, 559,
	1489, 1627, 1546, 1613, 413, 559, 549, 1489, 1603, 1546,
	1594, 600, 626, 625, 54, 54, 1546, 1557, 1546, 600,
	1564, 885, 1508, 1489, 1488, 1561, 883, 1473, 600, 627,
	1435, 866, 1470, 600, 54, 1430, 1426, 1423, 1421, 413,
	413, 1420, 881, 1409, 1408, 1560, 99, 1405, 1406, 661,
	1405, 1404, 663, 1271, 99, 99, 1270, 1213, 99, 99,
	956, 600, 99, 99, 99, 413, 928, 931, 1071, 921,
	1137, 600, 1395, 940, 841, 1070, 919, 600, 413, 913,
	674, 846, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 821, 691, 694, 694, 694, 700, 694,
	694, 700, 694, 708, 709, 710, 711, 712, 713, 917,
	723, 914, 915, 820, 1020, 884, 874, 875, 1007, 922,
	924, 811, 824, 936, 930, 933, 934, 935, 1039, 1040,
	1041, 1042, 809, 982, 984, 556, 987, 919, 986, 99,
	413, 1466, 413, 990, 99, 99, 1574, 991, 99, 26,
	947, 729, 950, 951, 643, 644, 645, 646, 647, 648,
	649, 642, 748, 747, 652, 983, 26, 728, 99, 677,
	99, 99, 1166, 926, 927, 1345, 99, 956, 1357, 1167,
	99, 99, 99, 99, 99, 1051, 1053, 407, 1197, 407,
	407, 1056, 1057, 1058, 407, 730, 407, 732, 729, 61,
	1197, 26, 407, 1407, 1209, 666, 667, 668, 669, 670,
	671, 672, 673, 65, 1310, 955, 61, 405, 353, 352,
	355, 356, 357, 358, 992, 1137, 1160, 354, 359, 1159,
	1004, 1536, 998, 956, 1069, 728, 734, 860, 813, 825,
	826, 630, 730, 956, 728, 1357, 829, 830, 885, 832,
	888, 61, 61, 1113, 317, 1137, 1636, 835, 836, 1302,
	1137, 1114, 1628, 1567, 1519, 865, 1115, 1499, 1025, 1478,
	1055, 1388, 1361, 1362, 559, 559, 1050, 1212, 1045, 1044,
	1060, 559, 559, 1520, 559, 848, 1659, 99, 99, 99,
	99, 99, 559, 559, 1127, 1131, 1657, 1653, 1364, 99,
	1345, 1260, 99, 845, 61, 817, 99, 1183, 1181, 1110,
	872, 1121, 1184, 1182, 99, 407, 1134, 1367, 1366, 1180,
	559, 743, 1179, 1192, 918, 920, 600, 321, 322, 1642,
	925, 1633, 1191, 413, 1153, 1306, 1185, 1173, 965, 966,
	1640, 1120, 884, 1168, 1119, 1210, 1534, 1425, 1111, 1112,
	1220, 614, 1175, 1176, 1174, 1178, 1393, 1177, 1219, 1392,
	1186, 1214, 921, 641, 640, 650, 651, 643, 644, 645,
	646, 647, 648, 649, 642, 1463, 1151, 652, 1248, 1202,
	1199, 54, 1200, 746, 557, 1464, 1215, 1216, 1239, 1240,
	1198, 413, 1515, 620, 621, 1246, 678, 608, 1064, 413,
	99, 413, 413, 862, 863, 1253, 816, 1263, 609, 969,
	1135, 618, 339, 641, 640, 650, 651, 643, 644, 645,
	646, 647, 648, 649, 642, 620, 621, 652, 807, 312,
	1155, 1256, 961, 964, 965, 966, 962, 1258, 963, 967,
	1118, 971, 1361, 1362, 1580, 723, 313, 99, 1117, 723,
	842, 1276, 1262, 806, 1272, 65, 413, 1579, 1279, 1291,
	1295, 318, 319, 1288, 1281, 1298, 1299, 1522, 1269, 1197,
	1289, 407, 407, 1661, 1660, 67, 1147, 1144, 407, 407,
	837, 407, 623, 1660, 1024, 1004, 1661, 1590, 1391, 407,
	407, 855, 1063, 69, 1065, 47, 62, 1, 1280, 886,
	413, 413, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 407, 1346, 1331,
	413, 1318, 1330, 1434, 1516, 1313, 1349, 559, 1314, 559,
	1091, 1608, 1247, 868, 1249, 1250, 1251, 1252, 1370, 1010,
	413, 1337, 413, 413, 630, 1001, 885, 407, 1173, 76,
	1365, 1113, 533, 75, 1381, 1599, 1072, 1386, 1387, 944,
	1351, 570, 1133, 1506, 1368, 277, 1008, 1356, 1385, 1274,
	1136, 1138, 1225, 1139, 1224, 1221, 1236, 1022, 1380, 1145,
	1223, 1222, 1148, 1149, 1150, 1226, 1374, 754, 916, 1156,
	752, 99, 753, 1158, 1376, 99, 1161, 1162, 751, 1163,
	1164, 756, 1126, 1398, 755, 1021, 941, 750, 1312, 280,
	400, 742, 624, 48, 1509, 1411, 1412, 1294, 1085, 1188,
	79, 1418, 413, 945, 946, 99, 413, 843, 577, 578,
	282, 413, 660, 1116, 413, 413, 413, 1414, 413, 1203,
	1341, 99, 406, 1352, 1417, 1339, 612, 1416, 1419, 407,
	961, 964, 965, 966, 962, 1422, 963, 967, 1578, 1521,
	1152, 689, 407, 937, 338, 876, 351, 348, 1429, 349,
	1169, 1170, 867, 1165, 723, 723, 723, 723, 723, 634,
	336, 328, 721, 714, 960, 958, 957, 818, 1375, 971,
	395, 1189, 1004, 1363, 1004, 1359, 720, 1309, 584, 296,
	1459, 723, 413, 413, 413, 1439, 1585, 871, 28, 1485,
	1486, 413, 1447, 1465, 66, 323, 1481, 1440, 19, 413,
	1475, 18, 17, 1210, 407, 1491, 407, 590, 20, 21,
	22, 16, 1487, 1482, 1396, 1397, 15, 14, 545, 1173,
	32, 1400, 36, 35, 34, 10, 1474, 662, 1403, 23,
	13, 1265, 1492, 1267, 1268, 12, 11, 1128, 1129, 1130,
	9, 8, 4, 314, 413, 25, 1494, 2, 1496, 0,
	0, 0, 1505, 0, 407, 1385, 0, 0, 0, 54,
	1513, 0, 0, 1317, 0, 1501, 559, 0, 559, 559,
	1312, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 413, 413, 1500, 413, 722, 0, 1523, 0, 413,
	0, 99, 0, 99, 0, 1543, 1535, 0, 0, 0,
	413, 0, 0, 0, 0, 1349, 0, 0, 0, 724,
	413, 1461, 1542, 0, 0, 1556, 0, 0, 1555, 1545,
	1544, 677, 0, 413, 1550, 0, 0, 1562, 1568, 1476,
	413, 99, 1477, 1563, 0, 1479, 1576, 0, 0, 0,
	1537, 0, 0, 1004, 0, 1572, 0, 0, 1565, 96,
	941, 0, 0, 0, 0, 0, 0, 413, 299, 1571,
	1591, 0, 0, 0, 0, 1350, 0, 54, 0, 1597,
	0, 0, 1595, 1493, 0, 1349, 0, 0, 413, 0,
	0, 0, 0, 396, 0, 413, 413, 0, 537, 0,
	539, 1371, 1372, 1373, 0, 1605, 1518, 407, 1612, 546,
	1611, 1615, 1606, 0, 413, 553, 0, 0, 0, 1592,
	1604, 0, 0, 99, 0, 0, 0, 0, 1607, 0,
	0, 413, 1620, 0, 0, 0, 0, 1275, 0, 0,
	0, 0, 0, 1632, 0, 0, 0, 0, 0, 413,
	0, 1637, 1441, 0, 0, 1597, 1639, 413, 1443, 0,
	1641, 0, 1173, 1643, 0, 1261, 1638, 0, 1648, 1452,
	1453, 0, 0, 407, 1656, 407, 407, 1658, 0, 1558,
	0, 1559, 0, 1669, 0, 0, 0, 1316, 0, 1467,
	1468, 1469, 0, 1472, 0, 0, 0, 0, 1332, 1333,
	0, 1334, 1335, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 1342, 1343, 611, 0, 723, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 1458, 1369, 0, 1518, 1004, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 294,
	1614, 677, 407, 0, 0, 97, 0, 0, 0, 969,
	0, 941, 0, 0, 1353, 1355, 0, 0, 0, 0,
	0, 0, 0, 0, 1390, 0, 0, 327, 0, 555,
	398, 0, 0, 0, 1355, 97, 0, 97, 1530, 977,
	979, 0, 0, 0, 1457, 0, 97, 0, 0, 0,
	0, 0, 97, 0, 407, 0, 407, 1384, 0, 0,
	54, 0, 1547, 0, 1548, 1549, 722, 0, 602, 0,
	722, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	0, 0, 641, 640, 650, 651, 643, 644, 645, 646,
	647, 648, 649, 642, 0, 0, 652, 0, 0, 0,
	0, 0, 0, 0, 1581, 1582, 1583, 1584, 0, 0,
	1442, 1588, 1589, 0, 1350, 0, 0, 1538, 0, 978,
	641, 640, 650, 651, 643, 644, 645, 646, 647, 648,
	649, 642, 0, 0, 652, 0, 1424, 0, 0, 0,
	1428, 0, 0, 0, 0, 1431, 0, 0, 1436, 1437,
	1438, 716, 407, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1573, 1616, 0, 0, 0, 0, 0,
	0, 1621, 1026, 1027, 0, 1032, 1033, 1034, 1035, 1036,
	0, 0, 0, 0, 1350, 0, 54, 1629, 0, 0,
	0, 0, 0, 1046, 1047, 1048, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1484, 1484, 0,
	0, 0, 0, 0, 0, 407, 97, 0, 1462, 0,
	0, 0, 0, 1484, 889, 0, 0, 0, 0, 0,
	0, 1670, 1671, 0, 0, 0, 0, 0, 0, 1525,
	1526, 1527, 1528, 1529, 0, 0, 0, 1532, 1533, 0,
	0, 0, 0, 0, 0, 97, 641, 640, 650, 651,
	643, 644, 645, 646, 647, 648, 649, 642, 407, 0,
	652, 641, 640, 650, 651, 643, 644, 645, 646, 647,
	648, 649, 642, 0, 749, 652, 0, 1654, 0, 722,
	722, 722, 722, 722, 812, 0, 0, 396, 0, 0,
	819, 0, 0, 0, 722, 1539, 1540, 0, 1541, 0,
	0, 0, 0, 1484, 0, 831, 722, 833, 0, 0,
	834, 0, 0, 0, 1384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1384, 0, 1455, 0, 97, 97,
	97, 0, 0, 0, 0, 0, 0, 1570, 0, 0,
	0, 847, 0, 0, 1484, 0, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 636, 0, 639, 0,
	1454, 0, 0, 873, 653, 654, 655, 656, 657, 658,
	659, 1596, 637, 638, 635, 641, 640, 650, 651, 643,
	644, 645, 646, 647, 648, 649, 642, 0, 0, 652,
	0, 0, 1384, 0, 0, 0, 0, 0, 0, 407,
	407, 0, 641, 640, 650, 651, 643, 644, 645, 646,
	647, 648, 649, 642, 0, 941, 652, 0, 1622, 0,
	0, 0, 0, 1241, 1242, 1243, 1245, 0, 0, 1662,
	0, 0, 0, 0, 0, 1631, 641, 640, 650, 651,
	643, 644, 645, 646, 647, 648, 649, 642, 0, 0,
	652, 0, 0, 1384, 0, 954, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 97, 0, 0, 97, 1315, 0,
	0, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 1132, 97, 0, 0, 97, 641, 640,
	650, 651, 643, 644, 645, 646, 647, 648, 649, 642,
	0, 0, 652, 641, 640, 650, 651, 643, 644, 645,
	646, 647, 648, 649, 642, 0, 0, 652, 97, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 1066, 1067, 0, 0, 1068, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 1103,
	1104, 1105, 1106, 1107, 641, 640, 650, 651, 643, 644,
	645, 646, 647, 648, 649, 642, 0, 0, 652, 0,
	0, 0, 0, 0, 0, 0, 327, 327, 0, 0,
	0, 327, 327, 327, 327, 0, 0, 0, 942, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 0, 1399,
	0, 0, 0, 0, 0, 0, 0, 327, 327, 327,
	327, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	97, 980, 0, 0, 97, 97, 0, 0, 97, 988,
	823, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 1446, 0,
	0, 1448, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	97, 97, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 776, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 1079, 1080, 0, 1490,
	0, 0, 97, 0, 0, 0, 97, 97, 97, 97,
	97, 0, 0, 0, 0, 0, 823, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 1266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 0, 0, 327, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 777,
	0, 0, 942, 97, 97, 97, 97, 97, 0, 0,
	0, 0, 0, 0, 0, 1187, 0, 0, 97, 0,
	0, 0, 980, 790, 793, 794, 795, 796, 797, 798,
	97, 799, 800, 801, 802, 803, 804, 805, 0, 778,
	779, 780, 781, 757, 761, 791, 758, 764, 760, 762,
	759, 0, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 782, 783, 784, 785, 786, 787, 788,
	789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 1413, 0, 97, 0, 0, 0,
	0, 0, 792, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 0, 980,
	520, 508, 0, 465, 523, 438, 455, 531, 456, 459,
	496, 423, 478, 183, 453, 0, 442, 418, 448, 419,
	440, 467, 129, 437, 510, 481, 522, 155, 521, 471,
	0, 529, 157, 487, 0, 229, 171, 97, 0, 469,
	512, 476, 505, 464, 497, 428, 486, 524, 454, 494,
	525, 0, 0, 0, 412, 0, 1005, 1006, 0, 0,
	0, 0, 0, 119, 0, 491, 519, 450, 493, 495,
	417, 488, 0, 421, 424, 530, 515, 445, 446, 1211,
	0, 0, 0, 0, 0, 0, 468, 477, 502, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 0,
	485, 0, 0, 0, 425, 422, 0, 942, 466, 0,
	0, 0, 427, 0, 444, 503, 0, 414, 137, 97,
	0, 507, 514, 463, 0, 258, 518, 461, 460, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 451, 415, 511, 441, 449, 123, 447, 211,
	190, 249, 0, 484, 192, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 247, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 0, 0, 0, 242, 243, 124,
	267, 112, 255, 108, 113, 254, 176, 0, 0, 0,
	238, 246, 170, 163, 0, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	420, 0, 230, 252, 268, 117, 436, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	432, 435, 430, 431, 479, 480, 526, 527, 528, 504,
	426, 0, 433, 434, 0, 509, 516, 517, 483, 100,
	109, 156, 265, 204, 134, 253, 416, 429, 127, 439,
	0, 0, 452, 457, 458, 470, 472, 473, 474, 475,
	482, 489, 490, 492, 498, 499, 500, 501, 506, 513,
	532, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 520, 508, 0,
	465, 523, 438, 455, 531, 456, 459, 496, 423, 478,
	183, 453, 0, 442, 418, 448, 419, 440, 467, 129,
	437, 510, 481, 522, 155, 521, 471, 0, 529, 157,
	487, 0, 229, 171, 0, 0, 469, 512, 476, 505,
	464, 497, 428, 486, 524, 454, 494, 525, 0, 0,
	0, 412, 0, 1005, 1006, 0, 0, 0, 0, 0,
	119, 0, 491, 519, 450, 493, 495, 417, 488, 0,
	421, 424, 530, 515, 445, 446, 0, 0, 0, 0,
	0, 0, 0, 468, 477, 502, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 443, 0, 485, 0, 0,
	0, 425, 422, 0, 0, 466, 0, 0, 0, 427,
	0, 444, 503, 0, 414, 137, 0, 0, 507, 514,
	463, 0, 258, 518, 461, 460, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 451,
	415, 511, 441, 449, 123, 447, 211, 190, 249, 0,
	484, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 0, 0, 0, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 0, 0, 0, 238, 246, 170,
	163, 0, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 420, 0, 230,
	252, 268, 117, 436, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 432, 435, 430,
	431, 479, 480, 526, 527, 528, 504, 426, 0, 433,
	434, 0, 509, 516, 517, 483, 100, 109, 156, 265,
	204, 134, 253, 416, 429, 127, 439, 0, 0, 452,
	457, 458, 470, 472, 473, 474, 475, 482, 489, 490,
	492, 498, 499, 500, 501, 506, 513, 532, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 520, 508, 0, 465, 523, 438,
	455, 531, 456, 459, 496, 423, 478, 183, 453, 0,
	442, 418, 448, 419, 440, 467, 129, 437, 510, 481,
	522, 155, 521, 471, 0, 529, 157, 487, 0, 229,
	171, 0, 0, 469, 512, 476, 505, 464, 497, 428,
	486, 524, 454, 494, 525, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 491,
	519, 450, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 445, 446, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	1311, 0, 443, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 466, 0, 0, 0, 427, 0, 444, 503,
	0, 414, 137, 0, 0, 507, 514, 463, 0, 258,
	518, 461, 460, 202, 0, 233, 140, 154, 115, 101,
	111, 0, 139, 180, 209, 213, 451, 415, 511, 441,
	449, 123, 447, 211, 190, 249, 0, 484, 192, 210,
	158, 239, 203, 248, 259, 260, 236, 256, 264, 226,
	104, 235, 247, 120, 221, 106, 245, 232, 169, 149,
	150, 105, 0, 207, 128, 135, 125, 182, 0, 0,
	0, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 0, 0, 0, 238, 246, 170, 163, 0, 107,
	244, 168, 162, 153, 132, 142, 200, 160, 201, 143,
	173, 172, 174, 0, 420, 0, 230, 252, 268, 117,
	436, 0, 237, 262, 263, 0, 0, 118, 136, 131,
	199, 175, 114, 145, 227, 152, 159, 206, 266, 189,
	212, 121, 251, 228, 432, 435, 430, 431, 479, 480,
	526, 527, 528, 504, 426, 0, 433, 434, 0, 509,
	516, 517, 483, 100, 109, 156, 265, 204, 134, 253,
	416, 429, 127, 439, 0, 0, 452, 457, 458, 470,
	472, 473, 474, 475, 482, 489, 490, 492, 498, 499,
	500, 501, 506, 513, 532, 102, 103, 110, 116, 122,
	126, 130, 133, 138, 141, 144, 146, 147, 148, 151,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 205, 208, 214, 215, 216, 217, 218, 219, 220,
	222, 223, 224, 225, 231, 234, 240, 241, 250, 257,
	261, 520, 508, 0, 465, 523, 438, 455, 531, 456,
	459, 496, 423, 478, 183, 453, 0, 442, 418, 448,
	419, 440, 467, 129, 437, 510, 481, 522, 155, 521,
	471, 0, 529, 157, 487, 0, 229, 171, 0, 0,
	469, 512, 476, 505, 464, 497, 428, 486, 524, 454,
	494, 525, 61, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 491, 519, 450, 493,
	495, 417, 488, 0, 421, 424, 530, 515, 445, 446,
	0, 0, 0, 0, 0, 0, 0, 468, 477, 502,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 443,
	0, 485, 0, 0, 0, 425, 422, 0, 0, 466,
	0, 0, 0, 427, 0, 444, 503, 0, 414, 137,
	0, 0, 507, 514, 463, 0, 258, 518, 461, 460,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 451, 415, 511, 441, 449, 123, 447,
	211, 190, 249, 0, 484, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 0, 0, 0, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 0, 0,
	0, 238, 246, 170, 163, 0, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 420, 0, 230, 252, 268, 117, 436, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 432, 435, 430, 431, 479, 480, 526, 527, 528,
	504, 426, 0, 433, 434, 0, 509, 516, 517, 483,
	100, 109, 156, 265, 204, 134, 253, 416, 429, 127,
	439, 0, 0, 452, 457, 458, 470, 472, 473, 474,
	475, 482, 489, 490, 492, 498, 499, 500, 501, 506,
	513, 532, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 520, 508,
	0, 465, 523, 438, 455, 531, 456, 459, 496, 423,
	478, 183, 453, 0, 442, 418, 448, 419, 440, 467,
	129, 437, 510, 481, 522, 155, 521, 471, 0, 529,
	157, 487, 0, 229, 171, 0, 0, 469, 512, 476,
	505, 464, 497, 428, 486, 524, 454, 494, 525, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 491, 519, 450, 493, 495, 417, 488,
	0, 421, 424, 530, 515, 445, 446, 0, 0, 0,
	0, 0, 0, 0, 468, 477, 502, 462, 0, 0,
	0, 0, 0, 0, 989, 0, 443, 0, 485, 0,
	0, 0, 425, 422, 0, 0, 466, 0, 0, 0,
	427, 0, 444, 503, 0, 414, 137, 0, 0, 507,
	514, 463, 0, 258, 518, 461, 460, 202, 0, 233,
	140, 154, 115, 101, 111, 0, 139, 180, 209, 213,
	451, 415, 511, 441, 449, 123, 447, 211, 190, 249,
	0, 484, 192, 210, 158, 239, 203, 248, 259, 260,
	236, 256, 264, 226, 104, 235, 247, 120, 221, 106,
	245, 232, 169, 149, 150, 105, 0, 207, 128, 135,
	125, 182, 0, 0, 0, 242, 243, 124, 267, 112,
	255, 108, 113, 254, 176, 0, 0, 0, 238, 246,
	170, 163, 0, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 882, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 0,
	0, 0, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 0, 0, 0, 238, 246, 170, 163, 0,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 420, 0, 230, 252, 268,
	117, 436, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 100, 109, 156, 265, 204, 134,
	253, 416, 429, 127, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 183, 453, 0, 442, 418,
	448, 419, 440, 467, 129, 437, 510, 481, 522, 155,
	521, 471, 0, 529, 157, 487, 0, 229, 171, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 491, 519, 450,
	493, 495, 417, 488, 0, 421, 424, 530, 515, 445,
	446, 0, 0, 0, 0, 0, 0, 0, 468, 477,
	502, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	443, 0, 485, 0, 0, 0, 425, 422, 0, 0,
	466, 0, 0, 0, 427, 0, 444, 503, 0, 414,
	137, 0, 0, 507, 514, 463, 0, 258, 518, 461,
	460, 202, 0, 233, 140, 154, 115, 101, 111, 0,
	139, 180, 209, 213, 451, 415, 511, 441, 449, 123,
	447, 211, 190, 249, 0, 484, 192, 210, 158, 239,
	203, 248, 259, 260, 236, 256, 264, 226, 104, 235,
	247, 120, 221, 106, 245, 232, 169, 149, 150, 105,
	0, 207, 128, 135, 125, 182, 0, 0, 0, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 0,
	0, 0, 238, 246, 170, 163, 0, 107, 244, 168,
	162, 153, 132, 142, 200, 160, 201, 143, 173, 172,
	174, 0, 420, 0, 230, 252, 268, 117, 436, 0,
	237, 262, 263, 0, 0, 118, 136, 131, 199, 175,
	114, 145, 227, 152, 159, 206, 266, 189, 212, 121,
	251, 228, 432, 435, 430, 431, 479, 480, 526, 527,
	528, 504, 426, 0, 433, 434, 0, 509, 516, 517,
	483, 100, 109, 156, 265, 204, 134, 253, 416, 429,
	127, 439, 0, 0, 452, 457, 458, 470, 472, 473,
	474, 475, 482, 489, 490, 492, 498, 499, 500, 501,
	506, 513, 532, 102, 103, 110, 116, 122, 126, 130,
	133, 138, 141, 144, 146, 147, 148, 151, 161, 164,
	165, 166, 167, 177, 178, 179, 181, 184, 185, 186,
	187, 188, 191, 193, 194, 195, 196, 197, 198, 205,
	208, 214, 215, 216, 217, 218, 219, 220, 222, 223,
	224, 225, 231, 234, 240, 241, 250, 257, 261, 520,
	508, 0, 465, 523, 438, 455, 531, 456, 459, 496,
	423, 478, 183, 453, 0, 442, 418, 448, 419, 440,
	467, 129, 437, 510, 481, 522, 155, 521, 471, 0,
	529, 157, 487, 0, 229, 171, 0, 0, 469, 512,
	476, 505, 464, 497, 428, 486, 524, 454, 494, 525,
	0, 0, 0, 332, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 491, 519, 450, 493, 495, 417,
	488, 0, 421, 424, 530, 515, 445, 446, 0, 0,
	0, 0, 0, 0, 0, 468, 477, 502, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 443, 0, 485,
	0, 0, 0, 425, 422, 0, 0, 466, 0, 0,
	0, 427, 0, 444, 503, 0, 414, 137, 0, 0,
	507, 514, 463, 0, 258, 518, 461, 460, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 451, 415, 511, 441, 449, 123, 447, 211, 190,
	249, 0, 484, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 0, 0, 0, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 0, 0, 0, 238,
	246, 170, 163, 0, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 420,
	0, 230, 252, 268, 117, 436, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 432,
	435, 430, 431, 479, 480, 526, 527, 528, 504, 426,
	0, 433, 434, 0, 509, 516, 517, 483, 100, 109,
	156, 265, 204, 134, 253, 416, 429, 127, 439, 0,
	0, 452, 457, 458, 470, 472, 473, 474, 475, 482,
	489, 490, 492, 498, 499, 500, 501, 506, 513, 532,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 520, 508, 0, 465,
	523, 438, 455, 531, 456, 459, 496, 423, 478, 183,
	453, 0, 442, 418, 448, 419, 440, 467, 129, 437,
	510, 481, 522, 155, 521, 471, 0, 529, 157, 487,
	0, 229, 171, 0, 0, 469, 512, 476, 505, 464,
	497, 428, 486, 524, 454, 494, 525, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 491, 519, 450, 493, 495, 417, 488, 0, 421,
	424, 530, 515, 445, 446, 0, 0, 0, 0, 0,
	0, 0, 468, 477, 502, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 443, 0, 485, 0, 0, 0,
	425, 422, 0, 0, 466, 0, 0, 0, 427, 0,
	444, 503, 0, 414, 137, 0, 0, 507, 514, 463,
	0, 258, 518, 461, 460, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 451, 415,
	511, 441, 449, 123, 447, 211, 190, 249, 0, 484,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	0, 0, 0, 242, 243, 124, 267, 112, 255, 108,
	410, 254, 176, 0, 0, 0, 238, 246, 170, 163,
	0, 107, 244, 168, 162, 153, 132, 142, 200, 160,
	201, 143, 173, 172, 174, 0, 420, 0, 230, 252,
	268, 117, 436, 0, 237, 262, 263, 0, 0, 118,
	136, 131, 199, 411, 409, 145, 227, 152, 159, 206,
	266, 189, 212, 121, 251, 228, 432, 435, 430, 431,
	479, 480, 526, 527, 528, 504, 426, 0, 433, 434,
	0, 509, 516, 517, 483, 100, 109, 156, 265, 204,
	134, 253, 416, 429, 127, 439, 0, 0, 452, 457,
	458, 470, 472, 473, 474, 475, 482, 489, 490, 492,
	498, 499, 500, 501, 506, 513, 532, 102, 103, 110,
	116, 122, 126, 130, 133, 138, 141, 144, 146, 147,
	148, 151, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 205, 208, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 224, 225, 231, 234, 240, 241,
	250, 257, 261, 520, 508, 0, 465, 523, 438, 455,
	531, 456, 459, 496, 423, 478, 183, 453, 0, 442,
	418, 448, 419, 440, 467, 129, 437, 510, 481, 522,
	155, 521, 471, 0, 529, 157, 487, 0, 229, 171,
	0, 0, 469, 512, 476, 505, 464, 497, 428, 486,
	524, 454, 494, 525, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 491, 519,
	450, 493, 495, 417, 488, 0, 421, 424, 530, 515,
	445, 446, 0, 0, 0, 0, 0, 0, 0, 468,
	477, 502, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 443, 0, 485, 0, 0, 0, 425, 422, 0,
	0, 466, 0, 0, 0, 427, 0, 444, 503, 0,
	414, 137, 0, 0, 507, 514, 463, 0, 258, 518,
	461, 460, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 451, 415, 511, 441, 449,
	123, 447, 211, 190, 249, 0, 484, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 0, 0, 0,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	0, 0, 0, 238, 246, 170, 163, 0, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 420, 0, 230, 252, 268, 117, 436,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 432, 435, 430, 431, 479, 480, 526,
	527, 528, 504, 426, 0, 433, 434, 0, 509, 516,
	517, 483, 100, 109, 156, 265, 204, 134, 253, 416,
	429, 127, 439, 0, 0, 452, 457, 458, 470, 472,
	473, 474, 475, 482, 489, 490, 492, 498, 499, 500,
	501, 506, 513, 532, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	520, 508, 0, 465, 523, 438, 455, 531, 456, 459,
	496, 423, 478, 183, 453, 0, 442, 418, 448, 419,
	440, 467, 129, 437, 510, 481, 522, 155, 521, 471,
	0, 529, 157, 487, 0, 229, 171, 0, 0, 469,
	512, 476, 505, 464, 497, 428, 486, 524, 454, 494,
	525, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 491, 519, 450, 493, 495,
	417, 488, 0, 421, 424, 530, 515, 445, 446, 0,
	0, 0, 0, 0, 0, 0, 468, 477, 502, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 0,
	485, 0, 0, 0, 425, 422, 0, 0, 466, 0,
	0, 0, 427, 0, 444, 503, 0, 414, 137, 0,
	0, 507, 514, 463, 0, 258, 518, 461, 460, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 451, 415, 511, 441, 449, 123, 447, 211,
	190, 249, 0, 484, 192, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 736, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 0, 0, 0, 242, 243, 124,
	267, 112, 255, 108, 410, 254, 176, 0, 0, 0,
	238, 246, 170, 163, 0, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	420, 0, 230, 252, 268, 117, 436, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 411, 409, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	432, 435, 430, 431, 479, 480, 526, 527, 528, 504,
	426, 0, 433, 434, 0, 509, 516, 517, 483, 100,
	109, 156, 265, 204, 134, 253, 416, 429, 127, 439,
	0, 0, 452, 457, 458, 470, 472, 473, 474, 475,
	482, 489, 490, 492, 498, 499, 500, 501, 506, 513,
	532, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 520, 508, 0,
	465, 523, 438, 455, 531, 456, 459, 496, 423, 478,
	183, 453, 0, 442, 418, 448, 419, 440, 467, 129,
	437, 510, 481, 522, 155, 521, 471, 0, 529, 157,
	487, 0, 229, 171, 0, 0, 469, 512, 476, 505,
	464, 497, 428, 486, 524, 454, 494, 525, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 491, 519, 450, 493, 495, 417, 488, 0,
	421, 424, 530, 515, 445, 446, 0, 0, 0, 0,
	0, 0, 0, 468, 477, 502, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 443, 0, 485, 0, 0,
	0, 425, 422, 0, 0, 466, 0, 0, 0, 427,
	0, 444, 503, 0, 414, 137, 0, 0, 507, 514,
	463, 0, 258, 518, 461, 460, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 451,
	415, 511, 441, 449, 123, 447, 211, 190, 249, 0,
	484, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 401, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 0, 0, 0, 242, 243, 124, 267, 112, 255,
	108, 410, 254, 176, 0, 0, 0, 238, 246, 170,
	163, 0, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 420, 0, 230,
	252, 268, 117, 436, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 411, 409, 404, 403, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 432, 435, 430,
	431, 479, 480, 526, 527, 528, 504, 426, 0, 433,
	434, 0, 509, 516, 517, 483, 100, 109, 156, 265,
	204, 134, 253, 416, 429, 127, 439, 0, 0, 452,
	457, 458, 470, 472, 473, 474, 475, 482, 489, 490,
	492, 498, 499, 500, 501, 506, 513, 532, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 183, 0, 0, 0, 0, 334,
	0, 0, 0, 129, 331, 0, 0, 0, 155, 0,
	0, 0, 376, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 365, 366, 0, 0, 0, 0, 0, 0,
	996, 0, 61, 0, 0, 332, 353, 352, 355, 356,
	357, 358, 0, 0, 119, 354, 359, 360, 361, 997,
	0, 0, 329, 346, 0, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 344, 0, 0, 0,
	0, 389, 0, 345, 0, 0, 340, 341, 342, 347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 367, 0, 0, 0, 258, 0, 0, 387,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 373, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 0, 0, 0, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 0, 0,
	0, 238, 246, 170, 163, 0, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 377, 388, 383, 384, 381, 382, 380, 379, 378,
	390, 368, 369, 370, 371, 374, 0, 385, 386, 372,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 334, 0, 0, 0, 129, 331, 0,
	0, 0, 155, 0, 0, 0, 376, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 600, 332,
	353, 352, 355, 356, 357, 358, 0, 0, 119, 354,
	359, 360, 361, 0, 0, 0, 329, 346, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	344, 0, 0, 0, 0, 389, 0, 345, 0, 0,
	340, 341, 342, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 367, 0, 0, 0,
	258, 0, 0, 387, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 373, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 0,
	0, 0, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 0, 0, 0, 238, 246, 170, 163, 0,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 377, 388, 383, 384, 381,
	382, 380, 379, 378, 390, 368, 369, 370, 371, 374,
	0, 385, 386, 372, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 183, 0, 0, 0, 0, 334, 0, 0,
	0, 129, 331, 0, 0, 0, 155, 0, 0, 0,
	376, 157, 0, 0, 229, 171, 0, 0, 0, 0,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 332, 353, 352, 355, 356, 357, 358,
	0, 0, 119, 354, 359, 360, 361, 0, 0, 0,
	329, 346, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 344, 325, 0, 0, 0, 389,
	0, 345, 0, 0, 340, 341, 342, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	367, 0, 0, 0, 258, 0, 0, 387, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 373, 0, 0, 0, 0, 123, 0, 211, 190,
	249, 0, 0, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 0, 0, 0, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 0, 0, 0, 238,
	246, 170, 163, 0, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 377,
	388, 383, 384, 381, 382, 380, 379, 378, 390, 368,
	369, 370, 371, 374, 0, 385, 386, 372, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	0, 334, 0, 0, 0, 129, 331, 0, 0, 0,
	155, 0, 0, 0, 376, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 332, 353, 932,
	355, 356, 357, 358, 0, 0, 119, 354, 359, 360,
	361, 0, 0, 0, 329, 346, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 344, 325,
	0, 0, 0, 389, 0, 345, 0, 0, 340, 341,
	342, 347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 367, 0, 0, 0, 258, 0,
	0, 387, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 373, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 0, 0, 0,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	0, 0, 0, 238, 246, 170, 163, 0, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 377, 388, 383, 384, 381, 382, 380,
	379, 378, 390, 368, 369, 370, 371, 374, 0, 385,
	386, 372, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 0, 334, 0, 0, 0, 129,
	331, 0, 0, 0, 155, 0, 0, 0, 376, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 332, 353, 929, 355, 356, 357, 358, 0, 0,
	119, 354, 359, 360, 361, 0, 0, 0, 329, 346,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 344, 325, 0, 0, 0, 389, 0, 345,
	0, 0, 340, 341, 342, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 367, 0,
	0, 0, 258, 0, 0, 387, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 373,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 0, 0, 0, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 0, 0, 0, 238, 246, 170,
	163, 0, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 377, 388, 383,
	384, 381, 382, 380, 379, 378, 390, 368, 369, 370,
	371, 374, 0, 385, 386, 372, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 334, 0, 0, 0, 129, 331, 0, 0, 0,
	155, 0, 0, 0, 376, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 332, 353, 352,
	355, 356, 357, 358, 0, 0, 119, 354, 359, 360,
	361, 0, 0, 0, 329, 346, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 344, 0,
	0, 0, 0, 389, 0, 345, 0, 0, 340, 341,
	342, 347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 367, 0, 0, 0, 258, 0,
	0, 387, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 373, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 0, 0, 0,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	0, 0, 0, 238, 246, 170, 163, 0, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 377, 388, 383, 384, 381, 382, 380,
	379, 378, 390, 368, 369, 370, 371, 374, 0, 385,
	386, 372, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 0, 334, 0, 0, 0, 129,
	331, 0, 0, 0, 155, 0, 0, 0, 376, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 332, 353, 352, 355, 356, 357, 358, 0, 0,
	119, 354, 359, 360, 361, 0, 0, 0, 329, 346,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 344, 0, 0, 0, 0, 389, 0, 345,
	0, 0, 340, 341, 342, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 367, 0,
	0, 0, 258, 0, 0, 387, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 373,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 0, 0, 0, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 0, 0, 0, 238, 246, 170,
	163, 0, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 377, 388, 383,
	384, 381, 382, 380, 379, 378, 390, 368, 369, 370,
	371, 374, 0, 385, 386, 372, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 155, 0,
	0, 0, 376, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 332, 353, 352, 355, 356,
	357, 358, 0, 0, 119, 354, 359, 360, 361, 0,
	0, 0, 0, 346, 0, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 344, 0, 0, 0,
	0, 389, 0, 345, 0, 0, 340, 341, 342, 347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 367, 0, 0, 0, 258, 0, 0, 387,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 373, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 1663, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 0, 0, 0, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 0, 0,
	0, 238, 246, 170, 163, 0, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 377, 388, 383, 384, 381, 382, 380, 379, 378,
	390, 368, 369, 370, 371, 374, 0, 385, 386, 372,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 376, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 600, 332,
	353, 352, 355, 356, 357, 358, 0, 0, 119, 354,
	359, 360, 361, 0, 0, 0, 0, 346, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	344, 0, 0, 0, 0, 389, 0, 345, 0, 0,
	340, 341, 342, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 367, 0, 0, 0,
	258, 0, 0, 387, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 373, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 0,
	0, 0, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 0, 0, 0, 238, 246, 170, 163, 0,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 377, 388, 383, 384, 381,
	382, 380, 379, 378, 390, 368, 369, 370, 371, 374,
	0, 385, 386, 372, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 155, 0, 0, 0,
	376, 157, 0, 0, 229, 171, 0, 0, 0, 0,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 332, 353, 352, 355, 356, 357, 358,
	0, 0, 119, 354, 359, 360, 361, 0, 0, 0,
	0, 346, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 344, 0, 0, 0, 0, 389,
	0, 345, 0, 0, 340, 341, 342, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	367, 0, 0, 0, 258, 0, 0, 387, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 373, 0, 0, 0, 0, 123, 0, 211, 190,
	249, 0, 0, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 0, 0, 0, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 0, 0, 0, 238,
	246, 170, 163, 0, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 377,
	388, 383, 384, 381, 382, 380, 379, 378, 390, 368,
	369, 370, 371, 374, 0, 385, 386, 372, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 641, 640, 650, 651, 643, 644, 645,
	646, 647, 648, 649, 642, 0, 0, 652, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 0, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 0, 0, 0,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	0, 0, 0, 238, 246, 170, 163, 0, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 975, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 979, 0, 0, 0, 0,
	0, 98, 0, 981, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 258, 0, 978, 0, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 0,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 0, 0, 0, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 0, 0, 0, 238, 246, 170,
	163, 0, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 183, 0, 0, 0, 975, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 979,
	0, 0, 0, 0, 0, 98, 0, 981, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 978, 0,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 0, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 973, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 0, 0, 0, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 0, 0,
	0, 238, 246, 170, 163, 0, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 629, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 412,
	0, 631, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 626, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 0, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 0,
	0, 0, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 0, 0, 0, 238, 246, 170, 163, 0,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 0, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 0, 0, 0, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 0, 0,
	0, 238, 246, 170, 163, 0, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 981, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 0, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 0,
	0, 0, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 0, 0, 0, 238, 246, 170, 163, 0,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1190, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 0, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 0, 0, 0, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 0, 0,
	0, 238, 246, 170, 163, 0, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 412,
	0, 0, 869, 0, 0, 870, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 0, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 0,
	0, 0, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 0, 0, 0, 238, 246, 170, 163, 0,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 745, 0, 0, 0, 155, 0, 0, 0,
	0, 157, 0, 0, 229, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 412, 0, 744, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 0, 0, 0, 0, 0, 123, 0, 211, 190,
	249, 0, 0, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 0, 0, 0, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 0, 0, 0, 238,
	246, 170, 163, 0, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 981,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 0, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 0, 0, 0,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	0, 0, 0, 238, 246, 170, 163, 0, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 0,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 0, 0, 0, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 0, 0, 0, 238, 246, 170,
	163, 0, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 0, 631, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 0, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 0, 0, 0, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 0, 0,
	0, 238, 246, 170, 163, 0, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 0, 0, 0, 715, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 0, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 0,
	0, 0, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 0, 0, 0, 238, 246, 170, 163, 0,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 393, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 157, 0,
	0, 229, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 0, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 0, 0,
	0, 0, 0, 123, 0, 211, 190, 249, 0, 0,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	0, 0, 0, 242, 243, 124, 267, 112, 255, 108,
	113, 254, 176, 0, 0, 0, 238, 246, 170, 163,
	0, 107, 244, 168, 162, 153, 132, 142, 200, 160,
	201, 143, 173, 172, 174, 0, 0, 0, 230, 252,
	268, 117, 0, 0, 237, 262, 263, 0, 0, 118,
	136, 131, 199, 175, 114, 145, 227, 152, 159, 206,
	266, 189, 212, 121, 251, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 109, 156, 265, 204,
	134, 253, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 103, 110,
	116, 122, 126, 130, 133, 138, 141, 144, 146, 147,
	148, 151, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 205, 208, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 224, 225, 231, 234, 240, 241,
	250, 257, 261, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 157, 0, 0, 229, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 95, 0, 0, 258, 0, 0, 0, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 0, 0, 0, 0, 0, 123, 0, 211,
	190, 249, 0, 0, 192, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 247, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 0, 0, 0, 242, 243, 124,
	267, 112, 255, 108, 113, 254, 176, 0, 0, 0,
	238, 246, 170, 163, 0, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	0, 0, 230, 252, 268, 117, 0, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	109, 156, 265, 204, 134, 253, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 157, 0, 0, 229,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 202, 0, 233, 140, 154, 115, 101,
	111, 0, 139, 180, 209, 213, 0, 0, 0, 0,
	0, 123, 0, 211, 190, 249, 0, 0, 192, 210,
	158, 239, 203, 248, 259, 260, 236, 256, 264, 226,
	104, 235, 247, 120, 221, 106, 245, 232, 169, 149,
	150, 105, 0, 207, 128, 135, 125, 182, 0, 0,
	0, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 0, 0, 0, 238, 246, 170, 163, 0, 107,
	244, 168, 162, 153, 132, 142, 200, 160, 201, 143,
	173, 172, 174, 0, 0, 0, 230, 252, 268, 117,
	0, 0, 237, 262, 263, 0, 0, 118, 136, 131,
	199, 175, 114, 145, 227, 152, 159, 206, 266, 189,
	212, 121, 251, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 109, 156, 265, 204, 134, 253,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 103, 110, 116, 122,
	126, 130, 133, 138, 141, 144, 146, 147, 148, 151,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 205, 208, 214, 215, 216, 217, 218, 219, 220,
	222, 223, 224, 225, 231, 234, 240, 241, 250, 257,
	261, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	157, 0, 0, 229, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 0, 202, 0, 233,
	140, 154, 115, 101, 111, 0, 139, 180, 209, 213,
	0, 0, 0, 0, 0, 123, 0, 211, 190, 249,
	0, 0, 192, 210, 158, 239, 203, 248, 259, 260,
	236, 256, 264, 226, 104, 235, 247, 120, 221, 106,
	245, 232, 169, 149, 150, 105, 0, 207, 128, 135,
	125, 182, 0, 0, 0, 242, 243, 124, 267, 112,
	255, 108, 113, 254, 176, 0, 0, 0, 238, 246,
	170, 163, 0, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 0, 0,
	230, 252, 268, 117, 0, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 109, 156,
	265, 204, 134, 253, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 157, 0, 0, 229, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 202, 0, 233, 140, 154, 115, 101, 111, 0,
	139, 180, 209, 213, 0, 0, 0, 0, 0, 123,
	0, 211, 190, 249, 0, 0, 192, 210, 158, 239,
	203, 248, 259, 260, 236, 256, 264, 226, 104, 235,
	247, 120, 221, 106, 245, 232, 169, 149, 150, 105,
	0, 207, 128, 135, 125, 182, 0, 0, 0, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 0,
	0, 0, 238, 246, 170, 163, 0, 107, 244, 168,
	162, 153, 132, 142, 200, 160, 201, 143, 173, 172,
	174, 0, 0, 0, 230, 252, 268, 117, 0, 0,
	237, 262, 263, 0, 0, 118, 136, 131, 199, 175,
	114, 145, 227, 152, 159, 206, 266, 189, 212, 121,
	251, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 109, 156, 265, 204, 134, 253, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 103, 110, 116, 122, 126, 130,
	133, 138, 141, 144, 146, 147, 148, 151, 161, 164,
	165, 166, 167, 177, 178, 179, 181, 184, 185, 186,
	187, 188, 191, 193, 194, 195, 196, 197, 198, 205,
	208, 214, 215, 216, 217, 218, 219, 220, 222, 223,
	224, 225, 231, 234, 240, 241, 250, 257, 261,
}
var yyPact = [...]int{

	136, -1000, -269, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1110, 1140, -1000, -1000, -1000, -1000,
	-1000, -1000, 358, 193, -1000, -1000, -1000, 179, -8, 15745,
	176, 187, 16433, -1000, 44, -1000, -1000, 114, 16433, -1000,
	-1000, -79, -92, -1000, 830, -1000, -1000, 23, -1000, -1000,
	-1000, -1000, -1000, -1000, 1082, 1100, 918, 1111, 955, -1000,
	8134, 137, 137, 15401, 7102, -1000, -1000, 416, 16433, 172,
	16433, -147, 119, 119, 119, -1000, -1000, -1000, -1000, 16433,
	127, 16089, 127, 127, 127, 16433, -1000, 237, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16433,
	746, 1025, 4246, 98, 4246, 4246, -1000, 434, -1000, 4246,
	53, 4246, -44, 471, 28, -26, -1000, 4246, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 141, 830, 371, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 623, 175, 16433, 307,
	-1000, 1048, 9522, 9522, 1110, -1000, 830, -1000, -1000, -1000,
	1043, -1000, -1000, 482, 1141, -1000, 11930, 235, -1000, 9522,
	2040, 866, -1000, -1000, 866, -1000, -1000, 197, -1000, -1000,
	10554, 10554, 10554, 10554, 10554, 10554, 10554, 10554, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 866, -1000, 9178, 866, 866, 866, 866, 866,
	866, 866, 866, 866, 866, 9522, 866, 866, 866, 866,
	866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
	866, 15050, 14362, 16433, 857, 810, -1000, -1000, 234, 849,
	6745, -125, -1000, -1000, -1000, 362, 13674, -1000, -1000, -1000,
	1024, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 775, 16433, -1000, 2497, -1000, 16089, 1076,
	142, 743, 450, 732, 16433, 851, 150, 16433, 1053, 921,
	16433, 724, 704, -1000, 6388, -1000, 4246, 4246, -1000, -1000,
	-1000, 119, 119, 4246, 4246, 16433, 4246, 16433, -1000, -1000,
	16433, -1000, -1000, -1000, 4246, 4246, -1000, 1139, 359, -1000,
	-1000, -1000, -1000, 9522, -1000, 10554, 292, -1000, 919, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 692, -1000, -1000, -1000,
	-1000, 16433, 4246, 67, 103, 64, 16433, -1000, 1152, 288,
	608, 230, 850, -1000, 548, 1082, 623, 955, 13330, 935,
	-1000, -1000, -1000, 16433, -1000, 9522, 9522, 510, -1000, 14706,
	-1000, -1000, 4960, 318, 10554, 490, 347, 10554, 10554, 10554,
	10554, 10554, 10554, 10554, 10554, 10554, 10554, 10554, 10554, 10554,
	10554, 10554, 553, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 690, -1000, 830, 828, 828, 256, 256, 256, 256,
	256, 256, 256, 10898, 1075, 623, 689, 456, 9178, 8134,
	8134, 623, 9522, 9522, 8822, 8478, 8134, 8134, 1075, 419,
	456, 16777, -1000, -1000, 10210, -1000, -1000, -1000, -1000, -1000,
	623, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16089, 16089,
	8134, 8134, 8134, 8134, 79, 16433, -1000, 856, 1276, -1000,
	-1000, -1000, 1057, 12986, 11586, 79, 780, 14362, 16433, -1000,
	-1000, 14362, 16433, 4603, 6031, 849, -125, 837, -1000, -109,
	-114, 7446, 208, -1000, -1000, -1000, -1000, 3532, 451, 726,
	-1000, -70, -1000, -1000, -1000, 882, -1000, 882, 130, 19,
	882, 882, 882, 882, 882, -37, -37, -37, -37, 4,
	-1000, -1000, -1000, -1000, -1000, 893, 892, -1000, 882, 882,
	882, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 890,
	107, 890, 884, 884, 884, 884, 895, -1000, 16433, 4246,
	1045, 4246, -1000, 16433, 16433, 848, -1000, 16433, 847, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 686, 679, -1000,
	-1000, -1000, -1000, -1000, 392, -1000, -1000, 16433, 408, 16433,
	16433, 456, 361, -1000, 544, 16433, -1000, 80, -1000, 16433,
	16433, 16433, 16433, 16433, 203, -1000, 939, 9522, 9522, 5674,
	9522, -1000, -1000, -1000, 1048, -1000, 1075, 1099, -1000, 978,
	975, 8134, -1000, -1000, 318, 324, -1000, -1000, 538, -1000,
	-1000, -1000, -1000, 228, 866, -1000, 2259, -1000, -1000, -1000,
	-1000, 490, 10554, 10554, 10554, 361, 2259, 2188, 418, 552,
	256, 495, 495, 304, 304, 304, 304, 304, 725, 725,
	-1000, -1000, -1000, 623, -1000, -1000, -1000, 8134, -1000, 9522,
	-1000, 623, 683, -1000, 683, -1000, 486, 515, 391, 1136,
	683, 320, 1135, 683, 683, 683, 8134, 460, -1000, 9522,
	623, -1000, 224, -1000, 938, 842, 839, 683, 623, 838,
	683, 683, 813, 866, -1000, 16777, 14362, 14362, 14362, 14362,
	14362, -1000, 948, 945, -1000, 934, 933, 962, 16433, -1000,
	673, 12986, -1000, 866, -1000, 12630, 231, 167, 165, 161,
	-1000, -1000, 1127, 14362, 846, -1000, 846, -1000, 223, -1000,
	-1000, 837, -125, -117, -1000, -1000, -1000, -1000, 456, -1000,
	559, 817, 3175, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	891, 668, -1000, 997, 267, 262, 572, 986, -1000, -1000,
	-1000, 313, -73, -1000, -1000, 516, -37, -37, 882, 882,
	128, 882, -1000, -37, -1000, -1000, -1000, 208, 1019, 208,
	208, 208, 208, -37, 534, 534, -1000, -1000, -1000, -1000,
	508, -1000, 890, -1000, -1000, 507, -1000, -1000, -1000, 917,
	16089, 830, 1055, -1000, -1000, -1000, 146, -1000, 4246, 16433,
	4246, 4246, 1127, 667, 664, 359, -1000, 531, 9522, -1000,
	-1000, -1000, 10554, -1000, -1000, -1000, 370, 309, 244, 116,
	116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 78, 874, -1000, -1000, -1000, -1000, 18, 66,
	964, 456, 456, 214, -1000, -1000, 16433, -1000, -1000, -1000,
	-1000, 873, -1000, -1000, -1000, 3889, 8134, -1000, 361, 2259,
	2173, -1000, 10554, -1000, 623, 456, -1000, 8134, -1000, -1000,
	184, 553, 184, 10554, 10554, -1000, 10554, 10554, -1000, -161,
	-1000, 868, 428, -1000, 9522, 397, -1000, 5674, -1000, 10554,
	10554, -1000, -1000, -1000, -1000, 916, 16777, 866, -1000, 12286,
	16089, 858, -1000, 354, 1276, 888, 914, 1058, -1000, -1000,
	-1000, -1000, 944, -1000, 943, -1000, -1000, -1000, -1000, 16089,
	10554, 231, -1000, 866, 866, 866, 1110, 9522, 846, -1000,
	-1000, 265, -1000, -1000, -123, -120, -1000, -1000, -1000, 3532,
	-1000, 3532, 16089, 102, -1000, 572, 572, -1000, -1000, -1000,
	885, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 463, 10554,
	1149, -1000, 995, -1000, 992, 530, -1000, -1000, 684, 208,
	208, -37, -1000, -1000, 882, -1000, 208, -1000, 296, -1000,
	-1000, -1000, -1000, 208, 663, -1000, 660, 816, -1000, 656,
	16433, -1000, -1000, -1000, 16433, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 408, -1000, 456, 2259, -1000, 577, -1000, 572,
	232, -1000, -1000, -1000, 652, 986, -1000, -1000, 649, -1000,
	648, 16089, 983, 647, 16433, 16089, -1000, -1000, 609, 646,
	16089, -170, 641, 16089, 16089, 16089, -1000, 5317, -1000, 1127,
	14362, -1000, -1000, 623, -1000, 10554, 2259, -1000, -1000, 623,
	882, 882, -1000, 882, 884, -1000, 882, 9, 882, 6,
	623, 623, 2101, 2067, 1926, 1765, 866, -156, -1000, 456,
	9522, -1000, 1911, 988, -1000, 1028, 791, 754, -1000, -1000,
	7790, 623, 645, 212, 640, -1000, 1110, 16777, 9522, -1000,
	-1000, 9522, 883, -1000, 9522, -1000, -1000, -1000, 640, 1727,
	-1000, 16089, 16089, 16089, 1082, 456, -1000, -1000, -1000, -1000,
	3175, -1000, 636, -1000, 882, -1000, -1000, -1000, 16089, -1000,
	2259, -49, -1000, -1000, -1000, -1000, -1000, -1000, 208, -1000,
	-1000, -1000, -1000, -1000, -37, 527, -37, 500, -1000, 497,
	881, -1000, 830, -1000, -1000, 609, 94, -1000, 895, 267,
	102, -1000, -1000, -1000, -1000, 633, 242, -1000, 143, 94,
	609, 1036, -1000, 5317, -1000, -1000, 878, 898, -1000, 1124,
	790, -1000, 2259, -1000, -1000, 100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10554, 10554, 10554, 10554, 10554, 623,
	522, 456, 10554, 10554, 982, -1000, 866, -1000, -1000, 865,
	16089, 16089, -1000, 16089, 1082, -1000, 456, 456, 16089, 456,
	11242, -1000, 14018, 631, -1000, 631, 631, -1000, 195, 16089,
	1049, 629, -1000, -1000, 208, -1000, 208, 657, 637, 16089,
	-1000, 632, -1000, -1000, 607, 877, 572, -1000, -1000, 570,
	-1000, -1000, 16089, -1000, 94, 866, 759, -1000, 350, 16089,
	16433, 1113, 1098, -1000, -1000, 938, 938, 938, 938, 76,
	-1000, -1000, 938, 938, 1148, -1000, 866, -1000, 830, 210,
	-1000, -1000, -1000, 622, -1000, 231, 16089, -1000, -1000, -1000,
	195, -1000, 556, 349, 491, -1000, -1000, 99, -1000, -1000,
	-1000, -1000, 620, -1000, -1000, -1000, -1000, 16089, 895, -1000,
	-1000, -1000, -1000, 77, 5317, 3532, 615, -1000, -1000, 9522,
	9522, -1000, -1000, -1000, -1000, 623, 60, -173, -1000, -1000,
	16777, 754, 623, 16089, -1000, -1000, -1000, -1000, -1000, 488,
	-1000, -1000, 16433, 195, -1000, 613, 876, -1000, 587, -1000,
	16089, -1000, -1000, 874, 456, 750, -1000, 960, -166, -177,
	554, -1000, -1000, -1000, 870, -1000, 195, 195, 16089, -1000,
	77, 974, -170, -1000, 958, -1000, 16089, -1000, 584, -1000,
	68, -1000, -171, 580, 195, 71, -175, 913, -1000, 866,
	-178, 912, 902, 1134, 9866, -1000, -1000, 1147, -1000, 1143,
	218, 218, 938, 623, -1000, -1000, -1000, 109, 504, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1437, 60, 554, 1435, 1433, 1432, 100, 99, 94,
	1431, 1430, 1426, 1425, 1420, 1419, 1415, 1414, 1413, 1412,
	1410, 1408, 1407, 1406, 1401, 1400, 1399, 1398, 1397, 1392,
	1391, 1388, 98, 1385, 1384, 1378, 104, 1377, 83, 1376,
	1370, 1369, 69, 109, 68, 53, 160, 1368, 1367, 76,
	67, 64, 1366, 42, 1365, 1363, 87, 1360, 1357, 1356,
	62, 1355, 1354, 1499, 1353, 73, 1352, 29, 16, 65,
	1351, 1350, 1349, 1343, 116, 534, 1342, 1339, 30, 1337,
	1336, 97, 1335, 72, 10, 13, 28, 19, 1334, 1082,
	51, 1333, 66, 1331, 1330, 1329, 1328, 59, 1316, 20,
	70, 22, 14, 27, 71, 1313, 6, 77, 44, 36,
	21, 88, 80, 1312, 32, 78, 56, 1309, 1303, 544,
	1302, 1300, 48, 1299, 1298, 34, 1297, 408, 84, 37,
	1290, 1288, 1287, 1284, 33, 45, 1283, 35, 352, 58,
	0, 584, 152, 82, 1282, 23, 1281, 1696, 63, 26,
	50, 1280, 1279, 46, 1277, 1275, 1274, 1271, 1268, 1262,
	1260, 1257, 1154, 1255, 1251, 1250, 31, 164, 1247, 1246,
	54, 57, 1245, 1244, 1242, 55, 39, 1236, 47, 41,
	1235, 1233, 1231, 1226, 11, 1225, 1223, 1222, 1219, 1215,
	38, 12, 1209, 18, 17, 8, 25, 3, 24, 1201,
	5, 1200, 15, 1194, 7, 1193, 9, 52, 1, 4,
	2, 1168, 1167, 1166, 387, 318, 91, 1165, 1163, 112,
}
var yyR1 = [...]int{

	0, 212, 213, 213, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 35, 35, 8,
	9, 9, 9, 9, 216, 216, 58, 58, 56, 56,
	57, 57, 107, 107, 10, 10, 10, 10, 112, 112,
	116, 116, 116, 117, 117, 117, 117, 151, 151, 101,
	11, 11, 11, 11, 11, 11, 11, 206, 206, 205,
	204, 204, 203, 203, 202, 20, 186, 188, 188, 187,
	187, 187, 187, 176, 155, 155, 155, 155, 155, 155,
	155, 154, 154, 154, 154, 158, 158, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 157, 157, 157, 157,
	157, 157, 157, 157, 159, 159, 159, 159, 159, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 161, 161, 161, 161, 161, 161,
	161, 161, 175, 175, 162, 162, 170, 170, 171, 171,
	171, 168, 168, 169, 169, 172, 172, 164, 165, 173,
	166, 166, 166, 167, 167, 167, 174, 174, 174, 174,
	163, 177, 177, 197, 197, 196, 196, 195, 195, 195,
	185, 185, 192, 192, 192, 192, 192, 180, 180, 180,
	179, 179, 181, 181, 184, 184, 194, 194, 193, 178,
	178, 198, 198, 198, 198, 198, 182, 182, 183, 183,
	183, 209, 210, 208, 208, 208, 208, 208, 189, 189,
	189, 190, 190, 190, 191, 191, 191, 211, 211, 16,
	16, 16, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	99, 99, 99, 18, 19, 19, 19, 19, 19, 19,
	19, 19, 135, 135, 207, 207, 207, 207, 207, 201,
	199, 199, 200, 200, 12, 21, 21, 13, 13, 13,
	13, 13, 14, 14, 22, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 47, 123, 123, 121, 121,
	124, 124, 122, 122, 122, 125, 125, 125, 126, 126,
	152, 152, 152, 24, 24, 29, 29, 30, 31, 136,
	136, 27, 27, 28, 28, 28, 28, 41, 41, 217,
	217, 26, 26, 25, 25, 25, 25, 15, 218, 32,
	33, 33, 34, 34, 34, 38, 38, 38, 36, 36,
	36, 37, 37, 44, 44, 43, 43, 45, 45, 45,
	45, 144, 144, 144, 143, 143, 48, 48, 49, 49,
	50, 50, 51, 51, 51, 51, 66, 66, 67, 67,
	67, 67, 67, 106, 106, 108, 108, 52, 52, 52,
	52, 53, 53, 54, 54, 55, 55, 134, 134, 149,
	149, 59, 59, 59, 61, 60, 60, 60, 60, 62,
	62, 64, 64, 63, 63, 65, 68, 68, 68, 68,
	69, 69, 46, 46, 46, 46, 46, 46, 46, 120,
	120, 71, 71, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 82, 82, 82, 82, 82, 82, 72,
	72, 72, 72, 72, 72, 72, 42, 42, 83, 83,
	83, 89, 84, 84, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 79, 79, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 219,
	219, 81, 80, 80, 80, 80, 80, 80, 39, 39,
	39, 39, 39, 150, 150, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 93, 93,
	40, 40, 91, 91, 92, 94, 94, 90, 90, 90,
	74, 74, 74, 74, 74, 74, 74, 74, 76, 76,
	76, 95, 95, 96, 96, 97, 97, 98, 98, 100,
	102, 102, 102, 103, 103, 103, 103, 104, 104, 104,
	73, 73, 73, 73, 73, 73, 105, 105, 105, 105,
	109, 109, 85, 85, 87, 87, 86, 88, 110, 110,
	114, 111, 111, 115, 115, 115, 115, 113, 113, 113,
	146, 146, 146, 118, 118, 127, 127, 128, 128, 119,
	119, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 133, 133, 132, 132, 132, 129, 129, 129, 130,
	130, 145, 145, 141, 141, 142, 142, 147, 147, 148,
	148, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 214,
	215, 137, 138, 138, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 3, 3, 2, 4, 5, 2, 3, 4, 2,
	2, 3, 3, 3, 3, 3, 4, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 3, 1,
	0, 3, 3, 0, 2, 2, 2, 1, 2, 1,
	2, 5, 4, 0, 1, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 3, 3, 3,
	1, 10, 11, 11, 12, 12, 1, 1, 0, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 0, 2, 1,
	1, 1, 6, 10, 9, 7, 7, 7, 9, 7,
	12, 14, 7, 7, 9, 9, 10, 5, 6, 8,
	0, 1, 2, 4, 7, 5, 5, 5, 12, 7,
	5, 9, 0, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 4,
	4, 4, 3, 2, 3, 4, 4, 3, 6, 6,
	4, 4, 4, 4, 4, 3, 3, 2, 6, 2,
	3, 4, 3, 7, 5, 4, 2, 4, 3, 4,
	3, 3, 5, 2, 3, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 0, 3, 1,
	1, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 2, 6, 1, 4,
	6, 3, 2, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 5, 6, 4, 4,
	3, 6, 6, 6, 8, 8, 8, 8, 9, 4,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -212, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -29, -30, -31,
	-27, -26, -25, -15, -3, -4, 6, 7, -35, 9,
	10, 29, -20, 117, -17, -18, -19, 120, 119, 156,
	121, 149, 52, 171, 172, 174, 175, -217, -136, 154,
	155, 30, 31, 123, -214, 8, 264, 118, 151, 150,
	25, 56, -213, 362, -97, 15, -34, 5, -32, -218,
	-32, -32, -32, -32, -32, -186, -188, 56, 92, -130,
	130, 74, 256, 126, 127, -129, 33, 137, 136, 127,
	127, 128, 130, 256, 126, 127, -63, -147, 59, -140,
	274, 140, 306, 307, 171, 182, 176, 210, 198, 275,
	308, 141, 196, 199, 243, 139, 309, 230, 238, 68,
	174, 252, 310, 152, 194, 187, 311, 283, 185, 27,
	312, 240, 215, 313, 279, 186, 239, 123, 314, 143,
	137, 315, 216, 220, 316, 244, 317, 318, 319, 180,
	181, 320, 246, 214, 138, 32, 276, 37, 161, 247,
	218, 321, 213, 208, 322, 323, 324, 325, 212, 179,
	207, 41, 222, 221, 223, 242, 201, 326, 327, 328,
	144, 329, 188, 18, 330, 331, 332, 333, 334, 250,
	155, 335, 159, 336, 337, 338, 339, 340, 341, 241,
	217, 219, 134, 163, 278, 342, 248, 184, 343, 145,
	160, 154, 251, 146, 344, 345, 346, 347, 348, 349,
	350, 175, 351, 352, 353, 354, 170, 245, 254, 40,
	227, 355, 178, 136, 356, 172, 167, 233, 205, 162,
	357, 358, 192, 193, 211, 177, 206, 173, 164, 156,
	359, 253, 228, 280, 200, 197, 168, 360, 130, 165,
	166, 361, 234, 235, 169, 277, 249, 195, 229, 127,
	110, 199, 243, 117, 231, 232, 240, -180, 241, 163,
	-152, 127, -121, 230, 234, 235, 169, 59, 128, 129,
	32, 245, 244, 236, -147, 173, -41, 121, 157, -63,
	-137, -137, -137, 233, 233, -137, -2, -119, 130, 235,
	132, -103, 17, 16, -5, -3, -214, 6, 20, 21,
	-38, 42, 43, -33, -45, 101, -46, -147, -70, 76,
	-75, 28, 59, -140, 23, -74, -71, -90, -88, -89,
	110, 111, 112, 99, 100, 107, 77, 113, -79, -77,
	-78, -80, 61, 60, 69, 62, 63, 64, 65, 70,
	71, 72, -141, -86, -214, 46, 47, 126, 265, 266,
	267, 268, 273, 147, 269, 79, 36, 255, 263, 262,
	261, 259, 260, 257, 258, 271, 272, 133, 256, 105,
	264, -119, -119, 11, -56, -57, -63, -65, -147, -111,
	-151, 173, -115, 245, 244, -142, -113, -141, -139, 243,
	199, 242, 59, -140, 122, 148, 281, 75, 22, 24,
	225, 78, 110, 16, 79, 109, 265, 117, 50, 282,
	257, 258, 255, 267, 268, 256, 231, 28, 10, 284,
	25, 150, 21, 103, 119, 82, 83, 153, 23, 151,
	72, 147, 287, 19, 53, 11, 13, 288, 289, 14,
	133, 132, 94, 128, 48, 8, 113, 26, 91, 44,
	290, 34, 291, 292, 293, 294, 46, 92, 17, 259,
	260, 30, 295, 273, 158, 105, 51, 38, 76, 296,
	297, 70, 298, 73, 54, 74, 15, 49, 299, 300,
	301, 302, 93, 120, 264, 47, 303, 126, 6, 270,
	29, 149, 45, 304, 127, 81, 271, 272, 131, 71,
	5, 33, 31, 9, 52, 55, 261, 262, 263, 36,
	80, 12, 305, -187, 92, -176, 59, -63, 128, -63,
	264, -128, 133, -128, -128, -21, -63, -127, 133, -141,
	-127, -127, -127, -63, 114, -63, 59, 29, -138, -214,
	-142, 256, 126, 59, 163, 127, 164, 130, -138, -138,
	-182, 11, 94, -138, 167, 168, -138, -124, -123, 238,
	239, 233, 237, 12, -47, 92, 168, 233, 166, -138,
	-28, -2, -9, -7, -8, -2, 84, -137, -137, -215,
	58, 127, -63, 117, 119, 122, 54, -104, 19, 30,
	-46, -147, -98, -100, -46, -97, -2, -32, 38, -36,
	20, 21, 67, 11, -144, 75, 74, 91, -143, 22,
	-141, 61, 114, -46, -72, 94, 76, 92, 93, 78,
	96, 95, 106, 99, 100, 101, 102, 103, 104, 105,
	97, 98, 109, 84, 85, 86, 87, 88, 89, 90,
	-120, -214, -89, -214, 115, 116, -75, -75, -75, -75,
	-75, -75, -75, -75, -214, -2, -84, -46, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -93,
	-46, -214, -219, -81, -214, -219, -81, -219, -81, -219,
	-214, -219, -81, -219, -81, -219, -219, -81, -214, -214,
	-214, -214, -214, -214, -64, 26, -63, -49, -50, -51,
	-52, -66, -89, -214, -63, -63, -56, -216, 57, 11,
	55, -216, 57, 114, 57, -111, 173, -112, -116, 246,
	248, 84, -146, -141, 61, 28, 29, 58, 57, -63,
	-154, -158, -160, -159, -161, -156, -157, 196, 199, 203,
	201, 197, 202, 110, 200, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 29, 152, 192, 193,
	194, 195, 216, 217, 218, 219, 220, 221, 222, 223,
	176, 198, 275, 177, 178, 179, 180, 181, 182, 184,
	185, 186, 187, 188, 189, 190, -141, 22, 130, 59,
	76, 59, -63, 57, 131, -56, 23, 54, -58, -63,
	59, 59, -148, -147, -139, -138, -138, -128, -128, -138,
	-138, -63, -138, -63, -63, -138, -138, 11, -122, 11,
	94, -46, -75, -126, 92, 54, 59, -63, -138, 165,
	165, 127, 127, 170, -63, 9, 94, 57, 18, 114,
	57, -102, 24, 25, -103, -215, -38, -76, -141, 62,
	65, -37, 45, -63, -46, -46, -82, 70, 76, 71,
	72, -143, 101, -148, -142, -139, -75, -83, -86, -89,
	66, 94, 92, 93, 78, -75, -75, -75, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
	-150, 59, 61, 59, -74, -74, -141, -36, -215, 57,
	-215, -2, -43, -45, -43, -215, -46, -46, -90, 61,
	-43, -90, 61, -43, -43, -43, -36, -91, -92, 80,
	-90, -141, -147, -215, -75, -141, -141, -43, -44, -43,
	-43, -43, -107, 159, -63, 29, 57, -59, -61, -60,
	-62, 44, 48, 50, 45, 46, 47, 51, -134, 22,
	-49, -214, -67, 159, -68, 22, -149, 52, 132, 53,
	-147, 61, -107, 55, -49, -63, -49, -65, -147, 101,
	-115, -112, 57, 247, 249, 250, 54, 73, -46, -167,
	109, -189, -190, -191, -142, 61, 62, -176, -177, -178,
	-192, 142, -198, 134, 136, 33, -179, 143, 128, 34,
	58, -155, -168, 228, -162, 56, -162, -162, 204, 196,
	199, 197, -162, -162, -162, -162, -162, -166, 199, -166,
	-166, -166, -166, 197, 56, 56, -162, -162, -162, -170,
	56, -170, 191, -170, -171, 56, -171, -171, -171, -145,
	55, -101, -63, -138, 23, -138, -63, -63, -63, 57,
	59, 59, -183, 11, 94, -63, -125, 92, 12, -147,
	-147, -42, 153, 61, -63, -131, 122, 119, 120, 124,
	125, -201, 118, 225, 199, 68, 28, 15, 265, 159,
	280, 59, 160, -63, -63, -63, -63, -63, 122, 119,
	40, -46, -46, -148, -100, -104, -118, 19, 11, 36,
	36, -43, 70, 71, 72, 114, -214, -83, -75, -75,
	-75, -42, 75, -215, -44, -46, -215, 57, -215, -215,
	57, 55, 22, 11, 11, -215, 11, 11, -215, -215,
	-215, -43, -94, -92, 82, -46, -215, 114, -215, 57,
	57, -215, -215, -215, -215, -73, 29, 36, -2, -214,
	-214, -110, -114, -90, -50, -51, -51, -50, -51, 44,
	44, 44, 49, 44, 49, 44, -60, -147, -215, -214,
	298, -149, -68, 128, 128, 128, -69, 12, -49, -69,
	-69, 114, -116, -117, 251, 248, 254, 59, 61, 57,
	-191, 84, 56, 59, 34, -179, -179, -184, 59, -184,
	34, -172, -164, -165, -173, -174, -163, 70, 76, 28,
	54, 225, 134, 34, 33, 68, -169, 229, 62, -166,
	-166, -162, -162, -162, 204, -162, -166, -167, 29, -167,
	-167, -167, -167, -166, -175, 61, -175, 62, -170, 62,
	54, -141, -2, 22, 131, -138, -63, -138, -138, -69,
	59, 59, -122, 61, -46, -75, -137, -135, -207, -179,
	-211, -178, 135, 139, 142, 143, 134, 159, -135, -207,
	142, -179, 143, 135, -132, -179, 131, 22, -135, -135,
	159, -206, 55, 165, 225, 165, 41, 114, -63, -48,
	11, 101, -142, -44, -42, 75, -75, -215, -45, -153,
	110, 196, 152, 194, 187, 214, 201, 227, 192, 228,
	-150, -153, -75, -75, -75, -75, 274, -97, 83, -46,
	81, -142, -75, -75, -109, 54, -110, -85, -87, -86,
	-214, -2, -105, -141, -108, -141, -69, 57, 84, -54,
	-53, 54, 55, -55, 54, -53, 44, 44, -108, -75,
	-68, -214, -214, -214, -97, -46, -69, 248, 252, 253,
	-190, -191, -194, -193, -141, -198, -184, -184, 56, 70,
	-75, 9, 34, 34, 61, 58, -167, -167, -166, -162,
	-167, 59, 110, -167, 58, 57, 58, 57, 58, 57,
	-63, -101, -101, -63, -125, 56, -176, -137, -184, -129,
	59, 59, -137, 59, -141, 34, 59, -63, -141, -176,
	59, -141, -204, 277, -205, 59, -141, -141, -141, -69,
	-49, -215, -75, -215, -162, -162, -162, -171, -162, 181,
	-162, 181, -215, -215, 19, 19, 19, 19, -214, -40,
	270, -46, 57, 57, 27, -109, 57, -215, -215, -215,
	57, 114, -215, 57, -97, -114, -46, -46, 56, -46,
	-215, -68, -134, -106, -141, -106, -106, -103, 58, 57,
	-162, -106, -78, -167, -166, 61, -166, 62, 62, 56,
	-2, -176, -99, 147, 148, -145, -181, -179, 59, -133,
	131, 22, 131, -99, -176, 26, -203, -202, -142, 56,
	55, -95, 13, -166, 59, -75, -75, -75, -75, -75,
	-215, 61, -75, -75, 34, -87, 36, -2, -214, -141,
	-141, -141, -103, -106, -67, -149, 57, -215, -215, -215,
	-196, -195, 55, 138, 68, -193, -102, 58, -167, -167,
	58, 58, -194, -101, 58, -137, 59, 56, -184, 59,
	-141, -137, -99, -214, 57, 84, -106, -63, -96, 14,
	16, -215, -215, -215, -215, -39, 94, 277, -215, -215,
	9, -85, -2, 114, 58, -68, -141, -195, 59, -185,
	84, 61, 145, 58, -137, -194, -145, -137, -199, -200,
	159, -202, -191, 58, -46, -84, -215, 275, 51, 278,
	-110, -215, -141, 62, -63, -197, -196, 58, 56, -215,
	57, -141, -206, 41, 276, 279, 56, -197, -194, -200,
	36, -204, 41, -106, 58, 161, 277, 58, -197, 162,
	278, -209, -210, 54, -214, 279, -210, 54, -209, 54,
	10, 9, -75, 158, -208, 146, 141, 144, 29, -208,
	-215, -215, 140, 28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 625, 0, 378, 378, 378, 378,
	378, 378, 0, 699, 249, 250, 251, 0, 0, 0,
	0, -2, 354, 355, 0, 357, 358, 367, -2, 1001,
	1001, 0, 0, 1001, 0, 37, 38, 679, 370, 359,
	360, 999, 1, 3, 633, 0, 0, 382, 385, 380,
	0, 679, 679, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 677, 677, 677, 700, 696, 697, 698, 0,
	675, 0, 675, 675, 675, 0, 303, 453, 707, 708,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 0,
	0, 0, 1002, 0, 1002, 1002, 317, 0, 319, 1002,
	0, 1002, 0, 326, 0, 0, 333, 1002, 207, 208,
	209, 351, 352, 339, 353, 356, 0, 0, 0, 371,
	372, 373, 374, 1001, 1001, 377, 31, 0, 0, 0,
	680, 637, 0, 0, 625, 33, 0, 378, 383, 384,
	388, 386, 387, 379, 0, 397, 401, 0, 462, 0,
	467, 469, -2, -2, 0, 504, 505, 506, 507, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 532, 533,
	534, 535, 610, 611, 612, 613, 614, 615, 616, 617,
	471, 472, 607, 657, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 569, 569, 569,
	569, 569, 569, 569, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 50, 453, 54,
	0, 977, 661, -2, -2, 0, 0, 705, 706, -2,
	843, -2, 703, 704, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 0, 0, 89, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 304, 1002, 1002, 307, 1003,
	1004, 677, 677, 1002, 1002, 0, 1002, 0, 315, 316,
	0, 226, 227, 320, 1002, 1002, 322, 0, 342, 340,
	341, 336, 337, 0, 328, 0, 348, 330, 331, 334,
	361, -2, 364, 365, 366, -2, 0, 375, 376, 32,
	1000, 0, 1002, 0, 0, 0, 0, 26, 0, 0,
	634, 0, 626, 627, 630, 633, 31, 385, 0, 391,
	389, 390, 381, 0, 398, 0, 0, 0, 402, 0,
	404, 405, 0, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 489, 490, 491, 492, 493, 494, 495,
	468, 0, 482, 0, 0, 0, 524, 525, 526, 527,
	528, 529, 530, 0, 388, 31, 0, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 388, 0,
	599, 0, 553, 561, 0, 554, 562, 555, 563, 556,
	0, 557, 564, 558, 565, 559, 560, 566, 0, 0,
	0, 393, 0, 0, 52, 0, 452, 0, 408, 410,
	411, 412, -2, 0, 456, -2, 0, 0, 0, 44,
	45, 0, 0, 0, 0, 55, 977, 57, 58, 0,
	0, 0, 183, 670, 671, 672, 668, 238, 0, 0,
	94, 171, 102, 103, 104, 164, 106, 164, 164, 0,
	164, 164, 164, 164, 164, 180, 180, 180, 180, 180,
	147, 148, 149, 150, 151, 0, 0, 124, 164, 164,
	164, 128, 154, 155, 156, 157, 158, 159, 160, 161,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 166,
	166, 166, 168, 168, 168, 168, 701, 69, 0, 1002,
	0, 1002, 85, 0, 0, 297, 676, 0, 299, 46,
	300, 301, 454, 709, 710, 305, 306, 0, 0, 310,
	311, 312, 313, 314, 228, 321, 325, 0, 345, 0,
	0, 327, 496, 329, 0, 0, 368, 0, 273, 0,
	0, 0, 0, 0, 0, 638, 0, 0, 0, 0,
	0, 629, 631, 632, 637, 34, 388, 0, 618, 0,
	0, 0, 392, 29, 463, 464, 466, 483, 0, 485,
	487, 403, 399, 0, 608, -2, 473, 474, 498, 499,
	500, 0, 0, 0, 0, 496, 478, 0, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	523, 583, 584, 0, 521, 522, 531, 393, 501, 0,
	656, 31, 0, 395, 0, 540, 0, 0, 506, 610,
	0, 506, 610, 0, 0, 0, 0, 605, 602, 0,
	0, 607, 0, 570, 0, 0, 0, 0, 0, 394,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 444, 0, 0, 0, 0, 438,
	0, 0, 416, 922, 418, 0, 456, 0, 0, 0,
	439, 440, 460, 0, 460, 49, 460, 51, 0, 455,
	662, 56, 0, 0, 61, 62, 663, 664, 665, 666,
	0, 86, 239, 241, 244, 245, 246, 90, 91, 92,
	0, 0, 220, 0, 0, 214, 214, 0, 210, 211,
	88, 93, 173, 172, 105, 0, 180, 180, 164, 164,
	164, 164, 133, 180, 136, 139, 140, 183, 0, 183,
	183, 183, 183, 180, 0, 0, 125, 126, 127, 116,
	0, 117, 166, 119, 120, 0, 121, 122, 123, 0,
	0, 0, 0, 75, 678, 76, 0, 295, 1002, 0,
	1002, 1002, 460, 0, 0, 342, 324, 0, 0, 343,
	344, 335, 0, 349, 332, 1001, -2, 282, 693, 282,
	282, 267, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 0, 77, 275, 277, 276, 280, 0, 0,
	0, 635, 636, 0, 628, 27, 0, 673, 674, 619,
	620, 406, 484, 486, 488, 0, 393, 475, 496, 479,
	0, 476, 0, 470, 0, 503, -2, 0, 538, 539,
	0, 0, 0, 0, 0, 576, 0, 0, 577, 0,
	549, 625, 0, 603, 0, 0, 552, 0, 571, 0,
	0, 572, 573, 574, 575, 650, 0, 0, -2, 0,
	0, 460, 658, 0, 409, 433, 435, 0, 430, 442,
	443, 445, 0, 447, 0, 449, 450, 413, 415, 0,
	0, 456, 422, 0, 0, 0, 625, 0, 460, 42,
	43, 0, 59, 60, 0, 0, 66, 184, 185, 0,
	242, 0, 0, 0, 202, 214, 214, 205, 215, 206,
	0, 95, 96, 97, 98, 99, 100, 175, 0, 0,
	0, 179, 0, 187, 189, 0, 101, 174, 0, 183,
	183, 180, 131, 132, 164, 137, 183, 141, 0, 142,
	143, 144, 145, 183, 0, 162, 0, 0, 118, 0,
	0, 702, -2, 69, 0, 298, 47, 308, 309, 318,
	229, 230, 345, 346, 347, 497, 252, 0, 1001, 214,
	0, 268, 283, 284, 285, 286, 287, 288, 0, 1001,
	285, 0, 286, 0, 0, 0, 694, 695, 0, 0,
	0, 80, 0, 0, 0, 0, 639, 0, 28, 460,
	0, 400, 609, 0, 477, 0, 480, 536, 396, 0,
	164, 164, 588, 164, 168, 591, 164, 593, 164, 596,
	0, 0, 0, 0, 0, 0, 0, 600, 551, 606,
	0, 608, 0, 0, 35, 0, 650, 640, 652, 654,
	0, 31, 0, 646, 0, 425, 625, 0, 0, 427,
	434, 0, 0, 428, 0, 429, 446, 448, 0, -2,
	421, 0, 0, 0, 633, 461, 41, 63, 64, 65,
	240, 243, 0, 216, 164, 219, 203, 204, 0, 176,
	177, 0, 186, 188, 190, 165, 129, 130, 183, 138,
	134, 181, 182, 146, 180, 0, 180, 0, 169, 0,
	0, 73, 0, 296, 323, 0, 270, 255, 701, 212,
	248, 256, 257, 262, 263, 0, 0, 259, 0, 270,
	0, 0, 274, 0, 78, 79, 0, 0, 279, 621,
	407, 537, 481, 541, 585, 180, 589, 590, 592, 594,
	595, 597, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 0, 36, 0, 655, -2, 0,
	0, 0, 53, 0, 633, 659, 660, 431, 0, 436,
	456, 419, 0, 0, 423, 0, 0, 40, 192, 0,
	630, 0, 178, 135, 183, 163, 183, 0, 0, 0,
	-2, 0, 1001, 271, 0, 0, 214, 213, 269, 0,
	691, 692, 0, 1001, 270, 0, 81, 82, 0, 0,
	0, 623, 0, 586, 587, 0, 0, 0, 0, 578,
	550, 601, 0, 0, 0, 653, 0, -2, 0, 648,
	647, 426, 39, 0, 417, 456, 0, 457, 458, 459,
	191, 195, 0, 200, 0, 217, 218, 0, 152, 153,
	167, 170, 0, 74, 1001, 254, 272, 0, 701, 258,
	264, 265, 1001, 0, 0, 0, 0, 281, 30, 0,
	0, 544, 546, 545, 547, 0, 0, 0, 567, 568,
	0, 643, 31, 0, 432, 420, 424, 196, 197, 0,
	201, 199, 0, 193, 253, 0, 0, 266, 0, 290,
	0, 83, 84, 77, 624, 622, 548, 0, 0, 0,
	651, -2, 649, 198, 0, 72, 194, 193, 0, 289,
	0, 0, 80, 579, 0, 582, 0, 260, 0, 291,
	0, 278, 580, 0, 193, 0, 0, 221, 261, 0,
	0, 222, 223, 0, 0, 581, 224, 0, 225, 0,
	0, 0, 0, 0, 231, 233, 234, 0, 0, 232,
	292, 293, 235, 236, 237,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 362,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:340
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:374
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:380
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:398
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:411
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:421
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:425
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:432
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:444
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:490
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:498
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:504
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:518
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:523
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:527
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:537
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:541
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:545
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:551
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:555
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:561
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:565
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:569
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:575
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:579
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:583
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:587
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:597
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:602
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:608
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:616
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:622
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:626
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:630
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:638
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:643
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:647
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:653
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:658
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:663
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:674
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:686
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:697
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:704
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:708
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:719
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:723
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:727
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:746
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1076
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1081
		{
			yyVAL.sqlVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1085
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1090
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1094
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1102
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1106
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1112
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1120
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1124
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1129
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1133
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1150
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1194
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.colKeyOpt = colKey
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1218
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1222
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1227
		{
			yyVAL.indexOptions = nil
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1247
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1251
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1256
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1272
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1276
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1280
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1284
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1302
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1317
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1321
		{
			yyVAL.str = yyDollar[1].str
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1326
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1330
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1336
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1340
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1346
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1352
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1356
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 221:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1363
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 222:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1367
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 223:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1371
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 224:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1375
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 225:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1379
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1385
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1389
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1394
		{
			yyVAL.str = ""
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1398
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1402
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1414
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1424
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1428
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1432
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1436
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1441
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1457
		{
			yyVAL.str = yyDollar[1].str
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1465
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1479
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = ""
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1503
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 254:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1510
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1533
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 260:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 261:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 264:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1559
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 266:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1566
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1576
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1588
		{
			yyVAL.columnOrder = nil
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1651
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1678
		{
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1691
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1701
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 292:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1707
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1711
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1723
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1727
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1735
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1747
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1774
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1780
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1789
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1797
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1802
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1806
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1810
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1818
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1826
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1830
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1834
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1838
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1846
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1850
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1854
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1859
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1869
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1877
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1891
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1900
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1904
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1908
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1922
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1928
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1934
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1944
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = "full "
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1964
		{
			yyVAL.str = ""
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1968
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1972
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.showFilter = nil
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1982
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1986
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1992
		{
			yyVAL.showFilter = nil
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2002
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = SessionStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = GlobalStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2016
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2020
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.statement = &Begin{}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2030
		{
			yyVAL.statement = &Begin{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.statement = &Commit{}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.statement = &Rollback{}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2085
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2089
		{
			yyVAL.statement = &OtherRead{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2103
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2107
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2113
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2117
		{
			setAllowComments(yylex, true)
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2121
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2127
		{
			yyVAL.bytes2 = nil
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2131
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.str = UnionStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2141
		{
			yyVAL.str = UnionAllStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2145
		{
			yyVAL.str = UnionDistinctStr
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2150
		{
			yyVAL.str = ""
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.str = SQLCacheStr
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2163
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2167
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.str = DistinctStr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = StraightJoinHint
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2185
		{
			yyVAL.selectExprs = nil
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2217
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2222
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2237
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2242
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2280
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2286
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2291
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2306
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2310
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2318
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2334
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2340
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2357
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2361
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2365
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2377
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2381
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2387
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2392
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2399
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2405
		{
			yyVAL.str = JoinStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.str = JoinStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.str = JoinStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.str = StraightJoinStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = LeftJoinStr
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.str = LeftJoinStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.str = RightJoinStr
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.str = RightJoinStr
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2443
		{
			yyVAL.str = NaturalJoinStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2471
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2482
		{
			yyVAL.indexHints = nil
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2486
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2490
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2494
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = nil
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.str = IsNullStr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.str = IsNotNullStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = IsTrueStr
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2613
		{
			yyVAL.str = IsNotTrueStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.str = IsFalseStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			yyVAL.str = IsNotFalseStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.str = EqualStr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.str = LessThanStr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.str = GreaterThanStr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.str = LessEqualStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.str = GreaterEqualStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.str = NotEqualStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = nil
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2666
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2680
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2818
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 548:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2968
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2973
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2982
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 568:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2986
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3014
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3022
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3032
		{
			yyVAL.str = ""
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3036
		{
			yyVAL.str = BooleanModeStr
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3040
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 581:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3044
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.str = QueryExpansionStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3058
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = nil
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3128
		{
			yyVAL.str = string("")
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3132
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3148
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3153
		{
			yyVAL.expr = nil
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3157
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3167
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3171
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = &NullVal{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3220
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3224
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3229
		{
			yyVAL.exprs = nil
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3233
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3238
		{
			yyVAL.expr = nil
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3242
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3247
		{
			yyVAL.orderBy = nil
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3251
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3261
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3267
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3272
		{
			yyVAL.str = AscScr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.str = AscScr
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3280
		{
			yyVAL.str = DescScr
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3285
		{
			yyVAL.limit = nil
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3289
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3293
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3297
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3302
		{
			yyVAL.str = ""
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3306
		{
			yyVAL.str = ForUpdateStr
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3310
		{
			yyVAL.str = ShareModeStr
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3327
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3331
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3336
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3340
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3344
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3355
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3359
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3363
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3368
		{
			yyVAL.updateExprs = nil
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3372
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3378
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3382
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3392
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3398
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3404
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3418
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3424
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3434
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3440
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3444
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3448
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3452
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3459
		{
			yyVAL.bytes = []byte("charset")
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3466
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3474
		{
			yyVAL.expr = &Default{}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3483
		{
			yyVAL.byt = 0
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3485
		{
			yyVAL.byt = 1
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3488
		{
			yyVAL.byt = 0
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3490
		{
			yyVAL.byt = 1
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3493
		{
			yyVAL.str = ""
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3495
		{
			yyVAL.str = IgnoreStr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3499
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3501
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3505
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3509
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3511
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3513
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3517
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3521
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3523
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3526
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3530
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			yyVAL.str = UniqueStr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3536
		{
			yyVAL.str = FulltextStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3538
		{
			yyVAL.str = SpatialStr
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3541
		{
			yyVAL.str = ""
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			yyVAL.str = yyDollar[1].str
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3546
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3548
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3552
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3580
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3894
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3903
		{
			decNesting(yylex)
		}
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3908
		{
			skipToEnd(yylex)
		}
	case 1002:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3913
		{
			skipToEnd(yylex)
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3917
		{
			skipToEnd(yylex)
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3921
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
