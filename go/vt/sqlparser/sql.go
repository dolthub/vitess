// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const UNIQUE = 57376
const KEY = 57377
const SYSTEM_TIME = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const ELSEIF = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const UNDERSCORE_UTF8MB4 = 57440
const INTERVAL = 57441
const JSON_EXTRACT_OP = 57442
const JSON_UNQUOTE_EXTRACT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const FLUSH = 57450
const MODIFY = 57451
const CHANGE = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const INDEXES = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const KEY_BLOCK_SIZE = 57465
const CHECK = 57466
const ACTION = 57467
const CASCADE = 57468
const CONSTRAINT = 57469
const FOREIGN = 57470
const NO = 57471
const REFERENCES = 57472
const RESTRICT = 57473
const FIRST = 57474
const AFTER = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const FORMAT = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const TRIGGERS = 57492
const FUNCTION = 57493
const VINDEX = 57494
const VINDEXES = 57495
const STATUS = 57496
const VARIABLES = 57497
const WARNINGS = 57498
const CODE = 57499
const SEQUENCE = 57500
const EACH = 57501
const ROW = 57502
const BEFORE = 57503
const FOLLOWS = 57504
const PRECEDES = 57505
const DEFINER = 57506
const INVOKER = 57507
const INOUT = 57508
const OUT = 57509
const DETERMINISTIC = 57510
const CONTAINS = 57511
const READS = 57512
const MODIFIES = 57513
const SQL = 57514
const DATA = 57515
const SECURITY = 57516
const CLASS_ORIGIN = 57517
const SUBCLASS_ORIGIN = 57518
const MESSAGE_TEXT = 57519
const MYSQL_ERRNO = 57520
const CONSTRAINT_CATALOG = 57521
const CONSTRAINT_SCHEMA = 57522
const CONSTRAINT_NAME = 57523
const CATALOG_NAME = 57524
const SCHEMA_NAME = 57525
const TABLE_NAME = 57526
const COLUMN_NAME = 57527
const CURSOR_NAME = 57528
const SIGNAL = 57529
const SQLSTATE = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const MEDIUMINT = 57539
const INT = 57540
const INTEGER = 57541
const BIGINT = 57542
const INTNUM = 57543
const REAL = 57544
const DOUBLE = 57545
const FLOAT_TYPE = 57546
const DECIMAL = 57547
const NUMERIC = 57548
const DEC = 57549
const FIXED = 57550
const PRECISION = 57551
const TIME = 57552
const TIMESTAMP = 57553
const DATETIME = 57554
const YEAR = 57555
const CHAR = 57556
const VARCHAR = 57557
const BOOL = 57558
const CHARACTER = 57559
const VARBINARY = 57560
const NCHAR = 57561
const NVARCHAR = 57562
const NATIONAL = 57563
const VARYING = 57564
const TEXT = 57565
const TINYTEXT = 57566
const MEDIUMTEXT = 57567
const LONGTEXT = 57568
const LONG = 57569
const BLOB = 57570
const TINYBLOB = 57571
const MEDIUMBLOB = 57572
const LONGBLOB = 57573
const JSON = 57574
const ENUM = 57575
const GEOMETRY = 57576
const POINT = 57577
const LINESTRING = 57578
const POLYGON = 57579
const GEOMETRYCOLLECTION = 57580
const MULTIPOINT = 57581
const MULTILINESTRING = 57582
const MULTIPOLYGON = 57583
const NULLX = 57584
const AUTO_INCREMENT = 57585
const APPROXNUM = 57586
const SIGNED = 57587
const UNSIGNED = 57588
const ZEROFILL = 57589
const COLLATION = 57590
const DATABASES = 57591
const SCHEMAS = 57592
const TABLES = 57593
const VITESS_METADATA = 57594
const VSCHEMA = 57595
const FULL = 57596
const PROCESSLIST = 57597
const COLUMNS = 57598
const FIELDS = 57599
const ENGINES = 57600
const PLUGINS = 57601
const NAMES = 57602
const CHARSET = 57603
const GLOBAL = 57604
const SESSION = 57605
const ISOLATION = 57606
const LEVEL = 57607
const READ = 57608
const WRITE = 57609
const ONLY = 57610
const REPEATABLE = 57611
const COMMITTED = 57612
const UNCOMMITTED = 57613
const SERIALIZABLE = 57614
const CURRENT_TIMESTAMP = 57615
const DATABASE = 57616
const CURRENT_DATE = 57617
const CURRENT_USER = 57618
const CURRENT_TIME = 57619
const LOCALTIME = 57620
const LOCALTIMESTAMP = 57621
const UTC_DATE = 57622
const UTC_TIME = 57623
const UTC_TIMESTAMP = 57624
const REPLACE = 57625
const CONVERT = 57626
const CAST = 57627
const SUBSTR = 57628
const SUBSTRING = 57629
const GROUP_CONCAT = 57630
const SEPARATOR = 57631
const TIMESTAMPADD = 57632
const TIMESTAMPDIFF = 57633
const MATCH = 57634
const AGAINST = 57635
const BOOLEAN = 57636
const LANGUAGE = 57637
const WITH = 57638
const QUERY = 57639
const EXPANSION = 57640
const UNUSED = 57641
const ARRAY = 57642
const CUME_DIST = 57643
const DESCRIPTION = 57644
const DENSE_RANK = 57645
const EMPTY = 57646
const EXCEPT = 57647
const FIRST_VALUE = 57648
const GROUPING = 57649
const GROUPS = 57650
const JSON_TABLE = 57651
const LAG = 57652
const LAST_VALUE = 57653
const LATERAL = 57654
const LEAD = 57655
const MEMBER = 57656
const NTH_VALUE = 57657
const NTILE = 57658
const OF = 57659
const OVER = 57660
const PERCENT_RANK = 57661
const RANK = 57662
const RECURSIVE = 57663
const ROW_NUMBER = 57664
const SYSTEM = 57665
const WINDOW = 57666
const ACTIVE = 57667
const ADMIN = 57668
const BUCKETS = 57669
const CLONE = 57670
const COMPONENT = 57671
const DEFINITION = 57672
const ENFORCED = 57673
const EXCLUDE = 57674
const FOLLOWING = 57675
const GEOMCOLLECTION = 57676
const GET_MASTER_PUBLIC_KEY = 57677
const HISTOGRAM = 57678
const HISTORY = 57679
const INACTIVE = 57680
const INVISIBLE = 57681
const LOCKED = 57682
const MASTER_COMPRESSION_ALGORITHMS = 57683
const MASTER_PUBLIC_KEY_PATH = 57684
const MASTER_TLS_CIPHERSUITES = 57685
const MASTER_ZSTD_COMPRESSION_LEVEL = 57686
const NESTED = 57687
const NETWORK_NAMESPACE = 57688
const NOWAIT = 57689
const NULLS = 57690
const OJ = 57691
const OLD = 57692
const OPTIONAL = 57693
const ORDINALITY = 57694
const ORGANIZATION = 57695
const OTHERS = 57696
const PATH = 57697
const PERSIST = 57698
const PERSIST_ONLY = 57699
const PRECEDING = 57700
const PRIVILEGE_CHECKS_USER = 57701
const PROCESS = 57702
const RANDOM = 57703
const REFERENCE = 57704
const REQUIRE_ROW_FORMAT = 57705
const RESOURCE = 57706
const RESPECT = 57707
const RESTART = 57708
const RETAIN = 57709
const REUSE = 57710
const ROLE = 57711
const SECONDARY = 57712
const SECONDARY_ENGINE = 57713
const SECONDARY_LOAD = 57714
const SECONDARY_UNLOAD = 57715
const SKIP = 57716
const SRID = 57717
const THREAD_PRIORITY = 57718
const TIES = 57719
const UNBOUNDED = 57720
const VCPU = 57721
const VISIBLE = 57722

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CODE",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"DATA",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 35,
	130, 820,
	-2, 128,
	-1, 43,
	171, 471,
	172, 471,
	-2, 459,
	-1, 50,
	1, 1151,
	398, 1151,
	-2, 491,
	-1, 367,
	116, 828,
	-2, 824,
	-1, 368,
	116, 829,
	-2, 825,
	-1, 439,
	86, 1103,
	116, 1103,
	-2, 69,
	-1, 440,
	86, 1014,
	116, 1014,
	-2, 70,
	-1, 445,
	86, 973,
	116, 973,
	-2, 789,
	-1, 447,
	86, 1047,
	116, 1047,
	-2, 791,
	-1, 646,
	5, 33,
	-2, 485,
	-1, 650,
	5, 33,
	-2, 484,
	-1, 783,
	1, 536,
	5, 536,
	12, 536,
	13, 536,
	14, 536,
	15, 536,
	17, 536,
	19, 536,
	30, 536,
	31, 536,
	45, 536,
	46, 536,
	47, 536,
	48, 536,
	49, 536,
	51, 536,
	52, 536,
	55, 536,
	56, 536,
	58, 536,
	59, 536,
	398, 536,
	-2, 561,
	-1, 786,
	56, 50,
	58, 50,
	-2, 54,
	-1, 978,
	116, 831,
	-2, 827,
	-1, 1188,
	57, 396,
	60, 396,
	-2, 360,
	-1, 1237,
	5, 34,
	-2, 625,
	-1, 1268,
	5, 33,
	-2, 766,
	-1, 1361,
	5, 33,
	-2, 71,
	-1, 1479,
	1, 580,
	5, 580,
	12, 580,
	13, 580,
	14, 580,
	15, 580,
	17, 580,
	19, 580,
	30, 580,
	31, 580,
	45, 580,
	46, 580,
	47, 580,
	48, 580,
	49, 580,
	51, 580,
	52, 580,
	55, 580,
	56, 580,
	58, 580,
	59, 580,
	398, 580,
	-2, 561,
	-1, 1587,
	5, 34,
	-2, 767,
	-1, 1617,
	5, 33,
	-2, 71,
	-1, 1671,
	5, 33,
	-2, 769,
	-1, 1750,
	5, 33,
	-2, 103,
	-1, 1796,
	5, 34,
	-2, 770,
	-1, 1842,
	398, 181,
	-2, 33,
}

const yyPrivate = 57344

const yyLast = 19084

var yyAct = [...]int{

	399, 58, 1841, 1904, 1154, 1800, 1850, 1872, 1882, 1873,
	1784, 1822, 1415, 1551, 1685, 736, 1845, 7, 1749, 1844,
	6, 1840, 1651, 435, 1492, 1849, 24, 1636, 1316, 1848,
	1843, 5, 1412, 1152, 1065, 1846, 8, 1067, 372, 1621,
	482, 1096, 398, 1801, 1063, 331, 1847, 954, 1105, 1493,
	1459, 385, 1460, 1109, 812, 1369, 450, 1059, 1600, 58,
	1456, 1147, 1130, 91, 1470, 1095, 1061, 1466, 368, 365,
	1003, 346, 351, 1016, 904, 1432, 1039, 1180, 69, 1389,
	370, 912, 1353, 1390, 1031, 1102, 1142, 1294, 799, 1050,
	923, 779, 1090, 980, 484, 780, 1040, 332, 333, 673,
	667, 336, 798, 438, 433, 688, 889, 456, 1043, 753,
	108, 430, 788, 108, 355, 1925, 1921, 679, 441, 108,
	1911, 1894, 1884, 1876, 1867, 1825, 68, 1384, 73, 1886,
	1622, 1816, 1871, 1794, 1856, 752, 1552, 1815, 1624, 28,
	1793, 59, 31, 32, 1449, 1579, 455, 108, 1487, 359,
	1303, 1084, 108, 1302, 108, 800, 1304, 801, 75, 76,
	77, 78, 79, 33, 342, 108, 344, 469, 643, 1034,
	1488, 1489, 335, 108, 1731, 701, 700, 710, 711, 703,
	704, 705, 706, 707, 708, 709, 702, 1085, 1086, 712,
	66, 28, 334, 59, 31, 32, 458, 412, 461, 418,
	420, 419, 416, 417, 415, 414, 413, 1627, 1336, 1116,
	1417, 1658, 1131, 1772, 421, 422, 1879, 1883, 1878, 1122,
	1124, 1136, 1123, 1131, 1570, 1568, 361, 345, 613, 338,
	1708, 1703, 1776, 1775, 1707, 1842, 3, 28, 1706, 59,
	31, 32, 66, 1705, 633, 1704, 1625, 1626, 1628, 1629,
	1630, 1702, 1777, 1778, 1370, 1819, 1820, 1118, 1161, 1802,
	1748, 33, 1118, 1143, 945, 641, 642, 28, 1773, 59,
	31, 32, 627, 628, 629, 626, 59, 31, 32, 944,
	625, 1419, 942, 624, 460, 459, 1160, 1870, 66, 93,
	1371, 33, 1855, 1785, 340, 1414, 612, 616, 33, 1044,
	618, 1418, 343, 1746, 481, 1110, 481, 481, 1637, 1638,
	946, 1772, 328, 1917, 481, 1394, 1924, 1926, 66, 943,
	481, 1923, 1912, 101, 97, 98, 1895, 99, 58, 58,
	86, 457, 466, 614, 617, 344, 615, 56, 1293, 1851,
	1646, 1772, 1374, 1645, 647, 636, 1920, 649, 329, 637,
	634, 635, 58, 1068, 1070, 879, 870, 1292, 648, 1409,
	103, 102, 1291, 453, 661, 300, 1773, 721, 96, 108,
	723, 1112, 469, 1623, 469, 469, 1738, 1372, 1373, 1686,
	652, 653, 469, 88, 90, 1131, 1908, 85, 469, 93,
	1590, 1732, 1688, 95, 94, 1112, 1773, 1307, 734, 1792,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 108, 751, 754, 754, 754, 760, 754, 754, 760,
	754, 760, 769, 770, 771, 772, 773, 774, 675, 784,
	469, 1247, 1145, 60, 1069, 56, 92, 1851, 28, 1343,
	59, 31, 32, 1299, 1121, 726, 727, 728, 729, 730,
	731, 732, 733, 1644, 28, 1226, 59, 31, 32, 611,
	796, 1211, 33, 1687, 1210, 56, 1111, 1851, 28, 1408,
	59, 31, 32, 1405, 1851, 441, 724, 725, 33, 481,
	481, 677, 1244, 1433, 1112, 60, 100, 1091, 952, 66,
	1111, 807, 33, 95, 94, 778, 108, 108, 108, 1906,
	794, 692, 1907, 476, 1905, 66, 1511, 712, 465, 1317,
	659, 469, 1772, 1080, 913, 949, 666, 1901, 108, 66,
	1170, 919, 469, 756, 758, 1435, 762, 764, 1772, 767,
	108, 60, 702, 1893, 108, 712, 906, 724, 725, 108,
	685, 787, 1772, 622, 792, 108, 87, 469, 469, 755,
	757, 759, 761, 763, 765, 766, 768, 687, 1512, 687,
	451, 60, 1413, 646, 650, 1720, 1185, 1773, 60, 638,
	1112, 891, 686, 685, 670, 674, 1242, 880, 1241, 1111,
	663, 802, 664, 1773, 651, 665, 1451, 676, 724, 725,
	687, 693, 462, 1437, 449, 686, 685, 1773, 1441, 914,
	1436, 1910, 1434, 1032, 1499, 1171, 987, 1439, 470, 471,
	472, 473, 474, 687, 481, 481, 481, 1032, 905, 1255,
	1438, 985, 986, 984, 1864, 481, 737, 481, 623, 481,
	481, 872, 82, 1440, 1442, 735, 56, 750, 1851, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 640, 56, 26, 1851, 1108, 1112, 1918, 955, 956,
	686, 685, 682, 481, 1798, 1111, 56, 1914, 1851, 83,
	1615, 1398, 1394, 1823, 939, 1837, 1395, 1836, 687, 1402,
	1404, 451, 469, 469, 469, 108, 108, 108, 951, 1614,
	108, 1835, 1004, 469, 1005, 469, 1399, 469, 469, 1919,
	1358, 1328, 908, 66, 686, 685, 1333, 1332, 686, 685,
	917, 1866, 1356, 983, 1337, 915, 686, 685, 656, 894,
	895, 1745, 687, 1824, 58, 350, 687, 1329, 950, 1701,
	108, 469, 60, 977, 687, 108, 686, 685, 981, 738,
	655, 1334, 1823, 1326, 1665, 686, 685, 957, 60, 1327,
	1612, 1111, 108, 341, 687, 1504, 1354, 1106, 469, 1107,
	1182, 1172, 60, 687, 979, 1104, 1110, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 937, 1021, 1024, 1062, 1305, 978, 1306, 784,
	1033, 1533, 959, 784, 451, 974, 1898, 1883, 1897, 976,
	1680, 1857, 469, 1606, 1854, 1007, 1008, 1834, 1331, 1811,
	660, 701, 700, 710, 711, 703, 704, 705, 706, 707,
	708, 709, 702, 1743, 1035, 712, 970, 972, 973, 1714,
	427, 428, 971, 1317, 441, 1112, 1015, 1017, 469, 469,
	1711, 1023, 1026, 1027, 1028, 108, 958, 451, 1092, 1642,
	1097, 1554, 1010, 108, 108, 1075, 1243, 108, 108, 1077,
	660, 108, 108, 108, 1709, 916, 1029, 1100, 1038, 1181,
	1041, 1042, 481, 1548, 481, 1223, 1224, 1225, 469, 705,
	706, 707, 708, 709, 702, 737, 1544, 712, 1541, 891,
	1539, 1132, 1133, 1134, 1135, 1073, 1606, 1808, 1078, 1081,
	1082, 1538, 978, 1680, 1788, 1011, 1013, 1529, 686, 685,
	1528, 1018, 967, 968, 1093, 703, 704, 705, 706, 707,
	708, 709, 702, 1606, 1747, 712, 687, 1149, 1150, 1151,
	1111, 1527, 1330, 1680, 1739, 1695, 1398, 1394, 1381, 108,
	469, 1395, 469, 1380, 1396, 1397, 1312, 108, 108, 1144,
	1146, 108, 1680, 1691, 1576, 1168, 660, 686, 685, 735,
	1167, 1399, 1199, 1006, 1453, 737, 1680, 660, 1694, 1019,
	1020, 1606, 1605, 1524, 1014, 687, 1198, 921, 1227, 888,
	108, 887, 108, 108, 1592, 660, 1589, 660, 1505, 108,
	1179, 1519, 1518, 977, 701, 700, 710, 711, 703, 704,
	705, 706, 707, 708, 709, 702, 886, 1203, 712, 1515,
	1516, 108, 108, 108, 108, 108, 1197, 1515, 1514, 795,
	735, 388, 387, 390, 391, 392, 393, 981, 885, 1089,
	389, 394, 701, 700, 710, 711, 703, 704, 705, 706,
	707, 708, 709, 702, 1269, 1270, 712, 978, 784, 784,
	784, 784, 784, 1215, 961, 1229, 1230, 1231, 1216, 1093,
	877, 1222, 875, 1062, 874, 1287, 1232, 1195, 1189, 1190,
	1271, 1188, 873, 1191, 1192, 784, 871, 962, 1228, 478,
	963, 1047, 660, 28, 339, 441, 70, 1235, 1113, 701,
	700, 710, 711, 703, 704, 705, 706, 707, 708, 709,
	702, 28, 1290, 712, 1289, 1238, 660, 1266, 1201, 1204,
	1012, 1186, 1012, 660, 1267, 1254, 108, 108, 108, 108,
	108, 1295, 1117, 810, 809, 1295, 1252, 1457, 108, 1238,
	795, 108, 1670, 1173, 66, 108, 1097, 1309, 1318, 1272,
	1012, 1296, 1275, 108, 1273, 1274, 1046, 1276, 1284, 1074,
	1585, 789, 66, 1423, 1719, 58, 1047, 1525, 1517, 790,
	1308, 1314, 1315, 1297, 469, 1298, 481, 1047, 481, 481,
	790, 795, 1300, 28, 1047, 1083, 1234, 1213, 1214, 1238,
	674, 1196, 1338, 1339, 1237, 1239, 1260, 1240, 1259, 1345,
	1184, 1166, 789, 1246, 953, 878, 1249, 1250, 1251, 1352,
	1238, 352, 374, 1257, 791, 1258, 793, 1194, 1261, 1262,
	66, 1263, 1264, 1817, 1809, 791, 1416, 789, 1712, 1653,
	1616, 1355, 469, 1346, 66, 1348, 1349, 1350, 1351, 1118,
	1595, 1286, 1357, 1388, 469, 108, 469, 469, 1148, 1236,
	1498, 1143, 1391, 1403, 1407, 1471, 1472, 1153, 1200, 1311,
	1383, 1385, 66, 1162, 1138, 1137, 1382, 1379, 658, 1256,
	1654, 1890, 1888, 1202, 1874, 1523, 1387, 1425, 1462, 1400,
	58, 1410, 1411, 1401, 1393, 1386, 1474, 1457, 1359, 1268,
	920, 1052, 1055, 1056, 1057, 1053, 108, 1054, 1058, 882,
	1458, 1281, 1481, 1482, 1483, 469, 1282, 1279, 1014, 965,
	1477, 1476, 1280, 1429, 1426, 441, 1283, 1427, 1056, 1057,
	1461, 1278, 1431, 1443, 1445, 1446, 1277, 1447, 1448, 1444,
	356, 357, 1831, 1814, 1480, 1420, 1212, 680, 681, 1454,
	1455, 1450, 1829, 1060, 1221, 1220, 1668, 1543, 469, 469,
	1475, 668, 1319, 1496, 1497, 678, 1503, 1502, 1425, 1097,
	1313, 1097, 1491, 669, 1347, 1478, 469, 808, 1479, 1468,
	654, 1495, 479, 1068, 1070, 1583, 1521, 1522, 955, 956,
	1157, 1649, 881, 1484, 1490, 1362, 469, 469, 1176, 469,
	469, 680, 681, 1698, 1486, 1052, 1055, 1056, 1057, 1053,
	1361, 1054, 1058, 1060, 869, 1471, 1472, 347, 1500, 353,
	354, 1725, 348, 1508, 397, 1430, 70, 701, 700, 710,
	711, 703, 704, 705, 706, 707, 708, 709, 702, 1219,
	1536, 712, 1295, 1724, 784, 1526, 1656, 1218, 108, 1892,
	1891, 1506, 1507, 1364, 1365, 1366, 1535, 1248, 1510, 1245,
	911, 683, 1891, 108, 1069, 1513, 1534, 1540, 1892, 1735,
	1577, 1501, 948, 72, 1532, 74, 1537, 1531, 1764, 46,
	1766, 19, 1765, 18, 1767, 20, 49, 1547, 1768, 21,
	1763, 15, 469, 1762, 14, 108, 469, 1756, 10, 1770,
	25, 67, 1452, 469, 443, 1, 469, 469, 469, 1620,
	1559, 1619, 108, 1761, 13, 1758, 12, 1368, 1561, 1566,
	1757, 11, 1367, 467, 657, 1463, 1755, 9, 1392, 1553,
	1558, 1650, 1193, 1783, 1598, 1103, 1094, 81, 448, 1584,
	80, 1169, 1485, 58, 621, 1640, 308, 1101, 1324, 1323,
	1320, 1097, 1309, 1335, 1115, 1322, 1321, 1599, 1325, 816,
	814, 1602, 1603, 815, 813, 818, 817, 1593, 1114, 312,
	469, 469, 469, 1609, 436, 803, 1604, 1608, 684, 469,
	89, 50, 1643, 1406, 1187, 84, 918, 469, 631, 632,
	1639, 314, 722, 720, 1217, 1647, 1301, 1611, 442, 1613,
	1464, 1631, 1632, 1633, 1634, 1818, 1462, 1495, 672, 1672,
	1635, 1641, 108, 1652, 1723, 1655, 1560, 1253, 749, 1030,
	373, 1610, 1562, 969, 386, 1648, 383, 384, 1175, 960,
	1265, 480, 694, 1571, 1572, 371, 363, 782, 775, 1051,
	1049, 469, 1697, 1048, 1699, 883, 431, 1657, 1461, 1473,
	1469, 783, 1586, 1587, 1588, 781, 1591, 1679, 1669, 1549,
	1422, 1696, 1678, 1659, 1660, 1661, 1662, 1663, 1597, 1684,
	1718, 1666, 1667, 639, 1677, 1690, 1689, 327, 469, 469,
	1700, 469, 1578, 1730, 469, 1676, 108, 964, 108, 1713,
	30, 1462, 71, 58, 358, 469, 1717, 17, 645, 22,
	1580, 16, 1710, 463, 34, 469, 38, 37, 36, 737,
	1363, 1159, 337, 1716, 924, 922, 1880, 1821, 1594, 1742,
	58, 1596, 1806, 1771, 1692, 23, 1693, 1858, 483, 4,
	483, 483, 1721, 1461, 1740, 469, 1753, 349, 483, 1752,
	1744, 1736, 469, 108, 483, 1769, 27, 2, 0, 1760,
	1751, 0, 0, 0, 0, 1754, 0, 1780, 0, 0,
	0, 1790, 1786, 0, 0, 0, 1759, 1781, 1664, 469,
	0, 0, 0, 0, 1803, 1779, 0, 0, 1617, 1795,
	1652, 1097, 1787, 1782, 0, 0, 690, 0, 0, 0,
	1681, 0, 1682, 1683, 441, 58, 0, 0, 0, 0,
	0, 469, 0, 0, 0, 0, 0, 0, 469, 469,
	0, 1753, 0, 1807, 1752, 0, 0, 0, 0, 0,
	1769, 1813, 0, 0, 1760, 1751, 0, 469, 0, 0,
	1754, 0, 0, 0, 1826, 108, 1742, 0, 0, 0,
	0, 1759, 1828, 1833, 1671, 58, 58, 1830, 0, 1726,
	1727, 1728, 1729, 1838, 1827, 0, 1733, 1734, 58, 0,
	1859, 443, 1753, 0, 1853, 1752, 0, 804, 0, 0,
	1863, 1769, 58, 1862, 469, 1760, 1751, 0, 868, 1865,
	1869, 1754, 0, 1875, 1861, 0, 0, 58, 58, 1860,
	1881, 1885, 1759, 1868, 0, 0, 1832, 58, 469, 1881,
	58, 1889, 1887, 483, 483, 58, 469, 1881, 1877, 1899,
	0, 0, 0, 0, 0, 58, 1909, 1881, 982, 58,
	1791, 1896, 0, 0, 0, 0, 0, 1796, 1737, 0,
	0, 0, 58, 0, 1881, 58, 0, 619, 620, 0,
	1913, 0, 58, 0, 1881, 630, 58, 1582, 1881, 0,
	0, 644, 0, 0, 0, 1750, 1922, 0, 0, 0,
	0, 0, 1119, 1120, 0, 1125, 1126, 1127, 1128, 1129,
	0, 1789, 737, 1810, 0, 1902, 0, 0, 0, 0,
	1575, 0, 0, 1139, 1140, 1141, 701, 700, 710, 711,
	703, 704, 705, 706, 707, 708, 709, 702, 0, 671,
	712, 0, 0, 0, 0, 0, 0, 783, 0, 0,
	0, 783, 0, 0, 0, 783, 0, 0, 0, 1804,
	1805, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1750, 0, 0, 0, 0, 0, 0, 0, 483, 483,
	483, 106, 0, 0, 326, 0, 0, 0, 0, 483,
	106, 483, 0, 483, 483, 0, 0, 785, 701, 700,
	710, 711, 703, 704, 705, 706, 707, 708, 709, 702,
	1839, 0, 712, 0, 0, 362, 0, 0, 434, 444,
	0, 1750, 0, 106, 0, 106, 0, 483, 0, 0,
	0, 0, 1915, 1916, 0, 0, 106, 1428, 0, 105,
	0, 0, 0, 0, 106, 0, 0, 0, 330, 0,
	892, 893, 0, 0, 690, 0, 0, 483, 701, 700,
	710, 711, 703, 704, 705, 706, 707, 708, 709, 702,
	1900, 0, 712, 0, 0, 0, 432, 0, 0, 0,
	0, 452, 0, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 464, 0, 0, 0, 1009, 0,
	0, 0, 475, 28, 29, 59, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 443, 57, 0, 319,
	0, 0, 0, 65, 0, 0, 0, 33, 53, 54,
	0, 0, 0, 0, 1036, 1037, 700, 710, 711, 703,
	704, 705, 706, 707, 708, 709, 702, 982, 0, 712,
	44, 0, 0, 0, 66, 0, 0, 0, 0, 0,
	443, 710, 711, 703, 704, 705, 706, 707, 708, 709,
	702, 301, 483, 712, 483, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 896, 897, 898, 313, 320,
	321, 0, 0, 0, 0, 0, 903, 0, 907, 0,
	909, 910, 0, 0, 1340, 1341, 1342, 1344, 0, 0,
	783, 783, 783, 783, 783, 0, 35, 61, 40, 39,
	42, 1581, 55, 0, 310, 783, 0, 311, 0, 0,
	0, 0, 318, 0, 941, 0, 483, 783, 483, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 43, 64,
	63, 0, 0, 51, 52, 41, 0, 0, 0, 0,
	701, 700, 710, 711, 703, 704, 705, 706, 707, 708,
	709, 702, 1574, 0, 712, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 477, 1573,
	0, 56, 0, 45, 62, 0, 47, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 0, 0, 315, 305, 306, 0, 316, 317,
	325, 0, 0, 0, 307, 309, 0, 303, 324, 323,
	662, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 700, 710, 711, 703, 704, 705, 706, 707, 708,
	709, 702, 0, 0, 712, 0, 0, 106, 106, 106,
	0, 0, 0, 0, 0, 0, 444, 701, 700, 710,
	711, 703, 704, 705, 706, 707, 708, 709, 702, 106,
	0, 712, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 106, 0, 0, 0, 106, 0, 1233, 0, 0,
	106, 443, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 777, 1509, 786, 701, 700,
	710, 711, 703, 704, 705, 706, 707, 708, 709, 702,
	0, 0, 712, 1156, 0, 1158, 0, 811, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	483, 0, 696, 432, 699, 0, 0, 0, 884, 0,
	0, 713, 714, 715, 716, 717, 718, 719, 0, 697,
	698, 695, 701, 700, 710, 711, 703, 704, 705, 706,
	707, 708, 709, 702, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1563, 1564, 1360, 1565,
	0, 0, 1567, 0, 1569, 0, 0, 0, 0, 0,
	483, 0, 483, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 106, 106, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1607, 0, 0,
	0, 0, 0, 0, 0, 0, 783, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 899, 900, 901, 0, 0, 902,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 443, 890, 0, 1465, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 483, 483, 0, 483, 1494, 0, 0, 362,
	362, 966, 0, 0, 362, 362, 362, 362, 0, 0,
	0, 444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 362, 362, 362, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 106, 1071, 0, 0, 106, 106,
	0, 0, 106, 1079, 890, 444, 0, 1375, 0, 1377,
	1378, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1542, 0,
	0, 0, 1546, 0, 1045, 0, 0, 0, 0, 1550,
	0, 0, 1555, 1556, 1557, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 106, 106,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1601, 1601, 1601, 0,
	0, 106, 0, 1177, 1178, 483, 0, 0, 0, 0,
	106, 0, 0, 1601, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 1163, 1164, 0, 0,
	1165, 0, 106, 106, 106, 106, 106, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 362, 0, 0, 0, 0, 1174,
	0, 0, 0, 0, 0, 0, 0, 483, 1183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1205, 1206, 1207, 1208, 1209, 0, 0, 0, 0, 0,
	362, 0, 0, 0, 1673, 1674, 0, 1675, 0, 0,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 362,
	0, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 444, 106, 106, 106,
	106, 106, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 28, 106, 59, 31, 32, 1071, 0, 0, 0,
	0, 1715, 0, 0, 106, 57, 0, 0, 1601, 0,
	0, 65, 0, 0, 0, 33, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1741, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1772, 0, 1494, 0, 0,
	1852, 0, 0, 0, 483, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	443, 0, 0, 1797, 0, 0, 106, 0, 0, 825,
	0, 0, 0, 0, 35, 61, 40, 39, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 64, 63, 0,
	1812, 839, 0, 41, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 1376, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 0, 362, 0,
	0, 0, 1601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 1774, 62, 0, 47, 48, 444, 0, 852, 855,
	856, 857, 858, 859, 860, 1421, 861, 862, 863, 864,
	865, 866, 867, 0, 840, 841, 842, 843, 819, 823,
	853, 820, 826, 822, 824, 821, 0, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 844, 845,
	846, 847, 848, 849, 850, 851, 0, 0, 0, 0,
	0, 28, 0, 59, 31, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 854, 0,
	0, 0, 66, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 35, 61, 40, 39, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1545, 0, 43, 64, 63, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 1774, 62, 106, 47, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1618, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 585, 106, 540, 601, 510,
	529, 609, 530, 533, 572, 494, 553, 206, 527, 495,
	0, 515, 489, 522, 490, 512, 542, 148, 509, 587,
	556, 600, 175, 599, 546, 0, 607, 178, 563, 0,
	255, 193, 0, 0, 544, 590, 551, 582, 539, 574,
	500, 562, 602, 528, 570, 603, 0, 0, 0, 468,
	0, 1098, 1099, 0, 1799, 0, 0, 0, 132, 0,
	567, 597, 524, 569, 571, 488, 564, 0, 492, 496,
	608, 593, 518, 519, 520, 1310, 0, 0, 0, 0,
	0, 0, 543, 552, 579, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 0, 560, 0, 0, 0,
	497, 493, 0, 0, 541, 0, 0, 0, 499, 0,
	517, 580, 0, 485, 156, 0, 0, 584, 592, 538,
	0, 289, 596, 535, 534, 223, 0, 260, 159, 176,
	125, 110, 120, 0, 158, 202, 233, 241, 525, 486,
	588, 513, 523, 142, 521, 235, 210, 280, 0, 559,
	215, 234, 179, 269, 225, 278, 279, 160, 290, 291,
	264, 287, 295, 128, 252, 0, 0, 0, 0, 0,
	0, 172, 537, 573, 514, 139, 230, 561, 589, 141,
	251, 126, 265, 192, 197, 136, 138, 137, 121, 246,
	267, 131, 140, 256, 261, 113, 263, 277, 133, 245,
	115, 275, 259, 190, 169, 170, 114, 0, 231, 147,
	155, 144, 205, 0, 0, 0, 272, 273, 143, 298,
	122, 286, 117, 123, 285, 199, 0, 0, 0, 268,
	276, 191, 184, 0, 116, 274, 189, 183, 174, 151,
	162, 220, 181, 221, 163, 195, 194, 196, 0, 491,
	0, 257, 283, 299, 129, 508, 0, 266, 293, 294,
	0, 0, 130, 154, 150, 219, 198, 124, 165, 254,
	173, 180, 229, 297, 209, 236, 134, 282, 253, 504,
	507, 502, 0, 503, 554, 555, 604, 605, 606, 581,
	498, 0, 505, 506, 0, 586, 594, 595, 558, 109,
	118, 177, 296, 227, 153, 284, 487, 501, 146, 511,
	0, 0, 526, 531, 532, 545, 547, 548, 549, 550,
	557, 565, 566, 568, 575, 576, 577, 578, 583, 591,
	610, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 598, 585, 0,
	540, 601, 510, 529, 609, 530, 533, 572, 494, 553,
	206, 527, 495, 0, 515, 489, 522, 490, 512, 542,
	148, 509, 587, 556, 600, 175, 599, 546, 0, 607,
	178, 563, 0, 255, 193, 0, 0, 544, 590, 551,
	582, 539, 574, 500, 562, 602, 528, 570, 603, 0,
	0, 0, 468, 0, 1098, 1099, 0, 0, 0, 0,
	0, 132, 0, 567, 597, 524, 569, 571, 488, 564,
	0, 492, 496, 608, 593, 518, 519, 520, 0, 0,
	0, 0, 0, 0, 0, 543, 552, 579, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 0, 560,
	0, 0, 0, 497, 493, 0, 0, 541, 0, 0,
	0, 499, 0, 517, 580, 0, 485, 156, 0, 0,
	584, 592, 538, 0, 289, 596, 535, 534, 223, 0,
	260, 159, 176, 125, 110, 120, 0, 158, 202, 233,
	241, 525, 486, 588, 513, 523, 142, 521, 235, 210,
	280, 0, 559, 215, 234, 179, 269, 225, 278, 279,
	160, 290, 291, 264, 287, 295, 128, 252, 0, 0,
	0, 0, 0, 0, 172, 537, 573, 514, 139, 230,
	561, 589, 141, 251, 126, 265, 192, 197, 136, 138,
	137, 121, 246, 267, 131, 140, 256, 261, 113, 263,
	277, 133, 245, 115, 275, 259, 190, 169, 170, 114,
	0, 231, 147, 155, 144, 205, 0, 0, 0, 272,
	273, 143, 298, 122, 286, 117, 123, 285, 199, 0,
	0, 0, 268, 276, 191, 184, 0, 116, 274, 189,
	183, 174, 151, 162, 220, 181, 221, 163, 195, 194,
	196, 0, 491, 0, 257, 283, 299, 129, 508, 0,
	266, 293, 294, 0, 0, 130, 154, 150, 219, 198,
	124, 165, 254, 173, 180, 229, 297, 209, 236, 134,
	282, 253, 504, 507, 502, 0, 503, 554, 555, 604,
	605, 606, 581, 498, 0, 505, 506, 0, 586, 594,
	595, 558, 109, 118, 177, 296, 227, 153, 284, 487,
	501, 146, 511, 0, 0, 526, 531, 532, 545, 547,
	548, 549, 550, 557, 565, 566, 568, 575, 576, 577,
	578, 583, 591, 610, 111, 112, 119, 127, 135, 145,
	149, 152, 157, 161, 164, 166, 167, 168, 171, 182,
	185, 186, 187, 188, 200, 201, 203, 204, 207, 208,
	211, 212, 213, 214, 216, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 247,
	248, 249, 250, 258, 262, 270, 271, 281, 288, 292,
	598, 585, 0, 540, 601, 510, 529, 609, 530, 533,
	572, 494, 553, 206, 527, 495, 0, 515, 489, 522,
	490, 512, 542, 148, 509, 587, 556, 600, 175, 599,
	546, 0, 607, 178, 563, 0, 255, 193, 0, 0,
	544, 590, 551, 582, 539, 574, 500, 562, 602, 528,
	570, 603, 0, 0, 0, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 567, 597, 524, 569,
	571, 488, 564, 0, 492, 496, 608, 593, 518, 519,
	520, 0, 0, 0, 0, 0, 0, 0, 543, 552,
	579, 536, 0, 0, 0, 0, 0, 0, 1424, 0,
	516, 0, 560, 0, 0, 0, 497, 493, 0, 0,
	541, 0, 0, 0, 499, 0, 517, 580, 0, 485,
	156, 0, 0, 584, 592, 538, 0, 289, 596, 535,
	534, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 525, 486, 588, 513, 523, 142,
	521, 235, 210, 280, 0, 559, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 537, 573,
	514, 139, 230, 561, 589, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 491, 0, 257, 283, 299,
	129, 508, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 504, 507, 502, 0, 503,
	554, 555, 604, 605, 606, 581, 498, 0, 505, 506,
	0, 586, 594, 595, 558, 109, 118, 177, 296, 227,
	153, 284, 487, 501, 146, 511, 0, 0, 526, 531,
	532, 545, 547, 548, 549, 550, 557, 565, 566, 568,
	575, 576, 577, 578, 583, 591, 610, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 598, 585, 0, 540, 601, 510, 529,
	609, 530, 533, 572, 494, 553, 206, 527, 495, 0,
	515, 489, 522, 490, 512, 542, 148, 509, 587, 556,
	600, 175, 599, 546, 0, 607, 178, 563, 0, 255,
	193, 0, 0, 544, 590, 551, 582, 539, 574, 500,
	562, 602, 528, 570, 603, 66, 0, 0, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 567,
	597, 524, 569, 571, 488, 564, 0, 492, 496, 608,
	593, 518, 519, 520, 0, 0, 0, 0, 0, 0,
	0, 543, 552, 579, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 0, 560, 0, 0, 0, 497,
	493, 0, 0, 541, 0, 0, 0, 499, 0, 517,
	580, 0, 485, 156, 0, 0, 584, 592, 538, 0,
	289, 596, 535, 534, 223, 0, 260, 159, 176, 125,
	110, 120, 0, 158, 202, 233, 241, 525, 486, 588,
	513, 523, 142, 521, 235, 210, 280, 0, 559, 215,
	234, 179, 269, 225, 278, 279, 160, 290, 291, 264,
	287, 295, 128, 252, 0, 0, 0, 0, 0, 0,
	172, 537, 573, 514, 139, 230, 561, 589, 141, 251,
	126, 265, 192, 197, 136, 138, 137, 121, 246, 267,
	131, 140, 256, 261, 113, 263, 277, 133, 245, 115,
	275, 259, 190, 169, 170, 114, 0, 231, 147, 155,
	144, 205, 0, 0, 0, 272, 273, 143, 298, 122,
	286, 117, 123, 285, 199, 0, 0, 0, 268, 276,
	191, 184, 0, 116, 274, 189, 183, 174, 151, 162,
	220, 181, 221, 163, 195, 194, 196, 0, 491, 0,
	257, 283, 299, 129, 508, 0, 266, 293, 294, 0,
	0, 130, 154, 150, 219, 198, 124, 165, 254, 173,
	180, 229, 297, 209, 236, 134, 282, 253, 504, 507,
	502, 0, 503, 554, 555, 604, 605, 606, 581, 498,
	0, 505, 506, 0, 586, 594, 595, 558, 109, 118,
	177, 296, 227, 153, 284, 487, 501, 146, 511, 0,
	0, 526, 531, 532, 545, 547, 548, 549, 550, 557,
	565, 566, 568, 575, 576, 577, 578, 583, 591, 610,
	111, 112, 119, 127, 135, 145, 149, 152, 157, 161,
	164, 166, 167, 168, 171, 182, 185, 186, 187, 188,
	200, 201, 203, 204, 207, 208, 211, 212, 213, 214,
	216, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 247, 248, 249, 250, 258,
	262, 270, 271, 281, 288, 292, 598, 585, 0, 540,
	601, 510, 529, 609, 530, 533, 572, 494, 553, 206,
	527, 495, 0, 515, 489, 522, 490, 512, 542, 148,
	509, 587, 556, 600, 175, 599, 546, 0, 607, 178,
	563, 0, 255, 193, 0, 0, 544, 590, 551, 582,
	539, 574, 500, 562, 602, 528, 570, 603, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 567, 597, 524, 569, 571, 488, 564, 0,
	492, 496, 608, 593, 518, 519, 520, 0, 0, 0,
	0, 0, 0, 0, 543, 552, 579, 536, 0, 0,
	0, 0, 0, 0, 1080, 0, 516, 0, 560, 0,
	0, 0, 497, 493, 0, 0, 541, 0, 0, 0,
	499, 0, 517, 580, 0, 485, 156, 0, 0, 584,
	592, 538, 0, 289, 596, 535, 534, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	525, 486, 588, 513, 523, 142, 521, 235, 210, 280,
	0, 559, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 537, 573, 514, 139, 230, 561,
	589, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 491, 0, 257, 283, 299, 129, 508, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 504, 507, 502, 0, 503, 554, 555, 604, 605,
	606, 581, 498, 0, 505, 506, 0, 586, 594, 595,
	558, 109, 118, 177, 296, 227, 153, 284, 487, 501,
	146, 511, 0, 0, 526, 531, 532, 545, 547, 548,
	549, 550, 557, 565, 566, 568, 575, 576, 577, 578,
	583, 591, 610, 111, 112, 119, 127, 135, 145, 149,
	152, 157, 161, 164, 166, 167, 168, 171, 182, 185,
	186, 187, 188, 200, 201, 203, 204, 207, 208, 211,
	212, 213, 214, 216, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 247, 248,
	249, 250, 258, 262, 270, 271, 281, 288, 292, 598,
	585, 0, 540, 601, 510, 529, 609, 530, 533, 572,
	494, 553, 206, 527, 495, 0, 515, 489, 522, 490,
	512, 542, 148, 509, 587, 556, 600, 175, 599, 546,
	0, 607, 178, 563, 0, 255, 193, 0, 0, 544,
	590, 551, 582, 539, 574, 500, 562, 602, 528, 570,
	603, 0, 0, 0, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 567, 597, 524, 569, 571,
	488, 564, 0, 492, 496, 608, 593, 518, 519, 520,
	0, 0, 0, 0, 0, 0, 0, 543, 552, 579,
	536, 0, 0, 0, 0, 0, 0, 975, 0, 516,
	0, 560, 0, 0, 0, 497, 493, 0, 0, 541,
	0, 0, 0, 499, 0, 517, 580, 0, 485, 156,
	0, 0, 584, 592, 538, 0, 289, 596, 535, 534,
	223, 0, 260, 159, 176, 125, 110, 120, 0, 158,
	202, 233, 241, 525, 486, 588, 513, 523, 142, 521,
	235, 210, 280, 0, 559, 215, 234, 179, 269, 225,
	278, 279, 160, 290, 291, 264, 287, 295, 128, 252,
	0, 0, 0, 0, 0, 0, 172, 537, 573, 514,
	139, 230, 561, 589, 141, 251, 126, 265, 192, 197,
	136, 138, 137, 121, 246, 267, 131, 140, 256, 261,
	113, 263, 277, 133, 245, 115, 275, 259, 190, 169,
	170, 114, 0, 231, 147, 155, 144, 205, 0, 0,
	0, 272, 273, 143, 298, 122, 286, 117, 123, 285,
	199, 0, 0, 0, 268, 276, 191, 184, 0, 116,
	274, 189, 183, 174, 151, 162, 220, 181, 221, 163,
	195, 194, 196, 0, 491, 0, 257, 283, 299, 129,
	508, 0, 266, 293, 294, 0, 0, 130, 154, 150,
	219, 198, 124, 165, 254, 173, 180, 229, 297, 209,
	236, 134, 282, 253, 504, 507, 502, 0, 503, 554,
	555, 604, 605, 606, 581, 498, 0, 505, 506, 0,
	586, 594, 595, 558, 109, 118, 177, 296, 227, 153,
	284, 487, 501, 146, 511, 0, 0, 526, 531, 532,
	545, 547, 548, 549, 550, 557, 565, 566, 568, 575,
	576, 577, 578, 583, 591, 610, 111, 112, 119, 127,
	135, 145, 149, 152, 157, 161, 164, 166, 167, 168,
	171, 182, 185, 186, 187, 188, 200, 201, 203, 204,
	207, 208, 211, 212, 213, 214, 216, 217, 218, 222,
	224, 226, 228, 232, 237, 238, 239, 240, 242, 243,
	244, 247, 248, 249, 250, 258, 262, 270, 271, 281,
	288, 292, 598, 585, 0, 540, 601, 510, 529, 609,
	530, 533, 572, 494, 553, 206, 527, 495, 0, 515,
	489, 522, 490, 512, 542, 148, 509, 587, 556, 600,
	175, 599, 546, 0, 607, 178, 563, 0, 255, 193,
	0, 0, 544, 590, 551, 582, 539, 574, 500, 562,
	602, 528, 570, 603, 0, 0, 0, 468, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 567, 597,
	524, 569, 571, 488, 564, 0, 492, 496, 608, 593,
	518, 519, 520, 0, 0, 0, 0, 0, 0, 0,
	543, 552, 579, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 0, 560, 0, 0, 0, 497, 493,
	0, 0, 541, 0, 0, 0, 499, 0, 517, 580,
	0, 485, 156, 0, 0, 584, 592, 538, 0, 289,
	596, 535, 534, 223, 0, 260, 159, 176, 125, 110,
	120, 0, 158, 202, 233, 241, 525, 486, 588, 513,
	523, 142, 521, 235, 210, 280, 0, 559, 215, 234,
	179, 269, 225, 278, 279, 160, 290, 291, 264, 287,
	295, 128, 252, 0, 0, 0, 0, 0, 0, 172,
	537, 573, 514, 139, 230, 561, 589, 141, 251, 126,
	265, 192, 197, 136, 138, 137, 121, 246, 267, 131,
	140, 256, 261, 113, 263, 277, 133, 245, 115, 275,
	259, 190, 169, 170, 114, 0, 231, 147, 155, 144,
	205, 0, 0, 0, 272, 273, 143, 298, 122, 286,
	117, 123, 285, 199, 0, 0, 0, 268, 276, 191,
	184, 0, 116, 274, 189, 183, 174, 151, 162, 220,
	181, 221, 163, 195, 194, 196, 0, 491, 0, 257,
	283, 299, 129, 508, 0, 266, 293, 294, 0, 0,
	130, 154, 150, 219, 198, 124, 165, 254, 173, 180,
	229, 297, 209, 236, 134, 282, 253, 504, 507, 502,
	0, 503, 554, 555, 604, 605, 606, 581, 498, 0,
	505, 506, 0, 586, 594, 595, 558, 109, 118, 177,
	296, 227, 153, 284, 487, 501, 146, 511, 0, 0,
	526, 531, 532, 545, 547, 548, 549, 550, 557, 565,
	566, 568, 575, 576, 577, 578, 583, 591, 610, 111,
	112, 119, 127, 135, 145, 149, 152, 157, 161, 164,
	166, 167, 168, 171, 182, 185, 186, 187, 188, 200,
	201, 203, 204, 207, 208, 211, 212, 213, 214, 216,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 247, 248, 249, 250, 258, 262,
	270, 271, 281, 288, 292, 598, 585, 0, 540, 601,
	510, 529, 609, 530, 533, 572, 494, 553, 206, 527,
	495, 0, 515, 489, 522, 490, 512, 542, 148, 509,
	587, 556, 600, 175, 599, 546, 0, 607, 178, 563,
	0, 255, 193, 0, 0, 544, 590, 551, 582, 539,
	574, 500, 562, 602, 528, 570, 603, 0, 0, 0,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 567, 597, 524, 569, 571, 488, 564, 0, 492,
	496, 608, 593, 518, 519, 520, 0, 0, 0, 0,
	0, 0, 0, 543, 552, 579, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 0, 560, 0, 0,
	0, 497, 493, 0, 0, 541, 0, 0, 0, 499,
	0, 517, 580, 0, 485, 156, 0, 0, 584, 592,
	538, 0, 289, 596, 535, 534, 223, 0, 260, 159,
	176, 125, 110, 120, 0, 158, 202, 233, 241, 525,
	486, 588, 513, 523, 142, 521, 235, 210, 280, 0,
	559, 215, 234, 179, 269, 225, 278, 279, 160, 290,
	291, 264, 287, 295, 128, 252, 0, 0, 0, 0,
	0, 0, 172, 537, 573, 514, 139, 230, 561, 589,
	141, 251, 126, 265, 192, 197, 136, 138, 137, 121,
	246, 267, 131, 140, 256, 261, 113, 263, 277, 133,
	245, 115, 275, 259, 190, 169, 170, 114, 0, 231,
	147, 155, 144, 205, 0, 0, 0, 272, 273, 143,
	298, 122, 286, 117, 123, 285, 199, 0, 0, 0,
	268, 276, 191, 184, 0, 116, 274, 189, 183, 174,
	151, 162, 220, 181, 221, 163, 195, 194, 196, 0,
	491, 0, 257, 283, 299, 129, 508, 0, 266, 293,
	294, 0, 0, 130, 154, 150, 219, 198, 124, 165,
	254, 173, 180, 229, 297, 209, 236, 134, 282, 253,
	504, 507, 502, 0, 503, 554, 555, 604, 605, 606,
	581, 498, 0, 505, 506, 0, 586, 594, 595, 558,
	109, 118, 177, 296, 227, 153, 284, 487, 501, 146,
	511, 0, 0, 526, 531, 532, 545, 547, 548, 549,
	550, 557, 565, 566, 568, 575, 576, 577, 578, 583,
	591, 610, 111, 112, 119, 127, 135, 145, 149, 152,
	157, 161, 164, 166, 167, 168, 171, 182, 185, 186,
	187, 188, 200, 201, 203, 204, 207, 208, 211, 212,
	213, 214, 216, 217, 218, 222, 224, 226, 228, 232,
	237, 238, 239, 240, 242, 243, 244, 247, 248, 249,
	250, 258, 262, 270, 271, 281, 288, 292, 598, 585,
	0, 540, 601, 510, 529, 609, 530, 533, 572, 494,
	553, 206, 527, 495, 0, 515, 489, 522, 490, 512,
	542, 148, 509, 587, 556, 600, 175, 599, 546, 0,
	607, 178, 563, 0, 255, 193, 0, 0, 544, 590,
	551, 582, 539, 574, 500, 562, 602, 528, 570, 603,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 567, 597, 524, 569, 571, 488,
	564, 0, 492, 496, 608, 593, 518, 519, 520, 0,
	0, 0, 0, 0, 0, 0, 543, 552, 579, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 0,
	560, 0, 0, 0, 497, 493, 0, 0, 541, 0,
	0, 0, 499, 0, 517, 580, 0, 485, 156, 0,
	0, 584, 592, 538, 0, 289, 596, 535, 534, 223,
	0, 260, 159, 176, 125, 110, 120, 0, 158, 202,
	233, 241, 525, 486, 588, 513, 523, 142, 521, 235,
	210, 280, 0, 559, 215, 234, 179, 269, 225, 278,
	279, 160, 290, 291, 264, 287, 295, 128, 252, 0,
	0, 0, 0, 0, 0, 172, 537, 573, 514, 139,
	230, 561, 589, 141, 251, 126, 265, 192, 197, 136,
	138, 137, 121, 246, 267, 131, 140, 256, 261, 113,
	263, 277, 133, 245, 115, 275, 259, 190, 169, 170,
	114, 0, 231, 147, 155, 144, 205, 0, 0, 0,
	272, 273, 143, 298, 122, 286, 117, 123, 285, 199,
	0, 0, 0, 268, 276, 191, 184, 0, 116, 274,
	189, 183, 174, 151, 162, 220, 181, 221, 163, 195,
	194, 196, 0, 491, 0, 257, 283, 299, 129, 508,
	0, 266, 293, 294, 0, 0, 130, 154, 150, 219,
	198, 124, 165, 254, 173, 180, 229, 297, 209, 236,
	134, 282, 253, 504, 507, 502, 0, 503, 554, 555,
	604, 605, 606, 581, 498, 0, 505, 506, 0, 586,
	594, 595, 558, 109, 118, 177, 296, 227, 153, 284,
	487, 501, 146, 511, 0, 0, 526, 531, 532, 545,
	547, 548, 549, 550, 557, 565, 566, 568, 575, 576,
	577, 578, 583, 591, 610, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 206, 0, 0, 0, 0, 0, 369, 0, 0,
	0, 148, 366, 0, 0, 0, 175, 0, 0, 0,
	411, 178, 0, 0, 255, 193, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 1087, 0,
	66, 0, 0, 367, 388, 387, 390, 391, 392, 393,
	0, 0, 132, 389, 394, 395, 396, 1088, 0, 0,
	364, 381, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 0, 0, 0, 0,
	425, 0, 380, 0, 0, 375, 376, 377, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 402, 0, 0, 0, 289, 0, 0, 423, 223,
	0, 260, 159, 176, 125, 110, 120, 0, 158, 202,
	233, 241, 408, 0, 0, 0, 0, 142, 0, 235,
	210, 280, 0, 0, 215, 234, 179, 269, 225, 278,
	279, 160, 290, 291, 264, 287, 295, 128, 252, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 139,
	230, 0, 0, 141, 251, 126, 265, 192, 197, 136,
	138, 137, 121, 246, 267, 131, 140, 256, 261, 113,
	263, 277, 133, 245, 115, 275, 259, 190, 169, 170,
	114, 0, 231, 147, 155, 144, 205, 0, 0, 0,
	272, 273, 143, 298, 122, 286, 117, 123, 285, 199,
	0, 0, 0, 268, 276, 191, 184, 0, 116, 274,
	189, 183, 174, 151, 162, 220, 181, 221, 163, 195,
	194, 196, 0, 0, 0, 257, 283, 299, 129, 0,
	0, 266, 293, 294, 0, 0, 130, 154, 150, 219,
	198, 124, 165, 254, 173, 180, 229, 297, 209, 236,
	134, 282, 253, 412, 424, 418, 420, 419, 416, 417,
	415, 414, 413, 426, 403, 404, 405, 406, 409, 0,
	421, 422, 407, 109, 118, 177, 296, 227, 153, 284,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 206, 0, 0, 0, 0, 0, 369, 0, 0,
	0, 148, 366, 0, 0, 0, 175, 0, 0, 0,
	411, 178, 0, 0, 255, 193, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 660, 367, 388, 387, 390, 391, 392, 393,
	0, 0, 132, 389, 394, 395, 396, 0, 0, 0,
	364, 381, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 0, 0, 0, 0,
	425, 0, 380, 0, 0, 375, 376, 377, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 402, 0, 0, 0, 289, 0, 0, 423, 223,
	0, 260, 159, 176, 125, 110, 120, 0, 158, 202,
	233, 241, 408, 0, 0, 0, 0, 142, 0, 235,
	210, 280, 0, 0, 215, 234, 179, 269, 225, 278,
	279, 160, 290, 291, 264, 287, 295, 128, 252, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 139,
	230, 0, 0, 141, 251, 126, 265, 192, 197, 136,
	138, 137, 121, 246, 267, 131, 140, 256, 261, 113,
	263, 277, 133, 245, 115, 275, 259, 190, 169, 170,
	114, 0, 231, 147, 155, 144, 205, 0, 0, 0,
	272, 273, 143, 298, 122, 286, 117, 123, 285, 199,
	0, 0, 0, 268, 276, 191, 184, 0, 116, 274,
	189, 183, 174, 151, 162, 220, 181, 221, 163, 195,
	194, 196, 0, 0, 0, 257, 283, 299, 129, 0,
	0, 266, 293, 294, 0, 0, 130, 154, 150, 219,
	198, 124, 165, 254, 173, 180, 229, 297, 209, 236,
	134, 282, 253, 412, 424, 418, 420, 419, 416, 417,
	415, 414, 413, 426, 403, 404, 405, 406, 409, 0,
	421, 422, 407, 109, 118, 177, 296, 227, 153, 284,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 206, 0, 0, 0, 0, 0, 369, 0, 0,
	0, 148, 366, 0, 0, 0, 175, 0, 0, 0,
	411, 178, 0, 0, 255, 193, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 367, 388, 387, 390, 391, 392, 393,
	0, 0, 132, 389, 394, 395, 396, 0, 0, 0,
	364, 381, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 360, 0, 0, 0,
	425, 0, 380, 0, 0, 375, 376, 377, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 402, 0, 0, 0, 289, 0, 0, 423, 223,
	0, 260, 159, 176, 125, 110, 120, 0, 158, 202,
	233, 241, 408, 0, 0, 0, 0, 142, 0, 235,
	210, 280, 0, 0, 215, 234, 179, 269, 225, 278,
	279, 160, 290, 291, 264, 287, 295, 128, 252, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 139,
	230, 0, 0, 141, 251, 126, 265, 192, 197, 136,
	138, 137, 121, 246, 267, 131, 140, 256, 261, 113,
	263, 277, 133, 245, 115, 275, 259, 190, 169, 170,
	114, 0, 231, 147, 155, 144, 205, 0, 0, 0,
	272, 273, 143, 298, 122, 286, 117, 123, 285, 199,
	0, 0, 0, 268, 276, 191, 184, 0, 116, 274,
	189, 183, 174, 151, 162, 220, 181, 221, 163, 195,
	194, 196, 0, 0, 0, 257, 283, 299, 129, 0,
	0, 266, 293, 294, 0, 0, 130, 154, 150, 219,
	198, 124, 165, 254, 173, 180, 229, 297, 209, 236,
	134, 282, 253, 412, 424, 418, 420, 419, 416, 417,
	415, 414, 413, 426, 403, 404, 405, 406, 409, 0,
	421, 422, 407, 109, 118, 177, 296, 227, 153, 284,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 206, 0, 0, 0, 0, 0, 369, 0, 0,
	0, 148, 366, 0, 0, 0, 175, 0, 0, 0,
	411, 178, 0, 0, 255, 193, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 367, 388, 1025, 390, 391, 392, 393,
	0, 0, 132, 389, 394, 395, 396, 0, 0, 0,
	364, 381, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 360, 0, 0, 0,
	425, 0, 380, 0, 0, 375, 376, 377, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 402, 0, 0, 0, 289, 0, 0, 423, 223,
	0, 260, 159, 176, 125, 110, 120, 0, 158, 202,
	233, 241, 408, 0, 0, 0, 0, 142, 0, 235,
	210, 280, 0, 0, 215, 234, 179, 269, 225, 278,
	279, 160, 290, 291, 264, 287, 295, 128, 252, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 139,
	230, 0, 0, 141, 251, 126, 265, 192, 197, 136,
	138, 137, 121, 246, 267, 131, 140, 256, 261, 113,
	263, 277, 133, 245, 115, 275, 259, 190, 169, 170,
	114, 0, 231, 147, 155, 144, 205, 0, 0, 0,
	272, 273, 143, 298, 122, 286, 117, 123, 285, 199,
	0, 0, 0, 268, 276, 191, 184, 0, 116, 274,
	189, 183, 174, 151, 162, 220, 181, 221, 163, 195,
	194, 196, 0, 0, 0, 257, 283, 299, 129, 0,
	0, 266, 293, 294, 0, 0, 130, 154, 150, 219,
	198, 124, 165, 254, 173, 180, 229, 297, 209, 236,
	134, 282, 253, 412, 424, 418, 420, 419, 416, 417,
	415, 414, 413, 426, 403, 404, 405, 406, 409, 0,
	421, 422, 407, 109, 118, 177, 296, 227, 153, 284,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 206, 0, 0, 0, 0, 0, 369, 0, 0,
	0, 148, 366, 0, 0, 0, 175, 0, 0, 0,
	411, 178, 0, 0, 255, 193, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 367, 388, 1022, 390, 391, 392, 393,
	0, 0, 132, 389, 394, 395, 396, 0, 0, 0,
	364, 381, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 360, 0, 0, 0,
	425, 0, 380, 0, 0, 375, 376, 377, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 402, 0, 0, 0, 289, 0, 0, 423, 223,
	0, 260, 159, 176, 125, 110, 120, 0, 158, 202,
	233, 241, 408, 0, 0, 0, 0, 142, 0, 235,
	210, 280, 0, 0, 215, 234, 179, 269, 225, 278,
	279, 160, 290, 291, 264, 287, 295, 128, 252, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 139,
	230, 0, 0, 141, 251, 126, 265, 192, 197, 136,
	138, 137, 121, 246, 267, 131, 140, 256, 261, 113,
	263, 277, 133, 245, 115, 275, 259, 190, 169, 170,
	114, 0, 231, 147, 155, 144, 205, 0, 0, 0,
	272, 273, 143, 298, 122, 286, 117, 123, 285, 199,
	0, 0, 0, 268, 276, 191, 184, 0, 116, 274,
	189, 183, 174, 151, 162, 220, 181, 221, 163, 195,
	194, 196, 0, 0, 0, 257, 283, 299, 129, 0,
	0, 266, 293, 294, 0, 0, 130, 154, 150, 219,
	198, 124, 165, 254, 173, 180, 229, 297, 209, 236,
	134, 282, 253, 412, 424, 418, 420, 419, 416, 417,
	415, 414, 413, 426, 403, 404, 405, 406, 409, 0,
	421, 422, 407, 109, 118, 177, 296, 227, 153, 284,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 148, 366, 0, 0, 0, 175, 0,
	0, 0, 411, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 367, 388, 387, 390, 391,
	392, 393, 0, 0, 132, 389, 394, 395, 396, 0,
	0, 0, 364, 381, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 0, 0,
	0, 0, 425, 0, 380, 0, 0, 375, 376, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 402, 0, 0, 0, 289, 0, 0,
	423, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 408, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 412, 424, 418, 420, 419,
	416, 417, 415, 414, 413, 426, 403, 404, 405, 406,
	409, 0, 421, 422, 407, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 148, 366, 0, 0, 0, 175, 0,
	0, 0, 411, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 938, 367, 388, 387, 390, 391,
	392, 393, 0, 0, 132, 389, 394, 395, 396, 0,
	0, 0, 364, 381, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 0, 0,
	0, 0, 425, 0, 380, 0, 0, 375, 376, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 402, 0, 0, 0, 289, 0, 0,
	423, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 408, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 412, 424, 418, 420, 419,
	416, 417, 415, 414, 413, 426, 403, 404, 405, 406,
	409, 0, 421, 422, 407, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 148, 366, 0, 0, 0, 175, 0,
	0, 0, 411, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 367, 388, 387, 390, 391,
	392, 393, 0, 0, 132, 389, 394, 395, 396, 0,
	0, 0, 364, 381, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 0, 0,
	0, 0, 425, 0, 380, 0, 0, 375, 376, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 402, 0, 0, 0, 289, 0, 0,
	423, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 408, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 412, 424, 418, 420, 419,
	416, 417, 415, 414, 413, 426, 403, 404, 405, 406,
	409, 0, 421, 422, 407, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 411, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 367, 388, 387, 390, 391,
	392, 393, 0, 0, 132, 389, 394, 395, 396, 0,
	0, 0, 0, 381, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 0, 0,
	0, 0, 425, 0, 380, 0, 0, 375, 376, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 402, 0, 0, 0, 289, 0, 0,
	423, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 408, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 1903, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 412, 424, 418, 420, 419,
	416, 417, 415, 414, 413, 426, 403, 404, 405, 406,
	409, 0, 421, 422, 407, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 411, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 660, 367, 388, 387, 390, 391,
	392, 393, 0, 0, 132, 389, 394, 395, 396, 0,
	0, 0, 0, 381, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 0, 0,
	0, 0, 425, 0, 380, 0, 0, 375, 376, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 402, 0, 0, 0, 289, 0, 0,
	423, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 408, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 412, 424, 418, 420, 419,
	416, 417, 415, 414, 413, 426, 403, 404, 405, 406,
	409, 0, 421, 422, 407, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 411, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 367, 388, 387, 390, 391,
	392, 393, 0, 0, 132, 389, 394, 395, 396, 0,
	0, 0, 0, 381, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 0, 0,
	0, 0, 425, 0, 380, 0, 0, 375, 376, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 402, 0, 0, 0, 289, 0, 0,
	423, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 408, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 412, 424, 418, 420, 419,
	416, 417, 415, 414, 413, 426, 403, 404, 405, 406,
	409, 0, 421, 422, 407, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 701, 700, 710, 711, 703, 704, 705, 706,
	707, 708, 709, 702, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 0, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 1070,
	0, 0, 0, 0, 0, 107, 0, 1072, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 289, 0, 1069,
	0, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 0, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 1070,
	0, 0, 0, 0, 0, 107, 0, 1072, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 289, 0, 1069,
	0, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 0, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 1064, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 689, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 468, 0, 691, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	686, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 0, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 123,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 198, 124, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 118, 177, 296, 227,
	153, 284, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 178, 0, 0, 255, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 468, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 223, 0, 260, 159, 176, 125, 110,
	120, 0, 158, 202, 233, 241, 0, 0, 0, 0,
	0, 142, 0, 235, 210, 280, 0, 0, 215, 234,
	179, 269, 225, 278, 279, 160, 290, 291, 264, 287,
	295, 128, 252, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 139, 230, 0, 0, 141, 251, 126,
	265, 192, 197, 136, 138, 137, 121, 246, 267, 131,
	140, 256, 261, 113, 263, 277, 133, 245, 115, 275,
	259, 190, 169, 170, 114, 0, 231, 147, 155, 144,
	205, 0, 0, 0, 272, 273, 143, 298, 122, 286,
	117, 123, 285, 199, 0, 0, 0, 268, 276, 191,
	184, 0, 116, 274, 189, 183, 174, 151, 162, 220,
	181, 221, 163, 195, 194, 196, 0, 0, 0, 257,
	283, 299, 129, 0, 0, 266, 293, 294, 0, 0,
	130, 154, 150, 219, 198, 124, 165, 254, 173, 180,
	229, 297, 209, 236, 134, 282, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 118, 177,
	296, 227, 153, 284, 0, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 135, 145, 149, 152, 157, 161, 164,
	166, 167, 168, 171, 182, 185, 186, 187, 188, 200,
	201, 203, 204, 207, 208, 211, 212, 213, 214, 216,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 247, 248, 249, 250, 258, 262,
	270, 271, 281, 288, 292, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 178, 0, 0, 255, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 1072,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 223, 0, 260, 159, 176, 125, 110,
	120, 0, 158, 202, 233, 241, 0, 0, 0, 0,
	0, 142, 0, 235, 210, 280, 0, 0, 215, 234,
	179, 269, 225, 278, 279, 160, 290, 291, 264, 287,
	295, 128, 252, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 139, 230, 0, 0, 141, 251, 126,
	265, 192, 197, 136, 138, 137, 121, 246, 267, 131,
	140, 256, 261, 113, 263, 277, 133, 245, 115, 275,
	259, 190, 169, 170, 114, 0, 231, 147, 155, 144,
	205, 0, 0, 0, 272, 273, 143, 298, 122, 286,
	117, 123, 285, 199, 0, 0, 0, 268, 276, 191,
	184, 0, 116, 274, 189, 183, 174, 151, 162, 220,
	181, 221, 163, 195, 194, 196, 0, 0, 0, 257,
	283, 299, 129, 0, 0, 266, 293, 294, 0, 0,
	130, 154, 150, 219, 198, 124, 165, 254, 173, 180,
	229, 297, 209, 236, 134, 282, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 118, 177,
	296, 227, 153, 284, 0, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 0, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 135, 145, 149, 152, 157, 161, 164,
	166, 167, 168, 171, 182, 185, 186, 187, 188, 200,
	201, 203, 204, 207, 208, 211, 212, 213, 214, 216,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 247, 248, 249, 250, 258, 262,
	270, 271, 281, 288, 292, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 178, 0, 0,
	255, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 223, 0, 260, 159, 176,
	125, 110, 120, 0, 158, 202, 233, 241, 0, 0,
	0, 0, 0, 142, 0, 235, 210, 280, 0, 0,
	215, 234, 179, 269, 225, 278, 279, 160, 290, 291,
	264, 287, 295, 128, 252, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 139, 230, 0, 0, 141,
	251, 126, 265, 192, 197, 136, 138, 137, 121, 246,
	267, 131, 140, 256, 261, 113, 263, 277, 133, 245,
	115, 275, 259, 190, 169, 170, 114, 0, 231, 147,
	155, 144, 205, 0, 0, 0, 272, 273, 143, 298,
	122, 286, 117, 123, 285, 199, 0, 0, 0, 268,
	276, 191, 184, 0, 116, 274, 189, 183, 174, 151,
	162, 220, 181, 221, 163, 195, 194, 196, 0, 0,
	0, 257, 283, 299, 129, 0, 0, 266, 293, 294,
	0, 0, 130, 154, 150, 219, 198, 124, 165, 254,
	173, 180, 229, 297, 209, 236, 134, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	118, 177, 296, 227, 153, 284, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 806, 0,
	0, 0, 175, 0, 0, 0, 0, 178, 0, 0,
	255, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 468,
	0, 805, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 223, 0, 260, 159, 176,
	125, 110, 120, 0, 158, 202, 233, 241, 0, 0,
	0, 0, 0, 142, 0, 235, 210, 280, 0, 0,
	215, 234, 179, 269, 225, 278, 279, 160, 290, 291,
	264, 287, 295, 128, 252, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 139, 230, 0, 0, 141,
	251, 126, 265, 192, 197, 136, 138, 137, 121, 246,
	267, 131, 140, 256, 261, 113, 263, 277, 133, 245,
	115, 275, 259, 190, 169, 170, 114, 0, 231, 147,
	155, 144, 205, 0, 0, 0, 272, 273, 143, 298,
	122, 286, 117, 123, 285, 199, 0, 0, 0, 268,
	276, 191, 184, 0, 116, 274, 189, 183, 174, 151,
	162, 220, 181, 221, 163, 195, 194, 196, 0, 0,
	0, 257, 283, 299, 129, 0, 0, 266, 293, 294,
	0, 0, 130, 154, 150, 219, 198, 124, 165, 254,
	173, 180, 229, 297, 209, 236, 134, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	118, 177, 296, 227, 153, 284, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 178, 0, 0,
	255, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 1072, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 223, 0, 260, 159, 176,
	125, 110, 120, 0, 158, 202, 233, 241, 0, 0,
	0, 0, 0, 142, 0, 235, 210, 280, 0, 0,
	215, 234, 179, 269, 225, 278, 279, 160, 290, 291,
	264, 287, 295, 128, 252, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 139, 230, 0, 0, 141,
	251, 126, 265, 192, 197, 136, 138, 137, 121, 246,
	267, 131, 140, 256, 261, 113, 263, 277, 133, 245,
	115, 275, 259, 190, 169, 170, 114, 0, 231, 147,
	155, 144, 205, 0, 0, 0, 272, 273, 143, 298,
	122, 286, 117, 123, 285, 199, 0, 0, 0, 268,
	276, 191, 184, 0, 116, 274, 189, 183, 174, 151,
	162, 220, 181, 221, 163, 195, 194, 196, 0, 0,
	0, 257, 283, 299, 129, 0, 0, 266, 293, 294,
	0, 0, 130, 154, 150, 219, 198, 124, 165, 254,
	173, 180, 229, 297, 209, 236, 134, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	118, 177, 296, 227, 153, 284, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 178, 0, 0,
	255, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 223, 0, 260, 159, 176,
	125, 110, 120, 0, 158, 202, 233, 241, 0, 0,
	0, 0, 0, 142, 0, 235, 210, 280, 0, 0,
	215, 234, 179, 269, 225, 278, 279, 160, 290, 291,
	264, 287, 295, 128, 252, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 139, 230, 0, 0, 141,
	251, 126, 265, 192, 197, 136, 138, 137, 121, 246,
	267, 131, 140, 256, 261, 113, 263, 277, 133, 245,
	115, 275, 259, 190, 169, 170, 114, 0, 231, 147,
	155, 144, 205, 0, 0, 0, 272, 273, 143, 298,
	122, 286, 117, 123, 285, 199, 0, 0, 0, 268,
	276, 191, 184, 0, 116, 274, 189, 183, 174, 151,
	162, 220, 181, 221, 163, 195, 194, 196, 0, 0,
	0, 257, 283, 299, 129, 0, 0, 266, 293, 294,
	0, 0, 130, 154, 150, 219, 198, 124, 165, 254,
	173, 180, 229, 297, 209, 236, 134, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	118, 177, 296, 227, 153, 284, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 178, 0, 0,
	255, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 468,
	0, 691, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 223, 0, 260, 159, 176,
	125, 110, 120, 0, 158, 202, 233, 241, 0, 0,
	0, 0, 0, 142, 0, 235, 210, 280, 0, 0,
	215, 234, 179, 269, 225, 278, 279, 160, 290, 291,
	264, 287, 295, 128, 252, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 139, 230, 0, 0, 141,
	251, 126, 265, 192, 197, 136, 138, 137, 121, 246,
	267, 131, 140, 256, 261, 113, 263, 277, 133, 245,
	115, 275, 259, 190, 169, 170, 114, 0, 231, 147,
	155, 144, 205, 0, 0, 0, 272, 273, 143, 298,
	122, 286, 117, 123, 285, 199, 0, 0, 0, 268,
	276, 191, 184, 0, 116, 274, 189, 183, 174, 151,
	162, 220, 181, 221, 163, 195, 194, 196, 0, 0,
	0, 257, 283, 299, 129, 0, 0, 266, 293, 294,
	0, 0, 130, 154, 150, 219, 198, 124, 165, 254,
	173, 180, 229, 297, 209, 236, 134, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	118, 177, 296, 227, 153, 284, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 776, 148, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 178, 0, 0,
	255, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 223, 0, 260, 159, 176,
	125, 110, 120, 0, 158, 202, 233, 241, 0, 0,
	0, 0, 0, 142, 0, 235, 210, 280, 0, 0,
	215, 234, 179, 269, 225, 278, 279, 160, 290, 291,
	264, 287, 295, 128, 252, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 139, 230, 0, 0, 141,
	251, 126, 265, 192, 197, 136, 138, 137, 121, 246,
	267, 131, 140, 256, 261, 113, 263, 277, 133, 245,
	115, 275, 259, 190, 169, 170, 114, 0, 231, 147,
	155, 144, 205, 0, 0, 0, 272, 273, 143, 298,
	122, 286, 117, 123, 285, 199, 0, 0, 0, 268,
	276, 191, 184, 0, 116, 274, 189, 183, 174, 151,
	162, 220, 181, 221, 163, 195, 194, 196, 0, 0,
	0, 257, 283, 299, 129, 0, 0, 266, 293, 294,
	0, 0, 130, 154, 150, 219, 198, 124, 165, 254,
	173, 180, 229, 297, 209, 236, 134, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	118, 177, 296, 227, 153, 284, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 429, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 104, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	446, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 447, 445, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 797, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	446, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 447, 445, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 437, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	446, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 447, 445, 440, 439, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292,
}
var yyPact = [...]int{

	2137, -1000, -272, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1391, 1448, -1000, -1000,
	-1000, -1000, -1000, -1000, 575, 255, -1000, -1000, -1000, 239,
	195, 16406, 236, 2099, 17166, -1000, -1000, -1000, -1000, 189,
	17166, -1000, -1000, -76, -96, -1000, 24, 1024, 1167, -1000,
	-1000, 32, 19, -1000, -1000, -1000, -1000, -1000, -1000, 1380,
	1386, 1195, 1378, 1277, -1000, 8003, 201, 201, 16026, 18686,
	-1000, -1000, 500, 17166, 233, 17166, -154, 196, 196, 119,
	196, -1000, 506, -1000, -1000, -1000, 17166, 197, 16786, 197,
	197, 197, 197, 197, 17166, -1000, 387, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	17166, 1019, 1332, 4898, 168, 4898, 4898, -1000, 532, -1000,
	109, 101, 102, 4898, 77, 557, 93, -2, -1000, 4898,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 185, 1167, 498,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1330, 678, 1201,
	801, 235, 17166, 461, -1000, -1000, 1322, 9915, 9915, 1391,
	-1000, 1167, -1000, -1000, -1000, 1306, -1000, -1000, 594, 1430,
	-1000, 12575, 385, -1000, 9915, 2425, 1153, -1000, -1000, 1153,
	-1000, -1000, 359, -1000, -1000, 11055, 11055, 11055, 11055, 11055,
	11055, 11055, 11055, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1153, -1000, 9155,
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
	9915, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 15639, 14879, 17166,
	1159, 1148, -1000, -1000, 384, 961, 18306, -126, -1000, -1000,
	-1000, 495, 14119, -1000, 375, -1000, 1327, -1000, 1065, 17166,
	-1000, 3037, -1000, 16786, 1371, 224, 1016, 554, 1012, 1004,
	1002, 17166, 1000, 1137, 222, 17166, 1348, 1234, -1000, -1000,
	17166, 968, 946, 921, 919, -1000, 6863, -1000, 4898, 4898,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 196, 196, 4898, 4898, 4898, 17166, 17166, 17166, -1000,
	-1000, 17166, -1000, -1000, 4898, 524, 4898, 524, 4898, 4898,
	-1000, 1429, 503, 503, -1000, -1000, -1000, -1000, 9915, -1000,
	11055, 427, -1000, 1225, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 917, -1000, -1000, 447, -1000, 720, -1000, 9535, -1000,
	-1000, 17166, 4898, 113, 150, 135, 17166, -1000, 1443, 419,
	670, 372, 1136, -1000, 633, 1380, 801, 1277, 1014, 1253,
	-1000, -1000, -1000, 17166, -1000, 9915, 9915, 755, -1000, 15259,
	-1000, -1000, 5684, 466, 11055, 646, 527, 11055, 11055, 11055,
	11055, 11055, 11055, 11055, 11055, 11055, 11055, 11055, 11055, 11055,
	11055, 11055, 632, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 903, -1000, 1167, 960, 960, 396, 396, 396, 396,
	396, 396, 396, 11435, 1360, 801, 1054, 497, 9155, 8003,
	8003, 801, 9915, 9915, 8763, 8383, 8003, 8003, 1360, 522,
	497, 17926, -1000, -1000, 10675, -1000, -1000, -1000, -1000, -1000,
	801, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16786,
	16786, 8003, 8003, 8003, 8003, 138, 17166, -1000, 1116, 1236,
	-1000, -1000, -1000, 1370, 13739, 12195, 138, 1093, 14879, 17166,
	-1000, -1000, 14879, 17166, 5291, 17546, 961, -126, 1117, -1000,
	-131, -97, 7243, 376, -1000, -1000, -1000, 6470, -1000, 4112,
	621, 1029, -1000, -54, -1000, -1000, -1000, 1172, -1000, 1172,
	205, -12, 1172, 1172, 1172, 1172, 1172, -22, -22, -22,
	-22, -11, -1000, -1000, -1000, -1000, -1000, 1198, 1197, -1000,
	1172, 1172, 1172, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1184, 206, 1184, 1181, 1181, 1181, 1181, 1191, -1000,
	17166, 4898, 1346, 4898, 108, 1196, -1000, -1000, 17166, 17166,
	1134, -1000, 17166, 1133, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 900, 895, -1000, -1000, -1000, -1000,
	-1000, -1000, 509, -1000, -1000, 699, 9915, -1000, -1000, -1000,
	-1000, 17166, 1355, 17166, 17166, 524, 497, 714, -1000, 698,
	17166, -1000, 1132, -1000, 480, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1052,
	947, -1000, 17166, 17166, 17166, 17166, 17166, 340, -1000, 1285,
	9915, 9915, 6470, 9915, -1000, -1000, -1000, 1322, -1000, 1360,
	1408, -1000, 1298, 1297, 8003, -1000, -1000, 466, 464, -1000,
	-1000, 804, -1000, -1000, -1000, -1000, 339, 1153, -1000, 992,
	-1000, -1000, -1000, -1000, 646, 11055, 11055, 11055, 714, 992,
	2371, 2102, 2078, 396, 776, 776, 424, 424, 424, 424,
	424, 814, 814, -1000, -1000, -1000, 801, -1000, -1000, -1000,
	8003, -1000, 9915, -1000, 801, 1047, -1000, 1047, -1000, 520,
	833, 471, 1428, 1047, 420, 1426, 1047, 1047, 1047, 8003,
	536, -1000, 9915, 801, -1000, 897, 1130, 1128, 1047, 801,
	1121, 1047, 1047, 1077, 1153, -1000, 17546, 14879, 14879, 14879,
	14879, 14879, -1000, 1271, 1266, -1000, 1252, 1246, 1261, 17166,
	-1000, 1023, 13739, -1000, 1153, -1000, 13347, 300, 232, 227,
	208, -1000, -1000, 1410, 14879, 1109, -1000, 1109, -1000, 327,
	-1000, -1000, 1117, -126, -133, -1000, -1000, -1000, -1000, 497,
	-1000, 726, -1000, 281, 1102, 3719, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1192, 886, -1000, 1315, 360, 449, 773,
	1307, -1000, -1000, -1000, 672, -56, -1000, -1000, 651, -22,
	-22, 1172, 1172, 200, 1172, -1000, -22, -1000, -1000, -1000,
	376, 1324, 376, 376, 376, 376, -22, 694, 694, -1000,
	-1000, -1000, -1000, 649, -1000, 1184, -1000, -1000, 637, -1000,
	-1000, -1000, 1223, 16786, 1167, 1352, -1000, -1000, -1000, 1425,
	-1000, -1000, 194, 209, -1000, 4898, 17166, 4898, 4898, 1410,
	883, 878, -1000, 497, 503, 524, -207, -1000, -1000, -1000,
	-1000, 11055, -1000, -1000, 447, 960, -1000, -1000, 800, 535,
	336, 178, 178, -1000, 476, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 134, 1160, -1000, -1000, -1000, -1000,
	41, 112, 1283, 497, 497, -1000, -1000, 17166, -1000, -1000,
	-1000, -1000, 1142, -1000, -1000, -1000, 4505, 8003, -1000, 714,
	992, 2001, -1000, 11055, -1000, 801, 497, -1000, 8003, -1000,
	-1000, 371, 632, 371, 11055, 11055, -1000, 11055, 11055, -1000,
	-166, -1000, 1071, 501, -1000, 9915, 882, -1000, -1000, 11055,
	11055, -1000, -1000, -1000, -1000, 1222, 17546, 1153, -1000, 12967,
	16786, 1113, 1236, 1190, 1221, 1340, -1000, -1000, -1000, -1000,
	1256, -1000, 1255, -1000, -1000, -1000, -1000, 16786, 11055, 300,
	-1000, 1153, 1153, 1153, 1391, 9915, 1109, -1000, -1000, 410,
	-1000, -1000, -135, -117, -1000, -1000, -1000, 6077, 4112, -1000,
	4112, 16786, 160, -1000, 773, 773, -1000, -1000, -1000, 1183,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 533, 11055, 1442,
	-1000, 1312, -1000, 1311, 693, -1000, -1000, 929, 376, 376,
	-22, -1000, -1000, 1172, -1000, 376, -1000, 446, -1000, -1000,
	-1000, -1000, 376, 959, -1000, 951, 1100, -1000, 933, 17166,
	-1000, -1000, -1000, 1210, -1000, -1000, -1000, 914, 1099, -1000,
	3037, 871, 850, 847, 17166, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 524, -1000, 11055, 992, -1000, -1000, -1000, 734,
	-1000, 773, 355, -1000, -1000, -1000, 841, 1307, -1000, -1000,
	830, -1000, 828, 16786, 1302, 826, 17166, 16786, -1000, -1000,
	787, 813, 9915, -1000, 16786, -177, 791, 16786, 16786, 16786,
	-1000, -1000, 1410, 14879, -1000, -1000, 801, -1000, 11055, 992,
	-1000, -1000, 801, 1172, 1172, -1000, 1172, 1181, -1000, 1172,
	9, 1172, 8, 801, 801, 2320, 2293, 1941, 935, 1153,
	-161, -1000, 497, 9915, 2203, 1869, -1000, 1337, 1072, 1092,
	-1000, -1000, 7623, 801, 928, 274, 926, -1000, 1391, -1000,
	-1000, 9915, 1173, -1000, 9915, -1000, -1000, -1000, 926, 1310,
	-1000, 16786, 16786, 16786, 1380, 497, -1000, -1000, -1000, -1000,
	3719, -1000, 913, -1000, 1172, -1000, -1000, -1000, 16786, -1000,
	992, -93, -1000, -1000, -1000, -1000, -1000, -1000, 376, -1000,
	-1000, -1000, -1000, -1000, -22, 688, -22, 626, -1000, 607,
	1163, -1000, 1167, 17166, 61, 194, -1000, 3037, 3037, 3037,
	-1000, -1000, 992, 787, 159, -1000, 1191, 360, 160, -1000,
	-1000, -1000, -1000, 789, 320, -1000, 207, 159, 787, 497,
	1344, -1000, 6077, -1000, -1000, 1162, 1204, -1000, 1413, 1098,
	-1000, 992, -1000, -1000, 151, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11055, 11055, 11055, 11055, 11055, 801, 682,
	497, 11055, 11055, 1301, -1000, 1153, -1000, -1000, 1095, 16786,
	16786, -1000, 16786, 1380, 497, 16786, 497, 11815, -1000, 14499,
	908, -1000, 908, 908, -1000, 323, 16786, 1343, 894, -1000,
	-1000, 376, -1000, 376, 909, 876, 16786, -1000, 1364, -1000,
	61, -1000, 667, 62, 46, -1000, 56, 54, 49, 45,
	39, -1000, -1000, -1000, -1000, 805, -1000, -1000, 780, 1161,
	773, -1000, -1000, 769, -1000, -1000, 16786, -1000, 159, 1153,
	1096, -1000, 479, 16786, 17166, 1409, 1385, -1000, -1000, 897,
	897, 897, 897, 78, -1000, -1000, 897, 897, 1440, -1000,
	1153, -1000, 1167, 260, -1000, -1000, -1000, 875, -1000, 300,
	16786, -1000, -1000, -1000, 323, -1000, 763, 476, 659, -1000,
	-1000, 156, -1000, -1000, -1000, -1000, 865, -1000, 84, 3295,
	-1000, -1000, -1000, -1000, -1000, -1000, 43, 42, 71, -1000,
	-1000, -1000, 16786, 1191, -1000, -1000, -1000, -1000, 132, 6077,
	4112, 845, -1000, -1000, 9915, 9915, -1000, -1000, -1000, -1000,
	801, 88, -181, -1000, -1000, 17546, 1092, 801, 16786, -1000,
	-1000, -1000, -1000, -1000, 601, -1000, 17166, 323, 82, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9915, 9915, 3295, -1000, -1000, -1000, -1000, -1000,
	838, 1157, -1000, 751, -1000, 16786, -1000, -1000, 1160, 497,
	1082, -1000, 1281, -175, -184, 961, -1000, -1000, -1000, 1156,
	-1000, 323, 76, -1000, 661, 641, -273, -1000, 323, 16786,
	-1000, 132, 1295, -177, -1000, 1280, -1000, 16786, -1000, 747,
	631, 592, -1000, 9915, 462, 3035, -1000, 745, -1000, 129,
	-1000, -179, 742, 268, -1000, -1000, 544, 462, -1000, 629,
	-274, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 462, -1000, -1000, 323, 123, -182, 1209, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -275, 462, 133, -276, -1000,
	1153, -186, 1207, 1206, 1420, -1000, 448, -277, 191, 462,
	713, -1000, -1000, 9915, 432, 10295, -1000, -1000, 1439, -1000,
	1432, 356, 356, 521, 462, -1000, -278, 187, 462, -1000,
	585, -1000, 897, 801, -1000, -1000, -1000, 171, 628, -1000,
	-1000, 261, -1000, -282, 462, -1000, -1000, -1000, -1000, -1000,
	186, 231, -283, -1000, 182, 462, -1000,
}
var yyPgo = [...]int{

	0, 1727, 235, 653, 1726, 1717, 1709, 30, 19, 16,
	35, 1707, 1506, 1500, 1495, 1493, 1705, 1479, 6, 2,
	46, 29, 25, 18, 1703, 21, 1702, 1697, 11, 1696,
	8, 90, 1695, 1694, 1692, 1691, 1690, 1477, 1688, 1687,
	1686, 1684, 1683, 1473, 1470, 1681, 1679, 1468, 1464, 1678,
	1677, 1462, 1460, 1458, 128, 1674, 1672, 1670, 117, 1667,
	114, 1663, 1662, 1657, 77, 96, 76, 73, 226, 1653,
	1640, 66, 91, 95, 1635, 64, 1630, 1629, 111, 1626,
	1625, 1623, 89, 1620, 1619, 2037, 1618, 104, 1617, 44,
	34, 87, 1616, 1615, 1612, 1610, 80, 69, 1609, 1608,
	1607, 51, 1606, 1604, 109, 1603, 93, 15, 50, 42,
	52, 1600, 1202, 38, 1599, 84, 1598, 1597, 1595, 1594,
	78, 1588, 27, 1585, 99, 4, 47, 71, 100, 1580,
	58, 108, 67, 60, 23, 102, 1578, 103, 88, 1576,
	1574, 753, 1573, 1571, 81, 1569, 1568, 74, 1566, 508,
	107, 63, 1565, 1564, 1563, 1562, 57, 79, 1561, 1560,
	45, 1611, 94, 68, 1404, 40, 105, 1558, 33, 1555,
	1979, 106, 37, 70, 1554, 1549, 75, 54, 1548, 1546,
	1545, 1544, 1543, 1540, 1539, 1122, 1538, 1536, 1535, 62,
	92, 1534, 1533, 86, 61, 1530, 1529, 1528, 82, 56,
	1527, 85, 53, 1526, 1525, 1524, 1521, 28, 32, 1520,
	1518, 1517, 1516, 65, 41, 1515, 49, 24, 14, 43,
	5, 48, 1513, 10, 1512, 22, 1511, 13, 1509, 12,
	83, 3, 7, 9, 1508, 1504, 1502, 1497, 55, 1491,
	1489, 39, 1485, 1481, 0, 169, 112, 1466, 1455, 135,
}
var yyR1 = [...]int{

	0, 242, 243, 243, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 6, 3, 4, 4, 5, 5, 7, 7, 57,
	57, 8, 9, 9, 9, 9, 246, 246, 80, 80,
	78, 78, 79, 79, 131, 131, 10, 10, 10, 10,
	135, 135, 138, 138, 138, 139, 139, 139, 139, 174,
	174, 125, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 236, 236, 237, 237, 238, 238, 238, 238, 239,
	239, 240, 240, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 24, 26, 26, 159, 159,
	35, 35, 36, 36, 36, 123, 123, 123, 11, 11,
	11, 11, 11, 18, 20, 20, 27, 27, 28, 21,
	21, 21, 21, 29, 29, 30, 22, 22, 34, 34,
	32, 32, 31, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 17, 235, 235, 235, 25,
	25, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	229, 229, 228, 227, 227, 226, 226, 225, 41, 209,
	211, 211, 210, 210, 210, 210, 199, 178, 178, 178,
	178, 178, 178, 178, 177, 177, 177, 177, 181, 181,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 180,
	180, 180, 180, 180, 180, 180, 180, 182, 182, 182,
	182, 182, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 184, 184, 184,
	184, 184, 184, 184, 184, 198, 198, 185, 185, 193,
	193, 194, 194, 194, 191, 191, 192, 192, 195, 195,
	187, 188, 196, 189, 189, 189, 190, 190, 190, 197,
	197, 197, 197, 186, 200, 200, 220, 220, 219, 219,
	218, 218, 218, 208, 208, 215, 215, 215, 215, 215,
	203, 203, 203, 202, 202, 204, 204, 207, 207, 217,
	217, 216, 201, 201, 221, 221, 221, 221, 221, 205,
	205, 206, 206, 206, 232, 233, 231, 231, 231, 231,
	231, 212, 212, 212, 213, 213, 213, 214, 214, 214,
	234, 234, 37, 37, 37, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 122, 122, 122, 39, 40, 40,
	40, 40, 40, 40, 40, 40, 157, 157, 230, 230,
	230, 230, 230, 224, 222, 222, 223, 223, 13, 42,
	42, 14, 14, 14, 14, 14, 14, 14, 15, 15,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 69, 145, 145, 143,
	143, 146, 146, 144, 144, 144, 147, 147, 147, 148,
	148, 175, 175, 175, 45, 45, 50, 50, 53, 51,
	52, 158, 158, 48, 48, 49, 49, 49, 49, 63,
	63, 247, 247, 47, 47, 46, 46, 46, 46, 16,
	248, 54, 55, 55, 56, 56, 56, 60, 60, 60,
	58, 58, 58, 59, 59, 66, 66, 65, 65, 67,
	67, 67, 67, 167, 167, 167, 166, 166, 70, 70,
	71, 71, 72, 72, 73, 73, 73, 73, 88, 88,
	89, 89, 89, 89, 89, 99, 99, 130, 130, 132,
	132, 74, 74, 74, 74, 75, 75, 76, 76, 77,
	77, 156, 156, 172, 172, 81, 81, 81, 83, 82,
	82, 82, 82, 84, 84, 86, 86, 85, 85, 87,
	90, 90, 90, 90, 91, 91, 68, 68, 68, 68,
	68, 68, 68, 142, 142, 93, 93, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 105, 105, 105,
	105, 105, 105, 94, 94, 94, 94, 94, 94, 94,
	64, 64, 106, 106, 106, 112, 107, 107, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	102, 102, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 249, 249, 104, 103, 103, 103,
	103, 103, 103, 61, 61, 61, 61, 61, 173, 173,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 116, 116, 62, 62, 114, 114, 115,
	117, 117, 113, 113, 113, 96, 96, 96, 96, 96,
	96, 96, 96, 98, 98, 98, 118, 118, 119, 119,
	120, 120, 121, 121, 124, 126, 126, 126, 127, 127,
	127, 127, 128, 128, 128, 95, 95, 95, 95, 95,
	95, 129, 129, 129, 129, 133, 133, 108, 108, 110,
	110, 109, 111, 134, 134, 137, 137, 137, 137, 136,
	136, 136, 169, 169, 169, 140, 140, 149, 149, 150,
	150, 141, 141, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 155, 155, 154, 154, 154, 151, 151, 151,
	152, 152, 168, 168, 164, 164, 165, 165, 170, 170,
	171, 171, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 244,
	245, 160, 161, 161, 161,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	7, 5, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 6, 1, 1, 1, 3,
	1, 3, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 0, 2, 2, 11, 7, 9, 5, 5, 15,
	11, 0, 1, 1, 3, 2, 3, 3, 3, 0,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 5, 8, 1, 2, 5, 7,
	10, 8, 11, 1, 2, 5, 2, 4, 2, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 2, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	2, 4, 1, 3, 3, 3, 3, 0, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 3, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 3, 3, 2, 4, 5, 2,
	3, 4, 2, 2, 3, 3, 3, 3, 3, 4,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 1, 2,
	2, 3, 1, 0, 3, 3, 0, 2, 2, 2,
	1, 2, 1, 2, 5, 4, 0, 1, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	3, 3, 3, 1, 10, 11, 11, 12, 12, 1,
	1, 0, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	0, 2, 1, 1, 1, 6, 10, 9, 7, 7,
	7, 9, 7, 12, 14, 7, 7, 9, 9, 10,
	5, 6, 8, 7, 0, 1, 2, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 0, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 3, 3,
	5, 4, 6, 4, 4, 4, 4, 4, 3, 2,
	3, 4, 4, 3, 6, 6, 4, 4, 4, 4,
	4, 4, 3, 3, 2, 6, 2, 4, 4, 4,
	4, 4, 3, 7, 6, 5, 4, 2, 4, 3,
	4, 3, 3, 5, 2, 3, 3, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 1, 2, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 0,
	3, 1, 1, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 2, 6,
	1, 4, 6, 3, 2, 0, 3, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	5, 6, 4, 4, 3, 6, 6, 6, 8, 8,
	8, 8, 9, 4, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -242, -1, -2, -6, -7, -8, -9, -10, -12,
	-37, -13, -14, -15, -43, -44, -45, -50, -51, -52,
	-48, -47, -46, -16, -22, -17, -3, -4, 6, 7,
	-57, 9, 10, 30, -41, 119, -38, -39, -40, 122,
	121, 158, 123, 151, 53, 206, -53, 209, 210, -247,
	-158, 156, 157, 31, 32, 125, 204, 20, -244, 8,
	300, 120, 207, 153, 152, 26, 57, -243, 398, -120,
	15, -56, 5, -54, -248, -54, -54, -54, -54, -54,
	-209, -211, 57, 94, -152, 132, 75, 291, 128, -159,
	129, -151, 181, 34, 139, 138, 129, 129, 130, 132,
	291, 128, 166, 165, 129, -85, -170, 60, -163, 310,
	142, 342, 343, 206, 217, 211, 245, 233, 311, 344,
	143, 199, 231, 234, 278, 141, 192, 345, 174, 265,
	273, 202, 69, 209, 287, 346, 196, 198, 197, 186,
	203, 190, 154, 229, 222, 347, 319, 220, 28, 348,
	275, 250, 349, 315, 274, 221, 125, 350, 145, 139,
	168, 351, 251, 255, 352, 279, 353, 354, 355, 215,
	216, 356, 182, 281, 249, 33, 140, 312, 38, 163,
	282, 253, 357, 248, 243, 358, 359, 360, 361, 247,
	214, 242, 194, 42, 257, 256, 258, 195, 277, 236,
	362, 363, 146, 364, 365, 223, 18, 366, 367, 285,
	157, 368, 369, 370, 371, 161, 372, 373, 374, 276,
	252, 254, 375, 136, 376, 165, 377, 314, 378, 283,
	187, 219, 379, 147, 162, 156, 286, 380, 381, 382,
	383, 148, 384, 385, 386, 210, 200, 387, 388, 389,
	390, 191, 175, 289, 280, 41, 204, 262, 391, 213,
	138, 205, 392, 207, 171, 193, 268, 201, 240, 164,
	393, 394, 227, 228, 246, 212, 241, 208, 166, 167,
	158, 395, 288, 263, 316, 235, 232, 172, 396, 132,
	169, 170, 397, 269, 270, 173, 313, 284, 230, 264,
	129, 112, 234, 278, 119, 266, 267, 275, -203, 276,
	165, 168, -175, 129, -143, 265, 269, 270, 173, 60,
	130, 131, 33, 280, 279, 271, -170, -63, 123, 159,
	-85, -160, -160, -160, 268, 268, -160, -34, 205, 60,
	-2, -141, 132, 270, 134, 208, -127, 17, 16, -5,
	-3, -244, 6, 21, 22, -60, 43, 44, -55, -67,
	103, -68, -170, -92, 77, -97, 29, 60, -163, 24,
	-96, -93, -113, -111, -112, 112, 113, 114, 101, 102,
	109, 78, 115, -102, -100, -101, -103, 62, 61, 70,
	63, 64, 65, 66, 71, 72, 73, -164, -109, -244,
	47, 48, 128, 301, 302, 303, 304, 309, 149, 305,
	80, 37, 290, 299, 298, 297, 295, 296, 292, 294,
	293, 307, 308, 135, 291, 107, 300, -141, -141, 11,
	-78, -79, -85, -87, -170, -134, -174, 208, -137, 280,
	279, -113, -136, -164, -170, 278, 234, 277, -210, 94,
	-199, 60, -85, 130, -85, 300, -150, 135, -150, 166,
	165, -150, 86, -42, -85, -149, 135, -164, 60, -163,
	-149, -149, -149, -149, -149, -85, 116, -85, 60, 30,
	-161, -244, -165, -164, -162, 124, 150, 317, 76, 23,
	25, 260, 79, 112, 16, 20, 80, 111, 301, 119,
	51, 318, 292, 294, 290, 303, 304, 291, 266, 29,
	10, 320, 26, 152, 185, 22, 105, 121, 83, 84,
	85, 155, 24, 153, 73, 149, 323, 19, 54, 11,
	13, 324, 325, 14, 135, 134, 96, 183, 130, 49,
	8, 115, 27, 93, 45, 326, 35, 327, 328, 329,
	330, 47, 94, 17, 295, 296, 31, 331, 309, 160,
	107, 188, 52, 39, 77, 332, 333, 71, 334, 74,
	55, 75, 15, 184, 50, 335, 336, 337, 338, 95,
	122, 300, 48, 339, 128, 6, 306, 30, 151, 189,
	46, 340, 129, 82, 307, 308, 133, 72, 5, 34,
	32, 9, 53, 56, 297, 298, 299, 37, 81, 12,
	341, 291, 128, 60, 165, 168, 129, 166, 132, -161,
	-161, -205, 11, 96, 174, 171, 174, 171, 171, 172,
	-161, -146, -145, 167, 273, 274, 268, 272, 12, -69,
	94, 172, 268, 170, -161, -49, -2, -9, -7, -8,
	-2, 86, -160, -160, 30, 62, 40, -235, 57, -245,
	59, 129, -85, 119, 121, 124, 55, -128, 19, 31,
	-68, -170, -121, -124, -68, -120, -2, -54, 39, -58,
	21, 22, 68, 11, -167, 76, 75, 93, -166, 23,
	-164, 62, 116, -68, -94, 96, 77, 94, 95, 79,
	98, 97, 108, 101, 102, 103, 104, 105, 106, 107,
	99, 100, 111, 86, 87, 88, 89, 90, 91, 92,
	-142, -244, -112, -244, 117, 118, -97, -97, -97, -97,
	-97, -97, -97, -97, -244, -2, -107, -68, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -116,
	-68, -244, -249, -104, -244, -249, -104, -249, -104, -249,
	-244, -249, -104, -249, -104, -249, -249, -104, -249, -244,
	-244, -244, -244, -244, -244, -86, 27, -85, -71, -72,
	-73, -74, -88, -112, -244, -85, -85, -78, -246, 58,
	11, 56, -246, 58, 116, 58, -134, 208, -135, -138,
	281, 283, 86, -169, -164, 62, 29, 116, 30, 59,
	58, -85, -177, -181, -183, -182, -184, -179, -180, 231,
	234, 238, 236, 232, 237, 112, 235, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 30, 154,
	227, 228, 229, 230, 251, 252, 253, 254, 255, 256,
	257, 258, 211, 233, 311, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 223, 224, 225, -164, 23,
	132, 60, 77, 60, 60, 60, -85, 60, 58, 133,
	-78, 24, 55, -80, -85, 60, 60, 60, 60, -171,
	-170, -162, -161, -161, -150, -150, -161, -161, -161, -85,
	-85, -85, -85, -161, -147, 94, 12, -161, -147, -161,
	-161, 11, -144, 11, 96, -144, -68, -97, -148, 94,
	55, 60, -32, -31, -33, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 62, 59, -107,
	-85, -161, 169, 169, 129, 129, 175, -85, 9, 96,
	58, 18, 116, 58, -126, 25, 26, -127, -245, -60,
	-98, 40, 63, 66, -59, 46, -85, -68, -68, -105,
	71, 77, 72, 73, -166, 103, -171, -165, -162, -97,
	-106, -109, -112, 67, 96, 94, 95, 79, -97, -97,
	-97, -97, -97, -97, -97, -97, -97, -97, -97, -97,
	-97, -97, -97, -173, 60, 62, 60, -96, -96, -164,
	-58, -245, 58, -245, -2, -65, -67, -65, -245, -68,
	-68, -113, 62, -65, -113, 62, -65, -65, -65, -58,
	-114, -115, 81, -113, -245, -97, -164, -164, -65, -66,
	-65, -65, -65, -131, 161, -85, 30, 58, -81, -83,
	-82, -84, 45, 49, 51, 46, 47, 48, 52, -156,
	23, -71, -244, -89, 161, -90, 23, -172, 53, 134,
	54, -170, 62, -131, 56, -71, -85, -71, -87, -170,
	103, -137, -135, 58, 282, 284, 285, 55, 74, -68,
	-190, 111, -165, -171, -212, -213, -214, -165, 62, 63,
	-199, -200, -201, -215, 144, -221, 136, 138, 34, -202,
	145, 130, 35, 59, -178, -191, 263, -185, 57, -185,
	-185, 239, 231, 234, 232, -185, -185, -185, -185, -185,
	-189, 234, -189, -189, -189, -189, 232, 57, 57, -185,
	-185, -185, -193, 57, -193, 226, -193, -194, 57, -194,
	-194, -194, -168, 56, -125, -85, -161, 24, -161, -35,
	178, 150, 57, -85, -85, -85, 58, 60, 60, -206,
	11, 96, 62, -68, -85, -99, 23, -170, -170, -147,
	-64, 155, 62, -85, 58, 86, 59, -153, 124, 121,
	122, 126, 127, -224, 260, 120, 234, 69, 29, 15,
	301, 161, 316, 60, 162, -85, -85, -85, -85, -85,
	124, 121, 41, -68, -68, -124, -128, -140, 19, 11,
	37, 37, -65, 71, 72, 73, 116, -244, -106, -97,
	-97, -97, -64, 76, -245, -66, -68, -245, 58, -245,
	-245, 58, 56, 23, 11, 11, -245, 11, 11, -245,
	-245, -245, -65, -117, -115, 83, -68, -245, -245, 58,
	58, -245, -245, -245, -245, -95, 30, 37, -2, -244,
	-244, -134, -72, -73, -73, -72, -73, 45, 45, 45,
	50, 45, 50, 45, -82, -170, -245, -244, 334, -172,
	-90, 130, 130, 130, -91, 12, -71, -91, -91, 116,
	-138, -139, 286, 283, 289, 60, 62, 116, 58, -214,
	86, 57, 60, 35, -202, -202, -207, 60, -207, 35,
	-195, -187, -188, -196, -197, -186, 71, 77, 29, 55,
	260, 136, 35, 34, 69, -192, 264, 63, -189, -189,
	-185, -185, -185, 239, -185, -189, -190, 30, -190, -190,
	-190, -190, -189, -198, 62, -198, 63, -193, 63, 55,
	-164, -2, 23, -36, 8, 9, 10, -236, -237, -238,
	60, 96, 183, 184, 133, -161, -85, -161, -161, -91,
	60, 60, -144, -147, 334, -97, -31, -96, -160, -157,
	-230, -202, -234, -201, 137, 141, 144, 145, 136, 161,
	-157, -230, 144, -202, 145, 137, -154, -202, 133, 23,
	-157, -157, -208, 86, 161, -229, 56, 169, 260, 169,
	42, -85, -70, 11, 103, -165, -66, -64, 76, -97,
	-245, -67, -176, 112, 231, 154, 229, 222, 249, 236,
	262, 227, 263, -173, -176, -97, -97, -97, -97, 310,
	-120, 85, -68, 82, -97, -97, -133, 55, -134, -108,
	-110, -109, -244, -2, -129, -164, -132, -164, -91, -76,
	-75, 55, 56, -77, 55, -75, 45, 45, -132, -97,
	-90, -244, -244, -244, -120, -68, -91, 283, 287, 288,
	-213, -214, -217, -216, -164, -221, -207, -207, 57, 71,
	-97, 9, 35, 35, 62, 59, -190, -190, -189, -185,
	-190, 60, 112, -190, 59, 58, 59, 58, 59, 58,
	-85, -125, -125, 55, 59, 58, -177, 60, 60, 60,
	-85, -147, -97, 57, -199, -160, -207, -151, 60, 60,
	-160, 60, -164, 35, 60, -85, -164, -199, 60, -68,
	-164, -227, 313, -228, 60, -164, -164, -164, -91, -71,
	-245, -97, -245, -185, -185, -185, -194, -185, 216, -185,
	216, -245, -245, 19, 19, 19, 19, -244, -62, 306,
	-68, 58, 58, 28, -133, 58, -245, -245, -245, 58,
	116, -245, 58, -120, -68, 57, -68, -245, -90, -156,
	-130, -164, -130, -130, -127, 59, 58, -185, -130, -101,
	-190, -189, 62, -189, 63, 63, 57, -2, -85, -239,
	-240, -241, 69, 312, 77, 185, 186, 146, 187, 188,
	189, -238, -177, -177, -177, -199, -122, 149, 150, -168,
	-204, -202, 60, -155, 133, 23, 133, -122, -199, 27,
	-226, -225, -165, 57, 56, -118, 13, -189, 60, -97,
	-97, -97, -97, -97, -245, 62, -97, -97, 35, -110,
	37, -2, -244, -164, -164, -164, -127, -130, -89, -172,
	58, -245, -245, -245, -219, -218, 56, 140, 69, -216,
	-126, 59, -190, -190, 59, 59, -217, -125, 19, -125,
	-241, 62, 189, 185, 189, 189, 189, 189, 191, 59,
	-160, 60, 57, -207, 60, -164, -160, -122, -244, 58,
	86, -130, -85, -119, 14, 16, -245, -245, -245, -245,
	-61, 96, 313, -245, -245, 9, -108, -2, 116, 59,
	-90, -164, -218, 60, -208, 62, 147, 59, 176, -23,
	-2, -7, -8, -9, -10, -12, -37, -13, -14, -20,
	-21, -15, -43, -44, -53, -51, -52, -48, -47, -22,
	-17, -24, 80, 135, 206, 190, 190, 181, 182, -160,
	-217, -168, -160, -222, -223, 161, -225, -214, 59, -68,
	-107, -245, 311, 52, 314, -134, -245, -164, 63, -85,
	-220, -219, 177, -125, -68, -68, -26, -23, 59, 57,
	-245, 58, -164, -229, 42, 312, 315, 57, -123, 179,
	180, -27, -28, 81, 82, 398, -220, -217, -223, 37,
	-227, 42, -130, -125, 60, 60, 85, 83, -28, -68,
	-25, -19, -2, -7, -8, -9, -10, -20, -21, -22,
	-18, 206, 85, -23, 59, 163, 313, 59, -11, -18,
	-10, -7, -8, -9, 80, -25, 82, 398, -25, -220,
	164, 314, -232, -233, 55, -125, 398, -25, 85, 83,
	-29, -19, -30, 84, 398, -244, 315, -233, 55, -232,
	55, 10, 9, 85, 398, 135, -25, 85, 83, -30,
	-68, 85, -97, 160, -231, 148, 143, 146, 30, -231,
	80, 398, 135, -25, 82, -245, -245, 142, 29, 71,
	85, 398, -25, 135, 85, 398, 135,
}
var yyDef = [...]int{

	27, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 750, 0, 500, 500,
	500, 500, 500, 500, 0, -2, 362, 363, 364, 0,
	0, 0, 0, -2, 475, 476, 477, 479, 480, 489,
	-2, 1151, 1151, 0, 0, 1151, 0, 0, 0, 39,
	40, 801, 0, 492, 481, 482, 1149, 1, 3, 758,
	0, 0, 504, 507, 502, 0, 801, 801, 0, 0,
	72, 73, 0, 0, 0, 0, 0, 799, 799, 0,
	799, 821, 0, 817, 818, 819, 0, 797, 0, 797,
	797, 797, 797, 797, 0, 419, 577, 828, 829, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	0, 0, 0, 1152, 0, 1152, 1152, 434, 0, 436,
	0, 0, 0, 1152, 0, 447, 0, 0, 454, 1152,
	320, 321, 322, 472, 473, 460, 474, 0, 0, 0,
	493, 494, 495, 496, 1151, 1151, 499, 156, 0, 176,
	33, 0, 0, 0, 802, 478, 762, 0, 0, 750,
	35, 0, 500, 505, 506, 510, 508, 509, 501, 0,
	519, 523, 0, 586, 0, 591, 593, -2, -2, 0,
	628, 629, 630, 631, 632, 0, 0, 0, 0, 0,
	0, 0, 0, 656, 657, 658, 659, 735, 736, 737,
	738, 739, 740, 741, 742, 595, 596, 732, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 694, 694, 694, 694, 694, 694, 694, 694,
	694, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 52, 577, 56, 0, 1126, 783, -2,
	-2, 0, 0, 732, 0, -2, 972, -2, 0, 0,
	202, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 408, 0, 0, 0, 0, 824, 825,
	0, 0, 0, 0, 0, 418, 0, 420, 1152, 1152,
	423, 1153, 1154, 826, 827, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 799, 799, 1152, 1152, 1152, 0, 0, 0, 432,
	433, 0, 339, 340, 1152, 466, 1152, 466, 1152, 1152,
	442, 0, 463, 463, 461, 462, 457, 458, 0, 449,
	0, 469, 451, 452, 455, 483, -2, 486, 487, 488,
	-2, 0, 497, 498, 0, 158, 0, 175, 0, 34,
	1150, 0, 1152, 0, 0, 0, 0, 28, 0, 0,
	759, 0, 751, 752, 755, 758, 33, 507, 0, 513,
	511, 512, 503, 0, 520, 0, 0, 0, 524, 0,
	526, 527, 0, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 614, 615, 616, 617, 618, 619,
	592, 0, 606, 0, 0, 0, 648, 649, 650, 651,
	652, 653, 654, 0, 510, 33, 0, 626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 0,
	724, 0, 677, 686, 0, 678, 687, 679, 688, 680,
	0, 681, 689, 682, 690, 683, 684, 691, 685, 0,
	0, 0, 515, 0, 0, 54, 0, 576, 0, 530,
	532, 533, 534, -2, 0, 580, -2, 0, 0, 0,
	46, 47, 0, 0, 0, 0, 57, 1126, 59, 60,
	0, 0, 0, 296, 792, 793, 794, 0, 790, 351,
	0, 0, 207, 284, 215, 216, 217, 277, 219, 277,
	277, 0, 277, 277, 277, 277, 277, 293, 293, 293,
	293, 293, 260, 261, 262, 263, 264, 0, 0, 237,
	277, 277, 277, 241, 267, 268, 269, 270, 271, 272,
	273, 274, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 279, 279, 279, 281, 281, 281, 281, 822, 71,
	0, 1152, 0, 1152, 0, 0, 198, 129, 0, 0,
	411, 798, 0, 413, 48, 414, 415, 416, 417, 578,
	830, 831, 421, 422, 0, 0, 426, 427, 428, 429,
	430, 431, 341, 437, 438, 0, 0, 439, 440, 441,
	446, 0, 545, 0, 0, 466, 448, 620, 450, 0,
	0, 490, 157, 160, 0, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 159, 177, 0,
	0, 387, 0, 0, 0, 0, 0, 0, 763, 0,
	0, 0, 0, 0, 754, 756, 757, 762, 36, 510,
	0, 743, 0, 0, 0, 514, 31, 587, 588, 590,
	607, 0, 609, 611, 525, 521, 0, 733, -2, 597,
	598, 622, 623, 624, 0, 0, 0, 0, 620, 602,
	0, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 647, 708, 709, 0, 645, 646, 655,
	515, 625, 0, 781, 33, 0, 517, 0, 664, 0,
	0, 630, 735, 0, 630, 735, 0, 0, 0, 0,
	730, 727, 0, 0, 695, 0, 0, 0, 0, 0,
	516, 0, 0, 0, 0, 575, 0, 0, 0, 0,
	0, 0, 565, 0, 0, 568, 0, 0, 0, 0,
	562, 0, 0, 538, 1064, 540, 0, 580, 0, 0,
	0, 563, 564, 584, 0, 584, 51, 584, 53, 0,
	579, 784, 58, 0, 0, 63, 64, 785, 786, 787,
	788, 0, 733, 0, 199, 352, 354, 357, 358, 359,
	203, 204, 205, 0, 0, 333, 0, 0, 327, 327,
	0, 323, 324, 201, 206, 286, 285, 218, 0, 293,
	293, 277, 277, 277, 277, 246, 293, 249, 252, 253,
	296, 0, 296, 296, 296, 296, 293, 0, 0, 238,
	239, 240, 229, 0, 230, 279, 232, 233, 0, 234,
	235, 236, 0, 0, 0, 0, 77, 800, 78, 0,
	130, 131, 81, 0, 409, 1152, 0, 1152, 1152, 584,
	0, 0, 467, 468, 463, 466, 0, 464, 465, 445,
	456, 0, 470, 453, 0, 0, 178, 1151, -2, 396,
	814, 396, 396, 380, 313, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 0, 190, 389, 391, 390, 394,
	0, 0, 0, 760, 761, 753, 29, 0, 795, 796,
	744, 745, 528, 608, 610, 612, 0, 515, 599, 620,
	603, 0, 600, 0, 594, 0, 627, -2, 0, 662,
	663, 0, 0, 0, 0, 0, 701, 0, 0, 702,
	0, 673, 750, 0, 728, 0, 0, 676, 696, 0,
	0, 697, 698, 699, 700, 775, 0, 0, -2, 0,
	0, 584, 531, 557, 559, 0, 554, 566, 567, 569,
	0, 571, 0, 573, 574, 535, 537, 0, 0, 580,
	544, 0, 0, 0, 750, 0, 584, 44, 45, 0,
	61, 62, 0, 0, 68, 297, 298, 0, 0, 355,
	0, 0, 0, 315, 327, 327, 318, 328, 319, 0,
	208, 209, 210, 211, 212, 213, 288, 0, 0, 0,
	292, 0, 300, 302, 0, 214, 287, 0, 296, 296,
	293, 244, 245, 277, 250, 296, 254, 0, 255, 256,
	257, 258, 296, 0, 275, 0, 0, 231, 0, 0,
	823, -2, 71, 0, 132, 133, 134, 0, 82, 83,
	0, 0, 0, 0, 0, 412, 49, 424, 425, 435,
	342, 343, 466, 444, 0, 621, 161, 162, 365, 0,
	1151, 327, 0, 381, 397, 398, 399, 400, 401, 402,
	0, 1151, 399, 0, 400, 0, 0, 0, 815, 816,
	0, 0, 0, 314, 0, 193, 0, 0, 0, 0,
	764, 30, 584, 0, 522, 734, 0, 601, 0, 604,
	660, 518, 0, 277, 277, 713, 277, 281, 716, 277,
	718, 277, 721, 0, 0, 0, 0, 0, 0, 0,
	725, 675, 731, 0, 0, 0, 37, 0, 775, 765,
	777, 779, 0, 33, 0, 771, 0, 549, 750, 551,
	558, 0, 0, 552, 0, 553, 570, 572, 0, -2,
	543, 0, 0, 0, 758, 585, 43, 65, 66, 67,
	353, 356, 0, 329, 277, 332, 316, 317, 0, 289,
	290, 0, 299, 301, 303, 278, 242, 243, 296, 251,
	247, 294, 295, 259, 293, 0, 293, 0, 282, 0,
	0, 75, 0, 0, 89, 0, 85, 0, 0, 0,
	410, 443, 546, 0, 384, 368, 822, 325, 361, 369,
	370, 375, 376, 0, 0, 372, 0, 384, 0, 383,
	0, 388, 0, 191, 192, 0, 0, 393, 746, 529,
	661, 605, 665, 710, 293, 714, 715, 717, 719, 720,
	722, 667, 666, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 38, 0, 780, -2, 0, 0,
	0, 55, 0, 758, 555, 0, 560, 580, 541, 0,
	0, 547, 0, 0, 42, 305, 0, 755, 0, 291,
	248, 296, 276, 296, 0, 0, 0, -2, 0, 71,
	90, 91, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 84, 86, 87, 88, 0, 1151, 385, 0, 0,
	327, 326, 382, 0, 812, 813, 0, 1151, 384, 0,
	194, 195, 0, 0, 0, 748, 0, 711, 712, 0,
	0, 0, 0, 703, 674, 726, 0, 0, 0, 778,
	0, -2, 0, 773, 772, 550, 41, 0, 539, 580,
	0, 581, 582, 583, 304, 308, 0, 313, 0, 330,
	331, 0, 265, 266, 280, 283, 0, 76, 0, 0,
	92, 93, 94, 95, 97, 98, 0, 0, 0, 1151,
	367, 386, 0, 822, 371, 377, 378, 1151, 0, 0,
	0, 0, 395, 32, 0, 0, 668, 670, 669, 671,
	0, 0, 0, 692, 693, 0, 768, 33, 0, 556,
	542, 548, 309, 310, 0, 312, 0, 306, 0, 71,
	-2, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 0, 0, 0, 99, 100, 101, 102, 366,
	0, 0, 379, 0, 404, 0, 196, 197, 190, 749,
	747, 672, 0, 0, 0, 776, -2, 774, 311, 0,
	74, 307, 135, 80, 0, 0, 0, 126, 306, 0,
	403, 0, 0, 193, 704, 0, 707, 0, 71, 0,
	0, 0, 146, 0, 0, 0, 373, 0, 405, 0,
	392, 705, 0, 0, 136, 137, 0, 0, 147, 0,
	0, 179, -2, 182, 183, 184, 185, 186, 187, 188,
	189, 0, 125, 127, 306, 0, 0, 334, 71, 138,
	139, 140, 141, 142, 144, 0, 0, 0, 0, 374,
	0, 0, 335, 336, 0, 79, 0, 0, 0, 0,
	0, 180, 153, 0, 0, 0, 706, 337, 0, 338,
	0, 0, 0, 0, 148, 149, 0, 0, 0, 154,
	0, 143, 0, 0, 344, 346, 347, 0, 0, 345,
	145, 0, 151, 0, 0, 406, 407, 348, 349, 350,
	0, 0, 0, 150, 0, 155, 152,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 106, 98, 3,
	57, 59, 103, 101, 58, 102, 116, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 398,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 115, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:372
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:377
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:408
		{
			setParseTree(yylex, nil)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:414
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:432
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:439
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:459
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:466
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:478
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:490
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:506
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:510
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:518
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:524
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:528
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:542
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:557
		{
			yyVAL.partitions = nil
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:561
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:567
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:589
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:595
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:599
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:603
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:609
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:613
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:617
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:621
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.str = SessionStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.str = GlobalStr
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:636
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 74:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:656
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:660
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 76:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:664
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:668
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:676
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 79:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:684
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 80:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:688
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:693
		{
			yyVAL.procedureParams = nil
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:717
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:721
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:730
		{
			yyVAL.characteristics = nil
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:744
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:754
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:774
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:778
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:782
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:792
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:819
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:829
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:834
		{
			yyVAL.str = ""
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:838
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.str = BeforeStr
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.str = AfterStr
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.str = InsertStr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.str = UpdateStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.str = DeleteStr
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:867
		{
			yyVAL.triggerOrder = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:871
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:875
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:891
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:897
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 145:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:901
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:917
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:923
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 150:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:928
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:933
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 152:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:939
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:951
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:957
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:963
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:967
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:973
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:977
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:987
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:993
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1016
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.exprs = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.exprs = nil
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1029
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1039
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1045
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1073
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1089
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1095
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1101
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1112
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1123
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1129
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1134
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1138
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1142
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1157
		{
			yyVAL.columnType = ColumnType{}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1161
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1206
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1217
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1228
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1233
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1301
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1313
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1349
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1381
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1401
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1409
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1456
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1491
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1496
		{
			yyVAL.sqlVal = nil
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1500
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1505
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1509
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1517
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1521
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1527
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1535
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1544
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1548
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1555
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1565
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1571
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1577
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1582
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1586
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1590
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1595
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1599
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1603
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1609
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.colKeyOpt = colKey
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1633
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1637
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1642
		{
			yyVAL.indexOptions = nil
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1666
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1677
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1681
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1691
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1695
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = yyDollar[1].str
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1767
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 334:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1778
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 335:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1782
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 336:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1786
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 337:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1790
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 338:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1794
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1809
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1839
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1843
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1847
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1851
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1864
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = yyDollar[1].str
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1894
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1914
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1918
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 367:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1925
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1932
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1936
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1940
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1944
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1948
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 373:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 374:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1966
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 377:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1970
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 378:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1974
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 379:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1981
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1987
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1991
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 382:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1997
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2002
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2007
		{
			yyVAL.columnOrder = nil
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2015
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2021
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2027
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2039
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2049
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2053
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 392:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2057
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2070
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 395:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2084
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2097
		{
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
		}
	case 403:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2110
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 406:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2126
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2130
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2136
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2146
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2154
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2162
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2166
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2174
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2182
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2190
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2198
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2212
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2223
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2228
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2236
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2240
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2245
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2249
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2253
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2257
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2261
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2265
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2269
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2273
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2277
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2281
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2285
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2289
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2293
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2297
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2301
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2305
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2309
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2313
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2318
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2328
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2332
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2340
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2354
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2385
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2407
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.str = "full "
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2441
		{
			yyVAL.showFilter = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2455
		{
			yyVAL.showFilter = nil
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2459
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = SessionStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = GlobalStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2489
		{
			yyVAL.statement = &Begin{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.statement = &Begin{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.statement = &Commit{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.statement = &Rollback{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2554
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.statement = &OtherRead{}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2572
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2576
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2586
		{
			setAllowComments(yylex, true)
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2596
		{
			yyVAL.bytes2 = nil
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.str = UnionStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.str = UnionAllStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2614
		{
			yyVAL.str = UnionDistinctStr
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2619
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.str = SQLCacheStr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2632
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2640
		{
			yyVAL.str = DistinctStr
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2645
		{
			yyVAL.str = ""
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.str = StraightJoinHint
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2654
		{
			yyVAL.selectExprs = nil
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2686
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2691
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2699
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2711
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2715
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2725
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2735
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2739
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2749
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2755
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2760
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2775
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2779
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = nil
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2812
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2822
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2835
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2839
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2843
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2853
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2855
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2859
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2865
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2870
		{
			yyVAL.empty = struct{}{}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.empty = struct{}{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.str = JoinStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2887
		{
			yyVAL.str = JoinStr
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2891
		{
			yyVAL.str = JoinStr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2897
		{
			yyVAL.str = StraightJoinStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.str = LeftJoinStr
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2907
		{
			yyVAL.str = LeftJoinStr
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.str = RightJoinStr
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.str = RightJoinStr
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			yyVAL.str = NaturalJoinStr
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2925
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2949
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2960
		{
			yyVAL.indexHints = nil
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2964
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2968
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2972
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = nil
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3017
		{
			yyVAL.str = ""
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3021
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3037
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3041
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3045
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3073
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.str = IsNullStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			yyVAL.str = IsNotNullStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3087
		{
			yyVAL.str = IsTrueStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3091
		{
			yyVAL.str = IsNotTrueStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.str = IsFalseStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3099
		{
			yyVAL.str = IsNotFalseStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.str = EqualStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.str = LessThanStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.str = GreaterThanStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.str = LessEqualStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.str = GreaterEqualStr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.str = NotEqualStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3134
		{
			yyVAL.expr = nil
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3138
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3158
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3178
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3250
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3254
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3258
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3262
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3266
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3274
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3288
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3292
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3296
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3314
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3328
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3332
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3336
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3340
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3344
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3348
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 668:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3352
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 669:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3356
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 670:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3360
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 671:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3364
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 672:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3368
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3372
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 674:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3376
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3380
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3384
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3394
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3398
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3402
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3407
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3432
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3437
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3441
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3445
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3450
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3455
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3460
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 692:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3464
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 693:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3468
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3478
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3500
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3504
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3508
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3514
		{
			yyVAL.str = ""
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3518
		{
			yyVAL.str = BooleanModeStr
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3522
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 706:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3526
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3530
		{
			yyVAL.str = QueryExpansionStr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3536
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3540
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3546
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3550
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3554
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3558
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3562
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3566
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3572
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3576
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3580
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3584
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3588
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3592
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3601
		{
			yyVAL.expr = nil
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3610
		{
			yyVAL.str = string("")
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3614
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3620
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3624
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3630
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = nil
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3639
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3645
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3649
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3653
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3659
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3663
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3667
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3671
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3675
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3679
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3683
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3687
		{
			yyVAL.expr = &NullVal{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3693
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3697
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3701
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3706
		{
			yyVAL.exprs = nil
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3710
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3715
		{
			yyVAL.expr = nil
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3719
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3724
		{
			yyVAL.orderBy = nil
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3728
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3734
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3738
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3744
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3749
		{
			yyVAL.str = AscScr
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3753
		{
			yyVAL.str = AscScr
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3757
		{
			yyVAL.str = DescScr
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3762
		{
			yyVAL.limit = nil
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3766
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3770
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3774
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3779
		{
			yyVAL.str = ""
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3783
		{
			yyVAL.str = ForUpdateStr
		}
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3787
		{
			yyVAL.str = ShareModeStr
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3800
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3804
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3808
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 768:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3813
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3817
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 770:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3821
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3828
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3832
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3836
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3840
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3845
		{
			yyVAL.setExprs = nil
		}
	case 776:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3849
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3855
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3859
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3865
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3869
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3875
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3881
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3891
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3895
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3901
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3905
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3909
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3913
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3920
		{
			yyVAL.bytes = []byte("charset")
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3927
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3931
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3935
		{
			yyVAL.expr = &Default{}
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3944
		{
			yyVAL.byt = 0
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3946
		{
			yyVAL.byt = 1
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3949
		{
			yyVAL.byt = 0
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3951
		{
			yyVAL.byt = 1
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3954
		{
			yyVAL.str = ""
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3956
		{
			yyVAL.str = IgnoreStr
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3960
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3962
		{
			yyVAL.empty = struct{}{}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3964
		{
			yyVAL.empty = struct{}{}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3966
		{
			yyVAL.empty = struct{}{}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3968
		{
			yyVAL.empty = struct{}{}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3970
		{
			yyVAL.empty = struct{}{}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3972
		{
			yyVAL.empty = struct{}{}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3974
		{
			yyVAL.empty = struct{}{}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3976
		{
			yyVAL.empty = struct{}{}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3980
		{
			yyVAL.empty = struct{}{}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3982
		{
			yyVAL.empty = struct{}{}
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3985
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3987
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3989
		{
			yyVAL.empty = struct{}{}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3993
		{
			yyVAL.str = UniqueStr
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3995
		{
			yyVAL.str = FulltextStr
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3997
		{
			yyVAL.str = SpatialStr
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4000
		{
			yyVAL.str = ""
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4002
		{
			yyVAL.str = yyDollar[1].str
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4005
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4007
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4011
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4015
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4022
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4028
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4032
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4039
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4382
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4391
		{
			decNesting(yylex)
		}
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4396
		{
			skipToEnd(yylex)
		}
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4401
		{
			skipToEnd(yylex)
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4405
		{
			skipToEnd(yylex)
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4409
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
