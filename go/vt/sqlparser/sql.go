// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "fmt"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

func yyOldPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).OldPosition
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:63
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ddls                     []*DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	int                      int
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	statements               Statements
	partitions               Partitions
	colName                  *ColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	subquery                 *Subquery
	simpleTableExpr          SimpleTableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	asOf                     *AsOf
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolean                  bool
	sqlVal                   *SQLVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	assignExprs              AssignmentExprs
	assignExpr               *AssignmentExpr
	setVarExprs              SetVarExprs
	setVarExpr               *SetVarExpr
	setScope                 SetScope
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	columnOrder              *ColumnOrder
	triggerOrder             *TriggerOrder
	colKeyOpt                ColumnKeyOption
	optVal                   Expr
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexColumn              *IndexColumn
	indexColumns             []*IndexColumn
	constraintDefinition     *ConstraintDefinition
	constraintInfo           ConstraintInfo
	ReferenceAction          ReferenceAction
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	over                     *Over
	caseStatementCases       []CaseStatementCase
	caseStatementCase        CaseStatementCase
	ifStatementConditions    []IfStatementCondition
	ifStatementCondition     IfStatementCondition
	signalInfo               SignalInfo
	signalInfos              []SignalInfo
	signalConditionItemName  SignalConditionItemName
	declareHandlerAction     DeclareHandlerAction
	declareHandlerCondition  DeclareHandlerCondition
	declareHandlerConditions []DeclareHandlerCondition
	procedureParam           ProcedureParam
	procedureParams          []ProcedureParam
	characteristic           Characteristic
	characteristics          []Characteristic
	Fields                   *Fields
	Lines                    *Lines
	EnclosedBy               *EnclosedBy
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const OPTIONALLY = 57384
const STARTING = 57385
const UNIQUE = 57386
const KEY = 57387
const SYSTEM_TIME = 57388
const VALUES = 57389
const LAST_INSERT_ID = 57390
const SQL_CALC_FOUND_ROWS = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const USING = 57409
const ID = 57410
const HEX = 57411
const STRING = 57412
const INTEGRAL = 57413
const FLOAT = 57414
const HEXNUM = 57415
const VALUE_ARG = 57416
const LIST_ARG = 57417
const COMMENT = 57418
const COMMENT_KEYWORD = 57419
const BIT_LITERAL = 57420
const NULL = 57421
const TRUE = 57422
const FALSE = 57423
const OFF = 57424
const OR = 57425
const AND = 57426
const NOT = 57427
const BETWEEN = 57428
const CASE = 57429
const WHEN = 57430
const THEN = 57431
const ELSE = 57432
const ELSEIF = 57433
const END = 57434
const LE = 57435
const GE = 57436
const NE = 57437
const NULL_SAFE_EQUAL = 57438
const IS = 57439
const LIKE = 57440
const REGEXP = 57441
const IN = 57442
const SHIFT_LEFT = 57443
const SHIFT_RIGHT = 57444
const DIV = 57445
const MOD = 57446
const UNARY = 57447
const COLLATE = 57448
const BINARY = 57449
const UNDERSCORE_BINARY = 57450
const UNDERSCORE_UTF8MB4 = 57451
const INTERVAL = 57452
const JSON_EXTRACT_OP = 57453
const JSON_UNQUOTE_EXTRACT_OP = 57454
const CREATE = 57455
const ALTER = 57456
const DROP = 57457
const RENAME = 57458
const ANALYZE = 57459
const ADD = 57460
const FLUSH = 57461
const MODIFY = 57462
const CHANGE = 57463
const SCHEMA = 57464
const TABLE = 57465
const INDEX = 57466
const INDEXES = 57467
const VIEW = 57468
const TO = 57469
const IGNORE = 57470
const IF = 57471
const PRIMARY = 57472
const COLUMN = 57473
const SPATIAL = 57474
const FULLTEXT = 57475
const KEY_BLOCK_SIZE = 57476
const CHECK = 57477
const ACTION = 57478
const CASCADE = 57479
const CONSTRAINT = 57480
const FOREIGN = 57481
const NO = 57482
const REFERENCES = 57483
const RESTRICT = 57484
const FIRST = 57485
const AFTER = 57486
const SHOW = 57487
const DESCRIBE = 57488
const EXPLAIN = 57489
const DATE = 57490
const ESCAPE = 57491
const REPAIR = 57492
const OPTIMIZE = 57493
const TRUNCATE = 57494
const FORMAT = 57495
const MAXVALUE = 57496
const PARTITION = 57497
const REORGANIZE = 57498
const LESS = 57499
const THAN = 57500
const PROCEDURE = 57501
const TRIGGER = 57502
const TRIGGERS = 57503
const FUNCTION = 57504
const STATUS = 57505
const VARIABLES = 57506
const WARNINGS = 57507
const SEQUENCE = 57508
const EACH = 57509
const ROW = 57510
const BEFORE = 57511
const FOLLOWS = 57512
const PRECEDES = 57513
const DEFINER = 57514
const INVOKER = 57515
const INOUT = 57516
const OUT = 57517
const DETERMINISTIC = 57518
const CONTAINS = 57519
const READS = 57520
const MODIFIES = 57521
const SQL = 57522
const SECURITY = 57523
const CLASS_ORIGIN = 57524
const SUBCLASS_ORIGIN = 57525
const MESSAGE_TEXT = 57526
const MYSQL_ERRNO = 57527
const CONSTRAINT_CATALOG = 57528
const CONSTRAINT_SCHEMA = 57529
const CONSTRAINT_NAME = 57530
const CATALOG_NAME = 57531
const SCHEMA_NAME = 57532
const TABLE_NAME = 57533
const COLUMN_NAME = 57534
const CURSOR_NAME = 57535
const SIGNAL = 57536
const RESIGNAL = 57537
const SQLSTATE = 57538
const DECLARE = 57539
const CONDITION = 57540
const CURSOR = 57541
const CONTINUE = 57542
const EXIT = 57543
const UNDO = 57544
const HANDLER = 57545
const FOUND = 57546
const SQLWARNING = 57547
const SQLEXCEPTION = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const SAVEPOINT = 57554
const WORK = 57555
const RELEASE = 57556
const BIT = 57557
const TINYINT = 57558
const SMALLINT = 57559
const MEDIUMINT = 57560
const INT = 57561
const INTEGER = 57562
const BIGINT = 57563
const INTNUM = 57564
const REAL = 57565
const DOUBLE = 57566
const FLOAT_TYPE = 57567
const DECIMAL = 57568
const NUMERIC = 57569
const DEC = 57570
const FIXED = 57571
const PRECISION = 57572
const TIME = 57573
const TIMESTAMP = 57574
const DATETIME = 57575
const YEAR = 57576
const CHAR = 57577
const VARCHAR = 57578
const BOOL = 57579
const CHARACTER = 57580
const VARBINARY = 57581
const NCHAR = 57582
const NVARCHAR = 57583
const NATIONAL = 57584
const VARYING = 57585
const TEXT = 57586
const TINYTEXT = 57587
const MEDIUMTEXT = 57588
const LONGTEXT = 57589
const LONG = 57590
const BLOB = 57591
const TINYBLOB = 57592
const MEDIUMBLOB = 57593
const LONGBLOB = 57594
const JSON = 57595
const ENUM = 57596
const GEOMETRY = 57597
const POINT = 57598
const LINESTRING = 57599
const POLYGON = 57600
const GEOMETRYCOLLECTION = 57601
const MULTIPOINT = 57602
const MULTILINESTRING = 57603
const MULTIPOLYGON = 57604
const NULLX = 57605
const AUTO_INCREMENT = 57606
const APPROXNUM = 57607
const SIGNED = 57608
const UNSIGNED = 57609
const ZEROFILL = 57610
const LOCAL = 57611
const COLLATION = 57612
const DATABASES = 57613
const SCHEMAS = 57614
const TABLES = 57615
const FULL = 57616
const PROCESSLIST = 57617
const COLUMNS = 57618
const FIELDS = 57619
const ENGINES = 57620
const PLUGINS = 57621
const NAMES = 57622
const CHARSET = 57623
const GLOBAL = 57624
const SESSION = 57625
const ISOLATION = 57626
const LEVEL = 57627
const READ = 57628
const WRITE = 57629
const ONLY = 57630
const REPEATABLE = 57631
const COMMITTED = 57632
const UNCOMMITTED = 57633
const SERIALIZABLE = 57634
const CURRENT_TIMESTAMP = 57635
const DATABASE = 57636
const CURRENT_DATE = 57637
const CURRENT_USER = 57638
const CURRENT_TIME = 57639
const LOCALTIME = 57640
const LOCALTIMESTAMP = 57641
const UTC_DATE = 57642
const UTC_TIME = 57643
const UTC_TIMESTAMP = 57644
const REPLACE = 57645
const CONVERT = 57646
const CAST = 57647
const SUBSTR = 57648
const SUBSTRING = 57649
const GROUP_CONCAT = 57650
const SEPARATOR = 57651
const TIMESTAMPADD = 57652
const TIMESTAMPDIFF = 57653
const OVER = 57654
const WINDOW = 57655
const GROUPING = 57656
const GROUPS = 57657
const AVG = 57658
const BIT_AND = 57659
const BIT_OR = 57660
const BIT_XOR = 57661
const COUNT = 57662
const JSON_ARRAYAGG = 57663
const JSON_OBJECTAGG = 57664
const MAX = 57665
const MIN = 57666
const STDDEV_POP = 57667
const STDDEV = 57668
const STD = 57669
const STDDEV_SAMP = 57670
const SUM = 57671
const VAR_POP = 57672
const VARIANCE = 57673
const VAR_SAMP = 57674
const CUME_DIST = 57675
const DENSE_RANK = 57676
const FIRST_VALUE = 57677
const LAG = 57678
const LAST_VALUE = 57679
const LEAD = 57680
const NTH_VALUE = 57681
const NTILE = 57682
const ROW_NUMBER = 57683
const PERCENT_RANK = 57684
const RANK = 57685
const MATCH = 57686
const AGAINST = 57687
const BOOLEAN = 57688
const LANGUAGE = 57689
const WITH = 57690
const QUERY = 57691
const EXPANSION = 57692
const UNUSED = 57693
const ARRAY = 57694
const DESCRIPTION = 57695
const EMPTY = 57696
const EXCEPT = 57697
const JSON_TABLE = 57698
const LATERAL = 57699
const MEMBER = 57700
const RECURSIVE = 57701
const ACTIVE = 57702
const ADMIN = 57703
const BUCKETS = 57704
const CLONE = 57705
const COMPONENT = 57706
const DEFINITION = 57707
const ENFORCED = 57708
const EXCLUDE = 57709
const FOLLOWING = 57710
const GEOMCOLLECTION = 57711
const GET_MASTER_PUBLIC_KEY = 57712
const HISTOGRAM = 57713
const HISTORY = 57714
const INACTIVE = 57715
const INVISIBLE = 57716
const LOCKED = 57717
const MASTER_COMPRESSION_ALGORITHMS = 57718
const MASTER_PUBLIC_KEY_PATH = 57719
const MASTER_TLS_CIPHERSUITES = 57720
const MASTER_ZSTD_COMPRESSION_LEVEL = 57721
const NESTED = 57722
const NETWORK_NAMESPACE = 57723
const NOWAIT = 57724
const NULLS = 57725
const OJ = 57726
const OLD = 57727
const OPTIONAL = 57728
const ORDINALITY = 57729
const ORGANIZATION = 57730
const OTHERS = 57731
const PATH = 57732
const PERSIST = 57733
const PERSIST_ONLY = 57734
const PRECEDING = 57735
const PRIVILEGE_CHECKS_USER = 57736
const PROCESS = 57737
const RANDOM = 57738
const REFERENCE = 57739
const REQUIRE_ROW_FORMAT = 57740
const RESOURCE = 57741
const RESPECT = 57742
const RESTART = 57743
const RETAIN = 57744
const REUSE = 57745
const ROLE = 57746
const SECONDARY = 57747
const SECONDARY_ENGINE = 57748
const SECONDARY_LOAD = 57749
const SECONDARY_UNLOAD = 57750
const SKIP = 57751
const SRID = 57752
const THREAD_PRIORITY = 57753
const TIES = 57754
const UNBOUNDED = 57755
const VCPU = 57756
const VISIBLE = 57757
const SYSTEM = 57758
const INFILE = 57759

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"SQL_CALC_FOUND_ROWS",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"RESIGNAL",
	"SQLSTATE",
	"DECLARE",
	"CONDITION",
	"CURSOR",
	"CONTINUE",
	"EXIT",
	"UNDO",
	"HANDLER",
	"FOUND",
	"SQLWARNING",
	"SQLEXCEPTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"WORK",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"LOCAL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 46,
	-2, 4,
	-1, 40,
	141, 917,
	-2, 115,
	-1, 47,
	180, 491,
	181, 491,
	-2, 481,
	-1, 54,
	1, 1323,
	435, 1323,
	-2, 517,
	-1, 436,
	127, 927,
	-2, 921,
	-1, 437,
	127, 928,
	-2, 922,
	-1, 538,
	97, 1146,
	127, 1146,
	-2, 877,
	-1, 539,
	97, 1247,
	127, 1247,
	-2, 878,
	-1, 544,
	97, 1166,
	127, 1166,
	-2, 879,
	-1, 545,
	97, 1205,
	127, 1205,
	-2, 880,
	-1, 546,
	97, 1206,
	127, 1206,
	-2, 881,
	-1, 547,
	97, 1101,
	127, 1101,
	-2, 885,
	-1, 549,
	97, 1184,
	127, 1184,
	-2, 887,
	-1, 761,
	5, 46,
	-2, 511,
	-1, 765,
	5, 46,
	-2, 510,
	-1, 978,
	1, 571,
	5, 571,
	12, 571,
	13, 571,
	14, 571,
	15, 571,
	17, 571,
	19, 571,
	30, 571,
	31, 571,
	56, 571,
	57, 571,
	58, 571,
	59, 571,
	60, 571,
	62, 571,
	63, 571,
	66, 571,
	67, 571,
	69, 571,
	70, 571,
	435, 571,
	-2, 601,
	-1, 982,
	67, 63,
	69, 63,
	-2, 67,
	-1, 1173,
	127, 930,
	-2, 926,
	-1, 1336,
	68, 352,
	-2, 1067,
	-1, 1339,
	68, 348,
	71, 348,
	-2, 1002,
	-1, 1340,
	68, 349,
	71, 349,
	-2, 1012,
	-1, 1421,
	68, 426,
	71, 426,
	-2, 392,
	-1, 1467,
	5, 47,
	-2, 667,
	-1, 1528,
	5, 46,
	-2, 851,
	-1, 1630,
	5, 46,
	-2, 81,
	-1, 1783,
	1, 622,
	5, 622,
	12, 622,
	13, 622,
	14, 622,
	15, 622,
	17, 622,
	19, 622,
	30, 622,
	31, 622,
	56, 622,
	57, 622,
	58, 622,
	59, 622,
	60, 622,
	62, 622,
	63, 622,
	66, 622,
	67, 622,
	69, 622,
	70, 622,
	435, 622,
	-2, 601,
	-1, 1907,
	5, 47,
	-2, 852,
	-1, 1940,
	5, 46,
	-2, 81,
	-1, 2002,
	5, 46,
	-2, 854,
	-1, 2042,
	41, 937,
	-2, 935,
	-1, 2085,
	5, 46,
	-2, 193,
	-1, 2150,
	5, 47,
	-2, 855,
	-1, 2249,
	5, 46,
	-2, 145,
}

const yyPrivate = 57344

const yyLast = 25094

var yyAct = [...]int{

	470, 67, 434, 2251, 2297, 2167, 2272, 2263, 2153, 2253,
	2262, 2088, 7, 2056, 2139, 2193, 1383, 1980, 2133, 2087,
	6, 1796, 2086, 5, 1917, 1011, 2166, 385, 2016, 2089,
	8, 2042, 1694, 1559, 1777, 1531, 1684, 79, 1381, 1757,
	428, 441, 1944, 1962, 469, 1341, 1797, 1148, 1291, 903,
	1584, 415, 2154, 1287, 736, 1846, 1333, 746, 1693, 1758,
	1293, 1638, 454, 1323, 1754, 1314, 1285, 1532, 67, 1373,
	365, 368, 383, 1337, 558, 100, 1451, 1419, 1322, 359,
	1763, 1769, 420, 1091, 1232, 978, 1705, 1140, 1408, 560,
	1198, 1237, 1329, 555, 1211, 1357, 1111, 1661, 1269, 1621,
	1369, 803, 540, 993, 1159, 1175, 1660, 1229, 1276, 809,
	439, 554, 775, 992, 536, 537, 853, 382, 984, 532,
	723, 424, 974, 774, 844, 701, 2319, 2315, 443, 2305,
	2287, 543, 919, 2285, 2267, 360, 361, 529, 2246, 364,
	1739, 2201, 975, 78, 1133, 920, 1827, 556, 1938, 2278,
	2186, 83, 2261, 2066, 868, 867, 877, 878, 870, 871,
	872, 873, 874, 875, 876, 869, 2147, 1344, 879, 2234,
	2185, 1945, 33, 33, 33, 33, 421, 1722, 1497, 1947,
	1892, 700, 2146, 1792, 1793, 728, 85, 86, 87, 88,
	89, 1311, 1312, 1791, 2085, 3, 1526, 994, 748, 995,
	1310, 363, 110, 106, 107, 1568, 108, 734, 1567, 749,
	750, 1569, 362, 1527, 2001, 33, 1289, 68, 36, 37,
	793, 1604, 1343, 703, 483, 706, 489, 491, 490, 487,
	488, 486, 485, 484, 76, 76, 76, 76, 76, 112,
	111, 492, 493, 68, 36, 37, 1738, 1987, 1950, 1363,
	1358, 1358, 1345, 727, 731, 1370, 1706, 733, 1349, 1351,
	1883, 1350, 376, 1881, 353, 38, 374, 380, 1345, 1120,
	2276, 2198, 757, 2248, 102, 2196, 2197, 76, 366, 2039,
	2038, 2037, 2036, 2035, 1948, 1949, 1951, 1952, 1953, 2033,
	729, 732, 1596, 730, 1639, 2034, 2118, 2119, 1708, 2190,
	2191, 1390, 2155, 1919, 2260, 2083, 1432, 1601, 1600, 1551,
	751, 745, 752, 749, 750, 2257, 95, 742, 2252, 741,
	1431, 743, 744, 705, 704, 2233, 1389, 2134, 1687, 1597,
	1640, 1270, 2255, 2081, 735, 735, 356, 1963, 1964, 2311,
	1010, 1010, 1666, 1602, 1800, 1594, 735, 369, 2121, 1010,
	354, 1595, 1009, 2017, 1851, 379, 67, 67, 2320, 1578,
	2317, 2306, 1436, 2288, 702, 1067, 2019, 762, 711, 97,
	99, 1430, 357, 94, 109, 764, 1710, 1973, 763, 104,
	103, 1714, 80, 1709, 802, 1707, 1643, 1081, 370, 759,
	1712, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 1711, 378, 1072, 379, 1558, 1557, 1556,
	1599, 2067, 367, 698, 1641, 1642, 1713, 1715, 1656, 101,
	367, 67, 1428, 1422, 1423, 726, 1421, 1121, 1424, 1425,
	758, 1358, 2301, 798, 1372, 1010, 888, 2018, 328, 890,
	1010, 1826, 767, 768, 1611, 811, 1010, 893, 894, 895,
	896, 897, 898, 899, 900, 1946, 840, 367, 857, 2242,
	1348, 796, 105, 1434, 1437, 1037, 2254, 2256, 1213, 901,
	102, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 2145, 918, 921, 921, 921, 927, 921, 921,
	927, 921, 927, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 795, 979, 69,
	367, 75, 75, 75, 75, 75, 1972, 1478, 1976, 1897,
	1874, 96, 737, 1475, 1598, 1582, 1429, 1296, 1298, 1582,
	761, 765, 1867, 756, 430, 69, 2299, 1572, 1024, 2300,
	1564, 2298, 891, 892, 1470, 1456, 1440, 889, 1146, 1005,
	990, 1585, 1427, 842, 75, 104, 103, 859, 543, 719,
	1315, 973, 879, 543, 868, 867, 877, 878, 870, 871,
	872, 873, 874, 875, 876, 869, 1306, 1143, 879, 1816,
	1038, 867, 877, 878, 870, 871, 872, 873, 874, 875,
	876, 869, 1433, 852, 879, 841, 1681, 922, 924, 926,
	928, 930, 932, 933, 935, 1582, 869, 1112, 1297, 879,
	923, 925, 1068, 929, 931, 850, 934, 1399, 1582, 997,
	1977, 1581, 1409, 739, 998, 1581, 1582, 1182, 1008, 988,
	710, 1817, 852, 725, 891, 892, 981, 1971, 753, 1435,
	891, 892, 1180, 1181, 1179, 902, 983, 1051, 1054, 1055,
	1056, 1057, 1058, 1059, 1685, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 92, 1039, 1040, 1041, 1042, 1018, 1022, 1052,
	1019, 1025, 1021, 1023, 1020, 1767, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 2291, 2273, 2290, 1724, 91,
	1128, 1581, 735, 1113, 1003, 851, 850, 1668, 1666, 735,
	735, 735, 1674, 1400, 1581, 1673, 1676, 1680, 1627, 740,
	766, 1677, 1581, 852, 735, 735, 724, 707, 1668, 1666,
	1230, 755, 1669, 1010, 851, 850, 1670, 1667, 1118, 713,
	714, 715, 716, 717, 2194, 863, 2218, 866, 2217, 2304,
	2243, 1074, 852, 1669, 880, 881, 882, 883, 884, 885,
	886, 1804, 864, 865, 862, 868, 867, 877, 878, 870,
	871, 872, 873, 874, 875, 876, 869, 2169, 1053, 879,
	735, 377, 1139, 872, 873, 874, 875, 876, 869, 1093,
	1230, 879, 1486, 954, 955, 956, 957, 958, 942, 943,
	944, 959, 960, 945, 946, 947, 953, 961, 948, 949,
	950, 951, 952, 964, 963, 962, 965, 966, 968, 967,
	969, 1131, 2312, 1095, 1115, 1116, 847, 2230, 1082, 1149,
	1150, 2151, 1098, 1099, 1145, 1165, 1167, 1168, 1937, 1151,
	1936, 1166, 1107, 1108, 1174, 31, 1626, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 857, 851, 850, 806, 810, 1138, 526, 527,
	2308, 67, 1152, 1123, 1124, 2313, 1473, 1126, 1472, 1624,
	1605, 852, 860, 851, 850, 1144, 905, 1176, 1156, 2194,
	851, 850, 2229, 1129, 1172, 851, 850, 1134, 1137, 2203,
	2175, 852, 851, 850, 1233, 1286, 1153, 2080, 852, 1094,
	981, 1157, 2032, 852, 1158, 772, 1100, 1101, 1102, 904,
	852, 851, 850, 1171, 1453, 1454, 1455, 419, 2245, 1173,
	917, 1109, 1110, 1219, 1222, 851, 850, 771, 76, 852,
	1231, 797, 2195, 1199, 1154, 1200, 1296, 1298, 1178, 1994,
	1570, 1169, 1571, 852, 851, 850, 980, 1934, 1809, 1622,
	1290, 1726, 1474, 1416, 1125, 979, 1096, 1206, 1208, 979,
	2216, 1177, 852, 1216, 870, 871, 872, 873, 874, 875,
	876, 869, 1202, 1203, 879, 1845, 2215, 1136, 1847, 2078,
	868, 867, 877, 878, 870, 871, 872, 873, 874, 875,
	876, 869, 114, 2050, 879, 1585, 1205, 1241, 1242, 2008,
	2235, 358, 2046, 543, 1248, 1249, 1250, 1251, 1301, 1243,
	1227, 1245, 1303, 1928, 2232, 851, 850, 1297, 1278, 1281,
	1282, 1283, 1279, 1295, 1280, 1284, 2180, 797, 1770, 1771,
	1319, 1324, 556, 852, 1847, 531, 1928, 2177, 552, 1928,
	2082, 699, 2008, 2074, 735, 1969, 735, 1862, 1252, 1253,
	1093, 1299, 709, 1257, 1068, 902, 1260, 2008, 2022, 1320,
	718, 1265, 2008, 797, 2045, 1173, 2008, 2007, 1928, 1927,
	1209, 1330, 1910, 797, 1560, 797, 1308, 1307, 981, 1304,
	1313, 1439, 797, 981, 1858, 1855, 1854, 981, 1852, 1327,
	1869, 1560, 1837, 1359, 1360, 1361, 1362, 1836, 1835, 1824,
	1823, 1820, 1821, 1375, 1376, 1377, 1378, 1820, 1819, 2026,
	67, 1650, 1379, 868, 867, 877, 878, 870, 871, 872,
	873, 874, 875, 876, 869, 1468, 797, 879, 1649, 1273,
	797, 1273, 1371, 1207, 1413, 1207, 797, 459, 458, 461,
	462, 463, 464, 1457, 902, 811, 460, 465, 1870, 1410,
	76, 1397, 1396, 1459, 1460, 1461, 1346, 1347, 1201, 1352,
	1353, 1354, 1355, 1356, 1097, 1122, 1119, 1090, 1089, 1088,
	1087, 1172, 1895, 1079, 80, 1077, 1076, 1366, 1367, 1368,
	1075, 877, 878, 870, 871, 872, 873, 874, 875, 876,
	869, 1073, 1117, 879, 1176, 1438, 1007, 1006, 80, 794,
	1320, 986, 1401, 721, 986, 373, 1173, 1407, 371, 1412,
	1411, 868, 867, 877, 878, 870, 871, 872, 873, 874,
	875, 876, 869, 2025, 1445, 879, 1832, 1444, 1207, 1417,
	904, 1755, 1810, 1272, 1766, 2044, 1300, 1766, 985, 1560,
	1529, 1530, 1462, 2182, 979, 979, 979, 979, 979, 1905,
	1833, 1385, 1468, 1387, 1822, 1458, 1464, 987, 1779, 989,
	987, 1290, 985, 1552, 1467, 1469, 1658, 1465, 1573, 1309,
	1471, 979, 1273, 1468, 1491, 720, 1477, 1490, 1177, 1480,
	1481, 1482, 1127, 1395, 1533, 985, 1488, 1147, 1489, 1162,
	1163, 1492, 1493, 1870, 1494, 1495, 1766, 1080, 1499, 1500,
	1501, 1502, 1503, 991, 902, 1562, 1485, 1563, 800, 1510,
	1511, 1512, 801, 1514, 1515, 2188, 1517, 1518, 1519, 1520,
	543, 1522, 1523, 1524, 1561, 799, 1555, 2178, 1547, 1278,
	1281, 1282, 1283, 1279, 1778, 1280, 1284, 1554, 2048, 1939,
	1345, 1382, 1548, 1549, 904, 1915, 1374, 1324, 1217, 1218,
	1803, 1370, 1496, 1498, 67, 1577, 1574, 76, 1586, 1504,
	1505, 1506, 1507, 1546, 1391, 735, 1534, 735, 735, 1537,
	1770, 1771, 981, 981, 981, 981, 981, 1068, 1365, 1580,
	1583, 997, 1654, 1565, 1364, 1069, 791, 1535, 1536, 981,
	1538, 1576, 2282, 1614, 2280, 1616, 1617, 1618, 1619, 981,
	2264, 1831, 1648, 1773, 1755, 1628, 1084, 1452, 1776, 1543,
	1541, 1775, 1606, 1607, 1544, 1542, 1540, 1539, 1545, 1613,
	1282, 1283, 425, 426, 2212, 2184, 1691, 1441, 1160, 1620,
	845, 846, 2210, 1450, 1528, 1623, 1700, 1449, 1999, 1587,
	1857, 1238, 1318, 1625, 1808, 1807, 1579, 2123, 1718, 1719,
	2126, 1720, 1721, 2174, 2173, 1209, 2043, 2202, 2041, 843,
	2117, 2116, 372, 1727, 1728, 1662, 1675, 1679, 1730, 1653,
	1659, 1651, 1615, 972, 1004, 982, 789, 773, 770, 769,
	722, 1696, 804, 1655, 1664, 1665, 1608, 1609, 1610, 1612,
	1672, 1723, 1657, 2225, 805, 1172, 1652, 2054, 1760, 1671,
	67, 1682, 1683, 2053, 1903, 1686, 1149, 1150, 1380, 1978,
	1415, 1386, 1083, 1688, 1631, 845, 846, 2205, 1698, 1697,
	1701, 1406, 1781, 1286, 1704, 1071, 1783, 1785, 1786, 1787,
	1173, 1717, 1756, 1702, 1716, 1765, 422, 423, 1533, 1448,
	2224, 2223, 1759, 2222, 2029, 80, 416, 1447, 1630, 2204,
	2171, 2127, 2058, 1998, 417, 2057, 1981, 1560, 1633, 1634,
	1635, 2284, 2283, 1736, 1737, 1790, 1780, 1788, 1742, 1805,
	1479, 1745, 1644, 1476, 1646, 1647, 1750, 1114, 437, 848,
	2283, 2284, 2071, 1442, 1443, 1784, 810, 1762, 1806, 1774,
	1142, 375, 82, 2099, 50, 2101, 19, 1696, 1324, 84,
	1324, 1801, 53, 1782, 1802, 1799, 2100, 18, 77, 1795,
	1731, 1732, 1733, 1734, 1735, 2102, 20, 1829, 1830, 2103,
	21, 1, 1794, 1379, 117, 2172, 1840, 117, 2098, 15,
	2097, 14, 2122, 117, 2124, 1834, 2091, 10, 2110, 30,
	2109, 29, 1811, 1812, 2108, 28, 1466, 2106, 25, 1815,
	2105, 24, 2040, 1078, 117, 1958, 1818, 531, 1943, 1139,
	1086, 2107, 26, 2096, 13, 2093, 12, 117, 1942, 1487,
	117, 563, 1873, 117, 1813, 2092, 11, 1637, 1103, 1104,
	1105, 2090, 9, 1849, 117, 1106, 563, 1636, 790, 1132,
	1663, 1426, 117, 1890, 1761, 2132, 1331, 1868, 1321, 553,
	90, 1398, 738, 1967, 1843, 1871, 1844, 336, 1861, 1850,
	1328, 1848, 1592, 2125, 792, 1068, 1591, 1588, 1603, 1342,
	1590, 1841, 1853, 1589, 2120, 1593, 1015, 1013, 1740, 1741,
	1014, 1743, 1744, 1012, 1746, 1747, 1748, 1749, 1896, 1751,
	1752, 1753, 1839, 1017, 1866, 1135, 1016, 340, 999, 1814,
	1879, 2161, 1872, 849, 98, 54, 1970, 1678, 1420, 93,
	1875, 747, 342, 887, 1446, 1566, 541, 542, 534, 2189,
	808, 1884, 1885, 1911, 2135, 1484, 916, 1228, 1533, 442,
	1923, 1924, 1925, 1550, 2138, 1164, 457, 981, 456, 455,
	452, 1904, 453, 1405, 1155, 1161, 468, 1525, 1930, 861,
	1825, 67, 440, 432, 1912, 977, 970, 1414, 1277, 1275,
	1926, 1274, 1085, 530, 1921, 1906, 1907, 1908, 1909, 1324,
	1922, 1772, 1768, 1288, 976, 381, 66, 754, 1574, 355,
	1891, 1955, 1956, 1957, 2065, 35, 81, 1920, 427, 1931,
	979, 27, 17, 1965, 1876, 1877, 760, 1878, 22, 1932,
	1880, 16, 1882, 1418, 708, 39, 42, 41, 1966, 1988,
	1989, 1990, 1991, 1992, 1632, 1954, 1388, 1995, 1996, 1959,
	2160, 1961, 1960, 1983, 1984, 1974, 1760, 2250, 1799, 2003,
	776, 2271, 2192, 2104, 2111, 1933, 550, 1935, 1975, 559,
	1781, 2095, 2094, 1982, 1968, 2237, 1379, 23, 2236, 1696,
	4, 418, 32, 2, 712, 0, 0, 117, 0, 0,
	2006, 0, 563, 563, 0, 0, 0, 0, 1271, 0,
	1759, 0, 0, 0, 563, 1725, 0, 2028, 0, 2030,
	0, 2027, 1302, 2005, 2009, 2000, 1929, 0, 0, 2010,
	0, 0, 0, 1986, 0, 2020, 1993, 2021, 0, 2055,
	2015, 1997, 0, 1898, 1899, 0, 2031, 117, 0, 1900,
	0, 0, 1901, 1295, 0, 2011, 0, 1902, 981, 2023,
	0, 2024, 1760, 0, 67, 0, 0, 0, 2012, 2013,
	2014, 2047, 0, 0, 0, 0, 2059, 0, 2049, 2052,
	0, 0, 0, 0, 2060, 1940, 0, 0, 0, 1789,
	0, 67, 0, 0, 0, 0, 2084, 0, 0, 856,
	0, 2072, 0, 0, 2077, 979, 1759, 0, 2070, 1384,
	0, 0, 0, 0, 0, 2079, 2131, 1392, 1393, 0,
	0, 1394, 0, 0, 0, 0, 0, 0, 0, 0,
	2129, 0, 2076, 2061, 2062, 2063, 2064, 2142, 1894, 0,
	2068, 2069, 0, 0, 0, 2137, 2141, 0, 2130, 0,
	0, 1404, 0, 2143, 0, 0, 0, 0, 2128, 0,
	0, 2156, 0, 2002, 0, 0, 0, 2149, 2148, 0,
	0, 0, 0, 1533, 0, 0, 67, 868, 867, 877,
	878, 870, 871, 872, 873, 874, 875, 876, 869, 0,
	0, 879, 0, 0, 0, 117, 117, 117, 868, 867,
	877, 878, 870, 871, 872, 873, 874, 875, 876, 869,
	2144, 563, 879, 1863, 2170, 2168, 2183, 0, 2150, 0,
	559, 559, 2176, 430, 0, 0, 0, 0, 0, 2165,
	0, 0, 559, 981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2077, 0, 0, 2207, 2199, 0, 0,
	0, 0, 0, 0, 2206, 1893, 67, 2211, 2073, 2209,
	2208, 0, 67, 0, 0, 0, 2214, 2228, 2219, 0,
	2141, 0, 0, 2213, 0, 0, 0, 2179, 0, 67,
	2231, 0, 2221, 0, 67, 0, 2241, 0, 2258, 904,
	0, 0, 2247, 2187, 2240, 0, 1913, 2239, 0, 1914,
	0, 2259, 1916, 67, 2238, 2244, 67, 67, 0, 0,
	904, 67, 2228, 2265, 0, 2226, 2274, 0, 0, 0,
	0, 2277, 0, 0, 0, 0, 0, 0, 67, 2266,
	2279, 67, 2268, 2228, 2281, 0, 0, 0, 2292, 2294,
	2295, 0, 0, 0, 0, 0, 67, 0, 67, 2302,
	0, 2228, 67, 2228, 0, 0, 0, 2289, 1889, 0,
	0, 0, 0, 0, 0, 0, 67, 563, 0, 67,
	0, 2228, 0, 0, 0, 117, 67, 0, 2307, 117,
	67, 2228, 117, 0, 0, 2228, 0, 0, 117, 0,
	563, 0, 0, 0, 0, 2316, 0, 563, 563, 563,
	117, 117, 117, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 563, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 550, 0, 0, 0, 0, 550, 1000,
	0, 0, 1645, 0, 0, 0, 0, 0, 1210, 1215,
	2309, 2310, 0, 1221, 1224, 1225, 1226, 868, 867, 877,
	878, 870, 871, 872, 873, 874, 875, 876, 869, 0,
	0, 879, 0, 0, 0, 0, 0, 117, 563, 117,
	1236, 563, 1239, 1240, 0, 0, 0, 1244, 2249, 1246,
	1247, 0, 0, 1692, 0, 0, 0, 1254, 1255, 1256,
	0, 1258, 1259, 0, 1261, 1262, 1263, 1264, 0, 1266,
	1267, 1268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 904, 0, 1888,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 33, 34, 68, 36, 37, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 38, 57, 58, 563,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1070, 2136, 2140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 0, 0, 0, 76, 563, 563, 0, 559, 0,
	0, 0, 0, 0, 0, 559, 559, 559, 868, 867,
	877, 878, 870, 871, 872, 873, 874, 875, 876, 869,
	559, 559, 879, 0, 0, 0, 0, 0, 0, 0,
	117, 2157, 2158, 0, 0, 0, 0, 0, 117, 117,
	0, 0, 0, 117, 117, 0, 0, 117, 117, 117,
	0, 0, 0, 0, 0, 1828, 40, 70, 44, 43,
	46, 0, 59, 0, 0, 563, 563, 0, 0, 0,
	1838, 0, 0, 0, 0, 0, 559, 0, 0, 1141,
	0, 0, 0, 1842, 0, 0, 0, 0, 47, 73,
	72, 0, 0, 55, 56, 45, 0, 0, 0, 0,
	0, 2140, 0, 0, 33, 1859, 68, 36, 37, 0,
	0, 0, 0, 2220, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 38, 0,
	0, 117, 563, 0, 563, 0, 559, 60, 61, 117,
	117, 0, 0, 117, 0, 0, 0, 0, 0, 1483,
	49, 71, 0, 51, 52, 64, 0, 65, 0, 0,
	0, 0, 0, 0, 1037, 0, 76, 0, 0, 0,
	0, 117, 117, 117, 1508, 1509, 0, 1204, 0, 1513,
	0, 0, 1516, 0, 0, 0, 0, 1521, 0, 2112,
	0, 0, 2293, 0, 2318, 550, 0, 0, 0, 0,
	0, 0, 0, 2200, 0, 0, 0, 0, 0, 0,
	0, 348, 0, 1234, 1235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 70,
	44, 43, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2113, 0, 69, 0, 0, 345,
	0, 0, 0, 0, 0, 0, 0, 1024, 1941, 0,
	47, 73, 72, 0, 0, 0, 0, 45, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 559, 559, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 1038,
	0, 329, 0, 0, 0, 0, 0, 0, 332, 60,
	61, 0, 2114, 0, 0, 0, 0, 0, 341, 346,
	347, 0, 2115, 71, 0, 51, 52, 64, 0, 65,
	0, 0, 117, 117, 117, 117, 117, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 117,
	559, 0, 559, 117, 338, 0, 0, 339, 0, 117,
	344, 0, 0, 0, 0, 0, 1051, 1054, 1055, 1056,
	1057, 1058, 1059, 0, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 563, 1039, 1040, 1041, 1042, 1018, 1022, 1052, 1019,
	1025, 1021, 1023, 1020, 0, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 1887, 0, 0, 0, 0,
	0, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 117, 563, 563, 0, 1699, 0,
	0, 0, 0, 75, 0, 343, 333, 334, 807, 351,
	0, 0, 0, 335, 337, 0, 331, 350, 349, 868,
	867, 877, 878, 870, 871, 872, 873, 874, 875, 876,
	869, 0, 0, 879, 0, 0, 0, 1053, 563, 563,
	0, 0, 0, 0, 0, 117, 0, 0, 2152, 0,
	0, 0, 0, 0, 115, 563, 0, 352, 0, 0,
	0, 0, 0, 115, 868, 867, 877, 878, 870, 871,
	872, 873, 874, 875, 876, 869, 0, 0, 879, 0,
	0, 0, 0, 0, 384, 0, 0, 0, 1886, 550,
	0, 0, 0, 0, 431, 0, 563, 533, 551, 0,
	115, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 33, 115, 68, 36, 37, 0, 0,
	0, 0, 115, 0, 0, 550, 0, 62, 563, 563,
	0, 1463, 0, 74, 0, 0, 0, 38, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 868, 867, 877, 878, 870, 871, 872, 873,
	874, 875, 876, 869, 0, 0, 879, 0, 0, 0,
	0, 563, 563, 0, 563, 76, 563, 868, 867, 877,
	878, 870, 871, 872, 873, 874, 875, 876, 869, 0,
	0, 879, 0, 0, 0, 0, 0, 0, 2112, 1629,
	0, 2270, 2273, 2269, 0, 0, 0, 0, 0, 0,
	0, 559, 0, 559, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 70, 44,
	43, 46, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2113, 0, 117, 1689, 1690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	73, 72, 0, 559, 563, 0, 45, 117, 563, 0,
	0, 0, 0, 0, 0, 563, 563, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1729, 0, 0, 0, 60, 61,
	0, 2114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2115, 71, 0, 51, 52, 64, 115, 65, 0,
	0, 0, 0, 550, 0, 0, 1141, 1764, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	0, 68, 36, 37, 0, 0, 0, 0, 0, 1764,
	0, 0, 0, 62, 0, 0, 0, 563, 0, 74,
	0, 0, 0, 38, 563, 563, 563, 115, 0, 559,
	559, 0, 559, 563, 1798, 0, 0, 0, 0, 0,
	0, 0, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 69, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2112, 0, 0, 0, 0, 2314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 0, 117, 0,
	0, 0, 75, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 70, 44, 43, 46, 0, 0,
	0, 0, 1856, 0, 0, 0, 1860, 0, 0, 2113,
	0, 0, 0, 1864, 1865, 0, 0, 0, 0, 563,
	0, 0, 0, 0, 563, 47, 73, 72, 0, 117,
	0, 117, 45, 0, 0, 0, 0, 563, 0, 0,
	0, 0, 0, 0, 0, 115, 115, 115, 563, 0,
	0, 0, 0, 0, 0, 551, 0, 0, 0, 0,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 61, 0, 2114, 0, 0,
	0, 0, 563, 0, 0, 0, 0, 2115, 71, 0,
	51, 52, 64, 550, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1918, 0, 0, 0, 0,
	0, 0, 1918, 1918, 1918, 0, 0, 563, 0, 0,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	1918, 0, 0, 0, 0, 0, 33, 0, 68, 36,
	37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 117, 0, 0, 74, 563, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 1979, 0, 0, 0, 76, 0,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2112, 0, 563, 0, 115, 2303, 0, 75, 115,
	0, 0, 115, 0, 0, 0, 0, 2004, 1092, 0,
	0, 0, 1918, 563, 0, 0, 0, 0, 0, 0,
	115, 115, 115, 0, 0, 1798, 0, 115, 0, 0,
	40, 70, 44, 43, 46, 0, 1798, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 0, 0,
	0, 0, 47, 73, 72, 0, 0, 563, 0, 45,
	2051, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2075, 0, 0, 0, 0,
	0, 60, 61, 0, 2114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2115, 71, 0, 51, 52, 64,
	0, 65, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 1798, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1214, 1214, 0, 0, 0,
	1214, 1214, 1214, 1214, 0, 0, 0, 551, 0, 0,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 1214, 1214, 1214,
	1214, 2181, 0, 1214, 1214, 1214, 1214, 1214, 0, 0,
	0, 0, 0, 0, 1214, 1214, 1214, 0, 1214, 1214,
	0, 1214, 1214, 1214, 1214, 0, 1214, 1214, 1214, 0,
	115, 0, 0, 0, 0, 75, 0, 0, 115, 384,
	0, 0, 0, 115, 115, 1798, 0, 115, 1305, 1092,
	551, 0, 0, 0, 0, 1918, 0, 33, 0, 68,
	36, 37, 0, 0, 1092, 0, 33, 559, 68, 36,
	37, 62, 0, 0, 0, 0, 0, 74, 0, 0,
	62, 38, 0, 0, 0, 0, 74, 0, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 2275,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 115,
	115, 0, 2112, 115, 0, 0, 0, 2286, 0, 0,
	0, 2112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1402, 1403, 115, 0, 0, 0, 0, 0, 0,
	0, 40, 70, 44, 43, 46, 0, 0, 0, 0,
	40, 70, 44, 43, 46, 0, 0, 2113, 0, 0,
	0, 0, 0, 0, 0, 1092, 2113, 0, 0, 0,
	0, 0, 0, 47, 73, 72, 0, 0, 0, 0,
	45, 0, 47, 73, 72, 0, 0, 0, 0, 45,
	33, 0, 68, 36, 37, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 60, 61, 1214, 2114, 0, 0, 0, 0,
	0, 60, 61, 0, 2114, 2115, 71, 0, 51, 52,
	64, 0, 65, 0, 2115, 71, 1214, 51, 52, 64,
	0, 65, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1214, 1214, 0, 0, 2112, 1214, 0, 0, 1214,
	2227, 0, 0, 0, 1214, 0, 0, 0, 0, 0,
	0, 551, 115, 115, 115, 115, 115, 0, 0, 0,
	0, 0, 0, 0, 384, 0, 0, 0, 0, 115,
	0, 0, 0, 384, 40, 70, 44, 43, 46, 115,
	0, 33, 0, 68, 36, 37, 0, 551, 0, 0,
	2113, 69, 0, 0, 0, 62, 0, 0, 0, 0,
	69, 74, 0, 0, 0, 38, 47, 73, 72, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 76, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 61, 0, 2114, 0,
	0, 0, 0, 0, 0, 0, 2112, 0, 2115, 71,
	0, 51, 52, 64, 115, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 70, 44, 43, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2113, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1214, 47, 73, 72,
	0, 0, 0, 0, 45, 0, 0, 1214, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 61, 0, 2114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2115,
	71, 0, 51, 52, 64, 551, 65, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 854, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 192, 0, 0, 153, 200, 198, 0, 0, 0,
	234, 292, 0, 0, 0, 0, 195, 0, 0, 315,
	283, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 855,
	0, 858, 0, 0, 0, 0, 0, 115, 143, 0,
	0, 0, 0, 0, 851, 850, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 0, 0, 115, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 122,
	0, 0, 0, 0, 172, 214, 133, 0, 0, 0,
	185, 321, 0, 431, 0, 248, 0, 288, 175, 193,
	137, 119, 131, 147, 174, 224, 257, 267, 0, 0,
	0, 0, 0, 154, 0, 260, 232, 310, 0, 0,
	238, 259, 196, 299, 250, 308, 309, 176, 293, 318,
	323, 280, 163, 0, 123, 0, 245, 158, 189, 0,
	0, 0, 151, 0, 0, 0, 279, 138, 295, 212,
	218, 148, 150, 149, 132, 274, 297, 142, 152, 284,
	263, 289, 157, 0, 0, 551, 0, 0, 0, 0,
	0, 0, 124, 291, 307, 144, 271, 272, 324, 258,
	126, 305, 287, 210, 186, 187, 125, 0, 255, 161,
	171, 156, 227, 0, 170, 247, 302, 303, 155, 326,
	134, 317, 128, 135, 316, 221, 0, 220, 319, 298,
	306, 211, 204, 0, 127, 304, 209, 203, 191, 166,
	178, 243, 199, 244, 179, 216, 215, 217, 0, 0,
	115, 285, 313, 327, 201, 140, 0, 273, 296, 0,
	0, 141, 169, 165, 242, 219, 136, 181, 282, 190,
	197, 254, 325, 231, 261, 145, 312, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 389, 390, 391, 395, 396, 400, 401,
	409, 408, 407, 410, 411, 413, 412, 414, 392, 393,
	394, 397, 398, 399, 402, 403, 406, 404, 405, 0,
	118, 129, 194, 0, 252, 168, 314, 0, 160, 384,
	0, 384, 0, 0, 0, 120, 121, 130, 139, 146,
	159, 164, 167, 173, 177, 180, 182, 183, 184, 188,
	202, 205, 206, 207, 208, 222, 223, 225, 226, 229,
	230, 233, 235, 236, 237, 239, 240, 241, 246, 249,
	251, 253, 256, 262, 264, 265, 266, 268, 269, 270,
	275, 276, 277, 278, 286, 290, 300, 301, 311, 320,
	322, 0, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 681, 661, 294,
	619, 684, 591, 608, 695, 609, 612, 650, 577, 631,
	228, 606, 578, 0, 595, 568, 602, 569, 592, 621,
	162, 590, 663, 634, 683, 192, 646, 0, 153, 200,
	198, 0, 0, 115, 234, 292, 682, 627, 0, 690,
	195, 0, 643, 315, 283, 213, 0, 0, 623, 670,
	629, 659, 618, 652, 584, 642, 685, 607, 648, 686,
	551, 0, 0, 2159, 0, 0, 0, 0, 0, 0,
	115, 0, 143, 0, 645, 680, 604, 647, 649, 566,
	644, 0, 572, 579, 694, 676, 598, 599, 600, 0,
	0, 0, 0, 0, 0, 0, 622, 630, 656, 615,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	640, 0, 0, 0, 580, 573, 0, 0, 620, 0,
	0, 0, 583, 122, 597, 657, 0, 564, 172, 214,
	133, 660, 675, 617, 185, 321, 679, 614, 613, 248,
	0, 288, 175, 193, 137, 119, 131, 147, 174, 224,
	257, 267, 605, 565, 664, 593, 603, 154, 601, 260,
	232, 310, 0, 637, 238, 259, 196, 299, 250, 308,
	309, 176, 293, 318, 323, 280, 163, 0, 123, 0,
	245, 158, 189, 616, 651, 594, 151, 654, 641, 669,
	279, 138, 295, 212, 218, 148, 150, 149, 132, 274,
	297, 142, 152, 284, 263, 289, 157, 0, 0, 2162,
	2163, 2164, 0, 0, 0, 0, 124, 291, 307, 144,
	271, 272, 324, 258, 126, 305, 287, 210, 186, 187,
	125, 0, 255, 161, 171, 156, 227, 0, 170, 247,
	302, 303, 155, 326, 134, 317, 128, 135, 316, 221,
	0, 220, 319, 298, 306, 211, 204, 0, 127, 304,
	209, 203, 191, 166, 178, 243, 199, 244, 179, 216,
	215, 217, 0, 570, 0, 285, 313, 327, 201, 140,
	589, 273, 296, 0, 0, 141, 169, 165, 242, 219,
	136, 181, 282, 190, 197, 254, 325, 231, 261, 145,
	312, 281, 587, 588, 585, 0, 586, 632, 633, 687,
	688, 689, 658, 581, 0, 671, 672, 0, 662, 677,
	678, 653, 696, 610, 611, 571, 574, 575, 576, 582,
	624, 625, 636, 639, 667, 666, 665, 668, 673, 692,
	691, 693, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 635, 118, 129, 194, 697, 252, 168,
	314, 567, 160, 0, 0, 626, 628, 638, 655, 120,
	121, 130, 139, 146, 159, 164, 167, 173, 177, 180,
	182, 183, 184, 188, 202, 205, 206, 207, 208, 222,
	223, 225, 226, 229, 230, 233, 235, 236, 237, 239,
	240, 241, 246, 249, 251, 253, 256, 262, 264, 265,
	266, 268, 269, 270, 275, 276, 277, 278, 286, 290,
	300, 301, 311, 320, 322, 674, 681, 661, 294, 619,
	684, 591, 608, 695, 609, 612, 650, 577, 631, 228,
	606, 578, 0, 595, 568, 602, 569, 592, 621, 162,
	590, 663, 634, 683, 192, 646, 0, 153, 200, 198,
	0, 0, 0, 234, 292, 682, 627, 0, 690, 195,
	0, 643, 315, 283, 213, 0, 0, 623, 670, 629,
	659, 618, 652, 584, 642, 685, 607, 648, 686, 0,
	0, 0, 562, 0, 1325, 1326, 0, 0, 0, 0,
	0, 143, 0, 645, 680, 604, 647, 649, 566, 644,
	0, 572, 579, 694, 676, 598, 599, 600, 1575, 0,
	0, 0, 0, 0, 0, 622, 630, 656, 615, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 640,
	0, 0, 0, 580, 573, 0, 0, 620, 0, 0,
	0, 583, 122, 597, 657, 0, 564, 172, 214, 133,
	660, 675, 617, 185, 321, 679, 614, 613, 248, 0,
	288, 175, 193, 137, 119, 131, 147, 174, 224, 257,
	267, 605, 565, 664, 593, 603, 154, 601, 260, 232,
	310, 0, 637, 238, 259, 196, 299, 250, 308, 309,
	176, 293, 318, 323, 280, 163, 0, 123, 0, 245,
	158, 189, 616, 651, 594, 151, 654, 641, 669, 279,
	138, 295, 212, 218, 148, 150, 149, 132, 274, 297,
	142, 152, 284, 263, 289, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 291, 307, 144, 271,
	272, 324, 258, 126, 305, 287, 210, 186, 187, 125,
	0, 255, 161, 171, 156, 227, 0, 170, 247, 302,
	303, 155, 326, 134, 317, 128, 135, 316, 221, 0,
	220, 319, 298, 306, 211, 204, 0, 127, 304, 209,
	203, 191, 166, 178, 243, 199, 244, 179, 216, 215,
	217, 0, 570, 0, 285, 313, 327, 201, 140, 589,
	273, 296, 0, 0, 141, 169, 165, 242, 219, 136,
	181, 282, 190, 197, 254, 325, 231, 261, 145, 312,
	281, 587, 588, 585, 0, 586, 632, 633, 687, 688,
	689, 658, 581, 0, 671, 672, 0, 662, 677, 678,
	653, 696, 610, 611, 571, 574, 575, 576, 582, 624,
	625, 636, 639, 667, 666, 665, 668, 673, 692, 691,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 118, 129, 194, 697, 252, 168, 314,
	567, 160, 0, 0, 626, 628, 638, 655, 120, 121,
	130, 139, 146, 159, 164, 167, 173, 177, 180, 182,
	183, 184, 188, 202, 205, 206, 207, 208, 222, 223,
	225, 226, 229, 230, 233, 235, 236, 237, 239, 240,
	241, 246, 249, 251, 253, 256, 262, 264, 265, 266,
	268, 269, 270, 275, 276, 277, 278, 286, 290, 300,
	301, 311, 320, 322, 674, 681, 661, 294, 619, 684,
	591, 608, 695, 609, 612, 650, 577, 631, 228, 606,
	578, 0, 595, 568, 602, 569, 592, 621, 162, 590,
	663, 634, 683, 192, 646, 0, 153, 200, 198, 0,
	0, 0, 234, 292, 682, 627, 0, 690, 195, 0,
	643, 315, 283, 213, 0, 0, 623, 670, 629, 659,
	618, 652, 584, 642, 685, 607, 648, 686, 0, 0,
	0, 562, 0, 1325, 1326, 0, 0, 0, 0, 0,
	143, 0, 645, 680, 604, 647, 649, 566, 644, 0,
	572, 579, 694, 676, 598, 599, 600, 0, 0, 0,
	0, 0, 0, 0, 622, 630, 656, 615, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 640, 0,
	0, 0, 580, 573, 0, 0, 620, 0, 0, 0,
	583, 122, 597, 657, 0, 564, 172, 214, 133, 660,
	675, 617, 185, 321, 679, 614, 613, 248, 0, 288,
	175, 193, 137, 119, 131, 147, 174, 224, 257, 267,
	605, 565, 664, 593, 603, 154, 601, 260, 232, 310,
	0, 637, 238, 259, 196, 299, 250, 308, 309, 176,
	293, 318, 323, 280, 163, 0, 123, 0, 245, 158,
	189, 616, 651, 594, 151, 654, 641, 669, 279, 138,
	295, 212, 218, 148, 150, 149, 132, 274, 297, 142,
	152, 284, 263, 289, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 291, 307, 144, 271, 272,
	324, 258, 126, 305, 287, 210, 186, 187, 125, 0,
	255, 161, 171, 156, 227, 0, 170, 247, 302, 303,
	155, 326, 134, 317, 128, 135, 316, 221, 0, 220,
	319, 298, 306, 211, 204, 0, 127, 304, 209, 203,
	191, 166, 178, 243, 199, 244, 179, 216, 215, 217,
	0, 570, 0, 285, 313, 327, 201, 140, 589, 273,
	296, 0, 0, 141, 169, 165, 242, 219, 136, 181,
	282, 190, 197, 254, 325, 231, 261, 145, 312, 281,
	587, 588, 585, 0, 586, 632, 633, 687, 688, 689,
	658, 581, 0, 671, 672, 0, 662, 677, 678, 653,
	696, 610, 611, 571, 574, 575, 576, 582, 624, 625,
	636, 639, 667, 666, 665, 668, 673, 692, 691, 693,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 635, 118, 129, 194, 697, 252, 168, 314, 567,
	160, 0, 0, 626, 628, 638, 655, 120, 121, 130,
	139, 146, 159, 164, 167, 173, 177, 180, 182, 183,
	184, 188, 202, 205, 206, 207, 208, 222, 223, 225,
	226, 229, 230, 233, 235, 236, 237, 239, 240, 241,
	246, 249, 251, 253, 256, 262, 264, 265, 266, 268,
	269, 270, 275, 276, 277, 278, 286, 290, 300, 301,
	311, 320, 322, 674, 681, 661, 294, 619, 684, 591,
	608, 695, 609, 612, 650, 577, 631, 228, 606, 578,
	0, 595, 568, 602, 569, 592, 621, 162, 590, 663,
	634, 683, 192, 646, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 682, 627, 0, 690, 195, 0, 643,
	315, 283, 213, 0, 0, 623, 670, 629, 659, 618,
	652, 584, 642, 685, 607, 648, 686, 0, 0, 0,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 645, 680, 604, 647, 649, 566, 644, 0, 572,
	579, 694, 676, 598, 599, 600, 0, 0, 0, 0,
	0, 0, 0, 622, 630, 656, 615, 0, 0, 0,
	0, 0, 0, 1985, 0, 596, 0, 640, 0, 0,
	0, 580, 573, 0, 0, 620, 0, 0, 0, 583,
	122, 597, 657, 0, 564, 172, 214, 133, 660, 675,
	617, 185, 321, 679, 614, 613, 248, 0, 288, 175,
	193, 137, 119, 131, 147, 174, 224, 257, 267, 605,
	565, 664, 593, 603, 154, 601, 260, 232, 310, 0,
	637, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	616, 651, 594, 151, 654, 641, 669, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 135, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	570, 0, 285, 313, 327, 201, 140, 589, 273, 296,
	0, 0, 141, 169, 165, 242, 219, 136, 181, 282,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 587,
	588, 585, 0, 586, 632, 633, 687, 688, 689, 658,
	581, 0, 671, 672, 0, 662, 677, 678, 653, 696,
	610, 611, 571, 574, 575, 576, 582, 624, 625, 636,
	639, 667, 666, 665, 668, 673, 692, 691, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	635, 118, 129, 194, 697, 252, 168, 314, 567, 160,
	0, 0, 626, 628, 638, 655, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 240, 241, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 674, 681, 661, 294, 619, 684, 591, 608,
	695, 609, 612, 650, 577, 631, 228, 606, 578, 0,
	595, 568, 602, 569, 592, 621, 162, 590, 663, 634,
	683, 192, 646, 0, 153, 200, 198, 0, 0, 0,
	234, 292, 682, 627, 0, 690, 195, 0, 643, 315,
	283, 213, 0, 0, 623, 670, 629, 659, 618, 652,
	584, 642, 685, 607, 648, 686, 0, 0, 0, 436,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 0,
	645, 680, 604, 647, 649, 566, 644, 0, 572, 579,
	694, 676, 598, 599, 600, 0, 0, 0, 0, 0,
	0, 0, 622, 630, 656, 615, 0, 0, 0, 0,
	0, 0, 1703, 0, 596, 0, 640, 0, 0, 0,
	580, 573, 0, 0, 620, 0, 0, 0, 583, 122,
	597, 657, 0, 564, 172, 214, 133, 660, 675, 617,
	185, 321, 679, 614, 613, 248, 0, 288, 175, 193,
	137, 119, 131, 147, 174, 224, 257, 267, 605, 565,
	664, 593, 603, 154, 601, 260, 232, 310, 0, 637,
	238, 259, 196, 299, 250, 308, 309, 176, 293, 318,
	323, 280, 163, 0, 123, 0, 245, 158, 189, 616,
	651, 594, 151, 654, 641, 669, 279, 138, 295, 212,
	218, 148, 150, 149, 132, 274, 297, 142, 152, 284,
	263, 289, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 291, 307, 144, 271, 272, 324, 258,
	126, 305, 287, 210, 186, 187, 125, 0, 255, 161,
	171, 156, 227, 0, 170, 247, 302, 303, 155, 326,
	134, 317, 128, 135, 316, 221, 0, 220, 319, 298,
	306, 211, 204, 0, 127, 304, 209, 203, 191, 166,
	178, 243, 199, 244, 179, 216, 215, 217, 0, 570,
	0, 285, 313, 327, 201, 140, 589, 273, 296, 0,
	0, 141, 169, 165, 242, 219, 136, 181, 282, 190,
	197, 254, 325, 231, 261, 145, 312, 281, 587, 588,
	585, 0, 586, 632, 633, 687, 688, 689, 658, 581,
	0, 671, 672, 0, 662, 677, 678, 653, 696, 610,
	611, 571, 574, 575, 576, 582, 624, 625, 636, 639,
	667, 666, 665, 668, 673, 692, 691, 693, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 635,
	118, 129, 194, 697, 252, 168, 314, 567, 160, 0,
	0, 626, 628, 638, 655, 120, 121, 130, 139, 146,
	159, 164, 167, 173, 177, 180, 182, 183, 184, 188,
	202, 205, 206, 207, 208, 222, 223, 225, 226, 229,
	230, 233, 235, 236, 237, 239, 240, 241, 246, 249,
	251, 253, 256, 262, 264, 265, 266, 268, 269, 270,
	275, 276, 277, 278, 286, 290, 300, 301, 311, 320,
	322, 674, 681, 661, 294, 619, 684, 591, 608, 695,
	609, 612, 650, 577, 631, 228, 606, 578, 0, 595,
	568, 602, 569, 592, 621, 162, 590, 663, 634, 683,
	192, 646, 0, 153, 200, 198, 0, 0, 0, 234,
	292, 682, 627, 0, 690, 195, 0, 643, 315, 283,
	213, 0, 0, 623, 670, 629, 659, 618, 652, 584,
	642, 685, 607, 648, 686, 0, 0, 0, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 645,
	680, 604, 647, 649, 566, 644, 0, 572, 579, 694,
	676, 598, 599, 600, 0, 0, 0, 0, 0, 0,
	0, 622, 630, 656, 615, 0, 0, 0, 0, 0,
	0, 1695, 0, 596, 0, 640, 0, 0, 0, 580,
	573, 0, 0, 620, 0, 0, 0, 583, 122, 597,
	657, 0, 564, 172, 214, 133, 660, 675, 617, 185,
	321, 679, 614, 613, 248, 0, 288, 175, 193, 137,
	119, 131, 147, 174, 224, 257, 267, 605, 565, 664,
	593, 603, 154, 601, 260, 232, 310, 0, 637, 238,
	259, 196, 299, 250, 308, 309, 176, 293, 318, 323,
	280, 163, 0, 123, 0, 245, 158, 189, 616, 651,
	594, 151, 654, 641, 669, 279, 138, 295, 212, 218,
	148, 150, 149, 132, 274, 297, 142, 152, 284, 263,
	289, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 291, 307, 144, 271, 272, 324, 258, 126,
	305, 287, 210, 186, 187, 125, 0, 255, 161, 171,
	156, 227, 0, 170, 247, 302, 303, 155, 326, 134,
	317, 128, 135, 316, 221, 0, 220, 319, 298, 306,
	211, 204, 0, 127, 304, 209, 203, 191, 166, 178,
	243, 199, 244, 179, 216, 215, 217, 0, 570, 0,
	285, 313, 327, 201, 140, 589, 273, 296, 0, 0,
	141, 169, 165, 242, 219, 136, 181, 282, 190, 197,
	254, 325, 231, 261, 145, 312, 281, 587, 588, 585,
	0, 586, 632, 633, 687, 688, 689, 658, 581, 0,
	671, 672, 0, 662, 677, 678, 653, 696, 610, 611,
	571, 574, 575, 576, 582, 624, 625, 636, 639, 667,
	666, 665, 668, 673, 692, 691, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 635, 118,
	129, 194, 697, 252, 168, 314, 567, 160, 0, 0,
	626, 628, 638, 655, 120, 121, 130, 139, 146, 159,
	164, 167, 173, 177, 180, 182, 183, 184, 188, 202,
	205, 206, 207, 208, 222, 223, 225, 226, 229, 230,
	233, 235, 236, 237, 239, 240, 241, 246, 249, 251,
	253, 256, 262, 264, 265, 266, 268, 269, 270, 275,
	276, 277, 278, 286, 290, 300, 301, 311, 320, 322,
	674, 681, 661, 294, 619, 684, 591, 608, 695, 609,
	612, 650, 577, 631, 228, 606, 578, 0, 595, 568,
	602, 569, 592, 621, 162, 590, 663, 634, 683, 192,
	646, 0, 153, 200, 198, 0, 0, 0, 234, 292,
	682, 627, 0, 690, 195, 0, 643, 315, 283, 213,
	0, 0, 623, 670, 629, 659, 618, 652, 584, 642,
	685, 607, 648, 686, 76, 0, 0, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 645, 680,
	604, 647, 649, 566, 644, 0, 572, 579, 694, 676,
	598, 599, 600, 0, 0, 0, 0, 0, 0, 0,
	622, 630, 656, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 640, 0, 0, 0, 580, 573,
	0, 0, 620, 0, 0, 0, 583, 122, 597, 657,
	0, 564, 172, 214, 133, 660, 675, 617, 185, 321,
	679, 614, 613, 248, 0, 288, 175, 193, 137, 119,
	131, 147, 174, 224, 257, 267, 605, 565, 664, 593,
	603, 154, 601, 260, 232, 310, 0, 637, 238, 259,
	196, 299, 250, 308, 309, 176, 293, 318, 323, 280,
	163, 0, 123, 0, 245, 158, 189, 616, 651, 594,
	151, 654, 641, 669, 279, 138, 295, 212, 218, 148,
	150, 149, 132, 274, 297, 142, 152, 284, 263, 289,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 291, 307, 144, 271, 272, 324, 258, 126, 305,
	287, 210, 186, 187, 125, 0, 255, 161, 171, 156,
	227, 0, 170, 247, 302, 303, 155, 326, 134, 317,
	128, 135, 316, 221, 0, 220, 319, 298, 306, 211,
	204, 0, 127, 304, 209, 203, 191, 166, 178, 243,
	199, 244, 179, 216, 215, 217, 0, 570, 0, 285,
	313, 327, 201, 140, 589, 273, 296, 0, 0, 141,
	169, 165, 242, 219, 136, 181, 282, 190, 197, 254,
	325, 231, 261, 145, 312, 281, 587, 588, 585, 0,
	586, 632, 633, 687, 688, 689, 658, 581, 0, 671,
	672, 0, 662, 677, 678, 653, 696, 610, 611, 571,
	574, 575, 576, 582, 624, 625, 636, 639, 667, 666,
	665, 668, 673, 692, 691, 693, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 635, 118, 129,
	194, 697, 252, 168, 314, 567, 160, 0, 0, 626,
	628, 638, 655, 120, 121, 130, 139, 146, 159, 164,
	167, 173, 177, 180, 182, 183, 184, 188, 202, 205,
	206, 207, 208, 222, 223, 225, 226, 229, 230, 233,
	235, 236, 237, 239, 240, 241, 246, 249, 251, 253,
	256, 262, 264, 265, 266, 268, 269, 270, 275, 276,
	277, 278, 286, 290, 300, 301, 311, 320, 322, 674,
	681, 661, 294, 619, 684, 591, 608, 695, 609, 612,
	650, 577, 631, 228, 606, 578, 0, 595, 568, 602,
	569, 592, 621, 162, 590, 663, 634, 683, 192, 646,
	0, 153, 200, 198, 0, 0, 0, 234, 292, 682,
	627, 0, 690, 195, 0, 643, 315, 283, 213, 0,
	0, 623, 670, 629, 659, 618, 652, 584, 642, 685,
	607, 648, 686, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 645, 680, 604,
	647, 649, 566, 644, 0, 572, 579, 694, 676, 598,
	599, 600, 0, 0, 0, 0, 0, 0, 0, 622,
	630, 656, 615, 0, 0, 0, 0, 0, 0, 1306,
	0, 596, 0, 640, 0, 0, 0, 580, 573, 0,
	0, 620, 0, 0, 0, 583, 122, 597, 657, 0,
	564, 172, 214, 133, 660, 675, 617, 185, 321, 679,
	614, 613, 248, 0, 288, 175, 193, 137, 119, 131,
	147, 174, 224, 257, 267, 605, 565, 664, 593, 603,
	154, 601, 260, 232, 310, 0, 637, 238, 259, 196,
	299, 250, 308, 309, 176, 293, 318, 323, 280, 163,
	0, 123, 0, 245, 158, 189, 616, 651, 594, 151,
	654, 641, 669, 279, 138, 295, 212, 218, 148, 150,
	149, 132, 274, 297, 142, 152, 284, 263, 289, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	291, 307, 144, 271, 272, 324, 258, 126, 305, 287,
	210, 186, 187, 125, 0, 255, 161, 171, 156, 227,
	0, 170, 247, 302, 303, 155, 326, 134, 317, 128,
	135, 316, 221, 0, 220, 319, 298, 306, 211, 204,
	0, 127, 304, 209, 203, 191, 166, 178, 243, 199,
	244, 179, 216, 215, 217, 0, 570, 0, 285, 313,
	327, 201, 140, 589, 273, 296, 0, 0, 141, 169,
	165, 242, 219, 136, 181, 282, 190, 197, 254, 325,
	231, 261, 145, 312, 281, 587, 588, 585, 0, 586,
	632, 633, 687, 688, 689, 658, 581, 0, 671, 672,
	0, 662, 677, 678, 653, 696, 610, 611, 571, 574,
	575, 576, 582, 624, 625, 636, 639, 667, 666, 665,
	668, 673, 692, 691, 693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 635, 118, 129, 194,
	697, 252, 168, 314, 567, 160, 0, 0, 626, 628,
	638, 655, 120, 121, 130, 139, 146, 159, 164, 167,
	173, 177, 180, 182, 183, 184, 188, 202, 205, 206,
	207, 208, 222, 223, 225, 226, 229, 230, 233, 235,
	236, 237, 239, 240, 241, 246, 249, 251, 253, 256,
	262, 264, 265, 266, 268, 269, 270, 275, 276, 277,
	278, 286, 290, 300, 301, 311, 320, 322, 674, 681,
	661, 294, 619, 684, 591, 608, 695, 609, 612, 650,
	577, 631, 228, 606, 578, 0, 595, 568, 602, 569,
	592, 621, 162, 590, 663, 634, 683, 192, 646, 0,
	153, 200, 198, 0, 0, 0, 234, 292, 682, 627,
	0, 690, 195, 0, 643, 315, 283, 213, 0, 0,
	623, 670, 629, 659, 618, 652, 584, 642, 685, 607,
	648, 686, 0, 0, 0, 436, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 0, 645, 680, 604, 647,
	649, 566, 644, 0, 572, 579, 694, 676, 598, 599,
	600, 0, 0, 0, 0, 0, 0, 0, 622, 630,
	656, 615, 0, 0, 0, 0, 0, 0, 1170, 0,
	596, 0, 640, 0, 0, 0, 580, 573, 0, 0,
	620, 0, 0, 0, 583, 122, 597, 657, 0, 564,
	172, 214, 133, 660, 675, 617, 185, 321, 679, 614,
	613, 248, 0, 288, 175, 193, 137, 119, 131, 147,
	174, 224, 257, 267, 605, 565, 664, 593, 603, 154,
	601, 260, 232, 310, 0, 637, 238, 259, 196, 299,
	250, 308, 309, 176, 293, 318, 323, 280, 163, 0,
	123, 0, 245, 158, 189, 616, 651, 594, 151, 654,
	641, 669, 279, 138, 295, 212, 218, 148, 150, 149,
	132, 274, 297, 142, 152, 284, 263, 289, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 291,
	307, 144, 271, 272, 324, 258, 126, 305, 287, 210,
	186, 187, 125, 0, 255, 161, 171, 156, 227, 0,
	170, 247, 302, 303, 155, 326, 134, 317, 128, 135,
	316, 221, 0, 220, 319, 298, 306, 211, 204, 0,
	127, 304, 209, 203, 191, 166, 178, 243, 199, 244,
	179, 216, 215, 217, 0, 570, 0, 285, 313, 327,
	201, 140, 589, 273, 296, 0, 0, 141, 169, 165,
	242, 219, 136, 181, 282, 190, 197, 254, 325, 231,
	261, 145, 312, 281, 587, 588, 585, 0, 586, 632,
	633, 687, 688, 689, 658, 581, 0, 671, 672, 0,
	662, 677, 678, 653, 696, 610, 611, 571, 574, 575,
	576, 582, 624, 625, 636, 639, 667, 666, 665, 668,
	673, 692, 691, 693, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 635, 118, 129, 194, 697,
	252, 168, 314, 567, 160, 0, 0, 626, 628, 638,
	655, 120, 121, 130, 139, 146, 159, 164, 167, 173,
	177, 180, 182, 183, 184, 188, 202, 205, 206, 207,
	208, 222, 223, 225, 226, 229, 230, 233, 235, 236,
	237, 239, 240, 241, 246, 249, 251, 253, 256, 262,
	264, 265, 266, 268, 269, 270, 275, 276, 277, 278,
	286, 290, 300, 301, 311, 320, 322, 674, 681, 661,
	294, 619, 684, 591, 608, 695, 609, 612, 650, 577,
	631, 228, 606, 578, 0, 595, 568, 602, 569, 592,
	621, 162, 590, 663, 634, 683, 192, 646, 0, 153,
	200, 198, 0, 0, 0, 234, 292, 682, 627, 0,
	690, 195, 0, 643, 315, 283, 213, 0, 0, 623,
	670, 629, 659, 618, 652, 584, 642, 685, 607, 648,
	686, 0, 0, 0, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 645, 680, 604, 647, 649,
	566, 644, 0, 572, 579, 694, 676, 598, 599, 600,
	0, 0, 0, 0, 0, 0, 0, 622, 630, 656,
	615, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 640, 0, 0, 0, 580, 573, 0, 0, 620,
	0, 0, 0, 583, 122, 597, 657, 0, 564, 172,
	214, 133, 660, 675, 617, 185, 321, 679, 614, 613,
	248, 0, 288, 175, 193, 137, 119, 131, 147, 174,
	224, 257, 267, 605, 565, 664, 593, 603, 154, 601,
	260, 232, 310, 0, 637, 238, 259, 196, 299, 250,
	308, 309, 176, 293, 318, 323, 280, 163, 0, 123,
	0, 245, 158, 189, 616, 651, 594, 151, 654, 641,
	669, 279, 138, 295, 212, 218, 148, 150, 149, 132,
	274, 297, 142, 152, 284, 263, 289, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 291, 307,
	144, 271, 272, 324, 258, 126, 305, 287, 210, 186,
	187, 125, 0, 255, 161, 171, 156, 227, 0, 170,
	247, 302, 303, 155, 326, 134, 317, 128, 135, 316,
	221, 0, 220, 319, 298, 306, 211, 204, 0, 127,
	304, 209, 203, 191, 166, 178, 243, 199, 244, 179,
	216, 215, 217, 0, 570, 0, 285, 313, 327, 201,
	140, 589, 273, 296, 0, 0, 141, 169, 165, 242,
	219, 136, 181, 282, 190, 197, 254, 325, 231, 261,
	145, 312, 281, 587, 588, 585, 0, 586, 632, 633,
	687, 688, 689, 658, 581, 0, 671, 672, 0, 662,
	677, 678, 653, 696, 610, 611, 571, 574, 575, 576,
	582, 624, 625, 636, 639, 667, 666, 665, 668, 673,
	692, 691, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 635, 118, 129, 194, 697, 252,
	168, 314, 567, 160, 0, 0, 626, 628, 638, 655,
	120, 121, 130, 139, 146, 159, 164, 167, 173, 177,
	180, 182, 183, 184, 188, 202, 205, 206, 207, 208,
	222, 223, 225, 226, 229, 230, 233, 235, 236, 237,
	239, 240, 241, 246, 249, 251, 253, 256, 262, 264,
	265, 266, 268, 269, 270, 275, 276, 277, 278, 286,
	290, 300, 301, 311, 320, 322, 674, 681, 661, 294,
	619, 684, 591, 608, 695, 609, 612, 650, 577, 631,
	228, 606, 578, 0, 595, 568, 602, 569, 592, 621,
	162, 590, 663, 634, 683, 192, 646, 0, 153, 200,
	198, 0, 0, 0, 234, 292, 682, 627, 0, 690,
	195, 0, 643, 315, 283, 213, 0, 0, 623, 670,
	629, 659, 618, 652, 584, 642, 685, 607, 648, 686,
	0, 0, 0, 436, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 0, 645, 680, 604, 647, 649, 566,
	644, 0, 572, 579, 694, 676, 598, 599, 600, 0,
	0, 0, 0, 0, 0, 0, 622, 630, 656, 615,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	640, 0, 0, 0, 580, 573, 0, 0, 620, 0,
	0, 0, 583, 122, 597, 657, 0, 564, 172, 214,
	133, 660, 675, 617, 185, 321, 679, 614, 613, 248,
	0, 288, 175, 193, 137, 119, 131, 147, 174, 224,
	257, 267, 605, 565, 664, 593, 603, 154, 601, 260,
	232, 310, 0, 637, 238, 259, 196, 299, 250, 308,
	309, 176, 293, 318, 323, 280, 163, 0, 123, 0,
	245, 158, 189, 616, 651, 594, 151, 654, 641, 669,
	279, 138, 295, 212, 218, 148, 150, 149, 132, 274,
	297, 142, 152, 284, 263, 289, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 291, 307, 144,
	271, 272, 324, 258, 126, 305, 287, 210, 186, 187,
	125, 0, 255, 161, 171, 156, 227, 0, 170, 247,
	302, 303, 155, 326, 134, 317, 128, 135, 316, 221,
	0, 220, 319, 298, 306, 211, 204, 0, 127, 304,
	209, 203, 191, 166, 178, 243, 199, 244, 179, 216,
	215, 217, 0, 570, 0, 285, 313, 327, 201, 140,
	589, 273, 296, 0, 0, 141, 169, 165, 242, 219,
	136, 181, 282, 190, 197, 254, 325, 231, 261, 145,
	312, 281, 587, 588, 585, 0, 586, 632, 633, 687,
	688, 689, 658, 581, 0, 671, 672, 0, 662, 677,
	678, 653, 696, 610, 611, 571, 574, 575, 576, 582,
	624, 625, 636, 639, 667, 666, 665, 668, 673, 692,
	691, 693, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 635, 118, 129, 194, 697, 252, 168,
	314, 567, 160, 0, 0, 626, 628, 638, 655, 120,
	121, 130, 139, 146, 159, 164, 167, 173, 177, 180,
	182, 183, 184, 188, 202, 205, 206, 207, 208, 222,
	223, 225, 226, 229, 230, 233, 235, 236, 237, 239,
	240, 241, 246, 249, 251, 253, 256, 262, 264, 265,
	266, 268, 269, 270, 275, 276, 277, 278, 286, 290,
	300, 301, 311, 320, 322, 674, 681, 661, 294, 619,
	684, 591, 608, 695, 609, 612, 650, 577, 631, 228,
	606, 578, 0, 595, 568, 602, 569, 592, 621, 162,
	590, 663, 634, 683, 192, 646, 0, 153, 200, 198,
	0, 0, 0, 234, 292, 1336, 1340, 0, 690, 195,
	0, 643, 315, 283, 213, 0, 0, 623, 670, 629,
	659, 618, 652, 584, 642, 685, 607, 648, 686, 0,
	0, 0, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 645, 680, 604, 647, 649, 566, 644,
	0, 572, 579, 694, 676, 598, 599, 600, 0, 0,
	0, 0, 0, 0, 0, 622, 630, 656, 615, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 640,
	0, 0, 0, 580, 573, 0, 0, 620, 0, 0,
	0, 583, 122, 597, 657, 0, 564, 172, 214, 133,
	660, 675, 1339, 185, 321, 679, 614, 613, 1334, 0,
	1335, 175, 193, 561, 119, 131, 1332, 1338, 224, 257,
	267, 605, 565, 664, 593, 603, 154, 601, 260, 232,
	310, 0, 637, 238, 259, 196, 299, 250, 308, 309,
	176, 293, 318, 323, 280, 163, 0, 123, 0, 245,
	158, 189, 616, 651, 594, 151, 654, 641, 669, 279,
	138, 295, 212, 218, 148, 150, 149, 132, 274, 297,
	142, 152, 284, 263, 289, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 291, 307, 144, 271,
	272, 324, 258, 126, 305, 287, 210, 186, 187, 125,
	0, 255, 161, 171, 156, 227, 0, 170, 247, 302,
	303, 155, 326, 134, 317, 128, 135, 316, 221, 0,
	220, 319, 298, 306, 211, 204, 0, 127, 304, 209,
	203, 191, 166, 178, 243, 199, 244, 179, 216, 215,
	217, 0, 570, 0, 285, 313, 327, 201, 140, 589,
	273, 296, 0, 0, 141, 169, 165, 242, 219, 136,
	181, 282, 190, 197, 254, 325, 231, 261, 145, 312,
	281, 587, 588, 585, 0, 586, 632, 633, 687, 688,
	689, 658, 581, 0, 671, 672, 0, 662, 677, 678,
	653, 696, 610, 611, 571, 574, 575, 576, 582, 624,
	625, 636, 639, 667, 666, 665, 668, 673, 692, 691,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 118, 129, 194, 697, 252, 168, 314,
	567, 160, 0, 0, 626, 628, 638, 655, 120, 121,
	130, 139, 146, 159, 164, 167, 173, 177, 180, 182,
	183, 184, 188, 202, 205, 206, 207, 208, 222, 223,
	225, 226, 229, 230, 233, 235, 236, 237, 239, 240,
	241, 246, 249, 251, 253, 256, 262, 264, 265, 266,
	268, 269, 270, 275, 276, 277, 278, 286, 290, 300,
	301, 311, 320, 322, 674, 681, 661, 294, 619, 684,
	591, 608, 695, 609, 612, 650, 577, 631, 228, 606,
	578, 0, 595, 568, 602, 569, 592, 621, 162, 590,
	663, 634, 683, 192, 646, 0, 153, 200, 198, 0,
	0, 0, 234, 292, 682, 627, 0, 690, 195, 0,
	643, 315, 283, 213, 0, 0, 623, 670, 629, 659,
	618, 652, 584, 642, 685, 607, 648, 686, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 0, 645, 680, 604, 647, 649, 566, 644, 0,
	572, 579, 694, 676, 598, 599, 600, 0, 0, 0,
	0, 0, 0, 0, 622, 630, 656, 615, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 640, 0,
	0, 0, 580, 573, 0, 0, 620, 0, 0, 0,
	583, 122, 597, 657, 0, 564, 172, 214, 133, 660,
	675, 617, 185, 321, 679, 614, 613, 248, 0, 288,
	175, 193, 137, 119, 131, 147, 174, 224, 257, 267,
	605, 565, 664, 593, 603, 154, 601, 260, 232, 310,
	0, 637, 238, 259, 196, 299, 250, 308, 309, 176,
	293, 318, 323, 280, 163, 0, 123, 0, 245, 158,
	189, 616, 651, 594, 151, 654, 641, 669, 279, 138,
	295, 212, 218, 148, 150, 149, 132, 274, 297, 142,
	152, 284, 263, 289, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 291, 307, 144, 271, 272,
	324, 258, 126, 305, 287, 210, 186, 187, 125, 0,
	255, 161, 171, 156, 227, 0, 170, 247, 302, 303,
	155, 326, 134, 317, 128, 135, 316, 221, 0, 220,
	319, 298, 306, 211, 204, 0, 127, 304, 209, 203,
	191, 166, 178, 243, 199, 244, 179, 216, 215, 217,
	0, 570, 0, 285, 313, 327, 201, 140, 589, 273,
	296, 0, 0, 141, 169, 165, 242, 219, 136, 181,
	282, 190, 197, 254, 325, 231, 261, 145, 312, 281,
	587, 588, 585, 0, 586, 632, 633, 687, 688, 689,
	658, 581, 0, 671, 672, 0, 662, 677, 678, 653,
	696, 610, 611, 571, 574, 575, 576, 582, 624, 625,
	636, 639, 667, 666, 665, 668, 673, 692, 691, 693,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 635, 118, 129, 194, 697, 252, 168, 314, 567,
	160, 0, 0, 626, 628, 638, 655, 120, 121, 130,
	139, 146, 159, 164, 167, 173, 177, 180, 182, 183,
	184, 188, 202, 205, 206, 207, 208, 222, 223, 225,
	226, 229, 230, 233, 235, 236, 237, 239, 240, 241,
	246, 249, 251, 253, 256, 262, 264, 265, 266, 268,
	269, 270, 275, 276, 277, 278, 286, 290, 300, 301,
	311, 320, 322, 674, 681, 661, 294, 619, 684, 591,
	608, 695, 609, 612, 650, 577, 631, 228, 606, 578,
	0, 595, 568, 602, 569, 592, 621, 162, 590, 663,
	634, 683, 192, 646, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 682, 627, 0, 690, 195, 0, 643,
	315, 283, 213, 0, 0, 623, 670, 629, 659, 618,
	652, 584, 642, 685, 607, 648, 686, 0, 0, 0,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 645, 680, 604, 647, 649, 566, 644, 0, 572,
	579, 694, 676, 598, 599, 600, 0, 0, 0, 0,
	0, 0, 0, 622, 630, 656, 615, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 640, 0, 0,
	0, 580, 573, 0, 0, 620, 0, 0, 0, 583,
	122, 597, 657, 0, 564, 172, 214, 133, 660, 675,
	617, 185, 321, 679, 614, 613, 248, 0, 288, 175,
	193, 561, 119, 131, 557, 174, 224, 257, 267, 605,
	565, 664, 593, 603, 154, 601, 260, 232, 310, 0,
	637, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	616, 651, 594, 151, 654, 641, 669, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 135, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	570, 0, 285, 313, 327, 201, 140, 589, 273, 296,
	0, 0, 141, 169, 165, 242, 219, 136, 181, 282,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 587,
	588, 585, 0, 586, 632, 633, 687, 688, 689, 658,
	581, 0, 671, 672, 0, 662, 677, 678, 653, 696,
	610, 611, 571, 574, 575, 576, 582, 624, 625, 636,
	639, 667, 666, 665, 668, 673, 692, 691, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	635, 118, 129, 194, 697, 252, 168, 314, 567, 160,
	0, 0, 626, 628, 638, 655, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 240, 241, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 674, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	438, 0, 0, 0, 162, 435, 0, 0, 0, 192,
	0, 0, 153, 200, 198, 0, 0, 0, 234, 292,
	0, 0, 0, 482, 195, 0, 0, 315, 283, 213,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 1316, 0, 76, 0, 0, 436, 459, 458,
	461, 462, 463, 464, 0, 0, 143, 460, 465, 466,
	467, 1317, 0, 0, 433, 450, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 496, 0, 449, 0, 0, 444,
	445, 446, 451, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 172, 214, 133, 473, 0, 0, 185, 321,
	0, 0, 494, 248, 0, 288, 175, 193, 137, 119,
	131, 147, 174, 224, 257, 267, 479, 0, 0, 0,
	0, 154, 0, 260, 232, 310, 0, 0, 238, 259,
	196, 299, 250, 308, 309, 176, 293, 318, 323, 280,
	163, 0, 123, 0, 245, 158, 189, 0, 0, 0,
	151, 0, 0, 0, 279, 138, 295, 212, 218, 148,
	150, 149, 132, 274, 297, 142, 152, 284, 263, 289,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 291, 307, 144, 271, 272, 324, 258, 126, 305,
	287, 210, 186, 187, 125, 0, 255, 161, 171, 156,
	227, 0, 170, 247, 302, 303, 155, 326, 134, 317,
	128, 135, 316, 221, 0, 220, 319, 298, 306, 211,
	204, 0, 127, 304, 209, 203, 191, 166, 178, 243,
	199, 244, 179, 216, 215, 217, 0, 0, 0, 285,
	313, 327, 201, 140, 0, 273, 296, 0, 0, 141,
	169, 165, 242, 219, 136, 181, 282, 190, 197, 254,
	325, 231, 261, 145, 312, 281, 483, 495, 489, 491,
	490, 487, 488, 486, 485, 484, 497, 474, 475, 476,
	477, 480, 0, 492, 493, 0, 0, 0, 0, 510,
	511, 512, 513, 514, 515, 516, 509, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 498, 499, 500, 501,
	502, 503, 504, 505, 508, 506, 507, 478, 118, 129,
	194, 0, 252, 168, 314, 0, 160, 0, 0, 0,
	0, 0, 0, 120, 121, 130, 139, 146, 159, 164,
	167, 173, 177, 180, 182, 183, 184, 188, 202, 205,
	206, 207, 208, 222, 223, 225, 226, 229, 230, 233,
	235, 236, 237, 239, 240, 241, 246, 249, 251, 253,
	256, 262, 264, 265, 266, 268, 269, 270, 275, 276,
	277, 278, 286, 290, 300, 301, 311, 320, 322, 33,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 438, 0, 0,
	0, 162, 435, 0, 0, 0, 192, 0, 0, 153,
	200, 198, 0, 0, 0, 234, 292, 0, 0, 0,
	482, 195, 0, 0, 315, 283, 213, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 436, 459, 458, 461, 462, 463,
	464, 0, 0, 143, 460, 465, 466, 467, 0, 0,
	0, 433, 450, 0, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 496, 0, 449, 0, 0, 444, 445, 446, 451,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 172,
	214, 133, 473, 0, 0, 185, 321, 0, 0, 494,
	248, 0, 288, 175, 193, 137, 119, 131, 147, 174,
	224, 257, 267, 479, 0, 0, 0, 0, 154, 0,
	260, 232, 310, 0, 0, 238, 259, 196, 299, 250,
	308, 309, 176, 293, 318, 323, 280, 163, 0, 123,
	0, 245, 158, 189, 0, 0, 0, 151, 0, 0,
	0, 279, 138, 295, 212, 218, 148, 150, 149, 132,
	274, 297, 142, 152, 284, 263, 289, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 291, 307,
	144, 271, 272, 324, 258, 126, 305, 287, 210, 186,
	187, 125, 0, 255, 161, 171, 156, 227, 0, 170,
	247, 302, 303, 155, 326, 134, 317, 128, 135, 316,
	221, 0, 220, 319, 298, 306, 211, 204, 0, 127,
	304, 209, 203, 191, 166, 178, 243, 199, 244, 179,
	216, 215, 217, 0, 0, 0, 285, 313, 327, 201,
	140, 0, 273, 296, 0, 0, 141, 169, 165, 242,
	219, 136, 181, 282, 190, 197, 254, 325, 231, 261,
	145, 312, 281, 483, 495, 489, 491, 490, 487, 488,
	486, 485, 484, 497, 474, 475, 476, 477, 480, 0,
	492, 493, 0, 0, 0, 0, 510, 511, 512, 513,
	514, 515, 516, 509, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 498, 499, 500, 501, 502, 503, 504,
	505, 508, 506, 507, 478, 118, 129, 194, 75, 252,
	168, 314, 0, 160, 0, 0, 0, 0, 0, 0,
	120, 121, 130, 139, 146, 159, 164, 167, 173, 177,
	180, 182, 183, 184, 188, 202, 205, 206, 207, 208,
	222, 223, 225, 226, 229, 230, 233, 235, 236, 237,
	239, 240, 241, 246, 249, 251, 253, 256, 262, 264,
	265, 266, 268, 269, 270, 275, 276, 277, 278, 286,
	290, 300, 301, 311, 320, 322, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 438, 0, 0, 0, 162, 435, 0,
	0, 0, 192, 0, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 0, 0, 0, 482, 195, 0, 0,
	315, 283, 213, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	436, 459, 458, 461, 462, 463, 464, 0, 0, 143,
	460, 465, 466, 467, 0, 0, 0, 433, 450, 0,
	481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 447, 448, 429, 0, 0, 0, 496, 0, 449,
	0, 0, 444, 445, 446, 451, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 172, 214, 133, 473, 0,
	0, 185, 321, 0, 0, 494, 248, 0, 288, 175,
	193, 137, 119, 131, 147, 174, 224, 257, 267, 479,
	0, 0, 0, 0, 154, 0, 260, 232, 310, 0,
	0, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	0, 0, 0, 151, 0, 0, 0, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 135, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	0, 0, 285, 313, 327, 201, 140, 0, 273, 296,
	0, 0, 141, 169, 165, 242, 219, 136, 181, 282,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 483,
	495, 489, 491, 490, 487, 488, 486, 485, 484, 497,
	474, 475, 476, 477, 480, 0, 492, 493, 0, 0,
	0, 0, 510, 511, 512, 513, 514, 515, 516, 509,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 498,
	499, 500, 501, 502, 503, 504, 505, 508, 506, 507,
	478, 118, 129, 194, 0, 252, 168, 314, 0, 160,
	0, 0, 0, 0, 0, 0, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 240, 241, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 438,
	0, 0, 0, 162, 435, 0, 0, 0, 192, 0,
	0, 153, 200, 198, 0, 0, 0, 234, 292, 0,
	0, 0, 482, 195, 0, 0, 315, 283, 213, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 797, 436, 459, 458, 461,
	462, 463, 464, 0, 0, 143, 460, 465, 466, 467,
	0, 0, 0, 433, 450, 0, 481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 496, 0, 449, 0, 0, 444, 445,
	446, 451, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 172, 214, 133, 473, 0, 0, 185, 321, 0,
	0, 494, 248, 0, 288, 175, 193, 137, 119, 131,
	147, 174, 224, 257, 267, 479, 0, 0, 0, 0,
	154, 0, 260, 232, 310, 0, 0, 238, 259, 196,
	299, 250, 308, 309, 176, 293, 318, 323, 280, 163,
	0, 123, 0, 245, 158, 189, 0, 0, 0, 151,
	0, 0, 0, 279, 138, 295, 212, 218, 148, 150,
	149, 132, 274, 297, 142, 152, 284, 263, 289, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	291, 307, 144, 271, 272, 324, 258, 126, 305, 287,
	210, 186, 187, 125, 0, 255, 161, 171, 156, 227,
	0, 170, 247, 302, 303, 155, 326, 134, 317, 128,
	135, 316, 221, 0, 220, 319, 298, 306, 211, 204,
	0, 127, 304, 209, 203, 191, 166, 178, 243, 199,
	244, 179, 216, 215, 217, 0, 0, 0, 285, 313,
	327, 201, 140, 0, 273, 296, 0, 0, 141, 169,
	165, 242, 219, 136, 181, 282, 190, 197, 254, 325,
	231, 261, 145, 312, 281, 483, 495, 489, 491, 490,
	487, 488, 486, 485, 484, 497, 474, 475, 476, 477,
	480, 0, 492, 493, 0, 0, 0, 0, 510, 511,
	512, 513, 514, 515, 516, 509, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 498, 499, 500, 501, 502,
	503, 504, 505, 508, 506, 507, 478, 118, 129, 194,
	0, 252, 168, 314, 0, 160, 0, 0, 0, 0,
	0, 0, 120, 121, 130, 139, 146, 159, 164, 167,
	173, 177, 180, 182, 183, 184, 188, 202, 205, 206,
	207, 208, 222, 223, 225, 226, 229, 230, 233, 235,
	236, 237, 239, 240, 241, 246, 249, 251, 253, 256,
	262, 264, 265, 266, 268, 269, 270, 275, 276, 277,
	278, 286, 290, 300, 301, 311, 320, 322, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 438, 0, 0, 0, 162,
	435, 0, 0, 0, 192, 0, 0, 153, 200, 198,
	0, 0, 0, 234, 292, 0, 0, 0, 482, 195,
	0, 0, 315, 283, 213, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 436, 459, 458, 461, 462, 463, 464, 0,
	0, 143, 460, 465, 466, 467, 0, 0, 0, 433,
	450, 0, 481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 447, 448, 1212, 0, 0, 0, 496,
	0, 449, 0, 0, 444, 445, 446, 451, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 172, 214, 133,
	473, 0, 0, 185, 321, 0, 0, 494, 248, 0,
	288, 175, 193, 137, 119, 131, 147, 174, 224, 257,
	267, 479, 0, 0, 0, 0, 154, 0, 260, 232,
	310, 0, 0, 238, 259, 196, 299, 250, 308, 309,
	176, 293, 318, 323, 280, 163, 0, 123, 0, 245,
	158, 189, 0, 0, 0, 151, 0, 0, 0, 279,
	138, 295, 212, 218, 148, 150, 149, 132, 274, 297,
	142, 152, 284, 263, 289, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 291, 307, 144, 271,
	272, 324, 258, 126, 305, 287, 210, 186, 187, 125,
	0, 255, 161, 171, 156, 227, 0, 170, 247, 302,
	303, 155, 326, 134, 317, 128, 135, 316, 221, 0,
	220, 319, 298, 306, 211, 204, 0, 127, 304, 209,
	203, 191, 166, 178, 243, 199, 244, 179, 216, 215,
	217, 0, 0, 0, 285, 313, 327, 201, 140, 0,
	273, 296, 0, 0, 141, 169, 165, 242, 219, 136,
	181, 282, 190, 197, 254, 325, 231, 261, 145, 312,
	281, 483, 495, 489, 491, 490, 487, 488, 486, 485,
	484, 497, 474, 475, 476, 477, 480, 0, 492, 493,
	0, 0, 0, 0, 510, 511, 512, 513, 514, 515,
	516, 509, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 498, 499, 500, 501, 502, 503, 504, 505, 508,
	506, 507, 478, 118, 129, 194, 0, 252, 168, 314,
	0, 160, 0, 0, 0, 0, 0, 0, 120, 121,
	130, 139, 146, 159, 164, 167, 173, 177, 180, 182,
	183, 184, 188, 202, 205, 206, 207, 208, 222, 223,
	225, 226, 229, 230, 233, 235, 236, 237, 239, 240,
	241, 246, 249, 251, 253, 256, 262, 264, 265, 266,
	268, 269, 270, 275, 276, 277, 278, 286, 290, 300,
	301, 311, 320, 322, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 438, 0, 0, 0, 162, 435, 0, 0, 0,
	192, 0, 0, 153, 200, 198, 0, 0, 0, 234,
	292, 0, 0, 0, 482, 195, 0, 0, 315, 283,
	213, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 436, 459,
	1223, 461, 462, 463, 464, 0, 0, 143, 460, 465,
	466, 467, 0, 0, 0, 433, 450, 0, 481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 447,
	448, 1212, 0, 0, 0, 496, 0, 449, 0, 0,
	444, 445, 446, 451, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 172, 214, 133, 473, 0, 0, 185,
	321, 0, 0, 494, 248, 0, 288, 175, 193, 137,
	119, 131, 147, 174, 224, 257, 267, 479, 0, 0,
	0, 0, 154, 0, 260, 232, 310, 0, 0, 238,
	259, 196, 299, 250, 308, 309, 176, 293, 318, 323,
	280, 163, 0, 123, 0, 245, 158, 189, 0, 0,
	0, 151, 0, 0, 0, 279, 138, 295, 212, 218,
	148, 150, 149, 132, 274, 297, 142, 152, 284, 263,
	289, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 291, 307, 144, 271, 272, 324, 258, 126,
	305, 287, 210, 186, 187, 125, 0, 255, 161, 171,
	156, 227, 0, 170, 247, 302, 303, 155, 326, 134,
	317, 128, 135, 316, 221, 0, 220, 319, 298, 306,
	211, 204, 0, 127, 304, 209, 203, 191, 166, 178,
	243, 199, 244, 179, 216, 215, 217, 0, 0, 0,
	285, 313, 327, 201, 140, 0, 273, 296, 0, 0,
	141, 169, 165, 242, 219, 136, 181, 282, 190, 197,
	254, 325, 231, 261, 145, 312, 281, 483, 495, 489,
	491, 490, 487, 488, 486, 485, 484, 497, 474, 475,
	476, 477, 480, 0, 492, 493, 0, 0, 0, 0,
	510, 511, 512, 513, 514, 515, 516, 509, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 498, 499, 500,
	501, 502, 503, 504, 505, 508, 506, 507, 478, 118,
	129, 194, 0, 252, 168, 314, 0, 160, 0, 0,
	0, 0, 0, 0, 120, 121, 130, 139, 146, 159,
	164, 167, 173, 177, 180, 182, 183, 184, 188, 202,
	205, 206, 207, 208, 222, 223, 225, 226, 229, 230,
	233, 235, 236, 237, 239, 240, 241, 246, 249, 251,
	253, 256, 262, 264, 265, 266, 268, 269, 270, 275,
	276, 277, 278, 286, 290, 300, 301, 311, 320, 322,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 438, 0, 0,
	0, 162, 435, 0, 0, 0, 192, 0, 0, 153,
	200, 198, 0, 0, 0, 234, 292, 0, 0, 0,
	482, 195, 0, 0, 315, 283, 213, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 436, 459, 1220, 461, 462, 463,
	464, 0, 0, 143, 460, 465, 466, 467, 0, 0,
	0, 433, 450, 0, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 447, 448, 1212, 0, 0,
	0, 496, 0, 449, 0, 0, 444, 445, 446, 451,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 172,
	214, 133, 473, 0, 0, 185, 321, 0, 0, 494,
	248, 0, 288, 175, 193, 137, 119, 131, 147, 174,
	224, 257, 267, 479, 0, 0, 0, 0, 154, 0,
	260, 232, 310, 0, 0, 238, 259, 196, 299, 250,
	308, 309, 176, 293, 318, 323, 280, 163, 0, 123,
	0, 245, 158, 189, 0, 0, 0, 151, 0, 0,
	0, 279, 138, 295, 212, 218, 148, 150, 149, 132,
	274, 297, 142, 152, 284, 263, 289, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 291, 307,
	144, 271, 272, 324, 258, 126, 305, 287, 210, 186,
	187, 125, 0, 255, 161, 171, 156, 227, 0, 170,
	247, 302, 303, 155, 326, 134, 317, 128, 135, 316,
	221, 0, 220, 319, 298, 306, 211, 204, 0, 127,
	304, 209, 203, 191, 166, 178, 243, 199, 244, 179,
	216, 215, 217, 0, 0, 0, 285, 313, 327, 201,
	140, 0, 273, 296, 0, 0, 141, 169, 165, 242,
	219, 136, 181, 282, 190, 197, 254, 325, 231, 261,
	145, 312, 281, 483, 495, 489, 491, 490, 487, 488,
	486, 485, 484, 497, 474, 475, 476, 477, 480, 0,
	492, 493, 0, 0, 0, 0, 510, 511, 512, 513,
	514, 515, 516, 509, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 498, 499, 500, 501, 502, 503, 504,
	505, 508, 506, 507, 478, 118, 129, 194, 0, 252,
	168, 314, 0, 160, 0, 0, 0, 0, 0, 0,
	120, 121, 130, 139, 146, 159, 164, 167, 173, 177,
	180, 182, 183, 184, 188, 202, 205, 206, 207, 208,
	222, 223, 225, 226, 229, 230, 233, 235, 236, 237,
	239, 240, 241, 246, 249, 251, 253, 256, 262, 264,
	265, 266, 268, 269, 270, 275, 276, 277, 278, 286,
	290, 300, 301, 311, 320, 322, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 438, 0, 0, 0, 162, 435, 0,
	0, 0, 192, 0, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 0, 0, 0, 482, 195, 0, 0,
	315, 283, 213, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 1130,
	436, 459, 458, 461, 462, 463, 464, 0, 0, 143,
	460, 465, 466, 467, 0, 0, 0, 433, 450, 0,
	481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 496, 0, 449,
	0, 0, 444, 445, 446, 451, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 172, 214, 133, 473, 0,
	0, 185, 321, 0, 0, 494, 248, 0, 288, 175,
	193, 137, 119, 131, 147, 174, 224, 257, 267, 479,
	0, 0, 0, 0, 154, 0, 260, 232, 310, 0,
	0, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	0, 0, 0, 151, 0, 0, 0, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 135, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	0, 0, 285, 313, 327, 201, 140, 0, 273, 296,
	0, 0, 141, 169, 165, 242, 219, 136, 181, 282,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 483,
	495, 489, 491, 490, 487, 488, 486, 485, 484, 497,
	474, 475, 476, 477, 480, 0, 492, 493, 0, 0,
	0, 0, 510, 511, 512, 513, 514, 515, 516, 509,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 498,
	499, 500, 501, 502, 503, 504, 505, 508, 506, 507,
	478, 118, 129, 194, 0, 252, 168, 314, 0, 160,
	0, 0, 0, 0, 0, 0, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 240, 241, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 438,
	0, 0, 0, 162, 435, 0, 0, 0, 192, 0,
	0, 153, 200, 198, 0, 0, 0, 234, 292, 0,
	0, 0, 482, 195, 0, 0, 315, 283, 213, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 436, 459, 458, 461,
	462, 463, 464, 0, 0, 143, 460, 465, 466, 467,
	0, 0, 0, 433, 450, 0, 481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 496, 0, 449, 0, 0, 444, 445,
	446, 451, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 172, 214, 133, 473, 0, 0, 185, 321, 0,
	0, 494, 248, 0, 288, 175, 193, 137, 119, 131,
	147, 174, 224, 257, 267, 479, 0, 0, 0, 0,
	154, 0, 260, 232, 310, 0, 0, 238, 259, 196,
	299, 250, 308, 309, 176, 293, 318, 323, 280, 163,
	0, 123, 0, 245, 158, 189, 0, 0, 0, 151,
	0, 0, 0, 279, 138, 295, 212, 218, 148, 150,
	149, 132, 274, 297, 142, 152, 284, 263, 289, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	291, 307, 144, 271, 272, 324, 258, 126, 305, 287,
	210, 186, 187, 125, 0, 255, 161, 171, 156, 227,
	0, 170, 247, 302, 303, 155, 326, 134, 317, 128,
	135, 316, 221, 0, 220, 319, 298, 306, 211, 204,
	0, 127, 304, 209, 203, 191, 166, 178, 243, 199,
	244, 179, 216, 215, 217, 0, 0, 0, 285, 313,
	327, 201, 140, 0, 273, 296, 0, 0, 141, 169,
	165, 242, 219, 136, 181, 282, 190, 197, 254, 325,
	231, 261, 145, 312, 281, 483, 495, 489, 491, 490,
	487, 488, 486, 485, 484, 497, 474, 475, 476, 477,
	480, 0, 492, 493, 0, 0, 0, 0, 510, 511,
	512, 513, 514, 515, 516, 509, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 498, 499, 500, 501, 502,
	503, 504, 505, 508, 506, 507, 478, 118, 129, 194,
	0, 252, 168, 314, 0, 160, 0, 0, 0, 0,
	0, 0, 120, 121, 130, 139, 146, 159, 164, 167,
	173, 177, 180, 182, 183, 184, 188, 202, 205, 206,
	207, 208, 222, 223, 225, 226, 229, 230, 233, 235,
	236, 237, 239, 240, 241, 246, 249, 251, 253, 256,
	262, 264, 265, 266, 268, 269, 270, 275, 276, 277,
	278, 286, 290, 300, 301, 311, 320, 322, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 438, 0, 0, 0, 162,
	435, 0, 0, 0, 192, 0, 0, 153, 200, 198,
	0, 0, 0, 234, 292, 0, 0, 0, 482, 195,
	0, 0, 315, 283, 213, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 436, 459, 458, 461, 462, 463, 464, 0,
	0, 143, 460, 465, 466, 467, 0, 0, 0, 433,
	450, 0, 481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 496,
	0, 449, 0, 0, 444, 445, 446, 451, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 172, 214, 133,
	473, 0, 0, 185, 321, 0, 0, 494, 248, 0,
	288, 175, 193, 137, 119, 131, 147, 174, 224, 257,
	267, 479, 0, 0, 0, 0, 154, 0, 260, 232,
	310, 0, 0, 238, 259, 196, 299, 250, 308, 309,
	176, 293, 318, 323, 280, 163, 0, 123, 0, 245,
	158, 189, 0, 0, 0, 151, 0, 0, 0, 279,
	138, 295, 212, 218, 148, 150, 149, 132, 274, 297,
	142, 152, 284, 263, 289, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 291, 307, 144, 271,
	272, 324, 258, 126, 305, 287, 210, 186, 187, 125,
	0, 255, 161, 171, 156, 227, 0, 170, 247, 302,
	303, 155, 326, 134, 317, 128, 135, 316, 221, 0,
	220, 319, 298, 306, 211, 204, 0, 127, 304, 209,
	203, 191, 166, 178, 243, 199, 244, 179, 216, 215,
	217, 0, 0, 0, 285, 313, 327, 201, 140, 0,
	273, 296, 0, 0, 141, 169, 165, 242, 219, 136,
	181, 282, 190, 197, 254, 325, 231, 261, 145, 312,
	281, 483, 495, 489, 491, 490, 487, 488, 486, 485,
	484, 497, 474, 475, 476, 477, 480, 0, 492, 493,
	0, 0, 0, 0, 812, 813, 814, 815, 816, 820,
	821, 825, 826, 834, 833, 832, 835, 836, 838, 837,
	839, 817, 818, 819, 822, 823, 824, 827, 828, 831,
	829, 830, 478, 118, 129, 194, 0, 252, 168, 314,
	0, 160, 0, 0, 0, 0, 0, 0, 120, 121,
	130, 139, 146, 159, 164, 167, 173, 177, 180, 182,
	183, 184, 188, 202, 205, 206, 207, 208, 222, 223,
	225, 226, 229, 230, 233, 235, 236, 237, 239, 240,
	241, 246, 249, 251, 253, 256, 262, 264, 265, 266,
	268, 269, 270, 275, 276, 277, 278, 286, 290, 300,
	301, 311, 320, 322, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	192, 0, 0, 153, 200, 198, 0, 0, 0, 234,
	292, 0, 0, 0, 482, 195, 0, 0, 315, 283,
	213, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 436, 459,
	458, 461, 462, 463, 464, 0, 0, 143, 460, 465,
	466, 467, 0, 0, 0, 0, 450, 0, 481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 496, 0, 449, 0, 0,
	444, 445, 446, 451, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 172, 214, 133, 473, 0, 0, 185,
	321, 0, 0, 494, 248, 0, 288, 175, 193, 137,
	119, 131, 147, 174, 224, 257, 267, 479, 0, 0,
	0, 0, 154, 0, 260, 232, 310, 0, 2296, 238,
	259, 196, 299, 250, 308, 309, 176, 293, 318, 323,
	280, 163, 0, 123, 0, 245, 158, 189, 0, 0,
	0, 151, 0, 0, 0, 279, 138, 295, 212, 218,
	148, 150, 149, 132, 274, 297, 142, 152, 284, 263,
	289, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 291, 307, 144, 271, 272, 324, 258, 126,
	305, 287, 210, 186, 187, 125, 0, 255, 161, 171,
	156, 227, 0, 170, 247, 302, 303, 155, 326, 134,
	317, 128, 135, 316, 221, 0, 220, 319, 298, 306,
	211, 204, 0, 127, 304, 209, 203, 191, 166, 178,
	243, 199, 244, 179, 216, 215, 217, 0, 0, 0,
	285, 313, 327, 201, 140, 0, 273, 296, 0, 0,
	141, 169, 165, 242, 219, 136, 181, 282, 190, 197,
	254, 325, 231, 261, 145, 312, 281, 483, 495, 489,
	491, 490, 487, 488, 486, 485, 484, 497, 474, 475,
	476, 477, 480, 0, 492, 493, 0, 0, 0, 0,
	510, 511, 512, 513, 514, 515, 516, 509, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 498, 499, 500,
	501, 502, 503, 504, 505, 508, 506, 507, 478, 118,
	129, 194, 0, 252, 168, 314, 0, 160, 0, 0,
	0, 0, 0, 0, 120, 121, 130, 139, 146, 159,
	164, 167, 173, 177, 180, 182, 183, 184, 188, 202,
	205, 206, 207, 208, 222, 223, 225, 226, 229, 230,
	233, 235, 236, 237, 239, 240, 241, 246, 249, 251,
	253, 256, 262, 264, 265, 266, 268, 269, 270, 275,
	276, 277, 278, 286, 290, 300, 301, 311, 320, 322,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 192, 0, 0, 153,
	200, 198, 0, 0, 0, 234, 292, 0, 0, 0,
	482, 195, 0, 0, 315, 283, 213, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 797, 436, 459, 458, 461, 462, 463,
	464, 0, 0, 143, 460, 465, 466, 467, 0, 0,
	0, 0, 450, 0, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 496, 0, 449, 0, 0, 444, 445, 446, 451,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 172,
	214, 133, 473, 0, 0, 185, 321, 0, 0, 494,
	248, 0, 288, 175, 193, 137, 119, 131, 147, 174,
	224, 257, 267, 479, 0, 0, 0, 0, 154, 0,
	260, 232, 310, 0, 0, 238, 259, 196, 299, 250,
	308, 309, 176, 293, 318, 323, 280, 163, 0, 123,
	0, 245, 158, 189, 0, 0, 0, 151, 0, 0,
	0, 279, 138, 295, 212, 218, 148, 150, 149, 132,
	274, 297, 142, 152, 284, 263, 289, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 291, 307,
	144, 271, 272, 324, 258, 126, 305, 287, 210, 186,
	187, 125, 0, 255, 161, 171, 156, 227, 0, 170,
	247, 302, 303, 155, 326, 134, 317, 128, 135, 316,
	221, 0, 220, 319, 298, 306, 211, 204, 0, 127,
	304, 209, 203, 191, 166, 178, 243, 199, 244, 179,
	216, 215, 217, 0, 0, 0, 285, 313, 327, 201,
	140, 0, 273, 296, 0, 0, 141, 169, 165, 242,
	219, 136, 181, 282, 190, 197, 254, 325, 231, 261,
	145, 312, 281, 483, 495, 489, 491, 490, 487, 488,
	486, 485, 484, 497, 474, 475, 476, 477, 480, 0,
	492, 493, 0, 0, 0, 0, 510, 511, 512, 513,
	514, 515, 516, 509, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 498, 499, 500, 501, 502, 503, 504,
	505, 508, 506, 507, 478, 118, 129, 194, 0, 252,
	168, 314, 0, 160, 0, 0, 0, 0, 0, 0,
	120, 121, 130, 139, 146, 159, 164, 167, 173, 177,
	180, 182, 183, 184, 188, 202, 205, 206, 207, 208,
	222, 223, 225, 226, 229, 230, 233, 235, 236, 237,
	239, 240, 241, 246, 249, 251, 253, 256, 262, 264,
	265, 266, 268, 269, 270, 275, 276, 277, 278, 286,
	290, 300, 301, 311, 320, 322, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 192, 0, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 0, 0, 0, 482, 195, 0, 0,
	315, 283, 213, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	436, 459, 458, 461, 462, 463, 464, 0, 0, 143,
	460, 465, 466, 467, 0, 0, 0, 0, 450, 0,
	481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 496, 0, 449,
	0, 0, 444, 445, 446, 451, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 172, 214, 133, 473, 0,
	0, 185, 321, 0, 0, 494, 248, 0, 288, 175,
	193, 137, 119, 131, 147, 174, 224, 257, 267, 479,
	0, 0, 0, 0, 154, 0, 260, 232, 310, 0,
	0, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	0, 0, 0, 151, 0, 0, 0, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 135, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	0, 0, 285, 313, 327, 201, 140, 0, 273, 296,
	0, 0, 141, 169, 165, 242, 219, 136, 181, 282,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 483,
	495, 489, 491, 490, 487, 488, 486, 485, 484, 497,
	474, 475, 476, 477, 480, 0, 492, 493, 0, 0,
	0, 0, 510, 511, 512, 513, 514, 515, 516, 509,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 498,
	499, 500, 501, 502, 503, 504, 505, 508, 506, 507,
	478, 118, 129, 194, 0, 252, 168, 314, 0, 160,
	0, 0, 0, 0, 0, 0, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 240, 241, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 192, 0,
	0, 153, 200, 198, 0, 0, 0, 234, 292, 0,
	0, 0, 0, 195, 0, 0, 315, 283, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	1298, 0, 0, 0, 0, 0, 116, 0, 386, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 172, 214, 133, 0, 0, 0, 185, 321, 0,
	1297, 0, 248, 0, 288, 175, 193, 137, 119, 131,
	147, 174, 224, 257, 267, 0, 0, 0, 0, 0,
	154, 0, 260, 232, 310, 0, 0, 238, 259, 196,
	299, 250, 308, 309, 176, 293, 318, 323, 280, 163,
	0, 123, 0, 245, 158, 189, 0, 0, 0, 151,
	0, 0, 0, 279, 138, 295, 212, 218, 148, 150,
	149, 132, 274, 297, 142, 152, 284, 263, 289, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	291, 307, 144, 271, 272, 324, 258, 126, 305, 287,
	210, 186, 187, 125, 0, 255, 161, 171, 156, 227,
	0, 170, 247, 302, 303, 155, 326, 134, 317, 128,
	135, 316, 221, 0, 220, 319, 298, 306, 211, 204,
	0, 127, 304, 209, 203, 191, 166, 178, 243, 199,
	244, 179, 216, 215, 217, 0, 0, 0, 285, 313,
	327, 201, 140, 0, 273, 296, 0, 0, 141, 169,
	165, 242, 219, 136, 181, 282, 190, 197, 254, 325,
	231, 261, 145, 312, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 395, 396, 400, 401, 409, 408, 407,
	410, 411, 413, 412, 414, 392, 393, 394, 397, 398,
	399, 402, 403, 406, 404, 405, 0, 118, 129, 194,
	0, 252, 168, 314, 0, 160, 0, 0, 0, 0,
	0, 0, 120, 121, 130, 139, 146, 159, 164, 167,
	173, 177, 180, 182, 183, 184, 188, 202, 205, 206,
	207, 208, 222, 223, 225, 226, 229, 230, 233, 235,
	236, 237, 239, 240, 241, 246, 249, 251, 253, 256,
	262, 264, 265, 266, 268, 269, 270, 275, 276, 277,
	278, 286, 290, 300, 301, 311, 320, 322, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 192, 0, 0, 153, 200, 198,
	0, 0, 0, 234, 292, 0, 0, 0, 0, 195,
	0, 0, 315, 283, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 1298, 0, 0, 0,
	0, 0, 116, 0, 386, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 172, 214, 133,
	0, 0, 0, 185, 321, 0, 1297, 0, 248, 0,
	288, 175, 193, 137, 119, 131, 147, 174, 224, 257,
	267, 0, 0, 0, 0, 0, 154, 0, 260, 232,
	310, 0, 0, 1292, 259, 196, 299, 250, 308, 309,
	176, 293, 318, 323, 280, 163, 0, 123, 0, 245,
	158, 189, 0, 0, 0, 151, 0, 0, 0, 279,
	138, 295, 212, 218, 148, 150, 149, 132, 274, 297,
	142, 152, 284, 263, 289, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 291, 307, 144, 271,
	272, 324, 258, 126, 305, 287, 210, 186, 187, 125,
	0, 255, 161, 171, 156, 227, 0, 170, 247, 302,
	303, 155, 326, 134, 317, 128, 135, 316, 221, 0,
	220, 319, 298, 306, 211, 204, 0, 127, 304, 209,
	203, 191, 166, 178, 243, 199, 244, 179, 216, 215,
	217, 0, 0, 0, 285, 313, 327, 201, 140, 0,
	273, 296, 0, 0, 141, 169, 165, 242, 219, 136,
	181, 282, 190, 197, 254, 325, 231, 261, 145, 312,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 387, 388, 389, 390, 391, 395,
	396, 400, 401, 409, 408, 407, 410, 411, 413, 412,
	414, 392, 393, 394, 397, 398, 399, 402, 403, 406,
	404, 405, 0, 118, 129, 194, 0, 252, 168, 314,
	0, 160, 0, 0, 0, 0, 0, 0, 120, 121,
	130, 139, 146, 159, 164, 167, 173, 177, 180, 182,
	183, 184, 188, 202, 205, 206, 207, 208, 222, 223,
	225, 226, 229, 230, 233, 235, 236, 237, 239, 240,
	241, 246, 249, 251, 253, 256, 262, 264, 265, 266,
	268, 269, 270, 275, 276, 277, 278, 286, 290, 300,
	301, 311, 320, 322, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	192, 1553, 0, 153, 200, 198, 0, 0, 0, 234,
	292, 0, 0, 0, 0, 195, 0, 0, 315, 283,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	386, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 172, 214, 133, 0, 0, 0, 185,
	321, 0, 0, 0, 248, 0, 288, 175, 193, 137,
	119, 131, 147, 174, 224, 257, 267, 0, 0, 0,
	0, 0, 154, 0, 260, 232, 310, 0, 0, 238,
	259, 196, 299, 250, 308, 309, 176, 293, 318, 323,
	280, 163, 0, 123, 0, 245, 158, 189, 0, 0,
	0, 151, 0, 0, 0, 279, 138, 295, 212, 218,
	148, 150, 149, 132, 274, 297, 142, 152, 284, 263,
	289, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 291, 307, 144, 271, 272, 324, 258, 126,
	305, 287, 210, 186, 187, 125, 0, 255, 161, 171,
	156, 227, 0, 170, 247, 302, 303, 155, 326, 134,
	317, 128, 135, 316, 221, 0, 220, 319, 298, 306,
	211, 204, 0, 127, 304, 209, 203, 191, 166, 178,
	243, 199, 244, 179, 216, 215, 217, 0, 0, 0,
	285, 313, 327, 201, 140, 0, 273, 296, 0, 0,
	141, 169, 165, 242, 219, 136, 181, 282, 190, 197,
	254, 325, 231, 261, 145, 312, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 389, 390, 391, 395, 396, 400, 401, 409,
	408, 407, 410, 411, 413, 412, 414, 392, 393, 394,
	397, 398, 399, 402, 403, 406, 404, 405, 0, 118,
	129, 194, 0, 252, 168, 314, 0, 160, 0, 0,
	0, 0, 0, 0, 120, 121, 130, 139, 146, 159,
	164, 167, 173, 177, 180, 182, 183, 184, 188, 202,
	205, 206, 207, 208, 222, 223, 225, 226, 229, 230,
	233, 235, 236, 237, 239, 240, 241, 246, 249, 251,
	253, 256, 262, 264, 265, 266, 268, 269, 270, 275,
	276, 277, 278, 286, 290, 300, 301, 311, 320, 322,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 192, 0, 0, 153,
	200, 198, 0, 0, 0, 234, 292, 0, 0, 0,
	0, 195, 0, 0, 315, 283, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 386, 0, 0, 0,
	0, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 172,
	214, 133, 0, 0, 0, 185, 321, 0, 0, 0,
	248, 0, 288, 175, 193, 137, 119, 131, 147, 174,
	224, 257, 267, 0, 0, 0, 0, 0, 154, 0,
	260, 232, 310, 0, 0, 238, 259, 196, 299, 250,
	308, 309, 176, 293, 318, 323, 280, 163, 0, 123,
	0, 245, 158, 189, 0, 0, 0, 151, 0, 0,
	0, 279, 138, 295, 212, 218, 148, 150, 149, 132,
	274, 297, 142, 152, 284, 263, 289, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 291, 307,
	144, 271, 272, 324, 258, 126, 305, 287, 210, 186,
	187, 125, 0, 255, 161, 171, 156, 227, 0, 170,
	247, 302, 303, 155, 326, 134, 317, 128, 135, 316,
	221, 0, 220, 319, 298, 306, 211, 204, 0, 127,
	304, 209, 203, 191, 166, 178, 243, 199, 244, 179,
	216, 215, 217, 0, 0, 0, 285, 313, 327, 201,
	140, 0, 273, 296, 0, 0, 141, 169, 165, 242,
	219, 136, 181, 282, 190, 197, 254, 325, 231, 261,
	145, 312, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 387, 388, 389, 390,
	391, 395, 396, 400, 401, 409, 408, 407, 410, 411,
	413, 412, 414, 392, 393, 394, 397, 398, 399, 402,
	403, 406, 404, 405, 0, 118, 129, 194, 0, 252,
	168, 314, 0, 160, 0, 0, 0, 0, 0, 0,
	120, 121, 130, 139, 146, 159, 164, 167, 173, 177,
	180, 182, 183, 184, 188, 202, 205, 206, 207, 208,
	222, 223, 225, 226, 229, 230, 233, 235, 236, 237,
	239, 240, 241, 246, 249, 251, 253, 256, 262, 264,
	265, 266, 268, 269, 270, 275, 276, 277, 278, 286,
	290, 300, 301, 311, 320, 322, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 192, 0, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 0, 0, 0, 0, 195, 0, 0,
	315, 283, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	855, 0, 858, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 172, 214, 133, 0, 0,
	0, 185, 321, 0, 0, 0, 248, 0, 288, 175,
	193, 137, 119, 131, 147, 174, 224, 257, 267, 0,
	0, 0, 0, 0, 154, 0, 260, 232, 310, 0,
	0, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	0, 0, 0, 151, 0, 0, 0, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 135, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	0, 0, 285, 313, 327, 201, 140, 0, 273, 296,
	0, 0, 141, 169, 165, 242, 219, 136, 181, 282,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 395, 396, 400,
	401, 409, 408, 407, 410, 411, 413, 412, 414, 392,
	393, 394, 397, 398, 399, 402, 403, 406, 404, 405,
	0, 118, 129, 194, 0, 252, 168, 314, 0, 160,
	0, 0, 0, 0, 0, 0, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 240, 241, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 192, 0,
	0, 153, 200, 198, 0, 0, 0, 234, 292, 0,
	0, 0, 0, 195, 0, 0, 315, 283, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 867, 877, 878, 870, 871, 872,
	873, 874, 875, 876, 869, 0, 0, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 172, 214, 133, 0, 0, 0, 185, 321, 0,
	0, 0, 248, 0, 288, 175, 193, 137, 119, 131,
	147, 174, 224, 257, 267, 0, 0, 0, 0, 0,
	154, 0, 260, 232, 310, 0, 0, 238, 259, 196,
	299, 250, 308, 309, 176, 293, 318, 323, 280, 163,
	0, 123, 0, 245, 158, 189, 0, 0, 0, 151,
	0, 0, 0, 279, 138, 295, 212, 218, 148, 150,
	149, 132, 274, 297, 142, 152, 284, 263, 289, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	291, 307, 144, 271, 272, 324, 258, 126, 305, 287,
	210, 186, 187, 125, 0, 255, 161, 171, 156, 227,
	0, 170, 247, 302, 303, 155, 326, 134, 317, 128,
	135, 316, 221, 0, 220, 319, 298, 306, 211, 204,
	0, 127, 304, 209, 203, 191, 166, 178, 243, 199,
	244, 179, 216, 215, 217, 0, 0, 0, 285, 313,
	327, 201, 140, 0, 273, 296, 0, 0, 141, 169,
	165, 242, 219, 136, 181, 282, 190, 197, 254, 325,
	231, 261, 145, 312, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 129, 194,
	0, 252, 168, 314, 0, 160, 0, 0, 0, 0,
	0, 0, 120, 121, 130, 139, 146, 159, 164, 167,
	173, 177, 180, 182, 183, 184, 188, 202, 205, 206,
	207, 208, 222, 223, 225, 226, 229, 230, 233, 235,
	236, 237, 239, 240, 241, 246, 249, 251, 253, 256,
	262, 264, 265, 266, 268, 269, 270, 275, 276, 277,
	278, 286, 290, 300, 301, 311, 320, 322, 33, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 192, 0, 0, 153, 200,
	198, 0, 0, 0, 234, 292, 0, 0, 0, 1289,
	195, 0, 0, 315, 283, 213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 172, 214,
	133, 0, 0, 0, 185, 321, 0, 0, 0, 248,
	0, 288, 175, 193, 137, 119, 131, 147, 174, 224,
	257, 267, 0, 0, 0, 0, 0, 154, 0, 260,
	232, 310, 0, 0, 238, 259, 196, 299, 250, 308,
	309, 176, 293, 318, 323, 280, 163, 0, 123, 0,
	245, 158, 189, 0, 0, 0, 151, 0, 0, 0,
	279, 138, 295, 212, 218, 148, 150, 149, 132, 274,
	297, 142, 152, 284, 263, 289, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 291, 307, 144,
	271, 272, 324, 258, 126, 305, 287, 210, 186, 187,
	125, 0, 255, 161, 171, 156, 227, 0, 170, 247,
	302, 303, 155, 326, 134, 317, 128, 135, 316, 221,
	0, 220, 319, 298, 306, 211, 204, 0, 127, 304,
	209, 203, 191, 166, 178, 243, 199, 244, 179, 216,
	215, 217, 0, 0, 0, 285, 313, 327, 201, 140,
	0, 273, 296, 0, 0, 141, 169, 165, 242, 219,
	136, 181, 282, 190, 197, 254, 325, 231, 261, 145,
	312, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 129, 194, 75, 252, 168,
	314, 0, 160, 0, 0, 0, 0, 0, 0, 120,
	121, 130, 139, 146, 159, 164, 167, 173, 177, 180,
	182, 183, 184, 188, 202, 205, 206, 207, 208, 222,
	223, 225, 226, 229, 230, 233, 235, 236, 237, 239,
	240, 241, 246, 249, 251, 253, 256, 262, 264, 265,
	266, 268, 269, 270, 275, 276, 277, 278, 286, 290,
	300, 301, 311, 320, 322, 33, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 192, 0, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 0, 0, 0, 0, 195, 0, 0,
	315, 283, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 172, 214, 133, 0, 0,
	0, 185, 321, 0, 0, 0, 248, 0, 288, 175,
	193, 137, 119, 131, 147, 174, 224, 257, 267, 0,
	0, 0, 0, 0, 154, 0, 260, 232, 310, 0,
	0, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	0, 0, 0, 151, 0, 0, 0, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 135, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	0, 0, 285, 313, 327, 201, 140, 0, 273, 296,
	0, 0, 141, 169, 165, 242, 219, 136, 181, 282,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 129, 194, 75, 252, 168, 314, 0, 160,
	0, 0, 0, 0, 0, 0, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 240, 241, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 1002, 0, 0, 0, 192, 0,
	0, 153, 200, 198, 0, 0, 0, 234, 292, 0,
	0, 0, 0, 195, 0, 0, 315, 283, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 0, 1001, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 172, 214, 133, 0, 0, 0, 185, 321, 0,
	0, 0, 248, 0, 288, 175, 193, 137, 119, 131,
	147, 174, 224, 257, 267, 0, 0, 0, 0, 0,
	154, 0, 260, 232, 310, 0, 0, 238, 259, 196,
	299, 250, 308, 309, 176, 293, 318, 323, 280, 163,
	0, 123, 0, 245, 158, 189, 0, 0, 0, 151,
	0, 0, 0, 279, 138, 295, 212, 218, 148, 150,
	149, 132, 274, 297, 142, 152, 284, 263, 289, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	291, 307, 144, 271, 272, 324, 258, 126, 305, 287,
	210, 186, 187, 125, 0, 255, 161, 171, 156, 227,
	0, 170, 247, 302, 303, 155, 326, 134, 317, 128,
	135, 316, 221, 0, 220, 319, 298, 306, 211, 204,
	0, 127, 304, 209, 203, 191, 166, 178, 243, 199,
	244, 179, 216, 215, 217, 0, 0, 0, 285, 313,
	327, 201, 140, 0, 273, 296, 0, 0, 141, 169,
	165, 242, 219, 136, 181, 282, 190, 197, 254, 325,
	231, 261, 145, 312, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 129, 194,
	0, 252, 168, 314, 0, 160, 0, 0, 0, 0,
	0, 0, 120, 121, 130, 139, 146, 159, 164, 167,
	173, 177, 180, 182, 183, 184, 188, 202, 205, 206,
	207, 208, 222, 223, 225, 226, 229, 230, 233, 235,
	236, 237, 239, 240, 241, 246, 249, 251, 253, 256,
	262, 264, 265, 266, 268, 269, 270, 275, 276, 277,
	278, 286, 290, 300, 301, 311, 320, 322, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 192, 0, 0, 153, 200, 198,
	0, 0, 0, 234, 292, 0, 0, 0, 0, 195,
	0, 0, 315, 283, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 172, 214, 133,
	0, 0, 0, 185, 321, 0, 0, 0, 248, 0,
	288, 175, 193, 137, 119, 131, 147, 174, 224, 257,
	267, 0, 0, 0, 0, 0, 154, 0, 260, 232,
	310, 0, 0, 238, 259, 196, 299, 250, 308, 309,
	176, 293, 318, 323, 280, 163, 0, 123, 0, 245,
	158, 189, 0, 0, 0, 151, 0, 0, 0, 279,
	138, 295, 212, 218, 148, 150, 149, 132, 274, 297,
	142, 152, 284, 263, 289, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 291, 307, 144, 271,
	272, 324, 258, 126, 305, 287, 210, 186, 187, 125,
	0, 255, 161, 171, 156, 227, 0, 170, 247, 302,
	303, 155, 326, 134, 317, 128, 135, 316, 221, 0,
	220, 319, 298, 306, 211, 204, 0, 127, 304, 209,
	203, 191, 166, 178, 243, 199, 244, 179, 216, 215,
	217, 0, 0, 0, 285, 313, 327, 201, 140, 0,
	273, 296, 0, 0, 141, 169, 165, 242, 219, 136,
	181, 282, 190, 197, 254, 325, 231, 261, 145, 312,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 129, 194, 0, 252, 168, 314,
	0, 160, 0, 0, 0, 0, 0, 0, 120, 121,
	130, 139, 146, 159, 164, 167, 173, 177, 180, 182,
	183, 184, 188, 202, 205, 206, 207, 208, 222, 223,
	225, 226, 229, 230, 233, 235, 236, 237, 239, 240,
	241, 246, 249, 251, 253, 256, 262, 264, 265, 266,
	268, 269, 270, 275, 276, 277, 278, 286, 290, 300,
	301, 311, 320, 322, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	192, 0, 0, 153, 200, 198, 0, 0, 0, 234,
	292, 0, 0, 0, 0, 195, 0, 0, 315, 283,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 172, 214, 133, 0, 0, 0, 185,
	321, 0, 0, 0, 248, 0, 288, 175, 193, 137,
	119, 131, 147, 174, 224, 257, 267, 0, 0, 0,
	0, 0, 154, 0, 260, 232, 310, 0, 0, 238,
	259, 196, 299, 250, 308, 309, 176, 293, 318, 323,
	280, 163, 0, 123, 0, 245, 158, 189, 0, 0,
	0, 151, 0, 0, 0, 279, 138, 295, 212, 218,
	148, 150, 149, 132, 274, 297, 142, 152, 284, 263,
	289, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 291, 307, 144, 271, 272, 324, 258, 126,
	305, 287, 210, 186, 187, 125, 0, 255, 161, 171,
	156, 227, 0, 170, 247, 302, 303, 155, 326, 134,
	317, 128, 135, 316, 221, 0, 220, 319, 298, 306,
	211, 204, 0, 127, 304, 209, 203, 191, 166, 178,
	243, 199, 244, 179, 216, 215, 217, 0, 0, 0,
	285, 313, 327, 201, 140, 0, 273, 296, 0, 0,
	141, 169, 165, 242, 219, 136, 181, 282, 190, 197,
	254, 325, 231, 261, 145, 312, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	129, 194, 0, 252, 168, 314, 0, 160, 0, 0,
	0, 0, 0, 0, 120, 121, 130, 139, 146, 159,
	164, 167, 173, 177, 180, 182, 183, 184, 188, 202,
	205, 206, 207, 208, 222, 223, 225, 226, 229, 230,
	233, 235, 236, 237, 239, 240, 241, 246, 249, 251,
	253, 256, 262, 264, 265, 266, 268, 269, 270, 275,
	276, 277, 278, 286, 290, 300, 301, 311, 320, 322,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 162, 0, 0, 0, 0, 192, 0, 0, 153,
	200, 198, 0, 0, 0, 234, 292, 0, 0, 0,
	0, 195, 0, 0, 315, 283, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 172,
	214, 133, 0, 0, 0, 185, 321, 0, 0, 0,
	248, 0, 288, 175, 193, 137, 119, 131, 147, 174,
	224, 257, 267, 0, 0, 0, 0, 0, 154, 0,
	260, 232, 310, 0, 0, 238, 259, 196, 299, 250,
	308, 309, 176, 293, 318, 323, 280, 163, 0, 123,
	0, 245, 158, 189, 0, 0, 0, 151, 0, 0,
	0, 279, 138, 295, 212, 218, 148, 150, 149, 132,
	274, 297, 142, 152, 284, 263, 289, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 291, 307,
	144, 271, 272, 324, 258, 126, 305, 287, 210, 186,
	187, 125, 0, 255, 161, 171, 156, 227, 0, 170,
	247, 302, 303, 155, 326, 134, 317, 128, 135, 316,
	221, 0, 220, 319, 298, 306, 211, 204, 0, 127,
	304, 209, 203, 191, 166, 178, 243, 199, 244, 179,
	216, 215, 217, 0, 0, 0, 285, 313, 327, 201,
	140, 0, 273, 296, 0, 0, 141, 169, 165, 242,
	219, 136, 181, 282, 190, 197, 254, 325, 231, 261,
	145, 312, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 129, 194, 0, 252,
	168, 314, 0, 160, 0, 0, 0, 0, 0, 0,
	120, 121, 130, 139, 146, 159, 164, 167, 173, 177,
	180, 182, 183, 184, 188, 202, 205, 206, 207, 208,
	222, 223, 225, 226, 229, 230, 233, 235, 236, 237,
	239, 240, 241, 246, 249, 251, 253, 256, 262, 264,
	265, 266, 268, 269, 270, 275, 276, 277, 278, 286,
	290, 300, 301, 311, 320, 322, 294, 0, 0, 0,
	528, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 192, 0, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 0, 0, 0, 0, 195, 0, 0,
	315, 283, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 172, 214, 133, 0, 0,
	0, 185, 321, 0, 0, 0, 248, 0, 288, 175,
	193, 137, 119, 131, 147, 174, 224, 257, 267, 0,
	0, 0, 0, 0, 154, 0, 260, 232, 310, 0,
	0, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	0, 0, 0, 151, 0, 0, 0, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 135, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	0, 0, 285, 313, 327, 201, 140, 0, 273, 296,
	0, 0, 141, 169, 165, 242, 219, 136, 181, 282,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 129, 194, 0, 252, 168, 314, 0, 160,
	0, 0, 0, 0, 0, 0, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 240, 241, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 192, 0,
	0, 153, 200, 198, 0, 0, 0, 234, 292, 0,
	0, 0, 0, 195, 0, 0, 315, 283, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 172, 214, 133, 0, 113, 0, 185, 321, 0,
	0, 0, 248, 0, 288, 175, 193, 137, 119, 131,
	147, 174, 224, 257, 267, 0, 0, 0, 0, 0,
	154, 0, 260, 232, 310, 0, 0, 238, 259, 196,
	299, 250, 308, 309, 176, 293, 318, 323, 280, 163,
	0, 123, 0, 245, 158, 189, 0, 0, 0, 151,
	0, 0, 0, 279, 138, 295, 212, 218, 148, 150,
	149, 132, 274, 297, 142, 152, 284, 263, 289, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	291, 307, 144, 271, 272, 324, 258, 126, 305, 287,
	210, 186, 187, 125, 0, 255, 161, 171, 156, 227,
	0, 170, 247, 302, 303, 155, 326, 134, 317, 128,
	135, 316, 221, 0, 220, 319, 298, 306, 211, 204,
	0, 127, 304, 209, 203, 191, 166, 178, 243, 199,
	244, 179, 216, 215, 217, 0, 0, 0, 285, 313,
	327, 201, 140, 0, 273, 296, 0, 0, 141, 169,
	165, 242, 219, 136, 181, 282, 190, 197, 254, 325,
	231, 261, 145, 312, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 129, 194,
	0, 252, 168, 314, 0, 160, 0, 0, 0, 0,
	0, 0, 120, 121, 130, 139, 146, 159, 164, 167,
	173, 177, 180, 182, 183, 184, 188, 202, 205, 206,
	207, 208, 222, 223, 225, 226, 229, 230, 233, 235,
	236, 237, 239, 240, 241, 246, 249, 251, 253, 256,
	262, 264, 265, 266, 268, 269, 270, 275, 276, 277,
	278, 286, 290, 300, 301, 311, 320, 322, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 192, 0, 0, 153, 200, 198,
	0, 0, 0, 234, 292, 0, 0, 0, 0, 195,
	0, 0, 315, 283, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 172, 214, 133,
	0, 0, 0, 185, 321, 0, 0, 0, 248, 0,
	288, 175, 193, 137, 119, 131, 147, 174, 224, 257,
	267, 0, 0, 0, 0, 0, 154, 0, 260, 232,
	310, 0, 0, 238, 259, 196, 299, 250, 308, 309,
	176, 293, 318, 323, 280, 163, 0, 123, 0, 245,
	158, 189, 0, 0, 0, 151, 0, 0, 0, 279,
	138, 295, 212, 218, 148, 150, 149, 132, 274, 297,
	142, 152, 284, 263, 289, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 291, 307, 144, 271,
	272, 324, 258, 126, 305, 287, 210, 186, 187, 125,
	0, 255, 161, 171, 156, 227, 0, 170, 247, 302,
	303, 155, 326, 134, 317, 128, 135, 316, 221, 0,
	220, 319, 298, 306, 211, 204, 0, 127, 304, 209,
	203, 191, 166, 178, 243, 199, 244, 179, 216, 215,
	217, 0, 0, 0, 285, 313, 327, 201, 140, 0,
	273, 296, 0, 0, 141, 169, 165, 242, 219, 136,
	181, 282, 190, 197, 254, 325, 231, 261, 145, 312,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 129, 194, 0, 252, 168, 314,
	0, 160, 0, 0, 0, 0, 0, 0, 120, 121,
	130, 139, 146, 159, 164, 167, 173, 177, 180, 182,
	183, 184, 188, 202, 205, 206, 207, 208, 222, 223,
	225, 226, 229, 230, 233, 235, 236, 237, 239, 240,
	241, 246, 249, 251, 253, 256, 262, 264, 265, 266,
	268, 269, 270, 275, 276, 277, 278, 286, 290, 300,
	301, 311, 320, 322, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	192, 0, 0, 153, 200, 198, 0, 0, 0, 234,
	292, 0, 0, 0, 0, 195, 0, 0, 315, 283,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 172, 214, 133, 0, 0, 0, 185,
	321, 0, 0, 0, 248, 0, 288, 175, 193, 137,
	119, 131, 147, 174, 224, 257, 267, 0, 0, 0,
	0, 0, 154, 0, 260, 232, 310, 0, 0, 238,
	259, 196, 299, 250, 308, 309, 176, 293, 318, 323,
	280, 163, 0, 123, 0, 245, 158, 189, 0, 0,
	0, 151, 0, 0, 0, 279, 138, 295, 212, 218,
	148, 150, 149, 132, 274, 297, 142, 152, 284, 263,
	289, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 291, 307, 144, 271, 272, 324, 258, 126,
	305, 287, 210, 186, 187, 125, 0, 255, 161, 171,
	156, 227, 0, 170, 247, 302, 303, 155, 326, 134,
	317, 128, 135, 316, 221, 0, 220, 319, 298, 306,
	211, 204, 0, 127, 304, 209, 203, 191, 166, 178,
	243, 199, 244, 179, 216, 215, 217, 0, 0, 0,
	285, 313, 327, 201, 140, 0, 273, 296, 0, 0,
	141, 169, 165, 242, 219, 136, 181, 282, 190, 197,
	254, 325, 231, 261, 145, 312, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	129, 194, 0, 252, 168, 314, 0, 160, 0, 0,
	0, 0, 0, 0, 120, 121, 130, 139, 146, 159,
	164, 167, 173, 177, 180, 182, 183, 184, 188, 202,
	205, 206, 207, 208, 222, 223, 225, 226, 229, 230,
	233, 235, 236, 237, 239, 240, 241, 246, 249, 251,
	253, 256, 262, 264, 265, 266, 268, 269, 270, 275,
	276, 277, 278, 286, 290, 300, 301, 311, 320, 322,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 192, 0, 0, 153,
	200, 198, 0, 0, 0, 234, 292, 0, 0, 0,
	0, 195, 0, 0, 315, 283, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 436, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 172,
	214, 133, 0, 0, 0, 185, 321, 0, 0, 0,
	248, 0, 288, 175, 193, 137, 119, 131, 147, 174,
	224, 257, 267, 0, 0, 0, 0, 0, 154, 0,
	260, 232, 310, 0, 0, 238, 259, 196, 299, 250,
	308, 309, 176, 293, 318, 323, 280, 163, 0, 123,
	0, 245, 158, 189, 0, 0, 0, 151, 0, 0,
	0, 279, 138, 295, 212, 218, 148, 150, 149, 132,
	274, 297, 142, 152, 284, 263, 289, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 291, 307,
	144, 271, 272, 324, 258, 126, 305, 287, 210, 186,
	187, 125, 0, 255, 161, 171, 156, 227, 0, 170,
	247, 302, 303, 155, 326, 134, 317, 128, 135, 316,
	221, 0, 220, 319, 298, 306, 211, 204, 0, 127,
	304, 209, 203, 191, 166, 178, 243, 199, 244, 179,
	216, 215, 217, 0, 0, 0, 285, 313, 327, 201,
	140, 0, 273, 296, 0, 0, 141, 169, 165, 242,
	219, 136, 181, 282, 190, 197, 254, 325, 231, 261,
	145, 312, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 129, 194, 0, 252,
	168, 314, 0, 160, 0, 0, 0, 0, 0, 0,
	120, 121, 130, 139, 146, 159, 164, 167, 173, 177,
	180, 182, 183, 184, 188, 202, 205, 206, 207, 208,
	222, 223, 225, 226, 229, 230, 233, 235, 236, 237,
	239, 240, 241, 246, 249, 251, 253, 256, 262, 264,
	265, 266, 268, 269, 270, 275, 276, 277, 278, 286,
	290, 300, 301, 311, 320, 322, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 192, 0, 0, 153, 200, 198, 0, 0,
	0, 234, 292, 0, 0, 0, 0, 195, 0, 0,
	315, 283, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	436, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 172, 214, 133, 0, 0,
	0, 185, 321, 0, 0, 0, 248, 0, 288, 175,
	193, 137, 119, 131, 147, 174, 224, 257, 267, 0,
	0, 0, 0, 0, 154, 0, 260, 232, 310, 0,
	0, 238, 259, 196, 299, 250, 308, 309, 176, 293,
	318, 323, 280, 163, 0, 123, 0, 245, 158, 189,
	0, 0, 0, 151, 0, 0, 0, 279, 138, 295,
	212, 218, 148, 150, 149, 132, 274, 297, 142, 152,
	284, 263, 289, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 291, 307, 144, 271, 272, 324,
	258, 126, 305, 287, 210, 186, 187, 125, 0, 255,
	161, 171, 156, 227, 0, 170, 247, 302, 303, 155,
	326, 134, 317, 128, 548, 316, 221, 0, 220, 319,
	298, 306, 211, 204, 0, 127, 304, 209, 203, 191,
	166, 178, 243, 199, 244, 179, 216, 215, 217, 0,
	0, 0, 285, 313, 327, 544, 140, 0, 273, 296,
	0, 0, 141, 169, 165, 242, 549, 547, 538, 539,
	190, 197, 254, 325, 231, 261, 145, 312, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 129, 194, 0, 252, 168, 314, 0, 160,
	0, 0, 0, 0, 0, 0, 120, 121, 130, 139,
	146, 159, 164, 167, 173, 177, 180, 182, 183, 184,
	188, 202, 205, 206, 207, 208, 222, 223, 225, 226,
	229, 230, 233, 235, 236, 237, 239, 545, 546, 246,
	249, 251, 253, 256, 262, 264, 265, 266, 268, 269,
	270, 275, 276, 277, 278, 286, 290, 300, 301, 311,
	320, 322, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 192, 0,
	0, 153, 200, 198, 0, 0, 0, 234, 292, 0,
	0, 0, 0, 195, 0, 0, 315, 283, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 436, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 172, 214, 133, 0, 0, 0, 185, 321, 0,
	0, 0, 248, 0, 288, 175, 193, 137, 119, 131,
	147, 174, 224, 257, 267, 0, 0, 0, 0, 0,
	154, 0, 260, 232, 310, 0, 0, 238, 259, 196,
	299, 250, 308, 309, 176, 293, 318, 323, 280, 163,
	0, 123, 0, 245, 158, 189, 0, 0, 0, 151,
	0, 0, 0, 279, 138, 295, 212, 218, 148, 150,
	149, 132, 274, 297, 142, 152, 284, 263, 289, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	291, 996, 144, 271, 272, 324, 258, 126, 305, 287,
	210, 186, 187, 125, 0, 255, 161, 171, 156, 227,
	0, 170, 247, 302, 303, 155, 326, 134, 317, 128,
	135, 316, 221, 0, 220, 319, 298, 306, 211, 204,
	0, 127, 304, 209, 203, 191, 166, 178, 243, 199,
	244, 179, 216, 215, 217, 0, 0, 0, 285, 313,
	327, 201, 140, 0, 273, 296, 0, 0, 141, 169,
	165, 242, 219, 136, 181, 282, 190, 197, 254, 325,
	231, 261, 145, 312, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 129, 194,
	0, 252, 168, 314, 0, 160, 0, 0, 0, 0,
	0, 0, 120, 121, 130, 139, 146, 159, 164, 167,
	173, 177, 180, 182, 183, 184, 188, 202, 205, 206,
	207, 208, 222, 223, 225, 226, 229, 230, 233, 235,
	236, 237, 239, 240, 241, 246, 249, 251, 253, 256,
	262, 264, 265, 266, 268, 269, 270, 275, 276, 277,
	278, 286, 290, 300, 301, 311, 320, 322, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 192, 0, 0, 153, 200, 198,
	0, 0, 0, 234, 292, 0, 0, 0, 0, 195,
	0, 0, 315, 283, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 436, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 172, 214, 133,
	0, 0, 0, 185, 321, 0, 0, 0, 248, 0,
	288, 175, 193, 137, 119, 131, 147, 174, 224, 257,
	267, 0, 0, 0, 0, 0, 154, 0, 260, 232,
	310, 0, 0, 238, 259, 196, 299, 250, 308, 309,
	176, 293, 318, 323, 280, 163, 0, 123, 0, 245,
	158, 189, 0, 0, 0, 151, 0, 0, 0, 279,
	138, 295, 212, 218, 148, 150, 149, 132, 274, 297,
	142, 152, 284, 263, 289, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 291, 535, 144, 271,
	272, 324, 258, 126, 305, 287, 210, 186, 187, 125,
	0, 255, 161, 171, 156, 227, 0, 170, 247, 302,
	303, 155, 326, 134, 317, 128, 548, 316, 221, 0,
	220, 319, 298, 306, 211, 204, 0, 127, 304, 209,
	203, 191, 166, 178, 243, 199, 244, 179, 216, 215,
	217, 0, 0, 0, 285, 313, 327, 544, 140, 0,
	273, 296, 0, 0, 141, 169, 165, 242, 549, 547,
	538, 539, 190, 197, 254, 325, 231, 261, 145, 312,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 129, 194, 0, 252, 168, 314,
	0, 160, 0, 0, 0, 0, 0, 0, 120, 121,
	130, 139, 146, 159, 164, 167, 173, 177, 180, 182,
	183, 184, 188, 202, 205, 206, 207, 208, 222, 223,
	225, 226, 229, 230, 233, 235, 236, 237, 239, 545,
	546, 246, 249, 251, 253, 256, 262, 264, 265, 266,
	268, 269, 270, 275, 276, 277, 278, 286, 290, 300,
	301, 311, 320, 322,
}
var yyPact = [...]int{

	2476, -1000, -292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1560, 1617, -1000, -1000, -1000, -1000, -1000, -1000, 614,
	230, -1000, -1000, 322, 63, 22105, 298, 2728, 22957, -1000,
	-1000, -1000, 120, 202, 22957, -1000, -1000, -78, -89, -1000,
	207, 317, 1167, 1456, 1164, 37, 1615, 168, -1000, -1000,
	261, 41, -1000, -1000, -1000, 17843, -1000, -1000, -1000, 1559,
	1568, 170, 1545, 1398, -1000, 11879, 210, 210, 21679, 24661,
	-1000, 22957, 10599, 272, 22957, -139, 218, 218, 147, 218,
	-1000, 650, -1000, -1000, -1000, 22957, 222, 22531, 222, 222,
	222, 222, 222, 22957, -1000, 452, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 22957, 1162,
	1480, 641, 114, 7596, 7596, -1000, 632, -1000, 139, 137,
	141, 131, 20, 646, -1000, 7596, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 201, 245, 209, 168, 643, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1479, 1478, 884, 1477, 192,
	1476, 1348, -66, -1000, 1158, -1000, 891, 293, 22957, -1000,
	-1000, 1269, -1000, 1319, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1493, 14435, 14861, 1560, -1000,
	168, -1000, -1000, -1000, 1439, -1000, -1000, 767, 1598, -1000,
	4568, 450, -1000, 14435, 677, 1112, -1000, -1000, 1112, -1000,
	-1000, 434, -1000, -1000, 16139, 16139, 16139, 16139, 16139, 16139,
	16139, 16139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1112, -1000,
	11453, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1112, 14435, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1112, 1112, 1112, 1112, 1112, 1112, 21253, 20401, 22957, 1223,
	1220, -1000, -1000, 443, 1264, -104, 24235, -1000, -1000, -1000,
	-1000, 23383, 19975, 627, -1000, -1000, -1000, -1000, 1474, -1000,
	-1000, 442, -1000, 1157, 197, -1000, 435, 294, -1000, -1000,
	-1000, 1347, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 22531, 1532,
	262, 1150, 683, 1139, 1135, 1134, 22957, 1132, 1258, 243,
	22957, 1518, 1370, 22957, 1129, 1128, 1127, 1126, -1000, 10170,
	-1000, 7596, 641, -1000, 913, 14435, 218, 218, 7596, 7596,
	7596, 22957, 22957, 22957, -1000, -1000, -1000, -1000, 22957, -1000,
	-1000, 641, 641, 7596, 7596, 616, 1596, 616, 616, -1000,
	-1000, -1000, -1000, 14435, -1000, 16139, -1000, -1000, 1125, 198,
	-1000, -1000, -1000, -1000, -1000, -1000, 1124, -1000, -1000, 192,
	192, -1000, 911, 192, 1243, -1000, 623, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 192,
	-1000, 14009, -290, -1000, -1000, 1398, -1000, -1000, 22957, 7596,
	17843, 1112, 22531, -1000, 1611, 490, 836, 441, 1248, -1000,
	824, 1511, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
	1559, 891, 1398, 857, 1409, -1000, -1000, -1000, 22957, -1000,
	14435, 14435, 773, -1000, 18269, -1000, -1000, -1000, -1000, 8454,
	509, 16139, 890, 557, 16139, 16139, 16139, 16139, 16139, 16139,
	16139, 16139, 16139, 16139, 16139, 16139, 16139, 16139, 16139, 892,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1117, -1000,
	168, 1095, 1095, 460, 460, 460, 460, 460, 460, 460,
	18695, 1524, 891, 1096, 639, 11453, 12731, 12731, 891, 14435,
	14435, 13583, 13157, 12731, 12731, 1524, 658, 639, 23383, -1000,
	-1000, 15713, -1000, -1000, -1000, -1000, -1000, 891, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 22531, 22531, 12731, 12731,
	12731, 12731, 891, 891, 12731, 12731, 12731, 12731, 12731, 891,
	891, 891, 891, 1524, 1524, 12731, 12731, 12731, 1524, 12731,
	12731, 1524, 12731, 12731, 12731, 12731, 1524, 12731, 12731, 12731,
	159, 22957, -1000, 1233, 1303, -1000, -1000, -1000, 1530, 19122,
	16991, -1000, 159, 1199, 20401, 22957, -1000, -1000, 20401, 22957,
	8025, 23809, 1230, -1000, -102, -113, -104, -1000, -1000, 458,
	-1000, -1000, -1000, 11026, -1000, 9312, 5880, 9741, -1000, 294,
	1347, -1000, -62, -1000, -1000, -1000, 1302, -1000, 1302, 200,
	6, 1302, 1302, 1302, 1302, 1302, -5, -5, -5, -5,
	-4, -1000, -1000, -1000, -1000, -1000, 1346, 1340, -1000, 1302,
	1302, 1302, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1313, 187, 1308, 1308, 1308, 1308, 1308, 189, -1000, 14435,
	1304, -1000, 22957, 7596, 1517, 7596, 140, 1326, -1000, -1000,
	22957, 22957, 1246, -1000, 22957, 1244, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 639, 1111, 1110,
	-1000, -1000, -1000, -1000, -1000, -1000, 626, -1000, -1000, -1000,
	-1000, 641, 22957, 22957, 22957, 1528, 641, 639, 476, -1000,
	-1000, 1108, -1000, 1243, 1243, -1000, 1243, 192, 1095, 1243,
	-1000, 1094, 1513, 910, 1524, 291, -1000, -1000, -1000, 169,
	1042, 439, -1000, 1405, 14435, 14435, 9312, 14861, -1000, -1000,
	-1000, -1000, 1493, -1000, 1524, 1558, -1000, 1420, 1416, 1380,
	-1000, -1000, 509, 548, -1000, -1000, 862, -1000, -1000, -1000,
	-1000, 438, 1112, -1000, 2030, -1000, -1000, -1000, -1000, 890,
	16139, 16139, 16139, 476, 2030, 3054, 1101, 492, 460, 689,
	689, 507, 507, 507, 507, 507, 882, 882, -1000, -1000,
	-1000, 891, -1000, -1000, -1000, 12731, -1000, 14435, -1000, 891,
	1086, -1000, -1000, 639, 437, 1086, -1000, 829, 959, 532,
	1592, 1086, 526, 1589, 1086, 1086, 1086, 12731, 718, -1000,
	14435, 891, -1000, 1035, 1238, 1235, 1086, 891, 1234, 1086,
	1086, -151, -151, 891, 1086, 891, 1086, 1086, -151, -151,
	-151, -151, 12731, 12731, 1086, 1086, 1086, 12731, 1086, 1086,
	12731, 1086, 1086, 1086, 1086, 12731, 1086, 1086, 1086, 166,
	1112, -1000, 23383, 20401, 20401, 20401, 20401, 20401, -1000, 1391,
	1390, -1000, 1384, 1383, 1392, 17843, -1000, 1090, 891, 124,
	19122, -1000, 1112, -1000, 17417, 483, 268, 267, 266, 1575,
	20401, 1092, -1000, 1092, -1000, 433, -1000, -1000, 23383, -104,
	-98, -1000, -1000, 1230, -1000, 899, -1000, -1000, 639, -1000,
	430, 1229, 5451, -1000, -1000, -1000, -1000, 197, -1000, -1000,
	-1000, 1317, 288, -1000, 1431, 504, 500, 954, 1424, -1000,
	-1000, 263, -64, -1000, -1000, 826, -5, -5, 1302, 1302,
	184, 1302, -1000, -5, -1000, -1000, -1000, 458, 1472, 458,
	458, 458, 458, -5, 906, 906, -1000, -1000, -1000, -1000,
	825, -1000, 1313, -1000, 792, -1000, -1000, -1000, -1000, -1000,
	668, 1369, 22531, 168, 1521, -1000, -1000, -1000, 1580, -1000,
	-1000, 223, 242, -1000, 7596, 22957, 7596, 7596, 1575, 1087,
	1070, -1000, -1000, -1000, 616, 641, 1465, -1000, -1000, 16139,
	-1000, -1000, -1000, -1000, 159, 278, -1000, 1409, 1227, -1000,
	-1000, 601, 580, 593, 194, 194, -1000, 577, 194, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 156, 1520, 22531,
	22531, 1403, 639, 639, -1000, -1000, 22957, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7167, 12731, -1000, 476,
	2030, 2921, -1000, 16139, -1000, 891, 639, -1000, 12731, -1000,
	6738, -1000, 133, 892, 133, 16139, 16139, -1000, 16139, 16139,
	-1000, -185, -1000, 1213, 622, -1000, 14435, 888, -1000, -1000,
	16139, 16139, -1000, -1000, -1000, -1000, -1000, 20827, -1000, -151,
	-151, -151, -151, -151, -1000, -1000, -1000, -1000, 1086, 1086,
	-151, -151, -151, 1086, -151, -151, 1086, -151, -151, -151,
	-151, 1086, -151, -151, -151, 1368, 23383, 1112, -1000, 19549,
	22531, 1257, -1000, 598, 1303, 1334, 1367, 992, -1000, -1000,
	-1000, -1000, 1385, -1000, 1382, -1000, -1000, 1296, -1000, -1000,
	1219, 1112, 22531, 16139, 483, -1000, 1112, 1112, 1112, 1560,
	14435, 1092, -1000, -1000, 482, -1000, -1000, -110, -124, -1000,
	-1000, -1000, 8883, 5880, -1000, 5880, -1000, 22531, 188, -1000,
	954, -1000, -1000, 954, -1000, -1000, -1000, 1312, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 699, 16139, 1609, -1000, 1430,
	-1000, 1429, 905, -1000, -1000, 1192, 458, 458, -5, -1000,
	-1000, 1302, -1000, 458, -1000, 528, -1000, -1000, -1000, -1000,
	458, 1068, -1000, 1062, 1215, -1000, 1060, 58, 22957, -1000,
	-1000, -1000, 1365, -1000, -1000, -1000, 1186, 1211, -1000, 435,
	1057, 1056, 1051, 22957, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 641, -1000, 16139, 2030, -5, 22957, 1380, 291, -1000,
	937, -1000, 954, 426, -1000, -1000, -1000, 1424, -1000, -1000,
	283, 1047, -1000, 1045, 1044, 22531, 1425, 1043, 22957, 22531,
	-1000, -1000, 993, 1006, 14435, -1000, 22531, 22531, 1112, 425,
	-1000, -1000, -1000, 1109, 11879, -1000, -1000, 891, -1000, 16139,
	2030, -1000, -1000, -1000, 413, 891, 1302, 1302, -1000, 1302,
	1308, -1000, 1302, 26, 1302, 23, 891, 891, 3079, 2966,
	2450, 2279, 1112, -146, -1000, 639, 14435, 2009, 1133, -1000,
	367, -1000, -1000, -1000, -1000, -1000, -151, -151, -1000, -1000,
	-1000, -1000, -151, -1000, -1000, -151, -1000, -1000, -1000, -1000,
	-151, -1000, -1000, -1000, -1000, 1506, 1195, 1210, -1000, -1000,
	12305, 891, 1042, 1033, -1000, 1560, 23383, 14435, -1000, -1000,
	14435, 1307, -1000, 14435, -1000, -1000, -1000, -1000, 22531, 118,
	-1000, 14435, 1033, 902, -1000, 22531, 22531, 22531, 1559, 639,
	-1000, -1000, -1000, -1000, 5451, -1000, 1029, -1000, 1302, -1000,
	1424, -1000, -1000, 22531, -1000, 2030, -86, -1000, -1000, -1000,
	-1000, -1000, -1000, 458, -1000, -1000, -1000, -1000, -1000, -5,
	904, -5, 786, -1000, 784, -1000, -1000, -235, 1301, -1000,
	168, 22957, 91, 223, -1000, 435, 435, 435, -1000, -1000,
	2030, -84, -1000, -1000, -1000, 993, 177, 435, -1000, 1304,
	504, 188, -1000, -1000, -1000, -1000, -1000, 1004, 513, -1000,
	233, 177, 993, 639, 508, 1512, -1000, 22531, 1573, 20401,
	-1000, -1000, -1000, 2030, 6309, -1000, -1000, 176, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16139, 16139, 16139, 16139,
	16139, 891, 896, 639, 16139, 16139, 891, 1567, -1000, -1000,
	-1000, -1000, -1000, 1423, -1000, 1112, -1000, -1000, 167, -1000,
	22531, 1559, -1000, 639, 639, 22531, 639, 1027, -1000, 1112,
	16565, -1000, 17843, 1023, 1023, 1023, -1000, 286, 22531, 1511,
	1018, -1000, -1000, 458, -1000, 458, 1183, 1069, -1000, 22531,
	-1000, 1555, -1000, 91, -1000, 859, 92, 102, -1000, 86,
	85, 84, 83, 81, -1000, -1000, -1000, -1000, 1450, 1447,
	1254, 1024, -1000, -1000, 961, -1000, 1300, 954, -1000, -1000,
	952, -1000, -1000, 22531, -1000, 177, 1504, 1498, 1112, -1000,
	1571, 1566, 1092, 11879, -1000, -1000, -1000, -1000, 1035, 1035,
	1035, 1035, 46, -1000, -1000, 1035, 1035, -1000, 14435, 1603,
	-1000, 1112, -1000, 168, -1000, -1000, 1003, -1000, 22531, -1000,
	-1000, 483, -1000, -1000, -1000, 286, -1000, 938, 577, 854,
	-1000, -1000, 175, -1000, -1000, -1000, -1000, 1000, -1000, 121,
	4315, -1000, -1000, -1000, -1000, -1000, -1000, 1455, 1454, 107,
	203, 1434, 1438, 1565, 20401, -1000, -1000, 263, 22531, 1304,
	-1000, -1000, -1000, 16139, -1000, 155, -1000, 14861, 14861, 1573,
	-1000, -1000, -1000, -1000, -1000, 891, 119, -200, -1000, -1000,
	1189, 23383, 1210, 891, -1000, -1000, -1000, -1000, -1000, 777,
	-1000, 22957, 286, 117, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14435, 14435, 5022, 4315, -1000, -1000, -1000, -1000,
	1296, 723, 1447, 1564, 1444, 1442, -1000, 847, 1092, 997,
	1289, 2030, 987, -1000, 22531, -1000, 639, -1000, 1204, -1000,
	639, -1000, 1571, -1000, -1000, 1402, -194, -217, 891, 1198,
	-1000, -1000, 1277, -1000, 286, 112, -1000, 817, 869, 60,
	51, 2684, -1000, -1000, -1000, -1000, -294, -1000, -1000, 1449,
	-1000, 846, -1000, 1563, 1531, -1000, 1573, 286, 22531, -1000,
	155, 1415, 14861, -1000, -1000, 1401, -1000, -1000, 22531, -1000,
	935, 919, 672, -1000, 14435, 4315, 1554, 1552, 1551, 1494,
	8883, 4184, -1000, -1000, 839, 774, 1571, -1000, 974, -1000,
	151, -1000, -196, 960, 235, -1000, -1000, 679, 4315, -1000,
	855, -297, 199, 168, 244, 16139, -1000, -1000, -1000, -1000,
	-1000, -1000, 286, 129, -214, 1364, -1000, -1000, -1000, -1000,
	-1000, -1000, 4315, -1000, -301, 4315, 3117, -1000, -1000, -1000,
	4020, -1000, -1000, -1000, -1000, 49, -1000, -1000, 2030, -1000,
	1112, -218, 1358, 1356, 1582, -1000, -302, 4011, -305, 217,
	4315, 621, -1000, 14435, -1000, 244, -1000, 15287, -1000, -1000,
	1602, -1000, 1600, 402, 402, 3630, 678, 4315, -1000, -306,
	215, 4315, -1000, 797, -1000, 1035, 891, -1000, -1000, -1000,
	186, 813, -1000, -1000, -1000, 3363, -1000, -308, 4315, -1000,
	-1000, -1000, -1000, -1000, 214, 2648, -309, -1000, 212, 4315,
	-1000,
}
var yyPgo = [...]int{

	0, 1933, 194, 865, 1932, 1931, 1930, 22, 19, 11,
	29, 1928, 1711, 1705, 1695, 1693, 1927, 1691, 1925, 5,
	1922, 1921, 1680, 1914, 1913, 1677, 1674, 1670, 1668, 26,
	1912, 15, 1911, 6, 112, 123, 1910, 3, 1907, 1900,
	9, 1896, 1894, 1666, 1887, 1886, 1885, 1884, 77, 1883,
	1660, 1658, 1881, 1878, 1649, 1645, 1876, 1872, 1636, 1625,
	1623, 1871, 151, 1868, 1866, 1865, 124, 76, 121, 1864,
	1860, 1859, 88, 58, 1471, 91, 40, 94, 468, 1857,
	14, 53, 1856, 1855, 122, 142, 1854, 117, 1853, 85,
	128, 81, 1852, 1851, 137, 1843, 1842, 1841, 108, 1839,
	1838, 976, 1837, 1836, 119, 1835, 48, 60, 33, 1833,
	1832, 1830, 1829, 1827, 110, 2, 1824, 1823, 1822, 62,
	1820, 1819, 145, 1818, 1816, 1815, 105, 49, 1814, 39,
	1813, 44, 59, 1809, 41, 1807, 107, 1806, 1805, 17,
	13, 1804, 37, 1800, 43, 1799, 109, 140, 246, 16,
	32, 47, 51, 101, 87, 24, 34, 98, 80, 64,
	35, 1798, 113, 1797, 67, 115, 102, 103, 114, 1796,
	1795, 1794, 801, 1793, 1792, 96, 1791, 57, 120, 650,
	125, 104, 75, 1789, 1788, 1787, 1786, 66, 106, 1785,
	1784, 79, 207, 89, 1608, 27, 1826, 54, 116, 1783,
	38, 1781, 1778, 3018, 83, 72, 90, 1777, 86, 25,
	45, 1776, 1773, 1763, 1760, 1757, 1756, 167, 1755, 1754,
	1753, 1750, 95, 65, 1749, 1748, 100, 69, 1747, 1746,
	1744, 1743, 1742, 99, 55, 111, 1740, 92, 93, 73,
	1737, 1733, 1732, 1731, 50, 36, 1730, 1729, 1728, 78,
	63, 1726, 46, 21, 28, 52, 8, 56, 74, 1725,
	18, 1721, 97, 4, 10, 7, 1720, 1719, 1718, 1717,
	1707, 61, 1698, 1688, 42, 1685, 1682, 1664, 31, 1662,
	1655, 1651, 1638, 0, 84, 118, 1632, 1629, 132,
}
var yyR1 = [...]int{

	0, 281, 282, 282, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 61, 2, 2, 2, 6, 3, 3,
	3, 82, 83, 83, 87, 87, 4, 4, 5, 5,
	7, 7, 65, 65, 8, 9, 9, 9, 9, 285,
	285, 96, 96, 94, 94, 95, 95, 157, 157, 10,
	10, 10, 162, 162, 167, 167, 167, 170, 170, 170,
	170, 149, 150, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 269, 269, 270, 270, 271, 271, 271, 271,
	272, 272, 273, 273, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 23, 190, 190, 41, 41, 42,
	42, 42, 145, 145, 145, 11, 11, 11, 11, 11,
	18, 20, 20, 30, 30, 31, 21, 21, 21, 21,
	32, 32, 33, 24, 24, 24, 24, 24, 24, 39,
	39, 39, 38, 38, 37, 37, 37, 37, 37, 37,
	22, 22, 22, 22, 40, 40, 35, 35, 34, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 25, 25, 25, 25, 25, 25, 17, 268, 268,
	268, 29, 29, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	46, 246, 247, 247, 247, 247, 247, 247, 247, 247,
	234, 235, 210, 210, 210, 210, 210, 210, 210, 209,
	209, 209, 209, 213, 213, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 212, 212, 212, 212, 212, 212,
	212, 212, 214, 214, 214, 214, 214, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 216, 216, 216, 216, 216, 216, 216, 216,
	233, 233, 217, 217, 226, 226, 227, 227, 227, 224,
	224, 225, 225, 228, 228, 220, 221, 229, 222, 222,
	222, 223, 223, 223, 232, 232, 232, 232, 218, 236,
	236, 256, 256, 255, 255, 254, 254, 254, 245, 245,
	251, 251, 251, 251, 251, 240, 240, 240, 239, 239,
	241, 241, 244, 244, 253, 253, 252, 237, 237, 257,
	257, 257, 257, 257, 238, 238, 238, 258, 242, 242,
	243, 243, 243, 264, 265, 263, 263, 263, 263, 263,
	111, 111, 111, 248, 248, 248, 249, 249, 249, 250,
	250, 250, 266, 266, 43, 43, 44, 49, 49, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 144, 144, 144, 45, 188, 188, 262, 262,
	262, 261, 259, 259, 260, 260, 13, 47, 47, 14,
	14, 14, 14, 14, 14, 14, 15, 15, 50, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 79, 176,
	176, 174, 174, 177, 177, 175, 175, 175, 178, 178,
	178, 207, 207, 207, 52, 52, 57, 57, 60, 58,
	59, 26, 27, 27, 27, 27, 28, 189, 189, 55,
	55, 56, 56, 56, 56, 71, 71, 286, 286, 54,
	54, 53, 53, 53, 53, 16, 287, 62, 63, 63,
	64, 64, 64, 181, 181, 68, 68, 68, 66, 66,
	66, 67, 67, 73, 73, 77, 77, 77, 77, 76,
	76, 76, 76, 147, 147, 147, 148, 148, 199, 199,
	199, 198, 198, 198, 198, 81, 81, 84, 84, 85,
	85, 85, 85, 88, 130, 130, 105, 105, 106, 106,
	106, 106, 106, 117, 117, 156, 156, 155, 155, 158,
	158, 86, 86, 86, 86, 91, 91, 92, 92, 93,
	93, 187, 187, 205, 205, 205, 97, 97, 97, 99,
	98, 98, 98, 98, 100, 100, 102, 103, 103, 101,
	101, 104, 107, 107, 107, 107, 108, 108, 78, 78,
	78, 78, 78, 78, 78, 173, 173, 110, 110, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 125,
	125, 125, 125, 125, 125, 112, 112, 112, 112, 112,
	112, 112, 72, 72, 126, 126, 126, 90, 89, 89,
	75, 75, 74, 74, 127, 127, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	120, 120, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 288, 288, 122, 121, 121, 121, 121, 121,
	121, 69, 69, 69, 69, 69, 206, 206, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 137, 137, 70, 70, 135, 135, 136, 138, 138,
	134, 134, 134, 114, 114, 114, 114, 114, 114, 114,
	114, 116, 116, 116, 139, 139, 128, 128, 80, 80,
	140, 140, 141, 141, 142, 142, 143, 143, 146, 146,
	151, 151, 151, 152, 152, 152, 152, 153, 153, 153,
	113, 113, 113, 113, 113, 113, 154, 154, 154, 154,
	159, 159, 129, 129, 132, 132, 131, 133, 160, 160,
	164, 161, 161, 165, 165, 165, 165, 168, 168, 169,
	169, 169, 166, 166, 166, 163, 163, 163, 202, 202,
	202, 171, 171, 179, 179, 180, 180, 172, 172, 219,
	219, 184, 184, 184, 184, 184, 184, 184, 184, 186,
	186, 185, 185, 185, 182, 182, 182, 183, 183, 200,
	200, 196, 196, 201, 201, 197, 197, 203, 203, 204,
	204, 267, 267, 230, 230, 277, 277, 231, 231, 278,
	278, 280, 280, 275, 275, 276, 276, 279, 279, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 283, 284, 191, 192, 192, 192,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 11, 4, 6, 7, 5, 10, 12,
	13, 2, 1, 3, 3, 6, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 6, 1,
	1, 1, 3, 1, 3, 1, 3, 0, 4, 3,
	4, 5, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 0, 0, 2, 3, 11, 7, 9, 5, 5,
	15, 11, 0, 1, 1, 3, 2, 3, 3, 3,
	0, 1, 1, 2, 2, 2, 2, 1, 2, 2,
	3, 3, 3, 3, 4, 0, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 1, 1, 1, 1, 1,
	4, 5, 8, 1, 2, 5, 7, 10, 8, 11,
	1, 2, 5, 5, 5, 5, 6, 3, 5, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 1, 1,
	2, 4, 2, 4, 2, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 3, 2, 4, 3, 0, 2,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 1, 1, 2, 3, 4, 3, 3, 3,
	3, 3, 0, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 3, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 3,
	3, 2, 4, 5, 2, 3, 4, 2, 2, 3,
	3, 3, 3, 3, 4, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 1, 2, 2, 3, 1, 0, 3,
	3, 0, 2, 2, 2, 1, 2, 1, 2, 5,
	4, 0, 1, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 3, 3, 3, 1, 10,
	11, 11, 12, 12, 3, 2, 1, 5, 1, 1,
	0, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 0, 2, 1, 1, 5, 1, 3, 2,
	5, 4, 3, 3, 3, 5, 3, 8, 10, 3,
	3, 3, 5, 4, 5, 1, 2, 2, 4, 3,
	6, 5, 0, 1, 2, 4, 0, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 4, 4, 4, 4, 4, 3, 2, 3, 4,
	4, 3, 6, 6, 4, 4, 4, 4, 4, 4,
	3, 3, 2, 6, 2, 4, 4, 4, 5, 7,
	6, 5, 4, 2, 4, 3, 2, 3, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 1, 2, 1,
	1, 2, 3, 4, 4, 5, 3, 1, 1, 3,
	3, 1, 1, 1, 1, 0, 3, 1, 1, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 3, 5, 1, 1, 3, 5, 1,
	2, 3, 5, 2, 4, 7, 0, 1, 0, 1,
	2, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	4, 1, 3, 2, 2, 4, 2, 6, 1, 4,
	6, 3, 2, 0, 3, 0, 3, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 1, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 3, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	0, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 1, 1,
	5, 6, 6, 6, 5, 5, 5, 6, 5, 5,
	6, 5, 5, 5, 5, 6, 5, 5, 5, 4,
	4, 5, 5, 5, 5, 5, 4, 4, 4, 4,
	4, 4, 3, 6, 6, 6, 8, 8, 8, 8,
	9, 4, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 1, 3, 1, 1,
	0, 2, 1, 1, 0, 3, 1, 3, 2, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
	3, 0, 3, 0, 4, 0, 3, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -281, -1, -2, -6, -7, -8, -9, -10, -12,
	-43, -13, -14, -15, -50, -51, -52, -57, -58, -59,
	-55, -54, -53, -16, -22, -25, -17, -61, -26, -27,
	-28, -3, -4, 6, 7, -65, 9, 10, 30, -46,
	130, -44, -45, 133, 132, 169, 134, 162, 64, 224,
	-60, 227, 228, -286, -189, 167, 168, 31, 32, 136,
	211, 212, 20, 37, 229, 231, -82, -283, 8, 320,
	131, 225, 164, 163, 26, 365, 68, -282, 435, -142,
	15, -64, 5, -62, -287, -62, -62, -62, -62, -62,
	-246, 105, 68, -183, 143, 86, 311, 139, -190, 140,
	-182, 189, 44, 150, 149, 140, 140, 141, 143, 311,
	139, 177, 176, 140, -101, -203, 71, -194, 362, 153,
	377, 378, 131, 186, 224, 238, 232, 266, 254, 363,
	379, 154, 206, 138, 252, 255, 298, 152, 199, 380,
	287, 293, 209, 80, 227, 307, 381, 155, 203, 205,
	204, 194, 210, 36, 165, 250, 243, 214, 189, 382,
	370, 241, 28, 184, 383, 295, 271, 384, 367, 294,
	246, 242, 136, 385, 156, 150, 179, 386, 272, 276,
	387, 299, 388, 389, 390, 142, 236, 237, 391, 190,
	301, 270, 33, 151, 364, 48, 174, 302, 38, 274,
	37, 286, 392, 269, 264, 393, 394, 395, 396, 268,
	235, 263, 201, 53, 137, 278, 277, 279, 202, 297,
	259, 257, 397, 398, 157, 399, 400, 244, 18, 401,
	402, 305, 168, 403, 42, 404, 405, 406, 172, 407,
	408, 409, 296, 273, 275, 188, 410, 247, 147, 411,
	176, 412, 366, 413, 303, 240, 414, 158, 231, 173,
	167, 306, 415, 212, 416, 417, 418, 159, 419, 420,
	421, 228, 229, 289, 207, 422, 423, 424, 425, 198,
	183, 309, 300, 52, 211, 283, 426, 234, 149, 213,
	427, 225, 43, 180, 7, 200, 290, 208, 261, 175,
	428, 429, 248, 249, 267, 233, 262, 226, 177, 178,
	169, 430, 308, 284, 368, 51, 256, 253, 181, 260,
	431, 143, 432, 182, 230, 304, 251, 285, 140, 123,
	255, 298, 130, 288, 289, 295, -240, 296, 176, 179,
	-207, 140, -174, 287, 182, 71, 141, 142, 33, 300,
	299, 291, -203, 144, 230, -71, 134, 170, -101, -191,
	-191, -191, 290, 290, -191, -40, 71, 213, -40, 30,
	71, 71, 36, 71, 229, 6, -2, -172, 143, 145,
	226, -83, -87, -205, -203, -195, 73, 333, 334, 335,
	336, 337, 350, 351, 352, 338, 339, 353, 354, 355,
	340, 341, 356, 357, 359, 360, 358, 344, 343, 342,
	345, 346, 348, 347, 349, -152, 17, 16, -5, -3,
	-283, 6, 21, 22, -68, 54, 55, -63, -76, 114,
	-78, -203, -109, 88, -115, 29, 71, -194, 24, -114,
	-110, -134, -133, -90, 123, 124, 125, 112, 113, 120,
	89, 126, -120, -118, -119, -121, -123, -124, 73, 72,
	81, 74, 75, 76, 77, 82, 83, 84, -196, -131,
	-283, 58, 59, 139, 321, 322, 323, 324, 361, 160,
	325, 91, 47, 310, 319, 318, 317, 315, 316, 312,
	314, 313, 327, 328, 146, 311, 118, 320, 350, 351,
	352, 353, 354, 355, 356, 357, 359, 360, 358, 340,
	333, 334, 335, 336, 337, 338, 339, 341, 342, 343,
	344, 345, 346, 347, 348, 349, -172, -172, 11, -94,
	-95, -101, -104, -203, -161, 226, -168, -165, 299, 300,
	-166, -169, -163, -134, 286, 408, 409, 298, 255, 297,
	-196, -203, -101, -247, -235, -238, -197, 155, -258, -196,
	-193, 152, 71, -194, 135, 161, 87, 369, 23, 25,
	281, 333, 90, 123, 334, 335, 336, 16, 20, 91,
	122, 321, 337, 130, 62, 312, 314, 310, 311, 288,
	29, 10, 26, 163, 193, 22, 116, 132, 94, 95,
	96, 166, 24, 164, 84, 160, 19, 65, 11, 13,
	331, 332, 14, 146, 145, 107, 191, 141, 60, 8,
	126, 27, 104, 56, 338, 339, 373, 45, 374, 58,
	105, 17, 315, 316, 31, 361, 340, 171, 375, 341,
	118, 196, 63, 50, 88, 82, 34, 85, 66, 86,
	15, 192, 61, 329, 195, 376, 106, 133, 320, 59,
	139, 6, 326, 30, 162, 344, 343, 342, 345, 197,
	57, 323, 324, 346, 433, 140, 93, 327, 328, 144,
	83, 5, 44, 32, 9, 64, 67, 317, 318, 319,
	47, 348, 347, 349, 92, 12, 330, 365, 141, -101,
	320, -180, 146, -180, 177, 176, -180, 97, -47, -101,
	-179, 146, -196, -179, -179, -179, -179, -179, -101, 127,
	-101, 71, 30, -178, 105, 12, 311, 139, 71, 176,
	179, 140, 177, 143, -192, -283, -197, -192, -242, 11,
	107, 180, 180, 180, 181, 180, -177, -176, 178, 293,
	294, 290, 292, 12, -79, 105, -192, 71, 229, 144,
	-56, -2, -9, -7, -8, -2, 97, -191, -191, 30,
	30, 73, 51, 30, -35, -34, -36, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 30,
	-268, 68, -230, 286, 71, -62, -284, 70, 140, -101,
	69, 23, -283, -153, 19, 31, -78, -203, -143, -146,
	-78, -195, 333, 334, 335, 336, 337, 350, 351, 352,
	338, 339, 353, 354, 355, 340, 341, 356, 357, 359,
	360, 358, 344, 343, 342, 345, 346, 348, 347, 349,
	-142, -2, -62, 50, -66, 21, 22, 79, 11, -199,
	87, 86, 104, -198, 23, 71, -194, -195, 73, 127,
	-78, -112, 107, 88, 105, 106, 90, 109, 108, 119,
	112, 113, 114, 115, 116, 117, 118, 110, 111, 122,
	97, 98, 99, 100, 101, 102, 103, -173, -283, -90,
	-283, 128, 129, -115, -115, -115, -115, -115, -115, -115,
	-115, -283, -2, -127, -78, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -137, -78, -283, -288,
	-122, -283, -288, -122, -288, -122, -288, -283, -288, -122,
	-288, -122, -288, -288, -122, -288, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-103, 27, -101, -81, -84, -85, -86, -105, -89, -283,
	-101, -90, -101, -94, -285, 69, 11, 67, -285, 69,
	127, 69, -162, -167, 301, 303, 226, -166, -166, -202,
	-196, 73, 29, 97, 30, 127, 70, 69, -238, 155,
	152, -209, -213, -215, -214, -216, -211, -212, 252, 255,
	259, 257, 253, 258, 123, 256, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 30, 165, 248,
	249, 250, 251, 272, 273, 274, 275, 276, 277, 278,
	279, 232, 254, 363, 233, 234, 235, 236, 237, 238,
	240, 241, 242, 243, 244, 245, 246, 71, -258, 68,
	-196, 23, 143, 71, 88, 71, 71, 71, -101, 71,
	69, 144, -94, 24, 66, -96, -101, 71, 71, 71,
	71, -204, -203, -193, -192, -178, 73, -78, -180, -180,
	-192, -192, -192, -101, -101, -101, -101, -178, -178, -192,
	-192, -175, 11, 107, 11, -175, -175, -78, -115, 71,
	71, 229, 71, -35, -35, 73, -35, 69, 97, -35,
	70, -127, -267, 434, -68, -101, -192, -87, -89, -283,
	-154, -196, 9, 107, 69, 18, 127, 69, -151, 25,
	26, -151, -152, -284, -68, -116, 51, 74, 77, -181,
	49, -101, -78, -78, -125, 82, 88, 83, 84, -198,
	114, -204, -197, -193, -115, -126, -131, -90, 78, 107,
	105, 106, 90, -115, -115, -115, -115, -115, -115, -115,
	-115, -115, -115, -115, -115, -115, -115, -115, -206, 71,
	73, 71, -114, -114, -196, -66, -284, 69, -284, -2,
	-74, -77, 114, -78, -203, -74, -284, -78, -78, -134,
	73, -74, -134, 73, -74, -74, -74, -66, -135, -136,
	92, -134, -284, -115, -196, -196, -74, -75, -74, -74,
	-74, -284, -284, -77, -74, -77, -74, -74, -284, -284,
	-284, -284, -66, -66, -74, -74, -74, -66, -74, -74,
	-66, -74, -74, -74, -74, -66, -74, -74, -74, -157,
	172, -101, 30, 69, -97, -99, -98, -100, 56, 60,
	62, 57, 58, 59, 63, -187, 23, -81, -88, 47,
	-283, -106, 172, -107, 23, -205, 64, 145, 65, -157,
	67, -81, -101, -81, -104, -203, 114, -165, -168, 69,
	302, 304, 305, -162, -223, 122, 66, 85, -78, -197,
	-204, -248, -249, -250, -197, 73, 74, -235, -236, -237,
	-238, -251, 155, -257, 147, 149, 44, -239, 156, 141,
	45, -210, -224, 284, -217, 68, -217, -217, 260, 252,
	255, 253, -217, -217, -217, -217, -217, -222, 255, -222,
	-222, -222, -222, 253, 68, 68, -217, -217, -217, -226,
	68, -226, 247, -227, 68, -227, -227, -227, -227, -258,
	-78, -200, 67, -149, -101, -192, 24, -192, -41, 186,
	161, 68, -101, -101, -101, 69, 71, 71, -243, 11,
	107, -178, -203, -203, -101, -117, 23, -178, -72, 166,
	71, -34, -114, 70, -102, 27, 73, -66, -49, -48,
	-184, 135, 132, 133, 137, 138, -261, 281, 131, 255,
	80, 29, 15, 321, 172, 368, 71, 173, -284, 69,
	127, 52, -78, -78, -146, -153, -171, 19, 11, 47,
	47, -67, 57, 82, 83, 84, 127, -283, -126, -115,
	-115, -115, -72, 87, -284, -75, -78, -284, 69, -284,
	127, -284, 69, 67, 23, 11, 11, -284, 11, 11,
	-284, -284, -284, -74, -138, -136, 94, -78, -284, -284,
	69, 69, -284, -284, -284, -284, -147, 329, -147, -284,
	-284, -284, -284, -284, -147, -147, -147, -147, -74, -74,
	-284, -284, -284, -74, -284, -284, -74, -284, -284, -284,
	-284, -74, -284, -284, -284, -113, 30, 47, -2, -283,
	-283, -160, -164, -134, -84, -85, -85, -84, -85, 56,
	56, 56, 61, 56, 61, 56, -98, -205, -284, -284,
	-130, 185, -283, 34, -205, -107, 141, 141, 141, -108,
	12, -81, -108, -108, 127, -167, -170, 306, 303, 309,
	71, 73, 127, 69, -250, 97, -238, 68, 71, 45,
	-239, 141, 45, -239, -244, 71, -244, 45, -228, -220,
	-221, -229, -232, -218, 82, 88, 29, 66, 281, 147,
	45, 44, 80, -225, 285, 74, -222, -222, -217, -217,
	-217, 260, -217, -222, -223, 30, -223, -223, -223, -223,
	-222, -233, 73, -233, 74, -226, 74, 70, 66, -196,
	-2, 23, -42, 8, 9, 10, -269, -270, -271, 71,
	107, 191, 192, 144, -192, -101, -192, -192, -108, 71,
	71, -175, -178, 34, -115, -157, 140, -181, 69, -191,
	-188, -262, -239, -266, -237, -238, 148, 156, 147, 172,
	155, -188, -262, 155, 152, -239, 156, 148, -185, -239,
	144, 23, -188, -188, -245, 97, -188, 172, 23, -196,
	-196, 53, -101, -73, -150, 114, -197, -75, -72, 87,
	-115, -284, -77, 114, -204, -208, 123, 252, 165, 250,
	243, 270, 257, 283, 248, 284, -206, -208, -115, -115,
	-115, -115, 362, -142, 96, -78, 93, -115, -115, -196,
	-283, -147, -147, -147, -147, -147, -284, -284, -148, -147,
	-148, -148, -284, -148, -148, -284, -148, -148, -148, -148,
	-284, -148, -148, -148, -159, 66, -160, -129, -132, -131,
	-283, -2, -154, -158, -196, -108, 69, 97, -92, -91,
	66, 67, -93, 66, -91, 56, 56, -156, 68, 69,
	-131, -283, -158, -115, -107, -283, -283, -283, -142, -78,
	-108, 303, 307, 308, -249, -250, -253, -252, -196, -257,
	156, -244, -244, 68, 82, -115, 9, 45, 45, 73,
	70, -223, -223, -222, -217, -223, 71, 123, -223, 70,
	69, 70, 69, 70, 69, -111, 383, 88, -101, -149,
	-149, 66, 70, 69, -209, 71, 71, 71, -101, -178,
	-115, -222, -101, -67, -48, 68, -234, 71, -191, -244,
	-182, 71, 71, -191, 71, 71, -196, 45, 71, -101,
	-196, -234, 71, -78, -196, -196, -89, 127, -108, 11,
	69, -76, -284, -115, 127, -284, -217, -217, -217, -227,
	-217, 237, -217, 237, -284, -284, 19, 19, 19, 19,
	-283, -70, 326, -78, 69, 69, -142, 172, -148, -148,
	-148, -148, -148, 28, -159, 69, -284, -284, -284, -284,
	69, -142, -164, -78, -78, 68, -78, -155, -196, 185,
	-284, -107, -187, -155, -155, -155, -152, 70, 69, -217,
	-155, -119, -223, -222, 73, -222, 74, 74, 383, 68,
	-2, -101, -272, -273, -274, 80, 364, 88, 193, 194,
	157, 195, 196, 197, -271, -209, -209, -209, -275, -177,
	-73, -234, -144, 160, 161, -209, -200, -241, -239, 71,
	-186, 144, 23, 144, -144, -234, 30, 132, 27, -196,
	-139, 13, -81, -150, -150, 114, -222, 71, -115, -115,
	-115, -115, -115, -284, 73, -115, -115, -284, 16, 45,
	-132, 47, -2, -283, -196, -152, -155, 70, 69, -131,
	-106, -205, -284, -284, -284, -255, -254, 67, 151, 80,
	-252, -151, 70, -223, -223, 70, 70, -253, -149, 19,
	-149, -274, 73, 197, 193, 197, 197, 197, 197, 198,
	-276, 38, -278, 39, 11, 70, 71, -210, 68, -244,
	71, -196, -144, 29, 29, -283, -140, 14, 16, -108,
	-76, -284, -284, -284, -284, -69, 107, 365, -284, -284,
	-127, 9, -129, -2, 70, -196, -107, -254, 71, -245,
	73, 158, 70, 184, -19, -2, -7, -8, -9, -10,
	-12, -43, -13, -14, -20, -21, -15, -50, -51, -60,
	-58, -59, -55, -54, -24, -22, -25, -17, -26, -27,
	-28, -23, 91, 146, 214, 224, 36, 36, 189, 190,
	-219, 145, -279, 43, -277, -231, 42, 16, -81, -253,
	-200, -115, -259, -260, 172, -141, -78, -195, -128, -80,
	-78, -195, -139, -150, -284, 363, 63, 366, -142, -160,
	-284, 74, -101, -256, -255, 185, -149, -78, -78, 71,
	-39, -201, 217, 218, 219, -197, -29, -19, -156, 74,
	-278, 16, -280, 40, 41, 73, -108, 70, 68, -284,
	69, -196, 69, -140, 53, 364, 367, -284, 68, -145,
	187, 188, -30, -31, 92, 93, 215, 216, 220, -209,
	69, 435, 38, 73, 16, 16, -139, -256, -253, -260,
	47, -80, 53, -155, -149, 71, 71, 96, 94, -31,
	-78, -29, 19, 19, 19, 29, -197, 96, -19, 73,
	73, -140, 70, 174, 365, 70, -11, -18, -10, -7,
	-8, -9, 224, 91, -29, 93, 435, -40, 74, -2,
	-38, -37, 74, -40, 222, 88, 223, 71, -115, -256,
	175, 366, -264, -265, 66, -149, -29, 435, -29, 96,
	94, -32, -33, 95, -19, 69, 221, -283, 367, -265,
	66, -264, 66, 10, 9, 435, 96, 435, 146, -29,
	96, 94, -33, -78, -37, -115, 171, -263, 159, 154,
	157, 30, -263, 96, 91, 435, 146, -29, 93, -284,
	-284, 153, 29, 82, 96, 435, -29, 146, 96, 435,
	146,
}
var yyDef = [...]int{

	32, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 834, 0, 526, 526, 526, 526, 526, 526, 0,
	-2, 394, 395, 0, 0, 0, 0, -2, 495, 496,
	497, 499, 500, 515, -2, 1323, 1323, 0, 0, 1323,
	0, 181, 0, 0, 0, 0, 0, 0, 52, 53,
	897, 0, 518, 507, 508, 0, 1321, 1, 3, 843,
	0, 0, 530, 535, 528, 0, 897, 897, 0, 0,
	83, 0, 0, 0, 0, 0, 895, 895, 0, 895,
	918, 0, 914, 915, 916, 0, 893, 0, 893, 893,
	893, 893, 893, 0, 447, 619, 927, 928, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 0, 0,
	0, 488, 0, 1324, 1324, 462, 0, 464, 0, 0,
	0, 0, 0, 473, 476, 1324, 345, 346, 347, 492,
	493, 482, 494, 0, 0, 0, 0, 0, 519, 520,
	521, 522, 1323, 1323, 525, 160, 162, 0, 182, 0,
	185, 188, 933, 501, 0, 526, 46, 0, 0, 898,
	498, 41, 42, 0, 603, 604, 605, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 847, 0, 0, 834, 48,
	0, 526, 531, 532, 538, 536, 537, 527, 0, 549,
	558, 0, 628, 0, 633, 635, -2, -2, 0, 676,
	677, 678, 679, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 705, 706, 707, 708, 709, 813, 814,
	815, 816, 817, 818, 819, 820, 637, 638, 810, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 801, 0, 772, 772, 772, 772, 772, 772, 772,
	772, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 65, 619, 69, 1272, 0, 871, -2, -2,
	873, 0, 0, 0, -2, -2, -2, -2, 1100, -2,
	810, 0, 84, 0, 222, 223, 0, 1112, 366, 925,
	926, 1102, 921, 922, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 0,
	448, 1324, 488, 451, 0, 0, 895, 895, 1324, 1324,
	1324, 0, 0, 0, 460, 1325, 1326, 461, 0, 368,
	369, 488, 488, 1324, 1324, 485, 0, 485, 485, 483,
	484, 479, 480, 0, 475, 0, 477, 502, 0, 0,
	509, -2, 512, 513, 514, -2, 0, 523, 524, 0,
	0, 164, 0, 0, 184, 166, 0, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 0,
	187, 0, 931, 934, 506, 535, 47, 1322, 0, 1324,
	0, 0, 0, 34, 0, 0, 844, 0, 835, 836,
	840, 840, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	843, 46, 535, 0, 533, 539, 540, 529, 0, 550,
	0, 0, 0, 559, 0, 561, 562, 563, 564, 0,
	631, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	655, 656, 657, 658, 659, 660, 661, 634, 0, 648,
	0, 0, 0, 696, 697, 698, 699, 700, 701, 702,
	0, 538, 46, 0, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 538, 0, 802, 0, 755,
	764, 0, 756, 765, 757, 766, 758, 0, 759, 767,
	760, 768, 761, 762, 769, 763, 0, 0, 0, 670,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 538, 0, 0, 0, 538, 0,
	0, 538, 0, 0, 0, 0, 538, 0, 0, 0,
	67, 0, 618, 0, 565, 567, 568, 569, -2, 0,
	622, 668, -2, 0, 0, 0, 59, 60, 0, 0,
	0, 0, 70, 72, 0, 0, 1272, 874, 875, 321,
	888, 889, 890, 0, 886, 0, 383, 0, 224, 0,
	0, 232, 309, 240, 241, 242, 302, 244, 302, 302,
	0, 302, 302, 302, 302, 302, 318, 318, 318, 318,
	318, 285, 286, 287, 288, 289, 0, 0, 262, 302,
	302, 302, 266, 292, 293, 294, 295, 296, 297, 298,
	299, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	304, 304, 306, 306, 306, 306, 306, 0, 365, 0,
	919, 81, 0, 1324, 0, 1324, 0, 0, 220, 116,
	0, 0, 439, 894, 0, 441, 61, 442, 443, 444,
	445, 620, 929, 930, 449, 450, 489, 490, 0, 0,
	454, 455, 456, 457, 458, 459, 370, 465, 466, 467,
	472, 488, 0, 0, 0, 583, 488, 474, 662, 504,
	503, 0, 516, 161, 163, 165, 183, 0, 0, 186,
	189, 0, 0, 0, 538, 0, 425, 43, 44, 0,
	0, 856, 848, 0, 0, 0, 0, 0, 838, 841,
	842, 839, 847, 49, 538, 0, 821, 0, 0, 541,
	534, 37, 629, 630, 632, 649, 0, 651, 653, 560,
	551, 0, 811, -2, 639, 640, 664, 665, 666, 0,
	0, 0, 0, 662, 644, 0, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 695, 786,
	787, 0, 693, 694, 703, 670, 667, 0, 866, 46,
	0, 672, 545, 546, 0, 0, 742, 0, 0, 678,
	813, 0, 678, 813, 0, 0, 0, 0, 808, 805,
	0, 0, 773, 0, 0, 0, 0, 0, 671, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 617, 0, 0, 0, 0, 0, 0, 606, 0,
	0, 609, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 576, 1203, 578, 0, 622, 0, 0, 0, 626,
	0, 626, 64, 626, 66, 0, 621, 872, 0, 0,
	0, 75, 76, 71, 876, 0, 882, 883, 884, 811,
	0, 221, 384, 386, 389, 390, 391, 225, 227, 228,
	229, 0, 1112, 358, 1213, 1253, -2, 352, 1139, -2,
	-2, 231, 311, 310, 243, 0, 318, 318, 302, 302,
	302, 302, 271, 318, 274, 277, 278, 321, 0, 321,
	321, 321, 321, 318, 0, 0, 263, 264, 265, 254,
	0, 255, 304, 257, 0, 258, 259, 260, 261, 364,
	0, 0, 0, 0, 0, 88, 896, 89, 0, 117,
	118, 92, 0, 437, 1324, 0, 1324, 1324, 626, 0,
	0, 468, 486, 487, 485, 488, 0, 471, 478, 0,
	505, 167, 168, 190, 67, 0, 932, 533, 396, 397,
	1323, -2, 426, 911, 426, 426, 415, 338, 426, 901,
	902, 903, 904, 905, 906, 907, 908, 0, 0, 0,
	0, 0, 845, 846, 837, 35, 0, 891, 892, 822,
	823, 82, 542, 650, 652, 654, 0, 670, 641, 662,
	645, 0, 642, 0, 636, 0, 675, -2, 0, 740,
	0, 741, 0, 0, 0, 0, 0, 779, 0, 0,
	780, 0, 751, 834, 0, 806, 0, 0, 754, 774,
	0, 0, 775, 776, 777, 778, 729, 0, 730, 0,
	0, 0, 0, 0, 736, 737, 738, 739, 0, 0,
	556, 556, 556, 0, 556, 556, 0, 556, 556, 556,
	556, 0, 556, 556, 556, 860, 0, 0, -2, 0,
	0, 626, 868, 0, 566, 597, 599, 0, 594, 607,
	608, 610, 0, 612, 0, 614, 615, 585, 572, 669,
	573, 0, 0, 0, 622, 582, 0, 0, 0, 834,
	0, 626, 57, 58, 0, 73, 74, 0, 0, 80,
	322, 323, 0, 0, 387, 0, 226, 0, 0, 340,
	352, 348, 349, 352, 343, 353, 344, 0, 233, 234,
	235, 236, 237, 238, 313, 0, 0, 0, 317, 0,
	325, 327, 0, 239, 312, 0, 321, 321, 318, 269,
	270, 302, 275, 321, 279, 0, 280, 281, 282, 283,
	321, 0, 300, 0, 0, 256, 0, 380, 0, 920,
	-2, 81, 0, 119, 120, 121, 0, 93, 94, 0,
	0, 0, 0, 0, 440, 62, 452, 453, 463, 371,
	372, 488, 470, 0, 663, 318, 0, 541, 0, 399,
	0, 1323, 352, 0, 416, 417, 427, 428, 429, 430,
	0, 0, 1323, 0, 0, 0, 428, 0, 0, 0,
	912, 913, 0, 0, 0, 339, 0, 0, 0, 858,
	857, 849, 36, 626, 0, 552, 812, 0, 643, 0,
	646, 710, 673, 547, 0, 0, 302, 302, 791, 302,
	306, 794, 302, 796, 302, 799, 0, 0, 0, 0,
	0, 0, 0, 803, 753, 809, 0, 0, 0, 553,
	834, 731, 732, 733, 734, 735, 556, 556, 714, 557,
	715, 716, 556, 718, 719, 556, 721, 722, 723, 724,
	556, 726, 727, 728, 50, 0, 860, 850, 862, 864,
	0, 46, 0, 0, 589, 834, 0, 0, 591, 598,
	0, 0, 592, 0, 593, 611, 613, 570, 0, 0,
	574, 0, 0, -2, 581, 0, 0, 0, 843, 627,
	56, 77, 78, 79, 385, 388, 0, 354, 302, 357,
	0, 341, 342, 0, 314, 315, 0, 324, 326, 328,
	303, 267, 268, 321, 276, 272, 319, 320, 284, 318,
	0, 318, 0, 307, 0, 367, 381, 0, 0, 86,
	0, 0, 100, 0, 96, 0, 0, 0, 438, 469,
	584, 943, 616, 82, 398, 0, 422, 0, 402, 919,
	350, 393, 403, 404, 409, 410, 411, 0, 0, 406,
	0, 422, 0, 419, 0, 0, 45, 0, 824, 0,
	82, 82, 711, 647, 0, 743, 788, 318, 792, 793,
	795, 797, 798, 800, 745, 744, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 712, 713,
	717, 720, 725, 0, 51, 0, 865, -2, 0, 68,
	0, 843, 869, 870, 595, 0, 600, 0, 587, 0,
	622, 579, 0, 0, 0, 0, 55, 330, 0, 840,
	0, 316, 273, 321, 301, 321, 0, 0, 382, 0,
	-2, 0, 81, 101, 102, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 95, 97, 98, 99, 945, 939,
	0, 0, 401, 423, 0, 232, 0, 352, 351, 418,
	0, 909, 910, 0, 413, 422, 0, 0, 0, 859,
	830, 0, 626, 0, 543, 548, 789, 790, 0, 0,
	0, 0, 781, 752, 804, 0, 0, 554, 0, 0,
	863, 0, -2, 0, 590, 54, 0, 586, 0, 575,
	577, 622, 623, 624, 625, 329, 333, 0, 338, 0,
	355, 356, 0, 290, 291, 305, 308, 0, 87, 0,
	0, 103, 104, 105, 106, 108, 109, 0, 0, 0,
	899, 947, -2, 0, 0, 400, 424, 230, 0, 919,
	405, 412, 414, 0, 421, 0, 38, 0, 0, 824,
	82, 746, 748, 747, 749, 0, 0, 0, 770, 771,
	834, 0, 853, 46, 596, 588, 580, 334, 335, 0,
	337, 0, 331, 0, 81, -2, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 0, 0, 0, 0, 110, 111, 112, 113,
	585, 0, 939, 0, 941, 0, 938, 0, 626, 0,
	0, 420, 0, 432, 0, 831, 832, 833, 825, 826,
	828, 829, 830, 544, 750, 0, 0, 0, 0, 861,
	-2, 336, 0, 85, 332, 122, 91, 0, 0, 921,
	0, 0, 149, 150, 151, 923, 0, 191, 33, 0,
	946, 0, 944, 0, 0, 940, 824, 331, 0, 431,
	0, 0, 0, 39, 782, 0, 785, 555, 0, 81,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 147,
	0, 0, 900, 948, 0, 0, 830, 407, 0, 433,
	0, 827, 783, 0, 0, 123, 124, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 924, 114, 192, 942,
	936, 40, 331, 0, 0, 359, 81, 125, 126, 127,
	128, 129, 0, 131, 0, 0, 0, 143, 144, -2,
	0, 152, 154, 155, 156, 0, 158, 159, 148, 408,
	0, 0, 360, 361, 0, 90, 0, 0, 0, 0,
	0, 0, 140, 0, 146, 0, 157, 0, 784, 362,
	0, 363, 0, 0, 0, 0, 0, 135, 136, 0,
	0, 0, 141, 0, 153, 0, 0, 373, 375, 376,
	0, 0, 374, 130, 132, 0, 138, 0, 0, 434,
	435, 377, 378, 379, 0, 0, 0, 137, 0, 142,
	139,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 89, 3, 3, 3, 117, 109, 3,
	68, 70, 114, 112, 69, 113, 127, 115, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 435,
	98, 97, 99, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 120,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 90, 91, 92, 93, 94, 95,
	96, 100, 101, 102, 103, 104, 105, 106, 107, 110,
	111, 116, 118, 121, 122, 123, 124, 125, 126, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:411
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:416
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:417
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:421
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:452
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Load{Local: yyDollar[3].boolVal, Infile: yyDollar[4].str, Table: yyDollar[5].tableName, Partition: yyDollar[6].partitions, Charset: yyDollar[7].str, Fields: yyDollar[8].Fields, Lines: yyDollar[9].Lines, IgnoreNum: yyDollar[10].sqlVal, Columns: yyDollar[11].columns}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:464
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:472
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:476
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:482
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:489
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 39:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:496
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[9].tableExprs, Where: NewWhere(WhereStr, yyDollar[10].expr), GroupBy: GroupBy(yyDollar[11].exprs), Having: NewWhere(HavingStr, yyDollar[12].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 40:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:503
		{
			yyVAL.selStmt = &Select{CommonTableExprs: yyDollar[1].tableExprs, Comments: Comments(yyDollar[3].bytes2), Cache: yyDollar[4].str, Distinct: yyDollar[5].str, Hints: yyDollar[7].str, SelectExprs: yyDollar[8].selectExprs, From: yyDollar[10].tableExprs, Where: NewWhere(WhereStr, yyDollar[11].expr), GroupBy: GroupBy(yyDollar[12].exprs), Having: NewWhere(HavingStr, yyDollar[13].expr)}
			if yyDollar[6].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:512
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.tableExprs = append(yyDollar[1].tableExprs, yyDollar[3].tableExpr)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[3].simpleTableExpr, As: yyDollar[1].tableIdent}, nil}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:532
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[6].simpleTableExpr, As: yyDollar[1].tableIdent}, yyDollar[3].columns}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:542
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:559
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].assignExprs)
			yyVAL.statement = ins
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:571
		{
			cols := make(Columns, 0, len(yyDollar[7].assignExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].assignExprs))
			for _, updateList := range yyDollar[7].assignExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].assignExprs)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.str = InsertStr
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:587
		{
			yyVAL.str = ReplaceStr
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:593
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].assignExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:611
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:616
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:621
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:625
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:635
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:641
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:650
		{
			yyVAL.partitions = nil
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:654
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setVarExprs}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:664
		{
			for i := 0; i < len(yyDollar[4].setVarExprs); i++ {
				yyDollar[4].setVarExprs[i].Scope = SetScope_None
			}
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setVarExprs}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:671
		{
			for i := 0; i < len(yyDollar[5].setVarExprs); i++ {
				yyDollar[5].setVarExprs[i].Scope = yyDollar[3].setScope
			}
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[5].setVarExprs}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:680
		{
			yyVAL.setVarExprs = SetVarExprs{yyDollar[1].setVarExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:684
		{
			yyVAL.setVarExprs = append(yyVAL.setVarExprs, yyDollar[3].setVarExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:690
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:694
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:698
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:704
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:708
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:712
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:721
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:726
		{
			yyVAL.int = yyOldPosition(yylex)
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:740
		{
			yyDollar[1].ddl.OptLike = &OptLike{LikeTable: yyDollar[3].tableName}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:745
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 86:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:749
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 87:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:753
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:757
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:765
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 90:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:773
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:777
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:782
		{
			yyVAL.procedureParams = nil
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:792
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:796
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:806
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:810
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:819
		{
			yyVAL.characteristics = nil
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:843
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:847
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:855
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:859
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:863
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:867
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:871
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:875
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:881
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:886
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:890
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.str = BeforeStr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.str = AfterStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.str = InsertStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.str = UpdateStr
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.str = DeleteStr
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:919
		{
			yyVAL.triggerOrder = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:923
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:927
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:943
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:949
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 132:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:953
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:963
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:969
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:975
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 137:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:980
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:985
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 139:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:991
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1009
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1015
		{
			yyVAL.statement = &Declare{Condition: &DeclareCondition{Name: string(yyDollar[2].bytes), SqlStateValue: string(yyDollar[5].bytes)}}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1019
		{
			yyVAL.statement = &Declare{Condition: &DeclareCondition{Name: string(yyDollar[2].bytes), MysqlErrorCode: NewIntVal(yyDollar[5].bytes)}}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1023
		{
			yyVAL.statement = &Declare{Cursor: &DeclareCursor{Name: string(yyDollar[2].bytes), SelectStmt: yyDollar[5].selStmt}}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1027
		{
			yyVAL.statement = &Declare{Handler: &DeclareHandler{Action: yyDollar[2].declareHandlerAction, ConditionValues: yyDollar[5].declareHandlerConditions, Statement: yyDollar[6].statement}}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.statement = &Declare{Variables: &DeclareVariables{Names: yyDollar[2].colIdents, VarType: yyDollar[3].columnType}}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1035
		{
			yyDollar[3].columnType.Default = yyDollar[5].expr
			yyVAL.statement = &Declare{Variables: &DeclareVariables{Names: yyDollar[2].colIdents, VarType: yyDollar[3].columnType}}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Continue
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Exit
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Undo
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1056
		{
			yyVAL.declareHandlerConditions = []DeclareHandlerCondition{yyDollar[1].declareHandlerCondition}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.declareHandlerConditions = append(yyVAL.declareHandlerConditions, yyDollar[3].declareHandlerCondition)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_MysqlErrorCode, MysqlErrorCode: NewIntVal(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlState, String: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlWarning}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_NotFound}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlException}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_ConditionName, String: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1096
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.statement = &Signal{ConditionName: string(yyDollar[2].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1104
		{
			yyVAL.statement = &Signal{ConditionName: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1114
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1124
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1130
		{
			yyVAL.signalInfo = SignalInfo{ConditionItemName: yyDollar[1].signalConditionItemName, Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ClassOrigin
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_SubclassOrigin
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_MessageText
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_MysqlErrno
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintCatalog
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintSchema
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintName
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1164
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_CatalogName
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_SchemaName
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_TableName
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ColumnName
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_CursorName
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.statement = &Resignal{}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.statement = &Resignal{Signal{SqlStateValue: string(yyDollar[2].bytes)}}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1194
		{
			yyVAL.statement = &Resignal{Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1198
		{
			yyVAL.statement = &Resignal{Signal{Info: yyDollar[3].signalInfos}}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.statement = &Resignal{Signal{ConditionName: string(yyDollar[2].bytes)}}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1206
		{
			yyVAL.statement = &Resignal{Signal{ConditionName: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1212
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1217
		{
			yyVAL.exprs = nil
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1221
		{
			yyVAL.exprs = nil
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1235
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1273
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1284
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1301
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1311
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1316
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1320
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1324
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1330
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1340
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1349
		{
			yyVAL.columnType = ColumnType{}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1353
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1371
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1389
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1398
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1409
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1420
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1425
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1678
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1683
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1688
		{
			yyVAL.sqlVal = nil
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1692
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1697
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1701
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1709
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1719
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1727
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1731
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1736
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1740
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1751
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1763
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1769
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1801
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.colKeyOpt = colKey
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1825
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1829
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1834
		{
			yyVAL.indexOptions = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1848
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1858
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1863
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1879
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1887
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1891
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1895
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1905
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1924
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.str = yyDollar[1].str
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1933
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 359:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1969
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 360:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1973
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 361:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1977
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 362:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1981
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 363:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1985
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1991
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1995
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[2].constraintInfo}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2005
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2020
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2040
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2058
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2062
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2067
		{
			yyVAL.boolean = true
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.boolean = true
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.boolean = false
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.str = yyDollar[1].str
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2137
		{
			for i := 0; i < len(yyDollar[5].ddls); i++ {
				if yyDollar[5].ddls[i].Action == RenameStr {
					yyDollar[5].ddls[i].FromTables = append(TableNames{yyDollar[4].tableName}, yyDollar[5].ddls[i].FromTables...)
				} else {
					yyDollar[5].ddls[i].Table = yyDollar[4].tableName
				}
			}
			yyVAL.statement = &MultiAlterDDL{Table: yyDollar[4].tableName, Statements: yyDollar[5].ddls}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.ddls = []*DDL{yyDollar[1].ddl}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.ddls = append(yyVAL.ddls, yyDollar[3].ddl)
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2160
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2164
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[4].columnDefinition)
			ddl.Column = yyDollar[4].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2171
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[4].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			ddl.Column = yyDollar[3].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2178
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[3].bytes))}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2190
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ColumnAction: RenameStr, Column: NewColIdent(string(yyDollar[3].bytes)), ToColumn: NewColIdent(string(yyDollar[5].bytes))}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2194
		{
			// Change this to a rename statement
			yyVAL.ddl = &DDL{Action: RenameStr, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2199
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[3].str), Using: yyDollar[4].colIdent, Columns: yyDollar[6].indexColumns, Options: yyDollar[8].indexOptions}}
		}
	case 408:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2203
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[5].str), Type: yyDollar[3].str, Using: yyDollar[6].colIdent, Columns: yyDollar[8].indexColumns, Options: yyDollar[10].indexOptions}}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2207
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[3].bytes)}}}}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[3].bytes), Details: &CheckConstraintDefinition{}}}}}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2221
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[3].colIdent, ToName: yyDollar[5].colIdent}}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2225
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[4].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			ddl.Column = yyDollar[3].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2232
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[3].bytes)), ColumnOrder: yyDollar[5].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[4].columnDefinition)
			yyVAL.ddl = ddl
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.ddl = &DDL{Action: AlterStr, PartitionSpec: yyDollar[1].partSpec}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
			yyVAL.ddl = ddl
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2248
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
			yyVAL.ddl = ddl
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2254
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[4].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2259
		{
			yyVAL.ddl = &DDL{Action: AlterStr, AutoIncSpec: &AutoIncSpec{Value: yyDollar[3].expr}}
		}
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2263
		{
			yyVAL.ddl = &DDL{Action: AlterStr, DefaultSpec: &DefaultSpec{Action: SetStr, Column: yyDollar[3].colIdent, Value: yyDollar[6].expr}}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2267
		{
			yyVAL.ddl = &DDL{Action: AlterStr, DefaultSpec: &DefaultSpec{Action: DropStr, Column: yyDollar[3].colIdent}}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2272
		{
			yyVAL.columnOrder = nil
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2276
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2286
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2292
		{
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
		}
	case 431:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2303
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2313
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 434:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2319
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 435:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2323
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2329
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2335
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2339
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2347
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2355
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2359
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2367
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2375
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2383
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2391
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2401
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2410
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2416
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2421
		{
			yyVAL.statement = &Show{Type: CharsetStr, Filter: yyDollar[4].showFilter}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Filter: yyDollar[3].showFilter}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2442
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2454
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2474
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2490
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 469:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2498
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2503
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2517
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2525
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2531
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2571
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.str = "full "
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2581
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2591
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2599
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2605
		{
			yyVAL.showFilter = nil
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2609
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2613
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2619
		{
			yyVAL.str = ""
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.str = SessionStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.str = GlobalStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2637
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.statement = &Begin{}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.statement = &Begin{}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
			yyVAL.statement = &Commit{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2665
		{
			yyVAL.statement = &Rollback{}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.statement = &Savepoint{Identifier: string(yyDollar[2].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2677
		{
			yyVAL.statement = &RollbackSavepoint{Identifier: string(yyDollar[3].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2681
		{
			yyVAL.statement = &RollbackSavepoint{Identifier: string(yyDollar[4].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2685
		{
			yyVAL.statement = &RollbackSavepoint{Identifier: string(yyDollar[4].bytes)}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2689
		{
			yyVAL.statement = &RollbackSavepoint{Identifier: string(yyDollar[5].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2695
		{
			yyVAL.statement = &ReleaseSavepoint{Identifier: string(yyDollar[3].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2705
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2709
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2723
		{
			yyVAL.str = ""
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2727
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2738
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2742
		{
			yyVAL.statement = &OtherRead{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2748
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2752
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2770
		{
			setAllowComments(yylex, true)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2780
		{
			yyVAL.bytes2 = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.str = UnionStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2794
		{
			yyVAL.str = UnionAllStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2798
		{
			yyVAL.str = UnionDistinctStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2803
		{
			yyVAL.byt = 0
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.byt = 1
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2812
		{
			yyVAL.str = ""
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			yyVAL.str = SQLCacheStr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2825
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2829
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2833
		{
			yyVAL.str = DistinctStr
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2838
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.str = StraightJoinHint
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2848
		{
			if ae, ok := yyDollar[2].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[1].int
				ae.EndParsePos = yyDollar[3].int - 1
			}
			yyVAL.selectExprs = SelectExprs{yyDollar[2].selectExpr}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2856
		{
			if ae, ok := yyDollar[4].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[3].int
				ae.EndParsePos = yyDollar[5].int - 1
			}
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[4].selectExpr)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2875
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2879
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2885
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2889
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2897
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2904
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2908
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2912
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2917
		{
			yyVAL.over = nil
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.over = yyDollar[1].over
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2926
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2962
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2976
		{
			switch n := yyDollar[1].simpleTableExpr.(type) {
			case *Subquery:
				n.Columns = yyDollar[4].columns
			case *ValuesStatement:
				n.Columns = yyDollar[4].columns
			}
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].simpleTableExpr, As: yyDollar[3].tableIdent}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2986
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2992
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2998
		{
			yyVAL.simpleTableExpr = &ValuesStatement{Rows: yyDollar[2].values}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3004
		{
			yyVAL.values = Values{yyDollar[2].valTuple}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3008
		{
			yyVAL.values = append(yyVAL.values, yyDollar[4].valTuple)
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3014
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3019
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3034
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3038
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3046
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = nil
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3066
		{
			yyVAL.columns = nil
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3080
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3090
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3103
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3107
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3111
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3115
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3121
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3123
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3127
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3133
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3135
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3138
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3149
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.str = JoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3159
		{
			yyVAL.str = JoinStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3163
		{
			yyVAL.str = JoinStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.str = StraightJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3175
		{
			yyVAL.str = LeftJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3179
		{
			yyVAL.str = LeftJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3183
		{
			yyVAL.str = RightJoinStr
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3187
		{
			yyVAL.str = RightJoinStr
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3193
		{
			yyVAL.str = NaturalJoinStr
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3197
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3213
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3227
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3233
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3238
		{
			yyVAL.indexHints = nil
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3242
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3246
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3250
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = nil
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3259
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3269
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3273
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3277
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3281
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3289
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3295
		{
			yyVAL.str = ""
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3299
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3309
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3315
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3319
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3323
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3327
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3331
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3335
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3339
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3343
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3347
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3351
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.str = IsNullStr
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3361
		{
			yyVAL.str = IsNotNullStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3365
		{
			yyVAL.str = IsTrueStr
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3369
		{
			yyVAL.str = IsNotTrueStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3373
		{
			yyVAL.str = IsFalseStr
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3377
		{
			yyVAL.str = IsNotFalseStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3383
		{
			yyVAL.str = EqualStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.str = LessThanStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			yyVAL.str = GreaterThanStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.str = LessEqualStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.str = GreaterEqualStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.str = NotEqualStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = nil
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3436
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].selStmt}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3442
		{
			yyVAL.simpleTableExpr = yyDollar[1].subquery
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3446
		{
			yyVAL.simpleTableExpr = yyDollar[2].simpleTableExpr
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3452
		{
			yyVAL.selectExprs = nil
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3463
		{
			yyVAL.selectExprs = append(yyDollar[1].selectExprs, yyDollar[3].selectExpr)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3469
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3473
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3479
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3495
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3499
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3503
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3507
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3511
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3515
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3519
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3523
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3527
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3531
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3535
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3543
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3547
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3555
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3559
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3563
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3567
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3571
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3579
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3593
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3597
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3601
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3621
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3625
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3675
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3679
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 726:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3708
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3712
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3716
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3732
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3744
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3748
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 743:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3771
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3775
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 745:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3779
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 746:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3783
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 747:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3787
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 748:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3791
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 749:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3795
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 750:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3799
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 752:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3807
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3811
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3815
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3838
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3848
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3863
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3868
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3872
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3876
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3881
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3886
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3891
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 770:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3895
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 771:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3899
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3910
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 775:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3928
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3932
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3936
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3940
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3946
		{
			yyVAL.str = ""
		}
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3950
		{
			yyVAL.str = BooleanModeStr
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3954
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 784:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3958
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3962
		{
			yyVAL.str = QueryExpansionStr
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3968
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3982
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3986
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4033
		{
			yyVAL.expr = nil
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4037
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4042
		{
			yyVAL.str = string("")
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4046
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4052
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4056
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4062
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4067
		{
			yyVAL.expr = nil
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4071
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4077
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4081
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4085
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4091
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4095
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4099
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4103
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4107
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4111
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4115
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4119
		{
			yyVAL.expr = &NullVal{}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4125
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4129
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4133
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4138
		{
			yyVAL.exprs = nil
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4142
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4148
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4152
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4158
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4162
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4167
		{
			yyVAL.expr = nil
		}
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4171
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4177
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4181
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4186
		{
			yyVAL.orderBy = nil
		}
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4190
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4196
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4200
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4206
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4210
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4215
		{
			yyVAL.str = AscScr
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4219
		{
			yyVAL.str = AscScr
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4223
		{
			yyVAL.str = DescScr
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4228
		{
			yyVAL.limit = nil
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4232
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4236
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4240
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4245
		{
			yyVAL.str = ""
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4249
		{
			yyVAL.str = ForUpdateStr
		}
	case 849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4253
		{
			yyVAL.str = ShareModeStr
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4266
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4270
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4274
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 853:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4279
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4283
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 855:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4287
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4294
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4298
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4302
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4306
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4311
		{
			yyVAL.assignExprs = nil
		}
	case 861:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4315
		{
			yyVAL.assignExprs = yyDollar[5].assignExprs
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4321
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4325
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4331
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4335
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4341
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4347
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4357
		{
			yyVAL.assignExprs = AssignmentExprs{yyDollar[1].assignExpr}
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4361
		{
			yyVAL.assignExprs = append(yyDollar[1].assignExprs, yyDollar[3].assignExpr)
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4367
		{
			yyVAL.assignExpr = &AssignmentExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4373
		{
			yyVAL.setVarExprs = SetVarExprs{yyDollar[1].setVarExpr}
		}
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4377
		{
			yyVAL.setVarExprs = append(yyDollar[1].setVarExprs, yyDollar[3].setVarExpr)
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4383
		{
			colName, scope, err := VarScopeForColName(yyDollar[1].setVarExpr.Name)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyDollar[1].setVarExpr.Name = colName
			yyDollar[1].setVarExpr.Scope = scope
			yyVAL.setVarExpr = yyDollar[1].setVarExpr
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4394
		{
			_, scope, err := VarScopeForColName(yyDollar[2].setVarExpr.Name)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].setVarExpr.Name.Name.val))
				return 1
			}
			yyDollar[2].setVarExpr.Scope = yyDollar[1].setScope
			yyVAL.setVarExpr = yyDollar[2].setVarExpr
		}
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4407
		{
			_, scope, err := VarScopeForColName(yyDollar[2].setVarExpr.Name)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].setVarExpr.Name.Name.val))
				return 1
			}
			yyDollar[2].setVarExpr.Scope = yyDollar[1].setScope
			yyVAL.setVarExpr = yyDollar[2].setVarExpr
		}
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4420
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr, Scope: SetScope_Session}
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4426
		{
			yyVAL.setScope = SetScope_Global
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4430
		{
			yyVAL.setScope = SetScope_Session
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4436
		{
			yyVAL.setScope = SetScope_Session
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4440
		{
			yyVAL.setScope = SetScope_Persist
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4444
		{
			yyVAL.setScope = SetScope_PersistOnly
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4450
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[1].colName, Expr: NewStrVal(yyDollar[3].bytes), Scope: SetScope_None}
		}
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4454
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[1].colName, Expr: NewStrVal(yyDollar[3].bytes), Scope: SetScope_None}
		}
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4458
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr, Scope: SetScope_None}
		}
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4465
		{
			yyVAL.bytes = []byte("charset")
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4472
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4476
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4480
		{
			yyVAL.expr = &Default{}
		}
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4489
		{
			yyVAL.byt = 0
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4491
		{
			yyVAL.byt = 1
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4494
		{
			yyVAL.byt = 0
		}
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4496
		{
			yyVAL.byt = 1
		}
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4499
		{
			yyVAL.str = ""
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4501
		{
			yyVAL.str = IgnoreStr
		}
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4504
		{
			yyVAL.sqlVal = nil
		}
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4506
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4510
		{
			yyVAL.empty = struct{}{}
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4512
		{
			yyVAL.empty = struct{}{}
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4514
		{
			yyVAL.empty = struct{}{}
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4516
		{
			yyVAL.empty = struct{}{}
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4518
		{
			yyVAL.empty = struct{}{}
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4520
		{
			yyVAL.empty = struct{}{}
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4522
		{
			yyVAL.empty = struct{}{}
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4524
		{
			yyVAL.empty = struct{}{}
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4528
		{
			yyVAL.empty = struct{}{}
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4530
		{
			yyVAL.empty = struct{}{}
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4533
		{
			yyVAL.empty = struct{}{}
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4535
		{
			yyVAL.empty = struct{}{}
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4537
		{
			yyVAL.empty = struct{}{}
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4541
		{
			yyVAL.str = UniqueStr
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4543
		{
			yyVAL.str = FulltextStr
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4545
		{
			yyVAL.str = SpatialStr
		}
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4548
		{
			yyVAL.str = ""
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4550
		{
			yyVAL.str = yyDollar[1].str
		}
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4553
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4555
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4559
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4563
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4569
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4573
		{
			yyVAL.colIdents = append(yyVAL.colIdents, yyDollar[3].colIdent)
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4580
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4586
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4590
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4597
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4602
		{
			yyVAL.str = string("")
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4604
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4607
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4609
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4612
		{
			yyVAL.EnclosedBy = nil
		}
	case 936:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4616
		{
			yyVAL.EnclosedBy = &EnclosedBy{Optionally: yyDollar[1].boolVal, Delim: NewStrVal(yyDollar[4].bytes)}
		}
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4621
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4625
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4630
		{
			yyVAL.sqlVal = nil
		}
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4634
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4639
		{
			yyVAL.sqlVal = nil
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4643
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4648
		{
			yyVAL.Fields = nil
		}
	case 944:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4652
		{
			yyVAL.Fields = &Fields{TerminatedBy: yyDollar[2].sqlVal, EnclosedBy: yyDollar[3].EnclosedBy, EscapedBy: yyDollar[4].sqlVal}
		}
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4657
		{
			yyVAL.Lines = nil
		}
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4661
		{
			yyVAL.Lines = &Lines{StartingBy: yyDollar[2].sqlVal, TerminatedBy: yyDollar[3].sqlVal}
		}
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4666
		{
			yyVAL.sqlVal = nil
		}
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4670
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5072
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5081
		{
			decNesting(yylex)
		}
	case 1323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5086
		{
			skipToEnd(yylex)
		}
	case 1324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5091
		{
			skipToEnd(yylex)
		}
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5095
		{
			skipToEnd(yylex)
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5099
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
