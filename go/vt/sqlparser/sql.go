// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const VINDEX = 57490
const VINDEXES = 57491
const STATUS = 57492
const VARIABLES = 57493
const WARNINGS = 57494
const SEQUENCE = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const MEDIUMINT = 57504
const INT = 57505
const INTEGER = 57506
const BIGINT = 57507
const INTNUM = 57508
const REAL = 57509
const DOUBLE = 57510
const FLOAT_TYPE = 57511
const DECIMAL = 57512
const NUMERIC = 57513
const TIME = 57514
const TIMESTAMP = 57515
const DATETIME = 57516
const YEAR = 57517
const CHAR = 57518
const VARCHAR = 57519
const BOOL = 57520
const CHARACTER = 57521
const VARBINARY = 57522
const NCHAR = 57523
const TEXT = 57524
const TINYTEXT = 57525
const MEDIUMTEXT = 57526
const LONGTEXT = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const NULLX = 57542
const AUTO_INCREMENT = 57543
const APPROXNUM = 57544
const SIGNED = 57545
const UNSIGNED = 57546
const ZEROFILL = 57547
const COLLATION = 57548
const DATABASES = 57549
const SCHEMAS = 57550
const TABLES = 57551
const VITESS_METADATA = 57552
const VSCHEMA = 57553
const FULL = 57554
const PROCESSLIST = 57555
const COLUMNS = 57556
const FIELDS = 57557
const ENGINES = 57558
const PLUGINS = 57559
const NAMES = 57560
const CHARSET = 57561
const GLOBAL = 57562
const SESSION = 57563
const ISOLATION = 57564
const LEVEL = 57565
const READ = 57566
const WRITE = 57567
const ONLY = 57568
const REPEATABLE = 57569
const COMMITTED = 57570
const UNCOMMITTED = 57571
const SERIALIZABLE = 57572
const CURRENT_TIMESTAMP = 57573
const DATABASE = 57574
const CURRENT_DATE = 57575
const CURRENT_TIME = 57576
const LOCALTIME = 57577
const LOCALTIMESTAMP = 57578
const UTC_DATE = 57579
const UTC_TIME = 57580
const UTC_TIMESTAMP = 57581
const REPLACE = 57582
const CONVERT = 57583
const CAST = 57584
const SUBSTR = 57585
const SUBSTRING = 57586
const GROUP_CONCAT = 57587
const SEPARATOR = 57588
const TIMESTAMPADD = 57589
const TIMESTAMPDIFF = 57590
const MATCH = 57591
const AGAINST = 57592
const BOOLEAN = 57593
const LANGUAGE = 57594
const WITH = 57595
const QUERY = 57596
const EXPANSION = 57597
const UNUSED = 57598
const ARRAY = 57599
const CUME_DIST = 57600
const DESCRIPTION = 57601
const DENSE_RANK = 57602
const EMPTY = 57603
const EXCEPT = 57604
const FIRST_VALUE = 57605
const GROUPING = 57606
const GROUPS = 57607
const JSON_TABLE = 57608
const LAG = 57609
const LAST_VALUE = 57610
const LATERAL = 57611
const LEAD = 57612
const MEMBER = 57613
const NTH_VALUE = 57614
const NTILE = 57615
const OF = 57616
const OVER = 57617
const PERCENT_RANK = 57618
const RANK = 57619
const RECURSIVE = 57620
const ROW_NUMBER = 57621
const SYSTEM = 57622
const WINDOW = 57623
const ACTIVE = 57624
const ADMIN = 57625
const BUCKETS = 57626
const CLONE = 57627
const COMPONENT = 57628
const DEFINITION = 57629
const ENFORCED = 57630
const EXCLUDE = 57631
const FOLLOWING = 57632
const GEOMCOLLECTION = 57633
const GET_MASTER_PUBLIC_KEY = 57634
const HISTOGRAM = 57635
const HISTORY = 57636
const INACTIVE = 57637
const INVISIBLE = 57638
const LOCKED = 57639
const MASTER_COMPRESSION_ALGORITHMS = 57640
const MASTER_PUBLIC_KEY_PATH = 57641
const MASTER_TLS_CIPHERSUITES = 57642
const MASTER_ZSTD_COMPRESSION_LEVEL = 57643
const NESTED = 57644
const NETWORK_NAMESPACE = 57645
const NOWAIT = 57646
const NULLS = 57647
const OJ = 57648
const OLD = 57649
const OPTIONAL = 57650
const ORDINALITY = 57651
const ORGANIZATION = 57652
const OTHERS = 57653
const PATH = 57654
const PERSIST = 57655
const PERSIST_ONLY = 57656
const PRECEDING = 57657
const PRIVILEGE_CHECKS_USER = 57658
const PROCESS = 57659
const RANDOM = 57660
const REFERENCE = 57661
const REQUIRE_ROW_FORMAT = 57662
const RESOURCE = 57663
const RESPECT = 57664
const RESTART = 57665
const RETAIN = 57666
const REUSE = 57667
const ROLE = 57668
const SECONDARY = 57669
const SECONDARY_ENGINE = 57670
const SECONDARY_LOAD = 57671
const SECONDARY_UNLOAD = 57672
const SKIP = 57673
const SRID = 57674
const THREAD_PRIORITY = 57675
const TIES = 57676
const UNBOUNDED = 57677
const VCPU = 57678
const VISIBLE = 57679

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	167, 327,
	168, 327,
	-2, 315,
	-1, 48,
	1, 977,
	355, 977,
	-2, 346,
	-1, 332,
	114, 683,
	-2, 679,
	-1, 333,
	114, 684,
	-2, 680,
	-1, 402,
	84, 933,
	-2, 67,
	-1, 403,
	84, 851,
	-2, 68,
	-1, 408,
	84, 820,
	-2, 643,
	-1, 410,
	84, 881,
	-2, 645,
	-1, 588,
	5, 31,
	-2, 340,
	-1, 592,
	5, 31,
	-2, 339,
	-1, 718,
	1, 391,
	5, 391,
	12, 391,
	13, 391,
	14, 391,
	15, 391,
	17, 391,
	19, 391,
	29, 391,
	30, 391,
	44, 391,
	45, 391,
	46, 391,
	47, 391,
	48, 391,
	50, 391,
	51, 391,
	54, 391,
	55, 391,
	57, 391,
	58, 391,
	355, 391,
	-2, 414,
	-1, 721,
	55, 48,
	57, 48,
	-2, 52,
	-1, 873,
	114, 686,
	-2, 682,
	-1, 1110,
	5, 32,
	-2, 478,
	-1, 1142,
	5, 31,
	-2, 617,
	-1, 1227,
	5, 31,
	-2, 69,
	-1, 1331,
	1, 433,
	5, 433,
	12, 433,
	13, 433,
	14, 433,
	15, 433,
	17, 433,
	19, 433,
	29, 433,
	30, 433,
	44, 433,
	45, 433,
	46, 433,
	47, 433,
	48, 433,
	50, 433,
	51, 433,
	54, 433,
	55, 433,
	57, 433,
	58, 433,
	355, 433,
	-2, 414,
	-1, 1423,
	5, 32,
	-2, 618,
	-1, 1454,
	5, 31,
	-2, 69,
	-1, 1489,
	5, 31,
	-2, 620,
	-1, 1572,
	5, 32,
	-2, 621,
}

const yyPrivate = 57344

const yyLast = 16906

var yyAct = [...]int{

	333, 1612, 1602, 1387, 1560, 1438, 1576, 1262, 673, 1344,
	337, 1145, 1503, 1469, 990, 961, 1309, 672, 3, 1456,
	1034, 363, 1345, 1036, 1577, 959, 311, 350, 963, 1310,
	955, 986, 300, 1146, 1191, 1306, 64, 989, 1031, 1051,
	99, 999, 1316, 99, 1170, 1322, 811, 407, 1281, 99,
	898, 1104, 734, 827, 935, 1220, 714, 911, 925, 604,
	946, 534, 875, 1027, 610, 401, 364, 54, 1003, 733,
	939, 1241, 306, 85, 99, 412, 1242, 335, 715, 99,
	396, 99, 301, 302, 616, 320, 305, 957, 625, 540,
	99, 393, 412, 398, 723, 63, 99, 7, 6, 689,
	5, 1605, 1070, 1586, 1600, 1570, 559, 1597, 1388, 68,
	1585, 1017, 1569, 1298, 1415, 1069, 688, 539, 1340, 1341,
	26, 54, 55, 29, 30, 981, 982, 1339, 324, 339,
	735, 562, 736, 316, 86, 980, 936, 70, 71, 72,
	73, 74, 304, 94, 90, 91, 1074, 92, 1179, 303,
	308, 1178, 310, 585, 1180, 1068, 1537, 638, 637, 647,
	648, 640, 641, 642, 643, 644, 645, 646, 639, 1211,
	61, 649, 580, 542, 543, 81, 581, 578, 579, 1010,
	376, 404, 382, 383, 380, 381, 379, 378, 377, 1264,
	1018, 1476, 1406, 1404, 295, 583, 384, 385, 561, 564,
	1266, 840, 566, 573, 574, 1065, 1060, 1061, 837, 1059,
	1599, 1062, 1063, 584, 1596, 1561, 290, 1261, 940, 1004,
	1457, 1458, 1553, 839, 1620, 1245, 297, 83, 84, 1463,
	541, 80, 547, 797, 310, 563, 565, 88, 87, 964,
	966, 1464, 1265, 287, 841, 1169, 1072, 1075, 309, 638,
	637, 647, 648, 640, 641, 642, 643, 644, 645, 646,
	639, 838, 298, 649, 1229, 803, 93, 1002, 1006, 1616,
	99, 1168, 1167, 412, 537, 412, 412, 598, 1282, 1006,
	412, 1544, 412, 1067, 1504, 1006, 269, 89, 412, 1082,
	1258, 1426, 1081, 535, 270, 661, 662, 1506, 1360, 1268,
	1120, 273, 1006, 1175, 1192, 1066, 1131, 1105, 1098, 99,
	847, 281, 288, 289, 588, 592, 729, 629, 553, 965,
	1284, 560, 639, 987, 649, 649, 976, 412, 1018, 1568,
	844, 1551, 1538, 828, 613, 832, 594, 595, 1462, 558,
	1048, 558, 558, 624, 1526, 1071, 558, 279, 558, 1361,
	82, 612, 1011, 286, 558, 1286, 1117, 1290, 570, 1285,
	1073, 1283, 1005, 54, 54, 1006, 1288, 1505, 1000, 535,
	1001, 56, 1320, 1005, 622, 1287, 998, 1004, 737, 1005,
	271, 1614, 593, 54, 1615, 1300, 1613, 926, 1289, 1291,
	624, 99, 99, 99, 589, 591, 1005, 590, 658, 1257,
	412, 660, 533, 1254, 661, 662, 412, 283, 274, 275,
	882, 284, 285, 293, 86, 1006, 829, 276, 278, 546,
	272, 292, 291, 1049, 880, 881, 879, 614, 1053, 671,
	846, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 571, 687, 690, 690, 690, 696, 690, 690, 696,
	690, 704, 705, 706, 707, 708, 709, 1351, 719, 1005,
	661, 662, 1203, 603, 659, 1249, 1245, 1208, 1207, 845,
	1246, 77, 799, 1247, 1248, 623, 622, 692, 694, 713,
	698, 700, 1302, 703, 722, 619, 623, 622, 1204, 727,
	1250, 1621, 624, 731, 691, 693, 695, 697, 699, 701,
	702, 1574, 1209, 624, 1201, 956, 404, 78, 1052, 1005,
	1202, 1452, 549, 550, 551, 1249, 1245, 88, 87, 1451,
	1246, 718, 61, 1247, 1248, 926, 600, 1128, 601, 623,
	622, 602, 878, 1622, 99, 964, 966, 899, 412, 900,
	1250, 1115, 1224, 1114, 99, 1552, 624, 99, 1549, 1223,
	99, 24, 850, 851, 99, 1212, 412, 412, 1483, 1449,
	623, 622, 307, 412, 412, 99, 412, 412, 1206, 1181,
	99, 1182, 1356, 1116, 412, 412, 1238, 624, 638, 637,
	647, 648, 640, 641, 642, 643, 644, 645, 646, 639,
	1221, 1056, 649, 362, 1095, 1096, 1097, 1498, 1598, 99,
	412, 813, 623, 622, 99, 647, 648, 640, 641, 642,
	643, 644, 645, 646, 639, 965, 412, 649, 315, 624,
	1520, 99, 558, 558, 1517, 623, 622, 412, 1373, 558,
	558, 535, 558, 558, 390, 391, 1444, 1589, 804, 852,
	558, 558, 624, 865, 867, 868, 1581, 597, 597, 866,
	816, 817, 1205, 535, 876, 640, 641, 642, 643, 644,
	645, 646, 639, 1444, 1578, 649, 558, 1390, 406, 1498,
	1564, 412, 1444, 1554, 1498, 1545, 871, 873, 642, 643,
	644, 645, 646, 639, 1385, 548, 649, 930, 1498, 1508,
	1515, 915, 918, 909, 1498, 597, 1444, 1443, 927, 1381,
	854, 1428, 597, 1425, 597, 412, 412, 948, 951, 952,
	953, 949, 99, 950, 954, 869, 1378, 1323, 1324, 1192,
	99, 99, 1367, 1366, 99, 99, 1236, 54, 99, 99,
	99, 412, 1363, 1364, 1363, 1362, 872, 1235, 1187, 902,
	903, 26, 675, 1046, 412, 637, 647, 648, 640, 641,
	642, 643, 644, 645, 646, 639, 905, 1045, 649, 943,
	597, 1512, 877, 901, 1140, 1111, 597, 907, 597, 923,
	834, 1141, 810, 330, 809, 800, 798, 813, 353, 352,
	355, 356, 357, 358, 744, 743, 958, 354, 359, 555,
	719, 61, 969, 65, 719, 1511, 977, 1307, 99, 412,
	1319, 412, 978, 99, 99, 1357, 994, 99, 725, 974,
	1007, 971, 1319, 910, 912, 973, 725, 917, 920, 921,
	922, 970, 907, 724, 1421, 1525, 943, 99, 26, 99,
	99, 1171, 1171, 1033, 99, 1111, 1271, 404, 99, 99,
	99, 99, 99, 934, 1365, 937, 938, 26, 1183, 718,
	991, 979, 726, 718, 728, 1029, 1030, 718, 1488, 942,
	726, 1111, 724, 1134, 1133, 558, 406, 558, 406, 406,
	1019, 1020, 1021, 406, 1044, 406, 943, 1319, 61, 1263,
	724, 406, 1111, 317, 597, 730, 848, 943, 802, 61,
	1587, 1557, 1518, 1471, 1086, 873, 1453, 61, 1012, 1433,
	1032, 876, 948, 951, 952, 953, 949, 1350, 950, 954,
	1323, 1324, 1088, 1087, 860, 1186, 1028, 1023, 1022, 1035,
	627, 638, 637, 647, 648, 640, 641, 642, 643, 644,
	645, 646, 639, 61, 1472, 649, 1607, 1603, 1326, 1099,
	1307, 1225, 1100, 833, 99, 99, 99, 99, 99, 806,
	1157, 1329, 1328, 1147, 872, 1158, 99, 1142, 1154, 99,
	1108, 1155, 1159, 99, 952, 953, 1156, 1153, 321, 322,
	1593, 99, 1584, 1267, 1083, 1591, 909, 617, 618, 1166,
	1093, 1092, 1486, 1127, 1355, 1354, 1194, 1188, 1216, 742,
	412, 1165, 556, 406, 596, 615, 1094, 605, 1419, 739,
	1148, 1467, 1039, 1151, 1184, 805, 1143, 1144, 606, 877,
	719, 719, 719, 719, 719, 1160, 1173, 1228, 1174, 617,
	618, 312, 956, 1149, 1150, 958, 1152, 1163, 796, 318,
	319, 1091, 1176, 1531, 313, 1530, 412, 719, 1193, 1090,
	65, 1474, 1171, 582, 412, 99, 412, 412, 1121, 1215,
	1118, 1217, 1218, 1219, 1227, 1609, 1608, 67, 1172, 826,
	1125, 620, 1609, 1541, 1353, 843, 69, 47, 62, 1,
	1189, 1190, 1601, 718, 718, 718, 718, 718, 1389, 1222,
	1468, 1064, 1559, 997, 988, 76, 532, 75, 718, 1550,
	99, 1240, 1234, 1047, 569, 277, 991, 996, 995, 412,
	718, 1199, 1198, 54, 1237, 1195, 1013, 1014, 1015, 1016,
	558, 1210, 558, 558, 663, 664, 665, 666, 667, 668,
	669, 670, 1024, 1025, 1026, 1213, 1214, 1009, 1243, 1253,
	1256, 795, 1251, 1244, 1259, 1260, 1197, 1252, 1196, 1200,
	750, 748, 749, 747, 412, 412, 752, 751, 1008, 406,
	406, 1147, 1308, 1275, 1274, 746, 406, 406, 280, 406,
	406, 1313, 1299, 1311, 412, 1293, 1292, 406, 406, 1280,
	399, 738, 621, 48, 1461, 1255, 1058, 79, 1086, 873,
	831, 1332, 576, 577, 412, 282, 412, 412, 657, 1089,
	1318, 1177, 405, 406, 1314, 849, 609, 1327, 1529, 1473,
	1343, 1126, 685, 924, 338, 1273, 1330, 1336, 1312, 856,
	54, 864, 351, 348, 349, 855, 1139, 1338, 631, 336,
	627, 1342, 328, 406, 1348, 1349, 99, 717, 710, 1347,
	99, 947, 945, 944, 1333, 1334, 1335, 807, 1303, 394,
	1325, 557, 1321, 716, 412, 1358, 1359, 1270, 296, 1414,
	1536, 1369, 1370, 859, 412, 28, 99, 412, 66, 323,
	19, 18, 412, 17, 904, 412, 412, 412, 587, 412,
	20, 21, 99, 22, 16, 1375, 15, 1372, 14, 544,
	32, 928, 36, 35, 34, 1379, 10, 23, 13, 12,
	991, 11, 991, 9, 8, 4, 314, 25, 932, 933,
	2, 853, 0, 1374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1377, 0, 1394, 0, 0, 0, 0,
	0, 1384, 0, 0, 406, 1402, 0, 0, 0, 0,
	1147, 0, 0, 0, 412, 412, 412, 406, 719, 0,
	1440, 1441, 0, 412, 1420, 0, 0, 1436, 0, 0,
	0, 412, 0, 1430, 0, 1429, 1446, 1184, 0, 1395,
	906, 908, 1437, 1442, 0, 1413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 412, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1454, 412,
	0, 0, 406, 0, 406, 0, 0, 1459, 0, 0,
	0, 718, 0, 0, 1465, 874, 0, 0, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 0, 0, 0, 412, 412, 0, 412,
	0, 0, 0, 0, 412, 1455, 99, 54, 99, 1495,
	0, 406, 1489, 1311, 0, 412, 0, 1466, 0, 991,
	0, 1487, 0, 0, 412, 0, 1494, 0, 0, 0,
	0, 1496, 0, 1513, 931, 412, 1497, 1507, 1502, 0,
	0, 0, 412, 99, 1448, 0, 1450, 1527, 1514, 0,
	1509, 1519, 1510, 0, 0, 0, 1523, 0, 1312, 1516,
	0, 1490, 0, 0, 0, 1470, 0, 0, 1522, 412,
	326, 0, 0, 0, 0, 1542, 0, 0, 1543, 0,
	1311, 0, 1475, 1546, 0, 1548, 567, 568, 0, 412,
	0, 572, 0, 575, 0, 0, 412, 412, 1556, 586,
	0, 0, 0, 0, 1524, 0, 928, 0, 0, 1562,
	1566, 1563, 0, 0, 0, 412, 0, 0, 1555, 0,
	0, 0, 1147, 1571, 99, 1312, 1558, 54, 412, 0,
	0, 0, 412, 0, 0, 0, 0, 1579, 0, 0,
	0, 0, 1583, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 406, 0, 1588, 1590, 1592, 412, 1107,
	1548, 0, 0, 1594, 0, 0, 1595, 1110, 1112, 0,
	1113, 0, 0, 0, 1606, 1119, 0, 0, 1122, 1123,
	1124, 1617, 720, 0, 0, 1130, 0, 0, 0, 1132,
	0, 0, 1135, 1136, 0, 1137, 1138, 0, 0, 1226,
	0, 0, 1470, 991, 0, 1399, 1400, 406, 1401, 406,
	406, 1403, 0, 1405, 0, 1162, 0, 0, 0, 0,
	0, 0, 96, 0, 1101, 1102, 1103, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 1604, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 395, 0, 0, 0,
	0, 536, 406, 538, 0, 0, 0, 0, 0, 1445,
	0, 0, 545, 0, 0, 0, 0, 0, 552, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 294, 0,
	0, 0, 0, 0, 97, 406, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 1315, 1317, 0,
	0, 1412, 0, 1418, 0, 0, 327, 0, 0, 397,
	0, 0, 0, 0, 97, 0, 97, 1317, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 406, 0, 406,
	1346, 638, 637, 647, 648, 640, 641, 642, 643, 644,
	645, 646, 639, 0, 0, 649, 1279, 814, 815, 0,
	0, 0, 0, 0, 818, 819, 0, 821, 822, 0,
	0, 0, 0, 607, 611, 824, 825, 638, 637, 647,
	648, 640, 641, 642, 643, 644, 645, 646, 639, 0,
	630, 649, 0, 0, 0, 0, 0, 1376, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 1380, 0, 0,
	1383, 0, 0, 0, 0, 1386, 0, 0, 1391, 1392,
	1393, 0, 406, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 686, 0, 0, 0, 1277,
	1278, 0, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 1295, 0, 1296, 1297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1304, 1305, 1417,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 599, 0, 0, 0, 0, 0, 1439, 1439, 1439,
	0, 0, 0, 0, 0, 0, 406, 0, 1331, 0,
	0, 0, 0, 0, 1439, 97, 0, 638, 637, 647,
	648, 640, 641, 642, 643, 644, 645, 646, 639, 0,
	0, 649, 1396, 0, 0, 0, 0, 0, 0, 1398,
	0, 1460, 0, 0, 0, 0, 0, 1352, 0, 0,
	1407, 1408, 406, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 0, 0, 0, 0, 0,
	1422, 1423, 1424, 712, 1427, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 1491,
	1492, 0, 1493, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 0,
	1038, 0, 1040, 0, 0, 0, 0, 1346, 0, 0,
	1397, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 1439, 97, 97, 97, 0,
	638, 637, 647, 648, 640, 641, 642, 643, 644, 645,
	646, 639, 0, 830, 649, 0, 0, 0, 0, 0,
	0, 0, 1547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 0, 0, 0, 0, 1410, 0, 406,
	406, 0, 0, 862, 863, 0, 1499, 0, 1500, 1501,
	0, 0, 0, 0, 0, 928, 0, 0, 1573, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 1346, 0, 0, 0, 1582, 801, 0, 0, 395,
	0, 0, 808, 0, 0, 1532, 1533, 1534, 1535, 0,
	0, 0, 1539, 1540, 0, 0, 674, 820, 0, 913,
	914, 1439, 823, 1477, 1478, 1479, 1480, 1481, 0, 0,
	0, 1484, 1485, 638, 637, 647, 648, 640, 641, 642,
	643, 644, 645, 646, 639, 0, 0, 649, 0, 97,
	0, 835, 0, 0, 0, 0, 842, 0, 0, 97,
	0, 0, 97, 0, 1567, 97, 0, 0, 0, 812,
	0, 1572, 0, 861, 0, 0, 0, 0, 985, 0,
	97, 0, 633, 0, 636, 97, 0, 1580, 0, 1409,
	650, 651, 652, 653, 654, 655, 656, 0, 634, 635,
	632, 638, 637, 647, 648, 640, 641, 642, 643, 644,
	645, 646, 639, 0, 97, 649, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 1230, 0, 1232, 1233, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 1618, 1619,
	0, 0, 0, 0, 0, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	27, 55, 29, 30, 941, 638, 637, 647, 648, 640,
	641, 642, 643, 644, 645, 646, 639, 972, 60, 649,
	0, 0, 31, 51, 52, 0, 1084, 1085, 0, 611,
	0, 0, 327, 327, 0, 0, 327, 327, 327, 327,
	0, 0, 0, 929, 0, 42, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 1610, 0,
	0, 0, 327, 327, 327, 327, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 97, 967, 0, 0, 97,
	97, 0, 0, 97, 975, 812, 0, 0, 1109, 0,
	1037, 0, 0, 0, 0, 1041, 1042, 0, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 1129, 0, 0,
	33, 57, 38, 37, 40, 0, 53, 0, 0, 1050,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 0,
	1076, 1077, 1078, 1079, 1080, 0, 0, 0, 0, 0,
	0, 0, 41, 59, 58, 0, 0, 49, 50, 39,
	0, 0, 0, 97, 0, 0, 0, 0, 97, 97,
	0, 0, 97, 0, 43, 44, 0, 45, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 767, 1054, 1055, 0, 0, 0, 97,
	0, 0, 0, 97, 97, 97, 97, 97, 1276, 0,
	0, 0, 0, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 0, 1106, 638, 637,
	647, 648, 640, 641, 642, 643, 644, 645, 646, 639,
	0, 0, 649, 0, 1239, 0, 0, 638, 637, 647,
	648, 640, 641, 642, 643, 644, 645, 646, 639, 0,
	56, 649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 327, 0, 0, 755, 0, 638, 637, 647, 648,
	640, 641, 642, 643, 644, 645, 646, 639, 0, 327,
	649, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 929, 97,
	97, 97, 97, 97, 0, 0, 768, 0, 0, 1301,
	0, 1161, 0, 0, 97, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	781, 784, 785, 786, 787, 788, 789, 1231, 790, 791,
	792, 793, 794, 769, 770, 771, 772, 753, 754, 782,
	0, 756, 1337, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 773, 774, 775, 776, 777, 778, 779,
	780, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 783, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1416, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 674, 0, 0, 929, 0, 0, 0,
	0, 1431, 0, 0, 1432, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1368, 0,
	0, 0, 1371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1565, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 507, 97,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 411, 0, 992, 993, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 1185, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 411, 0, 992, 993, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 1272, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 61, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 976, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 332, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 870, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 332, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 409, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 410, 408, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 732, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 409, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 410, 408, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 519, 507, 0,
	464, 522, 437, 454, 530, 455, 458, 495, 422, 477,
	183, 452, 0, 441, 417, 447, 418, 439, 466, 129,
	436, 509, 480, 521, 155, 520, 470, 0, 528, 157,
	486, 0, 229, 171, 0, 0, 468, 511, 475, 504,
	463, 496, 427, 485, 523, 453, 493, 524, 0, 0,
	0, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 490, 518, 449, 492, 494, 416, 487, 0,
	420, 423, 529, 514, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 467, 476, 501, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 484, 0, 0,
	0, 424, 421, 0, 0, 465, 0, 0, 0, 426,
	0, 443, 502, 0, 413, 137, 0, 0, 506, 513,
	462, 0, 258, 517, 460, 459, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 450,
	414, 510, 440, 448, 123, 446, 211, 190, 249, 0,
	483, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 400, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 409, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	419, 0, 230, 252, 268, 117, 435, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 410, 408, 403,
	402, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	431, 434, 429, 430, 478, 479, 525, 526, 527, 503,
	425, 0, 432, 433, 0, 508, 515, 516, 482, 100,
	109, 156, 265, 204, 134, 253, 415, 428, 127, 438,
	0, 0, 451, 456, 457, 469, 471, 472, 473, 474,
	481, 488, 489, 491, 497, 498, 499, 500, 505, 512,
	531, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 183, 0, 0,
	0, 0, 334, 0, 0, 0, 129, 331, 0, 0,
	0, 155, 0, 0, 0, 375, 157, 0, 0, 229,
	171, 0, 0, 0, 0, 365, 366, 0, 0, 0,
	0, 0, 0, 983, 0, 61, 0, 0, 332, 353,
	352, 355, 356, 357, 358, 0, 0, 119, 354, 359,
	360, 361, 984, 0, 0, 329, 346, 0, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 343, 344,
	0, 0, 0, 0, 388, 0, 345, 0, 0, 340,
	341, 342, 347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 386, 202, 0, 233, 140, 154, 115, 101,
	111, 0, 139, 180, 209, 213, 372, 0, 0, 0,
	0, 123, 0, 211, 190, 249, 0, 0, 192, 210,
	158, 239, 203, 248, 259, 260, 236, 256, 264, 226,
	104, 235, 247, 120, 221, 106, 245, 232, 169, 149,
	150, 105, 0, 207, 128, 135, 125, 182, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 238, 246,
	170, 163, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 376, 387, 382,
	383, 380, 381, 379, 378, 377, 389, 367, 368, 369,
	370, 373, 0, 384, 385, 371, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 183, 0, 0, 0, 0, 334,
	0, 0, 0, 129, 331, 0, 0, 0, 155, 0,
	0, 0, 375, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 597, 332, 353, 352, 355, 356,
	357, 358, 0, 0, 119, 354, 359, 360, 361, 0,
	0, 0, 329, 346, 0, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 344, 0, 0, 0,
	0, 388, 0, 345, 0, 0, 340, 341, 342, 347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 386,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 372, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 242, 243, 124, 267, 112,
	255, 108, 113, 254, 176, 238, 246, 170, 163, 107,
	244, 168, 162, 153, 132, 142, 200, 160, 201, 143,
	173, 172, 174, 0, 0, 0, 230, 252, 268, 117,
	0, 0, 237, 262, 263, 0, 0, 118, 136, 131,
	199, 175, 114, 145, 227, 152, 159, 206, 266, 189,
	212, 121, 251, 228, 376, 387, 382, 383, 380, 381,
	379, 378, 377, 389, 367, 368, 369, 370, 373, 0,
	384, 385, 371, 100, 109, 156, 265, 204, 134, 253,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 103, 110, 116, 122,
	126, 130, 133, 138, 141, 144, 146, 147, 148, 151,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 205, 208, 214, 215, 216, 217, 218, 219, 220,
	222, 223, 224, 225, 231, 234, 240, 241, 250, 257,
	261, 183, 0, 0, 0, 0, 334, 0, 0, 0,
	129, 331, 0, 0, 0, 155, 0, 0, 0, 375,
	157, 0, 0, 229, 171, 0, 0, 0, 0, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 332, 353, 352, 355, 356, 357, 358, 0,
	0, 119, 354, 359, 360, 361, 0, 0, 0, 329,
	346, 0, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 325, 0, 0, 0, 388, 0,
	345, 0, 0, 340, 341, 342, 347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 386, 202, 0, 233,
	140, 154, 115, 101, 111, 0, 139, 180, 209, 213,
	372, 0, 0, 0, 0, 123, 0, 211, 190, 249,
	0, 0, 192, 210, 158, 239, 203, 248, 259, 260,
	236, 256, 264, 226, 104, 235, 247, 120, 221, 106,
	245, 232, 169, 149, 150, 105, 0, 207, 128, 135,
	125, 182, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 238, 246, 170, 163, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 376, 387, 382, 383, 380, 381, 379, 378, 377,
	389, 367, 368, 369, 370, 373, 0, 384, 385, 371,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 334, 0, 0, 0, 129, 331, 0,
	0, 0, 155, 0, 0, 0, 375, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 332,
	353, 919, 355, 356, 357, 358, 0, 0, 119, 354,
	359, 360, 361, 0, 0, 0, 329, 346, 0, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	344, 325, 0, 0, 0, 388, 0, 345, 0, 0,
	340, 341, 342, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 386, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 372, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 0, 0,
	230, 252, 268, 117, 0, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 376, 387,
	382, 383, 380, 381, 379, 378, 377, 389, 367, 368,
	369, 370, 373, 0, 384, 385, 371, 100, 109, 156,
	265, 204, 134, 253, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 183, 0, 0, 0, 0,
	334, 0, 0, 0, 129, 331, 0, 0, 0, 155,
	0, 0, 0, 375, 157, 0, 0, 229, 171, 0,
	0, 0, 0, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 332, 353, 916, 355,
	356, 357, 358, 0, 0, 119, 354, 359, 360, 361,
	0, 0, 0, 329, 346, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 344, 325, 0,
	0, 0, 388, 0, 345, 0, 0, 340, 341, 342,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	386, 202, 0, 233, 140, 154, 115, 101, 111, 0,
	139, 180, 209, 213, 372, 0, 0, 0, 0, 123,
	0, 211, 190, 249, 0, 0, 192, 210, 158, 239,
	203, 248, 259, 260, 236, 256, 264, 226, 104, 235,
	247, 120, 221, 106, 245, 232, 169, 149, 150, 105,
	0, 207, 128, 135, 125, 182, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 238, 246, 170, 163,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 376, 387, 382, 383, 380,
	381, 379, 378, 377, 389, 367, 368, 369, 370, 373,
	0, 384, 385, 371, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 334,
	0, 0, 0, 129, 331, 0, 0, 0, 155, 0,
	0, 0, 375, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 332, 353, 352, 355, 356,
	357, 358, 0, 0, 119, 354, 359, 360, 361, 0,
	0, 0, 329, 346, 0, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 344, 0, 0, 0,
	0, 388, 0, 345, 0, 0, 340, 341, 342, 347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 386,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 372, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 242, 243, 124, 267, 112,
	255, 108, 113, 254, 176, 238, 246, 170, 163, 107,
	244, 168, 162, 153, 132, 142, 200, 160, 201, 143,
	173, 172, 174, 0, 0, 0, 230, 252, 268, 117,
	0, 0, 237, 262, 263, 0, 0, 118, 136, 131,
	199, 175, 114, 145, 227, 152, 159, 206, 266, 189,
	212, 121, 251, 228, 376, 387, 382, 383, 380, 381,
	379, 378, 377, 389, 367, 368, 369, 370, 373, 0,
	384, 385, 371, 100, 109, 156, 265, 204, 134, 253,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 103, 110, 116, 122,
	126, 130, 133, 138, 141, 144, 146, 147, 148, 151,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 205, 208, 214, 215, 216, 217, 218, 219, 220,
	222, 223, 224, 225, 231, 234, 240, 241, 250, 257,
	261, 183, 0, 0, 0, 0, 334, 0, 0, 0,
	129, 331, 0, 0, 0, 155, 0, 0, 0, 375,
	157, 0, 0, 229, 171, 0, 0, 0, 0, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 332, 353, 352, 355, 356, 357, 358, 0,
	0, 119, 354, 359, 360, 361, 0, 0, 0, 329,
	346, 0, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 0, 0, 0, 0, 388, 0,
	345, 0, 0, 340, 341, 342, 347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 386, 202, 0, 233,
	140, 154, 115, 101, 111, 0, 139, 180, 209, 213,
	372, 0, 0, 0, 0, 123, 0, 211, 190, 249,
	0, 0, 192, 210, 158, 239, 203, 248, 259, 260,
	236, 256, 264, 226, 104, 235, 247, 120, 221, 106,
	245, 232, 169, 149, 150, 105, 0, 207, 128, 135,
	125, 182, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 238, 246, 170, 163, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 376, 387, 382, 383, 380, 381, 379, 378, 377,
	389, 367, 368, 369, 370, 373, 0, 384, 385, 371,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 375, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 332,
	353, 352, 355, 356, 357, 358, 0, 0, 119, 354,
	359, 360, 361, 0, 0, 0, 0, 346, 0, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	344, 0, 0, 0, 0, 388, 0, 345, 0, 0,
	340, 341, 342, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 386, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 372, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 1611, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 0, 0,
	230, 252, 268, 117, 0, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 376, 387,
	382, 383, 380, 381, 379, 378, 377, 389, 367, 368,
	369, 370, 373, 0, 384, 385, 371, 100, 109, 156,
	265, 204, 134, 253, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 155,
	0, 0, 0, 375, 157, 0, 0, 229, 171, 0,
	0, 0, 0, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 597, 332, 353, 352, 355,
	356, 357, 358, 0, 0, 119, 354, 359, 360, 361,
	0, 0, 0, 0, 346, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 344, 0, 0,
	0, 0, 388, 0, 345, 0, 0, 340, 341, 342,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	386, 202, 0, 233, 140, 154, 115, 101, 111, 0,
	139, 180, 209, 213, 372, 0, 0, 0, 0, 123,
	0, 211, 190, 249, 0, 0, 192, 210, 158, 239,
	203, 248, 259, 260, 236, 256, 264, 226, 104, 235,
	247, 120, 221, 106, 245, 232, 169, 149, 150, 105,
	0, 207, 128, 135, 125, 182, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 238, 246, 170, 163,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 376, 387, 382, 383, 380,
	381, 379, 378, 377, 389, 367, 368, 369, 370, 373,
	0, 384, 385, 371, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 155, 0, 0, 0,
	375, 157, 0, 0, 229, 171, 0, 0, 0, 0,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 332, 353, 352, 355, 356, 357, 358,
	0, 0, 119, 354, 359, 360, 361, 0, 0, 0,
	0, 346, 0, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 344, 0, 0, 0, 0, 388,
	0, 345, 0, 0, 340, 341, 342, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 386, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 372, 0, 0, 0, 0, 123, 0, 211, 190,
	249, 0, 0, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 242, 243, 124, 267, 112, 255, 108,
	113, 254, 176, 238, 246, 170, 163, 107, 244, 168,
	162, 153, 132, 142, 200, 160, 201, 143, 173, 172,
	174, 0, 0, 0, 230, 252, 268, 117, 0, 0,
	237, 262, 263, 0, 0, 118, 136, 131, 199, 175,
	114, 145, 227, 152, 159, 206, 266, 189, 212, 121,
	251, 228, 376, 387, 382, 383, 380, 381, 379, 378,
	377, 389, 367, 368, 369, 370, 373, 0, 384, 385,
	371, 100, 109, 156, 265, 204, 134, 253, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 103, 110, 116, 122, 126, 130,
	133, 138, 141, 144, 146, 147, 148, 151, 161, 164,
	165, 166, 167, 177, 178, 179, 181, 184, 185, 186,
	187, 188, 191, 193, 194, 195, 196, 197, 198, 205,
	208, 214, 215, 216, 217, 218, 219, 220, 222, 223,
	224, 225, 231, 234, 240, 241, 250, 257, 261, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 157, 0,
	0, 229, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 638, 637, 647, 648,
	640, 641, 642, 643, 644, 645, 646, 639, 0, 0,
	649, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 0, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 0, 0,
	0, 0, 0, 123, 0, 211, 190, 249, 0, 0,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	238, 246, 170, 163, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	962, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 966, 0, 0, 0, 0, 0, 98, 0, 968,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 258, 0,
	965, 0, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 0, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 242, 243, 124,
	267, 112, 255, 108, 113, 254, 176, 238, 246, 170,
	163, 107, 244, 168, 162, 153, 132, 142, 200, 160,
	201, 143, 173, 172, 174, 0, 0, 0, 230, 252,
	268, 117, 0, 0, 237, 262, 263, 0, 0, 118,
	136, 131, 199, 175, 114, 145, 227, 152, 159, 206,
	266, 189, 212, 121, 251, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 109, 156, 265, 204,
	134, 253, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 103, 110,
	116, 122, 126, 130, 133, 138, 141, 144, 146, 147,
	148, 151, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 205, 208, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 224, 225, 231, 234, 240, 241,
	250, 257, 261, 183, 0, 0, 0, 962, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 157, 0, 0, 229, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 966, 0,
	0, 0, 0, 0, 98, 0, 968, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 258, 0, 965, 0, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 0, 0, 0, 0, 0, 123, 0, 211,
	190, 249, 0, 0, 960, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 247, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 238, 246, 170, 163, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 626, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 0, 628, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 623, 622, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 0,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	0, 0, 230, 252, 268, 117, 0, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	109, 156, 265, 204, 134, 253, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 157, 0,
	0, 229, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 0, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 0, 0,
	0, 0, 0, 123, 0, 211, 190, 249, 0, 0,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	238, 246, 170, 163, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 968,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 0, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 242, 243, 124,
	267, 112, 255, 108, 113, 254, 176, 238, 246, 170,
	163, 107, 244, 168, 162, 153, 132, 142, 200, 160,
	201, 143, 173, 172, 174, 0, 0, 0, 230, 252,
	268, 117, 0, 0, 237, 262, 263, 0, 0, 118,
	136, 131, 199, 175, 114, 145, 227, 152, 159, 206,
	266, 189, 212, 121, 251, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 109, 156, 265, 204,
	134, 253, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 0, 0, 0, 102, 103, 110,
	116, 122, 126, 130, 133, 138, 141, 144, 146, 147,
	148, 151, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 205, 208, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 224, 225, 231, 234, 240, 241,
	250, 257, 261, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 157, 0, 0, 229, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 202, 0, 233, 140, 154, 115, 101, 111, 0,
	139, 180, 209, 213, 0, 0, 0, 0, 0, 123,
	0, 211, 190, 249, 0, 0, 192, 210, 158, 239,
	203, 248, 259, 260, 236, 256, 264, 226, 104, 235,
	247, 120, 221, 106, 245, 232, 169, 149, 150, 105,
	0, 207, 128, 135, 125, 182, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 238, 246, 170, 163,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 157, 0, 0, 229, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 857, 0, 0, 858,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 0, 0, 0, 0, 0, 123, 0, 211, 190,
	249, 0, 0, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 242, 243, 124, 267, 112, 255, 108,
	113, 254, 176, 238, 246, 170, 163, 107, 244, 168,
	162, 153, 132, 142, 200, 160, 201, 143, 173, 172,
	174, 0, 0, 0, 230, 252, 268, 117, 0, 0,
	237, 262, 263, 0, 0, 118, 136, 131, 199, 175,
	114, 145, 227, 152, 159, 206, 266, 189, 212, 121,
	251, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 109, 156, 265, 204, 134, 253, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 103, 110, 116, 122, 126, 130,
	133, 138, 141, 144, 146, 147, 148, 151, 161, 164,
	165, 166, 167, 177, 178, 179, 181, 184, 185, 186,
	187, 188, 191, 193, 194, 195, 196, 197, 198, 205,
	208, 214, 215, 216, 217, 218, 219, 220, 222, 223,
	224, 225, 231, 234, 240, 241, 250, 257, 261, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 741,
	0, 0, 0, 155, 0, 0, 0, 0, 157, 0,
	0, 229, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 0, 740, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 0, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 0, 0,
	0, 0, 0, 123, 0, 211, 190, 249, 0, 0,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	238, 246, 170, 163, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 968,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 0, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 242, 243, 124,
	267, 112, 255, 108, 113, 254, 176, 238, 246, 170,
	163, 107, 244, 168, 162, 153, 132, 142, 200, 160,
	201, 143, 173, 172, 174, 0, 0, 0, 230, 252,
	268, 117, 0, 0, 237, 262, 263, 0, 0, 118,
	136, 131, 199, 175, 114, 145, 227, 152, 159, 206,
	266, 189, 212, 121, 251, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 109, 156, 265, 204,
	134, 253, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 103, 110,
	116, 122, 126, 130, 133, 138, 141, 144, 146, 147,
	148, 151, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 205, 208, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 224, 225, 231, 234, 240, 241,
	250, 257, 261, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 157, 0, 0, 229, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 0, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 0, 0, 0, 0, 0, 123, 0, 211,
	190, 249, 0, 0, 192, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 247, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 238, 246, 170, 163, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 0, 628, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 0,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	0, 0, 230, 252, 268, 117, 0, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	109, 156, 265, 204, 134, 253, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 183, 0, 0,
	0, 0, 0, 0, 0, 711, 129, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 157, 0, 0, 229,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 202, 0, 233, 140, 154, 115, 101,
	111, 0, 139, 180, 209, 213, 0, 0, 0, 0,
	0, 123, 0, 211, 190, 249, 0, 0, 192, 210,
	158, 239, 203, 248, 259, 260, 236, 256, 264, 226,
	104, 235, 247, 120, 221, 106, 245, 232, 169, 149,
	150, 105, 0, 207, 128, 135, 125, 182, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 238, 246,
	170, 163, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 392, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	157, 0, 0, 229, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 0, 202, 0, 233,
	140, 154, 115, 101, 111, 0, 139, 180, 209, 213,
	0, 0, 0, 0, 0, 123, 0, 211, 190, 249,
	0, 0, 192, 210, 158, 239, 203, 248, 259, 260,
	236, 256, 264, 226, 104, 235, 247, 120, 221, 106,
	245, 232, 169, 149, 150, 105, 0, 207, 128, 135,
	125, 182, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 238, 246, 170, 163, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 95, 0, 0,
	258, 0, 0, 0, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 0, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 0, 0,
	230, 252, 268, 117, 0, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 109, 156,
	265, 204, 134, 253, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 157, 0, 0, 229, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 202, 0, 233, 140, 154, 115, 101, 111, 0,
	139, 180, 209, 213, 0, 0, 0, 0, 0, 123,
	0, 211, 190, 249, 0, 0, 192, 210, 158, 239,
	203, 248, 259, 260, 236, 256, 264, 226, 104, 235,
	247, 120, 221, 106, 245, 232, 169, 149, 150, 105,
	0, 207, 128, 135, 125, 182, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 238, 246, 170, 163,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 157, 0, 0, 229, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 0, 0, 0, 0, 0, 123, 0, 211, 190,
	249, 0, 0, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 242, 243, 124, 267, 112, 255, 108,
	113, 254, 176, 238, 246, 170, 163, 107, 244, 168,
	162, 153, 132, 142, 200, 160, 201, 143, 173, 172,
	174, 0, 0, 0, 230, 252, 268, 117, 0, 0,
	237, 262, 263, 0, 0, 118, 136, 131, 199, 175,
	114, 145, 227, 152, 159, 206, 266, 189, 212, 121,
	251, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 109, 156, 265, 204, 134, 253, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 103, 110, 116, 122, 126, 130,
	133, 138, 141, 144, 146, 147, 148, 151, 161, 164,
	165, 166, 167, 177, 178, 179, 181, 184, 185, 186,
	187, 188, 191, 193, 194, 195, 196, 197, 198, 205,
	208, 214, 215, 216, 217, 218, 219, 220, 222, 223,
	224, 225, 231, 234, 240, 241, 250, 257, 261, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 157, 0,
	0, 229, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 0, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 0, 0,
	0, 0, 0, 123, 0, 211, 190, 249, 0, 0,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	238, 246, 170, 163, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261,
}
var yyPact = [...]int{

	2313, -1000, -260, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1025, 1052, -1000, -1000, -1000, -1000,
	-1000, -1000, 415, 101, -1000, -1000, -1000, 160, 17, 15540,
	159, 184, 16214, -1000, 21, -1000, -1000, 105, 16214, -1000,
	-1000, -77, -84, -1000, 841, -1000, -1000, 20, -1000, -1000,
	-1000, -1000, -1000, -1000, 1004, 1018, 877, 1009, 926, -1000,
	8083, 102, 102, 15203, 7072, -1000, -1000, 310, 16214, 146,
	16214, -140, 97, 97, 97, -1000, -1000, -1000, -1000, 16214,
	99, 15877, 99, 99, 99, 16214, -1000, 204, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16214,
	730, 963, 4272, 72, 4272, 4272, -1000, 347, -1000, 4272,
	36, 4272, -54, 1031, 27, -13, -1000, 4272, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 114, 841, 298, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 590, 150, 16214, 409,
	-1000, 978, 9443, 9443, 1025, -1000, 841, -1000, -1000, -1000,
	957, -1000, -1000, 418, 1050, -1000, 11802, 203, -1000, 9443,
	2166, 833, -1000, -1000, 833, -1000, -1000, 180, -1000, -1000,
	10454, 10454, 10454, 10454, 10454, 10454, 10454, 10454, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 833, -1000, 9106, 833, 833, 833, 833, 833,
	833, 833, 833, 833, 9443, 833, 833, 833, 833, 833,
	833, 833, 833, 833, 833, 833, 833, 833, 833, 833,
	14859, 14185, 16214, 805, 797, -1000, -1000, 202, 828, 6722,
	-109, -1000, -1000, -1000, 294, 13511, -1000, -1000, -1000, 960,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 727, 16214, -1000, 2474, -1000, 15877, 1006, 103,
	717, 396, 716, 16214, 831, 134, 16214, 982, 895, 16214,
	715, 713, -1000, 6372, -1000, 4272, 4272, -1000, -1000, -1000,
	97, 97, 4272, 4272, 16214, 4272, 4272, -1000, -1000, 16214,
	-1000, -1000, -1000, 4272, 4272, -1000, 1048, 322, -1000, -1000,
	-1000, -1000, 9443, 243, -1000, 889, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 711, -1000, -1000, -1000, -1000, 16214, 4272,
	43, 96, 74, 16214, -1000, 1056, 236, 412, 196, 829,
	-1000, 528, 1004, 590, 926, 13174, 869, -1000, -1000, -1000,
	16214, -1000, 9443, 9443, 573, -1000, 14522, -1000, -1000, 4972,
	252, 10454, 466, 332, 10454, 10454, 10454, 10454, 10454, 10454,
	10454, 10454, 10454, 10454, 10454, 10454, 10454, 10454, 10454, 478,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 704, -1000,
	841, 718, 718, 215, 215, 215, 215, 215, 215, 215,
	10791, 999, 590, 710, 455, 9106, 8083, 8083, 9443, 9443,
	8757, 8420, 8083, 8083, 999, 307, 455, 16551, -1000, -1000,
	10117, -1000, -1000, -1000, -1000, -1000, 590, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15877, 15877, 8083, 8083, 8083, 8083,
	59, 16214, -1000, 830, 858, -1000, -1000, -1000, 1000, 12837,
	11465, 59, 766, 14185, 16214, -1000, -1000, 14185, 16214, 4622,
	6022, 828, -109, 794, -1000, -105, -117, 7409, 214, -1000,
	-1000, -1000, -1000, 3572, 234, 752, -1000, -42, -1000, -1000,
	-1000, 842, -1000, 842, 842, 842, 842, -6, -6, -6,
	-6, -1000, -1000, -1000, -1000, -1000, 862, 861, -1000, 842,
	842, 842, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	860, 860, 860, 844, 844, 864, -1000, 16214, 4272, 979,
	4272, -1000, 16214, 16214, 823, -1000, 16214, 817, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 698, 684, -1000, -1000,
	-1000, -1000, -1000, 329, -1000, -1000, 16214, 416, 16214, 16214,
	455, -1000, 530, 16214, -1000, 87, -1000, 16214, 16214, 16214,
	16214, 16214, 170, -1000, 934, 9443, 9443, 5672, 9443, -1000,
	-1000, -1000, 978, -1000, 999, 1020, -1000, 945, 944, 8083,
	-1000, -1000, 252, 299, -1000, -1000, 524, -1000, -1000, -1000,
	-1000, 194, 833, -1000, 2491, -1000, -1000, -1000, -1000, 466,
	10454, 10454, 10454, 154, 2491, 2462, 508, 649, 215, 577,
	577, 216, 216, 216, 216, 216, 556, 556, -1000, -1000,
	-1000, 590, -1000, -1000, -1000, 8083, -1000, 9443, -1000, 590,
	708, -1000, 708, 486, 551, 345, 1039, 708, 289, 1037,
	708, 708, 708, 8083, 445, -1000, 9443, 590, -1000, 192,
	-1000, 826, 807, 806, 708, 590, 804, 708, 708, 735,
	833, -1000, 16551, 14185, 14185, 14185, 14185, 14185, -1000, 923,
	914, -1000, 917, 906, 918, 16214, -1000, 702, 12837, -1000,
	833, -1000, 12488, 187, 144, 143, 117, -1000, -1000, 1030,
	14185, 819, -1000, 819, -1000, 189, -1000, -1000, 794, -109,
	-93, -1000, -1000, -1000, -1000, 455, -1000, 510, 791, 3222,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 859, 679, -1000,
	953, 251, 245, 660, 952, -1000, -1000, -1000, 434, -53,
	-1000, -1000, 493, -6, -6, -1000, -1000, 214, 959, 214,
	214, 214, 529, 529, -1000, -1000, -1000, -1000, 487, -1000,
	-1000, -1000, 480, -1000, 887, 15877, 841, 995, -1000, -1000,
	-1000, 133, -1000, 4272, 16214, 4272, 4272, 1030, 678, 667,
	322, -1000, 515, 9443, -1000, -1000, -1000, -1000, -1000, 381,
	331, 268, 90, 90, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 58, 824, -1000, -1000, -1000,
	-1000, 24, 35, 932, 455, 455, 185, -1000, -1000, 16214,
	-1000, -1000, -1000, -1000, 825, -1000, -1000, -1000, 3922, 8083,
	-1000, 154, 2491, 2443, -1000, 10454, 10454, -1000, 590, 455,
	-1000, 8083, -1000, -1000, 168, 478, 168, 10454, 10454, -1000,
	10454, 10454, -1000, -154, -1000, 778, 302, -1000, 9443, 401,
	-1000, 5672, -1000, 10454, 10454, -1000, -1000, -1000, -1000, 886,
	16551, 833, -1000, 12151, 15877, 820, -1000, 288, 858, 856,
	884, 663, -1000, -1000, -1000, -1000, 908, -1000, 907, -1000,
	-1000, -1000, -1000, 15877, 10454, 187, -1000, 833, 833, 833,
	1025, 9443, 819, -1000, -1000, 225, -1000, -1000, -114, -127,
	-1000, -1000, -1000, 3572, -1000, 3572, 15877, 76, -1000, 660,
	660, -1000, -1000, -1000, 851, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 387, 10454, 1055, -1000, 951, -1000, 950, 511,
	-1000, -1000, 747, 214, 214, -1000, 239, -1000, -1000, -1000,
	677, -1000, 675, 787, 665, 16214, -1000, -1000, -1000, 16214,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 416, -1000, 455,
	-1000, 572, -1000, 15877, 251, -1000, -1000, -1000, -1000, -1000,
	-1000, 657, -1000, 15877, 640, 16214, 15877, -1000, -1000, 594,
	625, 15877, -162, 608, 15877, 15877, 15877, -1000, 5322, -1000,
	1030, 14185, -1000, -1000, 590, -1000, 10454, 2491, 2491, -1000,
	-1000, 590, 842, 842, -1000, 842, 844, -1000, 842, 12,
	842, 11, 590, 590, 2230, 2098, 1975, 1722, 833, -149,
	-1000, 455, 9443, -1000, 1852, 1686, -1000, 971, 743, 767,
	-1000, -1000, 7746, 590, 646, 177, 644, -1000, 1025, 16551,
	9443, -1000, -1000, 9443, 843, -1000, 9443, -1000, -1000, -1000,
	644, 483, -1000, 15877, 15877, 15877, 1004, 455, -1000, -1000,
	-1000, -1000, 3222, -1000, 639, -1000, 842, -1000, -1000, -1000,
	15877, -1000, 2491, -68, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -6, 498, -6, 457, -1000, 449, 840, -1000,
	841, -1000, -1000, 594, 73, -1000, 864, 15877, -1000, -1000,
	-1000, 207, -1000, 110, 73, 594, 975, -1000, 5322, -1000,
	-1000, 837, 879, -1000, 1028, 769, -1000, 2491, -1000, -1000,
	132, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10454,
	10454, 10454, 10454, 10454, 590, 497, 455, 10454, 10454, 948,
	-1000, 833, -1000, -1000, 822, 15877, 15877, -1000, 15877, 1004,
	-1000, 455, 455, 15877, 455, 11128, -1000, 13848, 637, -1000,
	637, 637, -1000, 229, 15877, -1000, 631, -1000, 214, -1000,
	214, 737, 703, 15877, -1000, 632, -1000, -1000, 565, 836,
	864, 561, -1000, -1000, 15877, -1000, 73, 833, 768, -1000,
	260, 15877, 16214, 1021, 1017, -1000, -1000, 826, 826, 826,
	826, 62, -1000, -1000, 826, 826, 1054, -1000, 833, -1000,
	841, 167, -1000, -1000, -1000, 617, -1000, 187, 15877, -1000,
	-1000, -1000, 229, -1000, 489, 247, 484, -1000, 77, -1000,
	-1000, -1000, -1000, 615, -1000, -1000, -1000, -1000, 15877, 835,
	-1000, -1000, -1000, -1000, 56, 5322, 3572, 612, -1000, -1000,
	9443, 9443, -1000, -1000, -1000, -1000, 590, 61, -166, -1000,
	-1000, 16551, 767, 590, 15877, -1000, -1000, -1000, -1000, -1000,
	439, -1000, -1000, 16214, 229, -1000, 606, 15877, -1000, 589,
	-1000, 15877, -1000, -1000, 824, 455, 765, -1000, 931, -159,
	-169, 755, -1000, -1000, -1000, 834, -1000, 229, 229, 579,
	-1000, 56, 939, -162, -1000, 929, -1000, 15877, -1000, 229,
	-1000, 53, -1000, -163, 540, -1000, 48, -167, 883, 833,
	-171, 882, -1000, 1046, 9780, -1000, -1000, 1053, 240, 240,
	826, 590, -1000, -1000, -1000, 84, 463, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1300, 17, 551, 1297, 1296, 1295, 100, 98, 97,
	1294, 1293, 1291, 1289, 1288, 1287, 1286, 1284, 1283, 1282,
	1280, 1279, 1278, 1276, 1274, 1273, 1271, 1270, 1268, 1263,
	1261, 1260, 109, 1259, 1258, 1255, 84, 1253, 85, 1250,
	1249, 1248, 51, 136, 54, 57, 1500, 1247, 87, 56,
	78, 1243, 45, 1242, 1240, 91, 1239, 1237, 1233, 60,
	1232, 1231, 1612, 1228, 80, 1227, 25, 15, 44, 1222,
	1219, 1218, 1216, 77, 773, 1215, 1214, 27, 1213, 1212,
	99, 1211, 62, 8, 16, 21, 29, 1204, 129, 10,
	1203, 58, 1202, 1201, 1199, 1198, 36, 1196, 19, 64,
	23, 1195, 26, 59, 1194, 5, 70, 42, 35, 11,
	93, 69, 1192, 33, 65, 52, 1191, 1189, 562, 1188,
	1185, 53, 1183, 1182, 39, 1180, 419, 89, 73, 1177,
	1176, 1175, 1174, 30, 71, 1173, 32, 1241, 47, 0,
	593, 106, 88, 1172, 20, 1171, 1675, 46, 28, 50,
	1170, 1158, 48, 1155, 1148, 1147, 1146, 1143, 1142, 1141,
	1140, 352, 1139, 1138, 1136, 111, 31, 1127, 1111, 63,
	38, 1105, 1102, 1101, 55, 61, 1098, 1097, 68, 1095,
	1094, 1093, 34, 1089, 1087, 1086, 1085, 1084, 37, 14,
	1083, 22, 9, 12, 24, 6, 41, 1082, 4, 1081,
	13, 1080, 3, 1078, 7, 76, 1, 1072, 2, 1069,
	1068, 66, 687, 94, 1067, 1066, 116,
}
var yyR1 = [...]int{

	0, 209, 210, 210, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 35, 35, 8,
	9, 9, 9, 9, 213, 213, 57, 57, 55, 55,
	56, 56, 106, 106, 10, 10, 10, 10, 111, 111,
	115, 115, 115, 116, 116, 116, 116, 150, 150, 100,
	11, 11, 11, 11, 11, 11, 11, 204, 204, 203,
	202, 202, 201, 201, 200, 20, 184, 186, 186, 185,
	185, 185, 185, 175, 154, 154, 154, 154, 154, 154,
	154, 153, 153, 153, 153, 157, 157, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 156, 156, 156, 156,
	156, 158, 158, 158, 158, 158, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 160, 160, 160, 160, 160, 160, 160, 160, 174,
	174, 161, 161, 169, 169, 170, 170, 170, 167, 167,
	168, 168, 171, 171, 163, 164, 172, 165, 165, 165,
	166, 166, 166, 173, 173, 173, 173, 162, 176, 176,
	195, 195, 194, 194, 193, 193, 193, 183, 183, 190,
	190, 190, 190, 190, 179, 179, 179, 178, 178, 182,
	182, 192, 192, 191, 177, 177, 196, 196, 196, 196,
	180, 180, 181, 181, 181, 207, 208, 206, 206, 206,
	206, 206, 187, 187, 187, 188, 188, 188, 189, 189,
	189, 16, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 98,
	98, 98, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 134, 134, 205, 205, 205, 205, 205, 199, 197,
	197, 198, 198, 12, 21, 21, 13, 13, 13, 13,
	13, 14, 14, 22, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 122, 122, 120, 120, 123, 123, 121,
	121, 121, 124, 124, 124, 125, 125, 151, 151, 151,
	24, 24, 29, 29, 30, 31, 135, 135, 27, 27,
	28, 28, 28, 28, 41, 41, 214, 214, 26, 26,
	25, 25, 25, 25, 15, 215, 32, 33, 33, 34,
	34, 34, 38, 38, 38, 36, 36, 36, 37, 37,
	44, 44, 43, 43, 45, 45, 45, 45, 143, 143,
	143, 142, 142, 47, 47, 48, 48, 49, 49, 50,
	50, 50, 50, 65, 65, 66, 66, 66, 66, 66,
	105, 105, 107, 107, 51, 51, 51, 51, 52, 52,
	53, 53, 54, 54, 133, 133, 148, 148, 58, 58,
	58, 60, 59, 59, 59, 59, 61, 61, 63, 63,
	62, 62, 64, 67, 67, 67, 67, 68, 68, 46,
	46, 46, 46, 46, 46, 46, 119, 119, 70, 70,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	81, 81, 81, 81, 81, 81, 71, 71, 71, 71,
	71, 71, 71, 42, 42, 82, 82, 82, 88, 83,
	83, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 78, 78, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 216, 216, 80, 79, 79,
	79, 79, 79, 79, 39, 39, 39, 39, 39, 149,
	149, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 92, 92, 40, 40, 90, 90,
	91, 93, 93, 89, 89, 89, 73, 73, 73, 73,
	73, 73, 73, 73, 75, 75, 75, 94, 94, 95,
	95, 96, 96, 97, 97, 99, 101, 101, 101, 102,
	102, 102, 102, 103, 103, 103, 72, 72, 72, 72,
	72, 72, 104, 104, 104, 104, 108, 108, 84, 84,
	86, 86, 85, 87, 109, 109, 113, 110, 110, 114,
	114, 114, 114, 112, 112, 112, 145, 145, 145, 117,
	117, 126, 126, 127, 127, 118, 118, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 132, 132, 131,
	131, 131, 128, 128, 128, 129, 129, 144, 144, 140,
	140, 141, 141, 146, 146, 147, 147, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 211, 212, 136, 137, 137,
	137,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	0, 1, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 2, 3, 1, 10, 11, 11, 12,
	1, 1, 0, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 12, 13, 7, 9, 9, 10, 5, 0,
	1, 2, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 0, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 4, 4,
	4, 3, 2, 3, 4, 4, 3, 6, 6, 4,
	4, 4, 4, 4, 3, 3, 2, 6, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 0, 3, 1, 1, 2, 2,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 2, 6, 1, 4, 6, 3, 2,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 4, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -209, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -29, -30, -31,
	-27, -26, -25, -15, -3, -4, 6, 7, -35, 9,
	10, 29, -20, 117, -17, -18, -19, 120, 119, 156,
	121, 149, 52, 171, 172, 174, 175, -214, -135, 154,
	155, 30, 31, 123, -211, 8, 257, 118, 151, 150,
	25, 56, -210, 355, -96, 15, -34, 5, -32, -215,
	-32, -32, -32, -32, -32, -184, -186, 56, 92, -129,
	130, 74, 249, 126, 127, -128, 33, 137, 136, 127,
	127, 128, 130, 249, 126, 127, -62, -146, 59, -139,
	267, 140, 299, 300, 171, 182, 176, 203, 195, 268,
	301, 141, 193, 196, 236, 139, 302, 223, 231, 68,
	174, 245, 303, 152, 191, 187, 304, 276, 185, 27,
	305, 233, 208, 306, 272, 186, 232, 123, 307, 143,
	137, 308, 209, 213, 309, 237, 310, 311, 312, 180,
	181, 313, 239, 207, 138, 32, 269, 37, 161, 240,
	211, 314, 206, 202, 315, 316, 317, 318, 205, 179,
	201, 41, 215, 214, 216, 235, 198, 319, 320, 321,
	144, 322, 188, 18, 323, 324, 325, 326, 327, 243,
	155, 328, 159, 329, 330, 331, 332, 333, 334, 234,
	210, 212, 134, 163, 271, 335, 241, 184, 336, 145,
	160, 154, 244, 146, 337, 338, 339, 340, 341, 342,
	343, 175, 344, 345, 346, 347, 170, 238, 247, 40,
	220, 348, 178, 136, 349, 172, 167, 226, 199, 162,
	350, 351, 189, 190, 204, 177, 200, 173, 164, 156,
	352, 246, 221, 273, 197, 194, 168, 353, 130, 165,
	166, 354, 227, 228, 169, 270, 242, 192, 222, 127,
	110, 196, 236, 117, 224, 225, 233, -179, 234, 163,
	-151, 127, -120, 223, 227, 228, 169, 59, 128, 129,
	32, 238, 237, 229, -146, 173, -41, 121, 157, -62,
	-136, -136, -136, 226, 226, -136, -2, -118, 130, 228,
	132, -102, 17, 16, -5, -3, -211, 6, 20, 21,
	-38, 42, 43, -33, -45, 101, -46, -146, -69, 76,
	-74, 28, 59, -139, 23, -73, -70, -89, -87, -88,
	110, 111, 112, 99, 100, 107, 77, 113, -78, -76,
	-77, -79, 61, 60, 69, 62, 63, 64, 65, 70,
	71, 72, -140, -85, -211, 46, 47, 258, 259, 260,
	261, 266, 147, 262, 79, 36, 248, 256, 255, 254,
	252, 253, 250, 251, 264, 265, 133, 249, 105, 257,
	-118, -118, 11, -55, -56, -62, -64, -146, -110, -150,
	173, -114, 238, 237, -141, -112, -140, -138, 236, 196,
	235, 59, -139, 122, 148, 274, 75, 22, 24, 218,
	78, 110, 16, 79, 109, 258, 117, 50, 275, 250,
	251, 248, 260, 261, 249, 224, 28, 10, 277, 25,
	150, 21, 103, 119, 82, 83, 153, 23, 151, 72,
	147, 280, 19, 53, 11, 13, 281, 282, 14, 133,
	132, 94, 128, 48, 8, 113, 26, 91, 44, 283,
	34, 284, 285, 286, 287, 46, 92, 17, 252, 253,
	30, 288, 266, 158, 105, 51, 38, 76, 289, 290,
	70, 291, 73, 54, 74, 15, 49, 292, 293, 294,
	295, 93, 120, 257, 47, 296, 126, 6, 263, 29,
	149, 45, 297, 127, 81, 264, 265, 131, 71, 5,
	33, 31, 9, 52, 55, 254, 255, 256, 36, 80,
	12, 298, -185, 92, -175, 59, -62, 128, -62, 257,
	-127, 133, -127, -127, -21, -62, -126, 133, -140, -126,
	-126, -126, -62, 114, -62, 59, 29, -137, -211, -141,
	249, 126, 59, 163, 127, 164, 130, -137, -137, -180,
	11, 94, -137, 167, 168, -137, -123, -122, 231, 232,
	226, 230, 12, 168, 226, 166, -137, -28, -2, -9,
	-7, -8, -2, 84, -136, -136, -212, 58, 127, -62,
	117, 119, 122, 54, -103, 19, 30, -46, -146, -97,
	-99, -46, -96, -2, -32, 38, -36, 20, 21, 67,
	11, -143, 75, 74, 91, -142, 22, -140, 61, 114,
	-46, -71, 94, 76, 92, 93, 78, 96, 95, 106,
	99, 100, 101, 102, 103, 104, 105, 97, 98, 109,
	84, 85, 86, 87, 88, 89, 90, -119, -211, -88,
	-211, 115, 116, -74, -74, -74, -74, -74, -74, -74,
	-74, -211, -2, -83, -46, -211, -211, -211, -211, -211,
	-211, -211, -211, -211, -211, -92, -46, -211, -216, -80,
	-211, -216, -80, -216, -80, -216, -211, -216, -80, -216,
	-80, -216, -216, -80, -211, -211, -211, -211, -211, -211,
	-63, 26, -62, -48, -49, -50, -51, -65, -88, -211,
	-62, -62, -55, -213, 57, 11, 55, -213, 57, 114,
	57, -110, 173, -111, -115, 239, 241, 84, -145, -140,
	61, 28, 29, 58, 57, -62, -153, -157, -159, -158,
	-160, -155, -156, 193, 194, 110, 197, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 29, 152, 189,
	190, 191, 192, 209, 210, 211, 212, 213, 214, 215,
	216, 176, 195, 268, 177, 178, 179, 180, 181, 182,
	184, 185, 186, 187, 188, -140, 22, 130, 59, 76,
	59, -62, 57, 131, -55, 23, 54, -57, -62, 59,
	59, -147, -146, -138, -137, -137, -127, -127, -137, -137,
	-62, -137, -137, -62, -137, -137, 11, -121, 11, 94,
	-46, -125, 92, 54, 59, -62, -137, 165, 165, 127,
	127, 170, -62, 9, 94, 57, 18, 114, 57, -101,
	24, 25, -102, -212, -38, -75, -140, 62, 65, -37,
	45, -62, -46, -46, -81, 70, 76, 71, 72, -142,
	101, -147, -141, -138, -74, -82, -85, -88, 66, 94,
	92, 93, 78, -74, -74, -74, -74, -74, -74, -74,
	-74, -74, -74, -74, -74, -74, -74, -74, -149, 59,
	61, 59, -73, -73, -140, -36, -212, 57, -212, -2,
	-43, -45, -43, -46, -46, -89, 61, -43, -89, 61,
	-43, -43, -43, -36, -90, -91, 80, -89, -140, -146,
	-212, -74, -140, -140, -43, -44, -43, -43, -43, -106,
	159, -62, 29, 57, -58, -60, -59, -61, 44, 48,
	50, 45, 46, 47, 51, -133, 22, -48, -211, -66,
	159, -67, 22, -148, 52, 132, 53, -146, 61, -106,
	55, -48, -62, -48, -64, -146, 101, -114, -111, 57,
	240, 242, 243, 54, 73, -46, -166, 109, -187, -188,
	-189, -141, 61, 62, -175, -176, -177, -190, 142, -196,
	134, 136, 33, -178, 143, 128, 34, 58, -154, -167,
	221, -161, 56, -161, -161, -161, -161, -165, 196, -165,
	-165, -165, 56, 56, -161, -161, -161, -169, 56, -169,
	-169, -170, 56, -170, -144, 55, -100, -62, -137, 23,
	-137, -62, -62, -62, 57, 59, 59, -181, 11, 94,
	-62, -124, 92, 12, -146, -146, 61, -62, -130, 122,
	119, 120, 124, 125, -199, 118, 218, 196, 68, 28,
	15, 258, 159, 273, 59, 160, -62, -62, -62, -62,
	-62, 122, 119, 40, -46, -46, -147, -99, -103, -117,
	19, 11, 36, 36, -43, 70, 71, 72, 114, -211,
	-82, -74, -74, -74, -42, 153, 75, -212, -44, -46,
	-212, 57, -212, -212, 57, 55, 22, 11, 11, -212,
	11, 11, -212, -212, -212, -43, -93, -91, 82, -46,
	-212, 114, -212, 57, 57, -212, -212, -212, -212, -72,
	29, 36, -2, -211, -211, -109, -113, -89, -49, -50,
	-50, -49, -50, 44, 44, 44, 49, 44, 49, 44,
	-59, -146, -212, -211, 291, -148, -67, 128, 128, 128,
	-68, 12, -48, -68, -68, 114, -115, -116, 244, 241,
	247, 59, 61, 57, -189, 84, 56, 59, 34, -178,
	-178, -182, 59, -182, 34, -171, -163, -164, -172, -173,
	-162, 70, 76, 28, 54, 218, 134, 34, 33, 68,
	-168, 222, 62, -165, -165, -166, 29, -166, -166, -166,
	-174, 61, -174, 62, 62, 54, -140, -2, 22, 131,
	-137, -62, -137, -137, -68, 59, 59, -121, 61, -46,
	-136, -134, -205, -178, -128, 135, 139, 142, 143, 134,
	159, -134, -205, -178, 135, -131, -178, 131, 22, -134,
	-134, 159, -204, 55, 165, 218, 165, 41, 114, -62,
	-47, 11, 101, -141, -44, -42, 75, -74, -74, -212,
	-45, -152, 110, 193, 152, 191, 187, 207, 198, 220,
	189, 221, -149, -152, -74, -74, -74, -74, 267, -96,
	83, -46, 81, -141, -74, -74, -108, 54, -109, -84,
	-86, -85, -211, -2, -104, -140, -107, -140, -68, 57,
	84, -53, -52, 54, 55, -54, 54, -52, 44, 44,
	-107, -74, -67, -211, -211, -211, -96, -46, -68, 241,
	245, 246, -188, -189, -192, -191, -140, -196, -182, -182,
	56, 70, -74, 9, 34, 34, 61, 58, -166, -166,
	59, 110, 58, 57, 58, 57, 58, 57, -62, -100,
	-100, -62, -124, 56, -175, -136, -140, -178, 59, -136,
	-140, 59, -62, -140, -175, 59, -140, -202, 270, -203,
	59, -140, -140, -140, -68, -48, -212, -74, -212, -161,
	-161, -161, -170, -161, 181, -161, 181, -212, -212, 19,
	19, 19, 19, -211, -40, 263, -46, 57, 57, 27,
	-108, 57, -212, -212, -212, 57, 114, -212, 57, -96,
	-113, -46, -46, 56, -46, -212, -67, -133, -105, -140,
	-105, -105, -102, 58, 57, -161, -105, -77, -165, 61,
	-165, 62, 62, 56, -2, -175, -98, 147, 148, -144,
	-140, -132, 131, 22, 131, -98, -175, 26, -201, -200,
	-141, 56, 55, -94, 13, -165, 59, -74, -74, -74,
	-74, -74, -212, 61, -74, -74, 34, -86, 36, -2,
	-211, -140, -140, -140, -102, -105, -66, -148, 57, -212,
	-212, -212, -194, -193, 55, 138, 68, -191, 58, -166,
	-166, 58, 58, -192, -100, 58, -136, 59, 56, -144,
	59, -140, -136, -98, -211, 57, 84, -105, -62, -95,
	14, 16, -212, -212, -212, -212, -39, 94, 270, -212,
	-212, 9, -84, -2, 114, 58, -67, -140, -193, 59,
	-183, 84, 61, 145, 58, -136, -192, 56, -136, -197,
	-198, 159, -200, -189, 58, -46, -83, -212, 268, 51,
	271, -109, -212, -140, 62, -62, -195, -194, 58, -192,
	-212, 57, -140, -204, 41, 269, 272, 56, -195, 58,
	-198, 36, -202, 41, -105, -195, 161, 270, 58, 162,
	271, -207, -208, 54, -211, 272, -208, 54, 10, 9,
	-74, 158, -206, 146, 141, 144, 29, -206, -212, -212,
	140, 28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 601, 0, 355, 355, 355, 355,
	355, 355, 0, 675, 231, 232, 233, 0, 0, 0,
	0, -2, 331, 332, 0, 334, 335, 344, -2, 977,
	977, 0, 0, 977, 0, 37, 38, 655, 347, 336,
	337, 975, 1, 3, 609, 0, 0, 359, 362, 357,
	0, 655, 655, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 653, 653, 653, 676, 672, 673, 674, 0,
	651, 0, 651, 651, 651, 0, 282, 430, 683, 684,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 0,
	0, 0, 978, 0, 978, 978, 296, 0, 298, 978,
	0, 978, 0, 305, 0, 0, 311, 978, 194, 195,
	196, 328, 329, 316, 330, 333, 0, 0, 0, 348,
	349, 350, 351, 977, 977, 354, 31, 0, 0, 0,
	656, 613, 0, 0, 601, 33, 0, 355, 360, 361,
	365, 363, 364, 356, 0, 374, 378, 0, 439, 0,
	444, 446, -2, -2, 0, 481, 482, 483, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 510,
	511, 512, 586, 587, 588, 589, 590, 591, 592, 593,
	448, 449, 583, 633, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 0, 545, 545, 545, 545,
	545, 545, 545, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 50, 430, 54, 0,
	953, 637, -2, -2, 0, 0, 681, 682, -2, 819,
	-2, 679, 680, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 0, 0, 89, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 283, 978, 978, 286, 979, 980,
	653, 653, 978, 978, 0, 978, 978, 294, 295, 0,
	210, 211, 299, 978, 978, 301, 0, 319, 317, 318,
	313, 314, 0, 325, 308, 309, 312, 338, -2, 341,
	342, 343, -2, 0, 352, 353, 32, 976, 0, 978,
	0, 0, 0, 0, 26, 0, 0, 610, 0, 602,
	603, 606, 609, 31, 362, 0, 368, 366, 367, 358,
	0, 375, 0, 0, 0, 379, 0, 381, 382, 0,
	442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 467, 468, 469, 470, 471, 472, 445, 0, 459,
	0, 0, 0, 501, 502, 503, 504, 505, 506, 507,
	0, 365, 31, 0, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 0, 575, 0, 529, 537,
	0, 530, 538, 531, 539, 532, 0, 533, 540, 534,
	541, 535, 536, 542, 0, 0, 0, 370, 0, 0,
	52, 0, 429, 0, 385, 387, 388, 389, -2, 0,
	433, -2, 0, 0, 0, 44, 45, 0, 0, 0,
	0, 55, 953, 57, 58, 0, 0, 0, 170, 646,
	647, 648, 644, 222, 0, 0, 94, 158, 102, 103,
	104, 151, 106, 151, 151, 151, 151, 167, 167, 167,
	167, 134, 135, 136, 137, 138, 0, 0, 121, 151,
	151, 151, 125, 141, 142, 143, 144, 145, 146, 147,
	148, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	153, 153, 153, 155, 155, 677, 69, 0, 978, 0,
	978, 85, 0, 0, 276, 652, 0, 278, 46, 279,
	280, 431, 685, 686, 284, 285, 0, 0, 289, 290,
	291, 292, 293, 212, 300, 304, 0, 322, 0, 0,
	306, 307, 0, 0, 345, 0, 252, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 0, 0, 0, 605,
	607, 608, 613, 34, 365, 0, 594, 0, 0, 0,
	369, 29, 440, 441, 443, 460, 0, 462, 464, 380,
	376, 0, 584, -2, 450, 451, 475, 476, 477, 0,
	0, 0, 0, 473, 455, 0, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 500, 559,
	560, 0, 498, 499, 508, 370, 478, 0, 632, 31,
	0, 372, 0, 0, 0, 483, 586, 0, 483, 586,
	0, 0, 0, 0, 581, 578, 0, 0, 583, 0,
	546, 0, 0, 0, 0, 0, 371, 0, 0, 0,
	0, 428, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 421, 0, 0, 0, 0, 415, 0, 0, 393,
	898, 395, 0, 433, 0, 0, 0, 416, 417, 437,
	0, 437, 49, 437, 51, 0, 432, 638, 56, 0,
	0, 61, 62, 639, 640, 641, 642, 0, 86, 223,
	225, 228, 229, 230, 90, 91, 92, 0, 0, 205,
	0, 0, 199, 199, 0, 197, 198, 88, 93, 160,
	159, 105, 0, 167, 167, 128, 129, 170, 0, 170,
	170, 170, 0, 0, 122, 123, 124, 116, 0, 117,
	118, 119, 0, 120, 0, 0, 0, 0, 75, 654,
	76, 0, 274, 978, 0, 978, 978, 437, 0, 0,
	319, 303, 0, 0, 320, 321, 326, 310, 977, 261,
	261, 669, 261, 261, 248, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 0, 77, 254, 256, 255,
	259, 0, 0, 0, 611, 612, 0, 604, 27, 0,
	649, 650, 595, 596, 383, 461, 463, 465, 0, 370,
	452, 473, 456, 0, 453, 0, 0, 447, 0, 480,
	-2, 0, 515, 516, 0, 0, 0, 0, 0, 552,
	0, 0, 553, 0, 525, 601, 0, 579, 0, 0,
	528, 0, 547, 0, 0, 548, 549, 550, 551, 626,
	0, 0, -2, 0, 0, 437, 634, 0, 386, 410,
	412, 0, 407, 419, 420, 422, 0, 424, 0, 426,
	427, 390, 392, 0, 0, 433, 399, 0, 0, 0,
	601, 0, 437, 42, 43, 0, 59, 60, 0, 0,
	66, 171, 172, 0, 226, 0, 0, 0, 189, 199,
	199, 192, 200, 193, 0, 95, 96, 97, 98, 99,
	100, 162, 0, 0, 0, 166, 0, 174, 176, 0,
	101, 161, 0, 170, 170, 130, 0, 131, 132, 133,
	0, 149, 0, 0, 0, 0, 678, -2, 69, 0,
	277, 47, 287, 288, 297, 213, 214, 322, 323, 324,
	234, 0, 977, 0, 0, 262, 263, 264, 265, 266,
	267, 0, 977, 0, 0, 0, 0, 670, 671, 0,
	0, 0, 80, 0, 0, 0, 0, 615, 0, 28,
	437, 0, 377, 585, 0, 454, 0, 474, 457, 513,
	373, 0, 151, 151, 564, 151, 155, 567, 151, 569,
	151, 572, 0, 0, 0, 0, 0, 0, 0, 576,
	527, 582, 0, 584, 0, 0, 35, 0, 626, 616,
	628, 630, 0, 31, 0, 622, 0, 402, 601, 0,
	0, 404, 411, 0, 0, 405, 0, 406, 423, 425,
	0, -2, 398, 0, 0, 0, 609, 438, 41, 63,
	64, 65, 224, 227, 0, 201, 151, 204, 190, 191,
	0, 163, 164, 0, 173, 175, 177, 152, 126, 127,
	168, 169, 167, 0, 167, 0, 156, 0, 0, 73,
	0, 275, 302, 0, 249, 237, 677, 0, 238, 239,
	244, 0, 241, 0, 249, 0, 0, 253, 0, 78,
	79, 0, 0, 258, 597, 384, 514, 458, 517, 561,
	167, 565, 566, 568, 570, 571, 573, 519, 518, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 0,
	36, 0, 631, -2, 0, 0, 0, 53, 0, 609,
	635, 636, 408, 0, 413, 433, 396, 0, 0, 400,
	0, 0, 40, 179, 0, 203, 0, 165, 170, 150,
	170, 0, 0, 0, -2, 0, 977, 250, 0, 0,
	677, 0, 667, 668, 0, 977, 249, 0, 81, 82,
	0, 0, 0, 599, 0, 562, 563, 0, 0, 0,
	0, 554, 526, 577, 0, 0, 0, 629, 0, -2,
	0, 624, 623, 403, 39, 0, 394, 433, 0, 434,
	435, 436, 178, 182, 0, 187, 0, 202, 0, 139,
	140, 154, 157, 0, 74, 977, 236, 251, 0, 0,
	240, 245, 246, 977, 0, 0, 0, 0, 260, 30,
	0, 0, 520, 522, 521, 523, 0, 0, 0, 543,
	544, 0, 619, 31, 0, 409, 397, 401, 183, 184,
	0, 188, 186, 0, 180, 235, 0, 0, 247, 0,
	269, 0, 83, 84, 77, 600, 598, 524, 0, 0,
	0, 627, -2, 625, 185, 0, 72, 181, 180, 0,
	268, 0, 0, 80, 555, 0, 558, 0, 242, 180,
	270, 0, 257, 556, 0, 243, 0, 0, 206, 0,
	0, 207, 208, 0, 0, 557, 209, 0, 0, 0,
	0, 0, 215, 217, 218, 0, 0, 216, 271, 272,
	219, 220, 221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 355,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:339
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:344
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:345
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:373
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:379
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:397
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:414
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:424
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:431
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:443
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:475
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:488
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:493
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:497
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:507
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:517
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:522
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:526
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:536
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:592
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:601
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:607
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:622
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:626
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:630
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:639
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:654
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:670
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:682
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:693
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:700
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:704
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:710
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:715
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:719
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:723
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:729
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:742
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:760
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:787
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1014
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.sqlVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1023
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1028
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1032
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1050
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1105
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1109
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1150
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexOptions = nil
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1194
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1222
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1255
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1265
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1269
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1281
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 206:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1292
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 207:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1296
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 208:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1300
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 209:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1304
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1327
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1333
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1339
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1349
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1353
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1357
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1361
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1366
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1374
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1382
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1386
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1390
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1396
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1400
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1419
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1426
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1449
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[7].colIdent, Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 243:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[8].colIdent, Type: yyDollar[6].str, Using: yyDollar[9].colIdent, Columns: yyDollar[11].indexColumns, Options: yyDollar[13].indexOptions}}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 246:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1470
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 247:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1477
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1488
		{
			yyVAL.columnOrder = nil
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1492
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1496
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1508
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1578
		{
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1591
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1597
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1601
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1607
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 272:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1611
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1623
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1627
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1635
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1647
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1674
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1697
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1734
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1746
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1750
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1754
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1759
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1769
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1777
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1783
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1788
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1824
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = "full "
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1850
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1858
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1864
		{
			yyVAL.showFilter = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1868
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1872
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1878
		{
			yyVAL.showFilter = nil
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1882
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1888
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1892
		{
			yyVAL.str = SessionStr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1896
		{
			yyVAL.str = GlobalStr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1902
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1906
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = &Begin{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = &Begin{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			yyVAL.statement = &Commit{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.statement = &Rollback{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1934
		{
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1938
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1942
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1975
		{
			yyVAL.statement = &OtherRead{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1981
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1993
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1999
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2003
		{
			setAllowComments(yylex, true)
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2007
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2013
		{
			yyVAL.bytes2 = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = UnionStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = UnionAllStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = UnionDistinctStr
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = SQLCacheStr
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2049
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = DistinctStr
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = StraightJoinHint
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2071
		{
			yyVAL.selectExprs = nil
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2085
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2099
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2103
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2108
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2116
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2128
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2132
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2166
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2172
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2177
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2192
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2196
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2243
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2247
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2251
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2263
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2267
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2273
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2275
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2278
		{
			yyVAL.empty = struct{}{}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.str = JoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2295
		{
			yyVAL.str = JoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = JoinStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.str = StraightJoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2311
		{
			yyVAL.str = LeftJoinStr
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.str = LeftJoinStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2319
		{
			yyVAL.str = RightJoinStr
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.str = RightJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2329
		{
			yyVAL.str = NaturalJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2333
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2343
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2347
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2353
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2368
		{
			yyVAL.indexHints = nil
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2372
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2376
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2380
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = ""
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = IsNullStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = IsNotNullStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.str = IsTrueStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.str = IsNotTrueStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2503
		{
			yyVAL.str = IsFalseStr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.str = IsNotFalseStr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.str = EqualStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
			yyVAL.str = LessThanStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.str = GreaterThanStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.str = LessEqualStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.str = GreaterEqualStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			yyVAL.str = NotEqualStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2537
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = nil
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2552
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2556
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2560
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2566
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2576
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2674
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2704
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 519:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 521:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 523:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 524:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2841
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2914
		{
			yyVAL.str = ""
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2918
		{
			yyVAL.str = BooleanModeStr
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2922
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2926
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2930
		{
			yyVAL.str = QueryExpansionStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = nil
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3010
		{
			yyVAL.str = string("")
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3014
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3020
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3024
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3030
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = nil
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3049
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3053
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3071
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3083
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3087
		{
			yyVAL.expr = &NullVal{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3102
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3106
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3111
		{
			yyVAL.exprs = nil
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3115
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3120
		{
			yyVAL.expr = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3129
		{
			yyVAL.orderBy = nil
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3133
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3143
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3149
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3154
		{
			yyVAL.str = AscScr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.str = AscScr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.str = DescScr
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3167
		{
			yyVAL.limit = nil
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3171
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3175
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3179
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3184
		{
			yyVAL.str = ""
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3188
		{
			yyVAL.str = ForUpdateStr
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3192
		{
			yyVAL.str = ShareModeStr
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3205
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3213
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3218
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3222
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3226
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3237
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3241
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3245
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3250
		{
			yyVAL.updateExprs = nil
		}
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3254
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3264
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3274
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3280
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3286
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3300
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3306
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3312
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3316
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3322
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3326
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3330
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3334
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3341
		{
			yyVAL.bytes = []byte("charset")
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3348
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3356
		{
			yyVAL.expr = &Default{}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3365
		{
			yyVAL.byt = 0
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3367
		{
			yyVAL.byt = 1
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3370
		{
			yyVAL.byt = 0
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3372
		{
			yyVAL.byt = 1
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3375
		{
			yyVAL.str = ""
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3377
		{
			yyVAL.str = IgnoreStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3381
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3383
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3385
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3389
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3393
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3408
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3412
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.str = UniqueStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3418
		{
			yyVAL.str = FulltextStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.str = SpatialStr
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3423
		{
			yyVAL.str = ""
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3425
		{
			yyVAL.str = yyDollar[1].str
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3428
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3430
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3434
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3462
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3776
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3785
		{
			decNesting(yylex)
		}
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3790
		{
			skipToEnd(yylex)
		}
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3795
		{
			skipToEnd(yylex)
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3799
		{
			skipToEnd(yylex)
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3803
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
