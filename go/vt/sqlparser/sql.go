// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const CHECK = 57460
const ACTION = 57461
const CASCADE = 57462
const CONSTRAINT = 57463
const FOREIGN = 57464
const NO = 57465
const REFERENCES = 57466
const RESTRICT = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const WARNINGS = 57487
const SEQUENCE = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const UUID = 57502
const REAL = 57503
const DOUBLE = 57504
const FLOAT_TYPE = 57505
const DECIMAL = 57506
const NUMERIC = 57507
const TIME = 57508
const TIMESTAMP = 57509
const DATETIME = 57510
const YEAR = 57511
const CHAR = 57512
const VARCHAR = 57513
const BOOL = 57514
const CHARACTER = 57515
const VARBINARY = 57516
const NCHAR = 57517
const TEXT = 57518
const TINYTEXT = 57519
const MEDIUMTEXT = 57520
const LONGTEXT = 57521
const BLOB = 57522
const TINYBLOB = 57523
const MEDIUMBLOB = 57524
const LONGBLOB = 57525
const JSON = 57526
const ENUM = 57527
const GEOMETRY = 57528
const POINT = 57529
const LINESTRING = 57530
const POLYGON = 57531
const GEOMETRYCOLLECTION = 57532
const MULTIPOINT = 57533
const MULTILINESTRING = 57534
const MULTIPOLYGON = 57535
const NULLX = 57536
const AUTO_INCREMENT = 57537
const APPROXNUM = 57538
const SIGNED = 57539
const UNSIGNED = 57540
const ZEROFILL = 57541
const COLLATION = 57542
const DATABASES = 57543
const TABLES = 57544
const VITESS_METADATA = 57545
const VSCHEMA = 57546
const FULL = 57547
const PROCESSLIST = 57548
const COLUMNS = 57549
const FIELDS = 57550
const ENGINES = 57551
const PLUGINS = 57552
const NAMES = 57553
const CHARSET = 57554
const GLOBAL = 57555
const SESSION = 57556
const ISOLATION = 57557
const LEVEL = 57558
const READ = 57559
const WRITE = 57560
const ONLY = 57561
const REPEATABLE = 57562
const COMMITTED = 57563
const UNCOMMITTED = 57564
const SERIALIZABLE = 57565
const CURRENT_TIMESTAMP = 57566
const DATABASE = 57567
const CURRENT_DATE = 57568
const CURRENT_TIME = 57569
const LOCALTIME = 57570
const LOCALTIMESTAMP = 57571
const UTC_DATE = 57572
const UTC_TIME = 57573
const UTC_TIMESTAMP = 57574
const REPLACE = 57575
const CONVERT = 57576
const CAST = 57577
const SUBSTR = 57578
const SUBSTRING = 57579
const GROUP_CONCAT = 57580
const SEPARATOR = 57581
const TIMESTAMPADD = 57582
const TIMESTAMPDIFF = 57583
const MATCH = 57584
const AGAINST = 57585
const BOOLEAN = 57586
const LANGUAGE = 57587
const WITH = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const ARRAY = 57592
const CUME_DIST = 57593
const DESCRIPTION = 57594
const DENSE_RANK = 57595
const EMPTY = 57596
const EXCEPT = 57597
const FIRST_VALUE = 57598
const GROUPING = 57599
const GROUPS = 57600
const JSON_TABLE = 57601
const LAG = 57602
const LAST_VALUE = 57603
const LATERAL = 57604
const LEAD = 57605
const MEMBER = 57606
const NTH_VALUE = 57607
const NTILE = 57608
const OF = 57609
const OVER = 57610
const PERCENT_RANK = 57611
const RANK = 57612
const RECURSIVE = 57613
const ROW_NUMBER = 57614
const SYSTEM = 57615
const WINDOW = 57616
const ACTIVE = 57617
const ADMIN = 57618
const BUCKETS = 57619
const CLONE = 57620
const COMPONENT = 57621
const DEFINITION = 57622
const ENFORCED = 57623
const EXCLUDE = 57624
const FOLLOWING = 57625
const GEOMCOLLECTION = 57626
const GET_MASTER_PUBLIC_KEY = 57627
const HISTOGRAM = 57628
const HISTORY = 57629
const INACTIVE = 57630
const INVISIBLE = 57631
const LOCKED = 57632
const MASTER_COMPRESSION_ALGORITHMS = 57633
const MASTER_PUBLIC_KEY_PATH = 57634
const MASTER_TLS_CIPHERSUITES = 57635
const MASTER_ZSTD_COMPRESSION_LEVEL = 57636
const NESTED = 57637
const NETWORK_NAMESPACE = 57638
const NOWAIT = 57639
const NULLS = 57640
const OJ = 57641
const OLD = 57642
const OPTIONAL = 57643
const ORDINALITY = 57644
const ORGANIZATION = 57645
const OTHERS = 57646
const PATH = 57647
const PERSIST = 57648
const PERSIST_ONLY = 57649
const PRECEDING = 57650
const PRIVILEGE_CHECKS_USER = 57651
const PROCESS = 57652
const RANDOM = 57653
const REFERENCE = 57654
const REQUIRE_ROW_FORMAT = 57655
const RESOURCE = 57656
const RESPECT = 57657
const RESTART = 57658
const RETAIN = 57659
const REUSE = 57660
const ROLE = 57661
const SECONDARY = 57662
const SECONDARY_ENGINE = 57663
const SECONDARY_LOAD = 57664
const SECONDARY_UNLOAD = 57665
const SKIP = 57666
const SRID = 57667
const THREAD_PRIORITY = 57668
const TIES = 57669
const UNBOUNDED = 57670
const VCPU = 57671
const VISIBLE = 57672

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"UUID",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	160, 306,
	161, 306,
	-2, 294,
	-1, 322,
	112, 647,
	-2, 643,
	-1, 323,
	112, 648,
	-2, 644,
	-1, 391,
	82, 896,
	-2, 63,
	-1, 392,
	82, 814,
	-2, 64,
	-1, 397,
	82, 783,
	-2, 609,
	-1, 399,
	82, 844,
	-2, 611,
	-1, 692,
	1, 359,
	5, 359,
	12, 359,
	13, 359,
	14, 359,
	15, 359,
	17, 359,
	19, 359,
	30, 359,
	31, 359,
	42, 359,
	43, 359,
	44, 359,
	45, 359,
	46, 359,
	48, 359,
	49, 359,
	52, 359,
	53, 359,
	55, 359,
	56, 359,
	348, 359,
	-2, 377,
	-1, 695,
	53, 44,
	55, 44,
	-2, 48,
	-1, 845,
	112, 650,
	-2, 646,
	-1, 1074,
	5, 30,
	-2, 444,
	-1, 1104,
	5, 29,
	-2, 583,
	-1, 1355,
	5, 30,
	-2, 584,
	-1, 1411,
	5, 29,
	-2, 586,
	-1, 1492,
	5, 30,
	-2, 587,
}

const yyPrivate = 57344

const yyLast = 16779

var yyAct = [...]int{

	323, 1526, 1317, 1516, 648, 1480, 327, 1107, 1423, 1375,
	958, 1125, 1201, 1391, 931, 1253, 340, 520, 1287, 1254,
	301, 1250, 1001, 57, 1108, 929, 1038, 1152, 967, 987,
	1260, 957, 81, 1131, 647, 3, 265, 291, 1266, 265,
	1225, 1066, 880, 794, 870, 265, 353, 1169, 808, 1179,
	877, 1178, 396, 708, 933, 954, 918, 898, 847, 689,
	580, 586, 688, 997, 707, 390, 385, 265, 81, 971,
	325, 911, 265, 600, 265, 592, 310, 387, 354, 51,
	382, 56, 293, 294, 295, 296, 300, 981, 299, 697,
	61, 1020, 365, 1519, 371, 372, 369, 370, 368, 367,
	366, 1503, 1514, 1490, 1511, 1019, 314, 662, 373, 374,
	1318, 538, 1502, 1489, 663, 1242, 63, 64, 65, 66,
	67, 1347, 525, 260, 256, 257, 258, 1282, 1283, 1281,
	51, 553, 551, 1024, 1140, 948, 298, 1139, 306, 709,
	1141, 710, 1018, 1454, 613, 612, 622, 623, 615, 616,
	617, 618, 619, 620, 621, 614, 949, 950, 624, 574,
	297, 569, 1160, 980, 903, 570, 567, 568, 252, 1203,
	254, 1378, 1398, 988, 290, 783, 1338, 1336, 562, 563,
	572, 782, 1205, 780, 1513, 1510, 1226, 1481, 1200, 912,
	1530, 1472, 1015, 1012, 1013, 972, 1011, 555, 1534, 557,
	393, 1424, 974, 539, 254, 1432, 1126, 1128, 1186, 527,
	1388, 1206, 974, 787, 1426, 784, 781, 773, 1276, 573,
	1197, 1275, 879, 1204, 1228, 1274, 1199, 523, 1022, 1025,
	554, 556, 530, 267, 255, 1032, 1083, 1461, 1031, 636,
	637, 1153, 1080, 259, 615, 616, 617, 618, 619, 620,
	621, 614, 1358, 265, 624, 1212, 265, 1136, 535, 1230,
	955, 1234, 265, 1229, 253, 1227, 1017, 1093, 265, 329,
	1232, 81, 813, 81, 1060, 81, 81, 819, 81, 1231,
	81, 703, 1425, 1127, 604, 545, 81, 614, 1016, 1299,
	624, 944, 1233, 1235, 624, 809, 816, 1528, 973, 1040,
	1529, 521, 1527, 599, 1185, 988, 1433, 1431, 973, 1190,
	1187, 1180, 1188, 1184, 1455, 1181, 552, 81, 1182, 1183,
	818, 532, 1198, 533, 1196, 1488, 534, 1021, 588, 1193,
	598, 597, 1189, 70, 519, 576, 577, 1246, 636, 637,
	1300, 589, 1023, 1079, 636, 637, 854, 599, 1078, 550,
	1077, 550, 1244, 550, 550, 1470, 550, 817, 550, 1443,
	852, 853, 851, 597, 550, 1264, 899, 598, 597, 71,
	541, 542, 543, 711, 598, 597, 810, 1039, 775, 599,
	265, 265, 265, 526, 599, 51, 1158, 598, 597, 81,
	899, 599, 1090, 598, 597, 81, 974, 594, 590, 977,
	633, 1475, 54, 635, 599, 978, 687, 1057, 1058, 1059,
	599, 320, 850, 613, 612, 622, 623, 615, 616, 617,
	618, 619, 620, 621, 614, 521, 1494, 624, 1496, 1535,
	251, 646, 1384, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 1383, 661, 664, 664, 664, 670, 664, 664,
	670, 664, 678, 679, 680, 681, 682, 683, 1173, 693,
	528, 529, 696, 1172, 1161, 578, 705, 1067, 1536, 22,
	871, 579, 872, 701, 665, 667, 669, 671, 673, 675,
	676, 666, 668, 1471, 672, 674, 1405, 677, 837, 839,
	840, 1142, 973, 1143, 838, 379, 380, 970, 968, 1381,
	969, 1209, 822, 823, 1170, 1043, 966, 972, 613, 612,
	622, 623, 615, 616, 617, 618, 619, 620, 621, 614,
	265, 393, 624, 1308, 1468, 81, 521, 1429, 1512, 305,
	265, 265, 81, 1440, 1498, 579, 265, 1429, 1484, 265,
	1429, 579, 265, 1429, 1462, 579, 265, 521, 81, 81,
	598, 597, 1320, 81, 81, 81, 265, 81, 81, 1313,
	608, 1311, 611, 81, 81, 1429, 1428, 599, 625, 626,
	627, 628, 629, 630, 631, 1153, 609, 610, 607, 613,
	612, 622, 623, 615, 616, 617, 618, 619, 620, 621,
	614, 1148, 81, 624, 634, 873, 265, 793, 796, 1373,
	1372, 1439, 81, 550, 1360, 579, 1357, 579, 1438, 824,
	550, 792, 617, 618, 619, 620, 621, 614, 776, 788,
	624, 1306, 1305, 1302, 1303, 24, 550, 550, 1302, 1301,
	1437, 550, 550, 550, 774, 550, 550, 1072, 579, 915,
	579, 550, 550, 882, 579, 1296, 81, 771, 843, 1102,
	692, 718, 717, 1103, 848, 547, 540, 845, 1251, 975,
	58, 1263, 889, 892, 938, 1263, 698, 826, 900, 882,
	1353, 1442, 915, 54, 24, 841, 914, 1304, 1144, 81,
	81, 947, 699, 1096, 1215, 884, 265, 343, 342, 345,
	346, 347, 348, 24, 265, 265, 344, 349, 265, 265,
	1072, 915, 265, 265, 265, 81, 1095, 874, 875, 920,
	923, 924, 925, 921, 51, 922, 926, 699, 81, 1267,
	1268, 1410, 54, 939, 700, 1132, 702, 941, 1072, 650,
	1132, 1072, 908, 698, 896, 704, 962, 844, 820, 786,
	54, 54, 638, 639, 640, 641, 642, 643, 644, 645,
	1504, 1393, 982, 1365, 825, 1002, 796, 1350, 1292, 700,
	1202, 698, 1267, 1268, 989, 990, 991, 937, 915, 942,
	945, 946, 930, 1263, 265, 81, 693, 81, 307, 1147,
	693, 265, 265, 265, 265, 265, 998, 265, 265, 993,
	992, 265, 81, 1003, 1394, 613, 612, 622, 623, 615,
	616, 617, 618, 619, 620, 621, 614, 1005, 265, 624,
	265, 265, 881, 883, 1521, 265, 1517, 983, 984, 985,
	986, 920, 923, 924, 925, 921, 54, 922, 926, 1294,
	1270, 999, 1000, 994, 995, 996, 1251, 393, 613, 612,
	622, 623, 615, 616, 617, 618, 619, 620, 621, 614,
	959, 1174, 624, 550, 814, 550, 352, 790, 832, 1119,
	1117, 1273, 1272, 1048, 1120, 1118, 1121, 1116, 924, 925,
	550, 1115, 845, 1508, 885, 886, 1501, 849, 891, 894,
	895, 1211, 1049, 311, 312, 1050, 1045, 593, 79, 1506,
	1055, 1054, 581, 1165, 716, 548, 1157, 1477, 848, 1476,
	1408, 1351, 591, 907, 582, 909, 910, 1155, 1149, 1389,
	1062, 1008, 789, 928, 308, 309, 265, 265, 265, 265,
	265, 1109, 593, 1061, 395, 1053, 302, 1448, 265, 303,
	58, 265, 1447, 1052, 1396, 265, 1132, 571, 1084, 265,
	1523, 1522, 60, 1081, 807, 595, 1104, 1523, 1458, 1379,
	815, 62, 844, 55, 1, 1089, 1515, 1319, 81, 1390,
	1014, 1479, 1422, 692, 1133, 884, 1286, 692, 1145, 965,
	956, 692, 69, 1134, 518, 1135, 1111, 1112, 1110, 1114,
	68, 1113, 1469, 1122, 964, 963, 1430, 1377, 976, 1130,
	1105, 1106, 1159, 979, 693, 693, 693, 693, 693, 1154,
	1293, 1137, 1156, 1474, 725, 723, 81, 81, 724, 930,
	722, 1129, 721, 1162, 1163, 727, 726, 693, 846, 720,
	278, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 81, 388, 1069, 1150,
	1151, 1171, 1070, 1164, 927, 1166, 1167, 1168, 1177, 1074,
	1075, 1076, 265, 712, 1056, 1004, 1082, 596, 72, 1085,
	1086, 81, 1192, 1195, 1191, 1092, 1194, 1010, 812, 1094,
	565, 566, 1097, 1098, 1099, 1100, 904, 280, 632, 1051,
	1138, 394, 1258, 821, 585, 550, 1208, 1446, 1395, 1088,
	959, 659, 897, 328, 1124, 836, 341, 338, 339, 827,
	1101, 1071, 606, 326, 318, 1219, 81, 81, 691, 1109,
	1252, 1243, 1218, 684, 550, 1224, 919, 917, 916, 1087,
	1237, 849, 383, 1236, 1269, 1265, 690, 395, 1214, 395,
	81, 395, 395, 1346, 395, 1453, 395, 1048, 831, 26,
	1257, 1262, 395, 59, 313, 81, 845, 81, 81, 19,
	1255, 18, 1271, 17, 20, 1278, 16, 1285, 15, 14,
	1277, 536, 30, 21, 13, 12, 11, 1280, 10, 9,
	8, 7, 6, 602, 5, 265, 1284, 1289, 1290, 1291,
	4, 304, 1256, 23, 51, 692, 692, 692, 692, 692,
	2, 0, 0, 1217, 0, 265, 1309, 0, 0, 0,
	692, 81, 0, 0, 81, 81, 81, 265, 692, 0,
	0, 0, 0, 81, 0, 0, 265, 1310, 1297, 1298,
	0, 0, 0, 316, 0, 0, 1247, 0, 0, 0,
	1312, 0, 0, 1315, 0, 1325, 1223, 0, 0, 0,
	0, 1327, 0, 0, 0, 395, 0, 0, 1326, 0,
	0, 713, 0, 1334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 1064, 1065, 0, 0, 0,
	1109, 0, 0, 0, 1352, 0, 0, 959, 0, 959,
	0, 0, 0, 0, 0, 81, 1361, 0, 1362, 0,
	0, 0, 0, 81, 693, 1145, 0, 0, 0, 1371,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 1331, 1332, 0, 1333, 0, 81,
	1335, 1345, 1337, 0, 0, 0, 1386, 0, 0, 0,
	0, 1380, 0, 1382, 622, 623, 615, 616, 617, 618,
	619, 620, 621, 614, 0, 1217, 624, 1387, 0, 0,
	0, 0, 0, 1367, 1368, 1369, 0, 0, 81, 81,
	0, 81, 1397, 0, 0, 0, 81, 0, 81, 81,
	81, 265, 0, 1409, 81, 1417, 1374, 1418, 1419, 1420,
	0, 395, 1416, 1328, 0, 1421, 550, 0, 395, 0,
	1330, 1411, 1427, 0, 81, 265, 1434, 0, 0, 0,
	1255, 1339, 1340, 1444, 395, 395, 0, 0, 0, 395,
	395, 395, 0, 395, 395, 0, 0, 959, 0, 395,
	395, 1354, 1355, 1356, 0, 1359, 1459, 0, 0, 0,
	81, 1467, 1256, 1466, 0, 1412, 1435, 0, 1436, 0,
	0, 0, 1370, 81, 81, 0, 0, 1460, 828, 0,
	0, 1392, 0, 1486, 1483, 0, 1482, 1255, 602, 0,
	0, 395, 81, 0, 549, 1109, 1491, 0, 1441, 0,
	0, 0, 0, 265, 0, 0, 0, 1478, 0, 1221,
	1222, 0, 81, 0, 0, 692, 0, 0, 0, 1256,
	0, 51, 1238, 1239, 0, 1240, 1241, 1500, 0, 0,
	0, 0, 876, 1507, 1505, 81, 0, 1248, 1249, 0,
	1349, 1404, 0, 0, 1509, 0, 0, 0, 901, 1520,
	275, 0, 0, 0, 0, 1531, 583, 587, 0, 0,
	0, 0, 0, 0, 0, 905, 906, 0, 0, 0,
	0, 0, 0, 605, 285, 0, 0, 0, 613, 612,
	622, 623, 615, 616, 617, 618, 619, 620, 621, 614,
	0, 395, 624, 694, 1449, 1450, 1451, 1452, 0, 1295,
	0, 1456, 1457, 0, 395, 1392, 959, 1344, 649, 0,
	0, 0, 0, 1463, 1464, 1465, 0, 660, 0, 0,
	0, 0, 1518, 0, 0, 268, 0, 0, 0, 262,
	0, 0, 271, 0, 0, 0, 0, 0, 292, 0,
	279, 274, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 1492, 0, 584, 0, 0,
	384, 395, 1329, 395, 0, 522, 0, 524, 0, 0,
	0, 0, 0, 277, 1497, 1343, 0, 0, 395, 284,
	0, 613, 612, 622, 623, 615, 616, 617, 618, 619,
	620, 621, 614, 263, 0, 624, 289, 0, 0, 0,
	0, 0, 263, 0, 0, 0, 395, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1532,
	1533, 317, 0, 0, 386, 0, 0, 0, 1342, 263,
	0, 263, 0, 0, 281, 272, 0, 282, 283, 288,
	0, 0, 0, 273, 276, 0, 270, 287, 286, 613,
	612, 622, 623, 615, 616, 617, 618, 619, 620, 621,
	614, 0, 0, 624, 0, 0, 0, 558, 0, 559,
	560, 0, 561, 0, 564, 0, 0, 0, 0, 0,
	575, 0, 0, 1399, 1400, 1401, 1402, 1403, 0, 0,
	0, 1406, 1407, 1341, 0, 0, 0, 0, 0, 0,
	0, 901, 613, 612, 622, 623, 615, 616, 617, 618,
	619, 620, 621, 614, 0, 0, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
	25, 52, 27, 28, 395, 0, 531, 0, 0, 537,
	0, 834, 835, 0, 0, 544, 0, 0, 43, 0,
	0, 546, 0, 29, 48, 49, 0, 613, 612, 622,
	623, 615, 616, 617, 618, 619, 620, 621, 614, 0,
	0, 624, 0, 38, 0, 0, 0, 54, 0, 0,
	0, 0, 1175, 395, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 649, 0, 0, 887, 888, 1220,
	263, 0, 0, 263, 0, 0, 0, 0, 0, 263,
	0, 0, 395, 0, 0, 263, 0, 0, 0, 613,
	612, 622, 623, 615, 616, 617, 618, 619, 620, 621,
	614, 0, 0, 624, 0, 0, 0, 395, 31, 32,
	34, 33, 36, 0, 50, 0, 0, 0, 0, 0,
	1524, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 686, 0, 695, 37, 44, 45, 0,
	395, 46, 47, 35, 1068, 0, 0, 0, 0, 901,
	0, 0, 1259, 1261, 0, 0, 0, 39, 40, 0,
	41, 42, 0, 0, 613, 612, 622, 623, 615, 616,
	617, 618, 619, 620, 621, 614, 1261, 0, 624, 772,
	0, 0, 0, 0, 0, 0, 779, 0, 0, 0,
	0, 395, 0, 395, 1288, 0, 0, 263, 263, 263,
	0, 0, 797, 798, 0, 0, 0, 799, 800, 801,
	0, 803, 804, 0, 0, 0, 0, 805, 806, 0,
	612, 622, 623, 615, 616, 617, 618, 619, 620, 621,
	614, 1046, 1047, 624, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 0, 1316, 0, 0,
	1321, 1322, 1323, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 777, 778, 0, 0, 0, 0, 785,
	0, 0, 384, 0, 0, 791, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	901, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 395, 0, 0, 0, 0, 0, 263, 0, 1376,
	0, 0, 0, 0, 0, 0, 0, 263, 263, 833,
	0, 0, 0, 263, 395, 0, 263, 0, 0, 263,
	0, 0, 0, 795, 0, 395, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 1415, 0, 0,
	0, 0, 1376, 263, 1376, 1376, 1376, 0, 0, 0,
	1288, 0, 795, 0, 0, 0, 0, 0, 0, 1007,
	0, 1009, 0, 0, 0, 0, 0, 0, 0, 913,
	1376, 0, 0, 0, 0, 0, 1036, 0, 0, 0,
	0, 0, 940, 0, 1210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 317,
	317, 0, 0, 317, 317, 317, 1473, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 395,
	395, 0, 0, 0, 0, 0, 0, 0, 317, 317,
	317, 317, 0, 263, 1245, 901, 0, 0, 1493, 0,
	0, 263, 935, 0, 0, 263, 263, 0, 0, 263,
	943, 795, 0, 0, 0, 0, 0, 1006, 1499, 0,
	0, 0, 0, 0, 1026, 1027, 1028, 1029, 1030, 0,
	1033, 1034, 0, 0, 1035, 0, 1279, 0, 0, 0,
	0, 1376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1037, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 0, 0, 0, 0, 263, 263,
	263, 263, 263, 0, 263, 263, 0, 0, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 263, 0, 1041, 1042, 0,
	0, 0, 263, 0, 0, 0, 0, 795, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1176, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 0, 0, 0, 0, 0, 0, 0, 1363, 0,
	0, 1364, 0, 0, 1366, 0, 0, 0, 0, 0,
	1207, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 902, 263, 263, 263, 263, 263, 744, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 263, 0,
	0, 0, 935, 0, 0, 0, 263, 0, 0, 0,
	0, 757, 760, 761, 762, 763, 764, 765, 0, 728,
	766, 767, 768, 769, 770, 745, 746, 747, 748, 729,
	730, 758, 0, 732, 0, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 749, 750, 751, 752, 753,
	754, 755, 756, 0, 0, 1213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 0, 0,
	0, 1485, 649, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 795, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 1385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	504, 492, 0, 449, 507, 423, 439, 516, 440, 443,
	480, 408, 462, 165, 437, 0, 427, 403, 433, 404,
	425, 451, 111, 455, 422, 494, 465, 506, 137, 514,
	139, 471, 0, 211, 153, 0, 902, 453, 496, 460,
	489, 448, 481, 413, 470, 508, 438, 478, 509, 0,
	263, 0, 80, 0, 960, 961, 0, 0, 0, 0,
	0, 101, 0, 475, 503, 435, 477, 479, 402, 472,
	0, 406, 409, 515, 499, 430, 431, 1146, 0, 0,
	0, 0, 0, 0, 452, 461, 486, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 428, 0, 469, 0,
	0, 0, 410, 407, 0, 0, 450, 0, 0, 0,
	412, 0, 429, 487, 0, 400, 119, 491, 498, 447,
	266, 502, 445, 444, 505, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 495, 426,
	434, 105, 432, 193, 172, 231, 468, 174, 192, 140,
	221, 185, 230, 241, 242, 218, 239, 246, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 513, 189, 110, 117, 107, 164, 224, 225,
	106, 249, 94, 238, 90, 95, 237, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 405, 0, 212,
	234, 250, 99, 421, 219, 244, 245, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	248, 171, 194, 103, 233, 210, 417, 420, 415, 416,
	463, 464, 510, 511, 512, 488, 411, 0, 418, 419,
	0, 493, 500, 501, 467, 82, 91, 138, 247, 186,
	116, 235, 401, 414, 109, 424, 0, 0, 436, 441,
	442, 454, 456, 457, 458, 459, 466, 473, 474, 476,
	482, 483, 484, 485, 490, 497, 517, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 240, 243, 504, 492, 0, 449, 507, 423, 439,
	516, 440, 443, 480, 408, 462, 165, 437, 0, 427,
	403, 433, 404, 425, 451, 111, 455, 422, 494, 465,
	506, 137, 514, 139, 471, 0, 211, 153, 0, 0,
	453, 496, 460, 489, 448, 481, 413, 470, 508, 438,
	478, 509, 0, 0, 0, 80, 0, 960, 961, 0,
	0, 0, 0, 0, 101, 0, 475, 503, 435, 477,
	479, 402, 472, 0, 406, 409, 515, 499, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 452, 461, 486,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	0, 469, 0, 0, 0, 410, 407, 0, 0, 450,
	0, 0, 0, 412, 0, 429, 487, 0, 400, 119,
	491, 498, 447, 266, 502, 445, 444, 505, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 495, 426, 434, 105, 432, 193, 172, 231, 468,
	174, 192, 140, 221, 185, 230, 241, 242, 218, 239,
	246, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 513, 189, 110, 117, 107,
	164, 224, 225, 106, 249, 94, 238, 90, 95, 237,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	405, 0, 212, 234, 250, 99, 421, 219, 244, 245,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 248, 171, 194, 103, 233, 210, 417,
	420, 415, 416, 463, 464, 510, 511, 512, 488, 411,
	0, 418, 419, 0, 493, 500, 501, 467, 82, 91,
	138, 247, 186, 116, 235, 401, 414, 109, 424, 0,
	0, 436, 441, 442, 454, 456, 457, 458, 459, 466,
	473, 474, 476, 482, 483, 484, 485, 490, 497, 517,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 240, 243, 504, 492, 0, 449,
	507, 423, 439, 516, 440, 443, 480, 408, 462, 165,
	437, 0, 427, 403, 433, 404, 425, 451, 111, 455,
	422, 494, 465, 506, 137, 514, 139, 471, 0, 211,
	153, 0, 0, 453, 496, 460, 489, 448, 481, 413,
	470, 508, 438, 478, 509, 54, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 475,
	503, 435, 477, 479, 402, 472, 0, 406, 409, 515,
	499, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	452, 461, 486, 446, 0, 0, 0, 0, 0, 0,
	0, 0, 428, 0, 469, 0, 0, 0, 410, 407,
	0, 0, 450, 0, 0, 0, 412, 0, 429, 487,
	0, 400, 119, 491, 498, 447, 266, 502, 445, 444,
	505, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 495, 426, 434, 105, 432, 193,
	172, 231, 468, 174, 192, 140, 221, 185, 230, 241,
	242, 218, 239, 246, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 513, 189,
	110, 117, 107, 164, 224, 225, 106, 249, 94, 238,
	90, 95, 237, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 405, 0, 212, 234, 250, 99, 421,
	219, 244, 245, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 248, 171, 194, 103,
	233, 210, 417, 420, 415, 416, 463, 464, 510, 511,
	512, 488, 411, 0, 418, 419, 0, 493, 500, 501,
	467, 82, 91, 138, 247, 186, 116, 235, 401, 414,
	109, 424, 0, 0, 436, 441, 442, 454, 456, 457,
	458, 459, 466, 473, 474, 476, 482, 483, 484, 485,
	490, 497, 517, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 240, 243, 504,
	492, 0, 449, 507, 423, 439, 516, 440, 443, 480,
	408, 462, 165, 437, 0, 427, 403, 433, 404, 425,
	451, 111, 455, 422, 494, 465, 506, 137, 514, 139,
	471, 0, 211, 153, 0, 0, 453, 496, 460, 489,
	448, 481, 413, 470, 508, 438, 478, 509, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 475, 503, 435, 477, 479, 402, 472, 0,
	406, 409, 515, 499, 430, 431, 0, 0, 0, 0,
	0, 0, 0, 452, 461, 486, 446, 0, 0, 0,
	0, 0, 0, 1216, 0, 428, 0, 469, 0, 0,
	0, 410, 407, 0, 0, 450, 0, 0, 0, 412,
	0, 429, 487, 0, 400, 119, 491, 498, 447, 266,
	502, 445, 444, 505, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 495, 426, 434,
	105, 432, 193, 172, 231, 468, 174, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 513, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 405, 0, 212, 234,
	250, 99, 421, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 417, 420, 415, 416, 463,
	464, 510, 511, 512, 488, 411, 0, 418, 419, 0,
	493, 500, 501, 467, 82, 91, 138, 247, 186, 116,
	235, 401, 414, 109, 424, 0, 0, 436, 441, 442,
	454, 456, 457, 458, 459, 466, 473, 474, 476, 482,
	483, 484, 485, 490, 497, 517, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 504, 492, 0, 449, 507, 423, 439, 516,
	440, 443, 480, 408, 462, 165, 437, 0, 427, 403,
	433, 404, 425, 451, 111, 455, 422, 494, 465, 506,
	137, 514, 139, 471, 0, 211, 153, 0, 0, 453,
	496, 460, 489, 448, 481, 413, 470, 508, 438, 478,
	509, 0, 0, 0, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 475, 503, 435, 477, 479,
	402, 472, 0, 406, 409, 515, 499, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 452, 461, 486, 446,
	0, 0, 0, 0, 0, 0, 944, 0, 428, 0,
	469, 0, 0, 0, 410, 407, 0, 0, 450, 0,
	0, 0, 412, 0, 429, 487, 0, 400, 119, 491,
	498, 447, 266, 502, 445, 444, 505, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	495, 426, 434, 105, 432, 193, 172, 231, 468, 174,
	192, 140, 221, 185, 230, 241, 242, 218, 239, 246,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 513, 189, 110, 117, 107, 164,
	224, 225, 106, 249, 94, 238, 90, 95, 237, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 405,
	0, 212, 234, 250, 99, 421, 219, 244, 245, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 248, 171, 194, 103, 233, 210, 417, 420,
	415, 416, 463, 464, 510, 511, 512, 488, 411, 0,
	418, 419, 0, 493, 500, 501, 467, 82, 91, 138,
	247, 186, 116, 235, 401, 414, 109, 424, 0, 0,
	436, 441, 442, 454, 456, 457, 458, 459, 466, 473,
	474, 476, 482, 483, 484, 485, 490, 497, 517, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 240, 243, 504, 492, 0, 449, 507,
	423, 439, 516, 440, 443, 480, 408, 462, 165, 437,
	0, 427, 403, 433, 404, 425, 451, 111, 455, 422,
	494, 465, 506, 137, 514, 139, 471, 0, 211, 153,
	0, 0, 453, 496, 460, 489, 448, 481, 413, 470,
	508, 438, 478, 509, 0, 0, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 475, 503,
	435, 477, 479, 402, 472, 0, 406, 409, 515, 499,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 452,
	461, 486, 446, 0, 0, 0, 0, 0, 0, 842,
	0, 428, 0, 469, 0, 0, 0, 410, 407, 0,
	0, 450, 0, 0, 0, 412, 0, 429, 487, 0,
	400, 119, 491, 498, 447, 266, 502, 445, 444, 505,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 495, 426, 434, 105, 432, 193, 172,
	231, 468, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 513, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 405, 0, 212, 234, 250, 99, 421, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 417, 420, 415, 416, 463, 464, 510, 511, 512,
	488, 411, 0, 418, 419, 0, 493, 500, 501, 467,
	82, 91, 138, 247, 186, 116, 235, 401, 414, 109,
	424, 0, 0, 436, 441, 442, 454, 456, 457, 458,
	459, 466, 473, 474, 476, 482, 483, 484, 485, 490,
	497, 517, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 504, 492,
	0, 449, 507, 423, 439, 516, 440, 443, 480, 408,
	462, 165, 437, 0, 427, 403, 433, 404, 425, 451,
	111, 455, 422, 494, 465, 506, 137, 514, 139, 471,
	0, 211, 153, 0, 0, 453, 496, 460, 489, 448,
	481, 413, 470, 508, 438, 478, 509, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 475, 503, 435, 477, 479, 402, 472, 0, 406,
	409, 515, 499, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 452, 461, 486, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 428, 0, 469, 0, 0, 0,
	410, 407, 0, 0, 450, 0, 0, 0, 412, 0,
	429, 487, 0, 400, 119, 491, 498, 447, 266, 502,
	445, 444, 505, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 495, 426, 434, 105,
	432, 193, 172, 231, 468, 174, 192, 140, 221, 185,
	230, 241, 242, 218, 239, 246, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	513, 189, 110, 117, 107, 164, 224, 225, 106, 249,
	94, 238, 90, 95, 237, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 405, 0, 212, 234, 250,
	99, 421, 219, 244, 245, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 248, 171,
	194, 103, 233, 210, 417, 420, 415, 416, 463, 464,
	510, 511, 512, 488, 411, 0, 418, 419, 0, 493,
	500, 501, 467, 82, 91, 138, 247, 186, 116, 235,
	401, 414, 109, 424, 0, 0, 436, 441, 442, 454,
	456, 457, 458, 459, 466, 473, 474, 476, 482, 483,
	484, 485, 490, 497, 517, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 240,
	243, 504, 492, 0, 449, 507, 423, 439, 516, 440,
	443, 480, 408, 462, 165, 437, 0, 427, 403, 433,
	404, 425, 451, 111, 455, 422, 494, 465, 506, 137,
	514, 139, 471, 0, 211, 153, 0, 0, 453, 496,
	460, 489, 448, 481, 413, 470, 508, 438, 478, 509,
	0, 0, 0, 322, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 475, 503, 435, 477, 479, 402,
	472, 0, 406, 409, 515, 499, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 452, 461, 486, 446, 0,
	0, 0, 0, 0, 0, 0, 0, 428, 0, 469,
	0, 0, 0, 410, 407, 0, 0, 450, 0, 0,
	0, 412, 0, 429, 487, 0, 400, 119, 491, 498,
	447, 266, 502, 445, 444, 505, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 495,
	426, 434, 105, 432, 193, 172, 231, 468, 174, 192,
	140, 221, 185, 230, 241, 242, 218, 239, 246, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 513, 189, 110, 117, 107, 164, 224,
	225, 106, 249, 94, 238, 90, 95, 237, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 405, 0,
	212, 234, 250, 99, 421, 219, 244, 245, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 248, 171, 194, 103, 233, 210, 417, 420, 415,
	416, 463, 464, 510, 511, 512, 488, 411, 0, 418,
	419, 0, 493, 500, 501, 467, 82, 91, 138, 247,
	186, 116, 235, 401, 414, 109, 424, 0, 0, 436,
	441, 442, 454, 456, 457, 458, 459, 466, 473, 474,
	476, 482, 483, 484, 485, 490, 497, 517, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 240, 243, 504, 492, 0, 449, 507, 423,
	439, 516, 440, 443, 480, 408, 462, 165, 437, 0,
	427, 403, 433, 404, 425, 451, 111, 455, 422, 494,
	465, 506, 137, 514, 139, 471, 0, 211, 153, 0,
	0, 453, 496, 460, 489, 448, 481, 413, 470, 508,
	438, 478, 509, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 475, 503, 435,
	477, 479, 402, 472, 0, 406, 409, 515, 499, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 452, 461,
	486, 446, 0, 0, 0, 0, 0, 0, 0, 0,
	428, 0, 469, 0, 0, 0, 410, 407, 0, 0,
	450, 0, 0, 0, 412, 0, 429, 487, 0, 400,
	119, 491, 498, 447, 266, 502, 445, 444, 505, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 495, 426, 434, 105, 432, 193, 172, 231,
	468, 174, 192, 140, 221, 185, 230, 241, 242, 218,
	239, 246, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 513, 189, 110, 117,
	107, 164, 224, 225, 106, 249, 94, 238, 90, 398,
	237, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 405, 0, 212, 234, 250, 99, 421, 219, 244,
	245, 0, 0, 100, 118, 113, 181, 399, 397, 127,
	209, 134, 141, 188, 248, 171, 194, 103, 233, 210,
	417, 420, 415, 416, 463, 464, 510, 511, 512, 488,
	411, 0, 418, 419, 0, 493, 500, 501, 467, 82,
	91, 138, 247, 186, 116, 235, 401, 414, 109, 424,
	0, 0, 436, 441, 442, 454, 456, 457, 458, 459,
	466, 473, 474, 476, 482, 483, 484, 485, 490, 497,
	517, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 240, 243, 504, 492, 0,
	449, 507, 423, 439, 516, 440, 443, 480, 408, 462,
	165, 437, 0, 427, 403, 433, 404, 425, 451, 111,
	455, 422, 494, 465, 506, 137, 514, 139, 471, 0,
	211, 153, 0, 0, 453, 496, 460, 489, 448, 481,
	413, 470, 508, 438, 478, 509, 0, 0, 0, 264,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	475, 503, 435, 477, 479, 402, 472, 0, 406, 409,
	515, 499, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 452, 461, 486, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 428, 0, 469, 0, 0, 0, 410,
	407, 0, 0, 450, 0, 0, 0, 412, 0, 429,
	487, 0, 400, 119, 491, 498, 447, 266, 502, 445,
	444, 505, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 495, 426, 434, 105, 432,
	193, 172, 231, 468, 174, 192, 140, 221, 185, 230,
	241, 242, 218, 239, 246, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 513,
	189, 110, 117, 107, 164, 224, 225, 106, 249, 94,
	238, 90, 95, 237, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 405, 0, 212, 234, 250, 99,
	421, 219, 244, 245, 0, 0, 100, 118, 113, 181,
	157, 96, 127, 209, 134, 141, 188, 248, 171, 194,
	103, 233, 210, 417, 420, 415, 416, 463, 464, 510,
	511, 512, 488, 411, 0, 418, 419, 0, 493, 500,
	501, 467, 82, 91, 138, 247, 186, 116, 235, 401,
	414, 109, 424, 0, 0, 436, 441, 442, 454, 456,
	457, 458, 459, 466, 473, 474, 476, 482, 483, 484,
	485, 490, 497, 517, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 240, 243,
	504, 492, 0, 449, 507, 423, 439, 516, 440, 443,
	480, 408, 462, 165, 437, 0, 427, 403, 433, 404,
	425, 451, 111, 455, 422, 494, 465, 506, 137, 514,
	139, 471, 0, 211, 153, 0, 0, 453, 496, 460,
	489, 448, 481, 413, 470, 508, 438, 478, 509, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 475, 503, 435, 477, 479, 402, 472,
	0, 406, 409, 515, 499, 430, 431, 0, 0, 0,
	0, 0, 0, 0, 452, 461, 486, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 428, 0, 469, 0,
	0, 0, 410, 407, 0, 0, 450, 0, 0, 0,
	412, 0, 429, 487, 0, 400, 119, 491, 498, 447,
	266, 502, 445, 444, 505, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 495, 426,
	434, 105, 432, 193, 172, 231, 468, 174, 192, 140,
	221, 185, 230, 241, 242, 218, 239, 246, 208, 86,
	217, 706, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 513, 189, 110, 117, 107, 164, 224, 225,
	106, 249, 94, 238, 90, 398, 237, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 405, 0, 212,
	234, 250, 99, 421, 219, 244, 245, 0, 0, 100,
	118, 113, 181, 399, 397, 127, 209, 134, 141, 188,
	248, 171, 194, 103, 233, 210, 417, 420, 415, 416,
	463, 464, 510, 511, 512, 488, 411, 0, 418, 419,
	0, 493, 500, 501, 467, 82, 91, 138, 247, 186,
	116, 235, 401, 414, 109, 424, 0, 0, 436, 441,
	442, 454, 456, 457, 458, 459, 466, 473, 474, 476,
	482, 483, 484, 485, 490, 497, 517, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 240, 243, 504, 492, 0, 449, 507, 423, 439,
	516, 440, 443, 480, 408, 462, 165, 437, 0, 427,
	403, 433, 404, 425, 451, 111, 455, 422, 494, 465,
	506, 137, 514, 139, 471, 0, 211, 153, 0, 0,
	453, 496, 460, 489, 448, 481, 413, 470, 508, 438,
	478, 509, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 475, 503, 435, 477,
	479, 402, 472, 0, 406, 409, 515, 499, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 452, 461, 486,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	0, 469, 0, 0, 0, 410, 407, 0, 0, 450,
	0, 0, 0, 412, 0, 429, 487, 0, 400, 119,
	491, 498, 447, 266, 502, 445, 444, 505, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 495, 426, 434, 105, 432, 193, 172, 231, 468,
	174, 192, 140, 221, 185, 230, 241, 242, 218, 239,
	246, 208, 86, 217, 389, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 513, 189, 110, 117, 107,
	164, 224, 225, 106, 249, 94, 238, 90, 398, 237,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	405, 0, 212, 234, 250, 99, 421, 219, 244, 245,
	0, 0, 100, 118, 113, 181, 399, 397, 392, 391,
	134, 141, 188, 248, 171, 194, 103, 233, 210, 417,
	420, 415, 416, 463, 464, 510, 511, 512, 488, 411,
	0, 418, 419, 0, 493, 500, 501, 467, 82, 91,
	138, 247, 186, 116, 235, 401, 414, 109, 424, 0,
	0, 436, 441, 442, 454, 456, 457, 458, 459, 466,
	473, 474, 476, 482, 483, 484, 485, 490, 497, 517,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 240, 243, 165, 0, 0, 0,
	0, 324, 0, 0, 0, 111, 0, 321, 0, 0,
	0, 137, 364, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	951, 0, 54, 0, 0, 322, 343, 342, 345, 346,
	347, 348, 0, 0, 101, 344, 349, 350, 351, 952,
	0, 0, 319, 336, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 334, 0, 0, 0,
	0, 377, 0, 335, 0, 0, 330, 331, 332, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 266, 0, 0, 375, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 241, 242, 218, 239,
	246, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 236, 189, 110, 117, 107,
	164, 224, 225, 106, 249, 94, 238, 90, 95, 237,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 250, 99, 0, 219, 244, 245,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 248, 171, 194, 103, 233, 210, 365,
	376, 371, 372, 369, 370, 368, 367, 366, 378, 357,
	358, 359, 360, 362, 0, 373, 374, 361, 82, 91,
	138, 247, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 240, 243, 165, 0, 0, 878,
	0, 324, 0, 0, 0, 111, 0, 321, 0, 0,
	0, 137, 364, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 322, 343, 342, 345, 346,
	347, 348, 0, 0, 101, 344, 349, 350, 351, 0,
	0, 0, 319, 336, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 334, 315, 0, 0,
	0, 377, 0, 335, 0, 0, 330, 331, 332, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 266, 0, 0, 375, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 241, 242, 218, 239,
	246, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 236, 189, 110, 117, 107,
	164, 224, 225, 106, 249, 94, 238, 90, 95, 237,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 250, 99, 0, 219, 244, 245,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 248, 171, 194, 103, 233, 210, 365,
	376, 371, 372, 369, 370, 368, 367, 366, 378, 357,
	358, 359, 360, 362, 0, 373, 374, 361, 82, 91,
	138, 247, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 240, 243, 165, 0, 0, 0,
	0, 324, 0, 0, 0, 111, 0, 321, 0, 0,
	0, 137, 364, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 579, 322, 343, 342, 345, 346,
	347, 348, 0, 0, 101, 344, 349, 350, 351, 0,
	0, 0, 319, 336, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 334, 0, 0, 0,
	0, 377, 0, 335, 0, 0, 330, 331, 332, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 266, 0, 0, 375, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 241, 242, 218, 239,
	246, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 236, 189, 110, 117, 107,
	164, 224, 225, 106, 249, 94, 238, 90, 95, 237,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 250, 99, 0, 219, 244, 245,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 248, 171, 194, 103, 233, 210, 365,
	376, 371, 372, 369, 370, 368, 367, 366, 378, 357,
	358, 359, 360, 362, 0, 373, 374, 361, 82, 91,
	138, 247, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 240, 243, 165, 0, 0, 0,
	0, 324, 0, 0, 0, 111, 0, 321, 0, 0,
	0, 137, 364, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 322, 343, 342, 345, 346,
	347, 348, 0, 0, 101, 344, 349, 350, 351, 0,
	0, 0, 319, 336, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 334, 315, 0, 0,
	0, 377, 0, 335, 0, 0, 330, 331, 332, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 266, 0, 0, 375, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 241, 242, 218, 239,
	246, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 236, 189, 110, 117, 107,
	164, 224, 225, 106, 249, 94, 238, 90, 95, 237,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 250, 99, 0, 219, 244, 245,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 248, 171, 194, 103, 233, 210, 365,
	376, 371, 372, 369, 370, 368, 367, 366, 378, 357,
	358, 359, 360, 362, 0, 373, 374, 361, 82, 91,
	138, 247, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 240, 243, 165, 0, 0, 0,
	0, 324, 0, 0, 0, 111, 0, 321, 0, 0,
	0, 137, 364, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 322, 343, 893, 345, 346,
	347, 348, 0, 0, 101, 344, 349, 350, 351, 0,
	0, 0, 319, 336, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 334, 315, 0, 0,
	0, 377, 0, 335, 0, 0, 330, 331, 332, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 266, 0, 0, 375, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 241, 242, 218, 239,
	246, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 236, 189, 110, 117, 107,
	164, 224, 225, 106, 249, 94, 238, 90, 95, 237,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 250, 99, 0, 219, 244, 245,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 248, 171, 194, 103, 233, 210, 365,
	376, 371, 372, 369, 370, 368, 367, 366, 378, 357,
	358, 359, 360, 362, 0, 373, 374, 361, 82, 91,
	138, 247, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 240, 243, 165, 0, 0, 0,
	0, 324, 0, 0, 0, 111, 0, 321, 0, 0,
	0, 137, 364, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 322, 343, 890, 345, 346,
	347, 348, 0, 0, 101, 344, 349, 350, 351, 0,
	0, 0, 319, 336, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 334, 315, 0, 0,
	0, 377, 0, 335, 0, 0, 330, 331, 332, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 266, 0, 0, 375, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 241, 242, 218, 239,
	246, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 236, 189, 110, 117, 107,
	164, 224, 225, 106, 249, 94, 238, 90, 95, 237,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 250, 99, 0, 219, 244, 245,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 248, 171, 194, 103, 233, 210, 365,
	376, 371, 372, 369, 370, 368, 367, 366, 378, 357,
	358, 359, 360, 362, 0, 373, 374, 361, 82, 91,
	138, 247, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 240, 243, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 324, 0, 0, 0, 111, 0, 321,
	0, 0, 0, 137, 364, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 322, 343, 342,
	345, 346, 347, 348, 0, 0, 101, 344, 349, 350,
	351, 0, 0, 0, 319, 336, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 334, 0,
	0, 0, 0, 377, 0, 335, 0, 0, 330, 331,
	332, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 266, 0, 0, 375, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 365, 376, 371, 372, 369, 370, 368, 367, 366,
	378, 357, 358, 359, 360, 362, 0, 373, 374, 361,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 165, 0,
	0, 0, 0, 324, 0, 0, 0, 111, 0, 321,
	0, 0, 0, 137, 364, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 322, 343, 342,
	345, 346, 347, 348, 0, 0, 101, 344, 349, 350,
	351, 0, 0, 0, 319, 336, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 334, 0,
	0, 0, 0, 377, 0, 335, 0, 0, 330, 331,
	332, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 266, 0, 0, 375, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 365, 376, 371, 372, 369, 370, 368, 367, 366,
	378, 357, 358, 359, 360, 362, 0, 373, 374, 361,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 364, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 322, 343, 342,
	345, 346, 347, 348, 0, 0, 101, 344, 349, 350,
	351, 0, 0, 0, 0, 336, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 334, 0,
	0, 0, 0, 377, 0, 335, 0, 0, 330, 331,
	332, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 266, 0, 0, 375, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 1525, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 365, 376, 371, 372, 369, 370, 368, 367, 366,
	378, 357, 358, 359, 360, 362, 0, 373, 374, 361,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 364, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 579, 322, 343, 342,
	345, 346, 347, 348, 0, 0, 101, 344, 349, 350,
	351, 0, 0, 0, 0, 336, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 334, 0,
	0, 0, 0, 377, 0, 335, 0, 0, 330, 331,
	332, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 266, 0, 0, 375, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 365, 376, 371, 372, 369, 370, 368, 367, 366,
	378, 357, 358, 359, 360, 362, 0, 373, 374, 361,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 364, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 322, 343, 342,
	345, 346, 347, 348, 0, 0, 101, 344, 349, 350,
	351, 0, 0, 0, 0, 336, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 334, 0,
	0, 0, 0, 377, 0, 335, 0, 0, 330, 331,
	332, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 266, 0, 0, 375, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 365, 376, 371, 372, 369, 370, 368, 367, 366,
	378, 357, 358, 359, 360, 362, 0, 373, 374, 361,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 612, 622, 623, 615, 616, 617,
	618, 619, 620, 621, 614, 0, 0, 624, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 266, 0, 0, 0, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 165, 0,
	0, 0, 601, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 603,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 598, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 599,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 266, 0, 0, 0, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 76, 77, 0, 73, 0, 0, 0, 78,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 165, 0,
	0, 0, 934, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 0, 936,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 266, 0, 0, 0, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 241, 242,
	218, 239, 246, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 236, 189, 110,
	117, 107, 164, 224, 225, 106, 249, 94, 238, 90,
	95, 237, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 250, 99, 0, 219,
	244, 245, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 248, 171, 194, 103, 233,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 247, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 240, 243, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 137, 0, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 266, 0, 0,
	0, 0, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 0, 0, 0, 105, 0,
	193, 172, 231, 0, 174, 192, 140, 221, 185, 230,
	241, 242, 218, 239, 246, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 236,
	189, 110, 117, 107, 164, 224, 225, 106, 249, 94,
	238, 90, 95, 237, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 212, 234, 250, 99,
	0, 219, 244, 245, 0, 0, 100, 118, 113, 181,
	157, 96, 127, 209, 134, 141, 188, 248, 171, 194,
	103, 233, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 91, 138, 247, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 240, 243,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 266,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 236, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	250, 99, 0, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 247, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 165, 0, 0, 0, 934, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 936, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 266,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 932, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 236, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	250, 99, 0, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 247, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 829, 0, 0, 830, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 266,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 236, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	250, 99, 0, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 247, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 715, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 714, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 266,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 236, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	250, 99, 0, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 247, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 266,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 236, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	250, 99, 0, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 247, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 936, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 266,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 236, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	250, 99, 0, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 247, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 603, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 266,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 236, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	250, 99, 0, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 247, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 165, 0, 0, 0, 0, 0, 0, 0,
	685, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 266,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 241, 242, 218, 239, 246, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 236, 189, 110, 117, 107, 164, 224, 225, 106,
	249, 94, 238, 90, 95, 237, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	250, 99, 0, 219, 244, 245, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 248,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 247, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	240, 243, 381, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 266, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 241,
	242, 218, 239, 246, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 236, 189,
	110, 117, 107, 164, 224, 225, 106, 249, 94, 238,
	90, 95, 237, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 250, 99, 0,
	219, 244, 245, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 248, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 247, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 240, 243, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 261, 0, 266, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 241,
	242, 218, 239, 246, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 236, 189,
	110, 117, 107, 164, 224, 225, 106, 249, 94, 238,
	90, 95, 237, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 250, 99, 0,
	219, 244, 245, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 248, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 247, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 240, 243, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 266, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 241,
	242, 218, 239, 246, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 236, 189,
	110, 117, 107, 164, 224, 225, 106, 249, 94, 238,
	90, 95, 237, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 250, 99, 0,
	219, 244, 245, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 248, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 247, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 240, 243, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 266, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 241,
	242, 218, 239, 246, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 236, 189,
	110, 117, 107, 164, 224, 225, 106, 249, 94, 238,
	90, 95, 237, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 250, 99, 0,
	219, 244, 245, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 248, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 247, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 240, 243, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 266, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 241,
	242, 218, 239, 246, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 236, 189,
	110, 117, 107, 164, 224, 225, 106, 249, 94, 238,
	90, 95, 237, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 250, 99, 0,
	219, 244, 245, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 248, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 247, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 240, 243,
}
var yyPact = [...]int{

	1803, -1000, -267, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 915, 937, -1000, -1000, -1000, -1000, -1000, -1000,
	279, 11450, 43, 111, 1, 15441, 110, 1487, 16101, -1000,
	8, -1000, -1000, -1000, 16101, -1000, -1000, -1000, -59, -83,
	-1000, 668, -1000, -1000, -1000, -1000, -1000, 909, 913, 772,
	894, 843, -1000, 8138, 77, 77, 15111, 6818, -1000, -1000,
	244, 16101, 103, 16101, -128, 81, 81, 81, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 109, 16101, 206, -1000, 16101, 75, 599, 75, 75,
	75, 16101, -1000, 173, -1000, -1000, -1000, 16101, 598, 865,
	3731, 74, 3731, -1000, 3731, 3731, -1000, 3731, 18, 3731,
	-58, 925, 19, 0, -1000, 3731, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	489, 873, 9470, 9470, 915, -1000, 668, -1000, -1000, -1000,
	866, -1000, -1000, 332, 934, -1000, 11120, 172, -1000, 9470,
	486, 686, -1000, -1000, 686, -1000, -1000, 126, -1000, -1000,
	10460, 10460, 10460, 10460, 10460, 10460, 10460, 10460, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 686, -1000, 9140, 686, 686, 686, 686, 686,
	686, 686, 686, 9470, 686, 686, 686, 686, 686, 686,
	686, 686, 686, 686, 686, 686, 686, 686, 686, 14774,
	13784, 16101, 706, 671, -1000, -1000, 169, 680, 6475, -93,
	-1000, -1000, -1000, 291, 13454, -1000, -1000, -1000, 864, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 596, 16101,
	-1000, 2402, -1000, 590, 3731, 92, 577, 304, 561, 16101,
	16101, 3731, 25, 58, 52, 16101, 684, 87, 16101, 889,
	805, 16101, 554, 540, -1000, 6132, -1000, 3731, 3731, -1000,
	-1000, -1000, 3731, 3731, 3731, 16101, 3731, 3731, -1000, -1000,
	-1000, -1000, 3731, 3731, -1000, 933, 284, -1000, -1000, -1000,
	-1000, 9470, 182, -1000, 802, -1000, -1000, -1000, -1000, -1000,
	-1000, 941, 204, 302, 165, 683, -1000, 478, 909, 489,
	843, 13124, 815, -1000, -1000, 16101, -1000, 9470, 9470, 420,
	-1000, 14444, -1000, -1000, 4760, 214, 10460, 348, 270, 10460,
	10460, 10460, 10460, 10460, 10460, 10460, 10460, 10460, 10460, 10460,
	10460, 10460, 10460, 10460, 413, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 538, -1000, 668, 629, 629, 187, 187,
	187, 187, 187, 187, 187, 10790, 7478, 489, 588, 315,
	9140, 8138, 8138, 9470, 9470, 8798, 8468, 8138, 901, 288,
	315, 16431, -1000, -1000, 10130, -1000, -1000, -1000, -1000, -1000,
	489, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15771, 15771,
	8138, 8138, 8138, 8138, 37, 16101, -1000, 646, 779, -1000,
	-1000, -1000, 891, 12464, 12794, 37, 611, 13784, 16101, -1000,
	-1000, 13784, 16101, 4417, 5789, 680, -93, 626, -1000, -98,
	-79, 7148, 153, -1000, -1000, -1000, -1000, 3388, 368, 603,
	331, -52, -1000, -1000, -1000, -1000, 698, -1000, -1000, 698,
	698, 698, 698, -17, -17, -17, -17, -1000, -1000, -1000,
	-1000, -1000, 736, 735, -1000, 698, 698, 698, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 732, 732, 732, 701,
	701, 754, -1000, 16101, 3731, 888, 3731, -1000, 76, -1000,
	16101, 16101, 16101, 16101, 16101, 118, 16101, 16101, 678, -1000,
	16101, 3731, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16101, 287, 16101,
	16101, 315, -1000, 446, 16101, -1000, 848, 9470, 9470, 5446,
	9470, -1000, -1000, -1000, 873, -1000, 901, 914, -1000, 857,
	856, 8138, -1000, -1000, 214, 290, -1000, -1000, 339, -1000,
	-1000, -1000, -1000, 162, 686, -1000, 745, -1000, -1000, -1000,
	-1000, 348, 10460, 10460, 10460, 320, 745, 1881, 1239, 1936,
	187, 513, 513, 183, 183, 183, 183, 183, 147, 147,
	-1000, -1000, -1000, 489, -1000, -1000, -1000, 489, 8138, 676,
	-1000, -1000, 9470, -1000, 489, 582, 582, 295, 321, 231,
	932, 582, 225, 927, 582, 582, 8138, 312, -1000, 9470,
	489, -1000, 155, -1000, 415, 651, 628, 582, 489, 582,
	582, 619, 686, -1000, 16431, 13784, 13784, 13784, 13784, 13784,
	-1000, 829, 825, -1000, 818, 817, 824, 16101, -1000, 584,
	12464, 156, 686, -1000, 14114, -1000, -1000, 924, 13784, 713,
	-1000, 713, -1000, 145, -1000, -1000, 626, -93, -100, -1000,
	-1000, -1000, -1000, 315, -1000, 434, 623, 3045, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 725, 534, -1000, 880, 174,
	184, 518, 879, -1000, -1000, -1000, 867, -1000, 318, -54,
	-1000, -1000, 404, -17, -17, -1000, -1000, 153, 863, 153,
	153, 153, 445, 445, -1000, -1000, -1000, -1000, 403, -1000,
	-1000, -1000, 398, -1000, 799, 15771, 3731, -1000, -1000, -1000,
	-1000, 180, 180, 198, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36, 707, -1000, -1000, -1000,
	-1000, 11, 24, 85, -1000, 3731, -1000, 284, -1000, 442,
	9470, -1000, -1000, -1000, -1000, 842, 315, 315, 143, -1000,
	-1000, 16101, -1000, -1000, -1000, -1000, 673, -1000, -1000, -1000,
	4074, 8138, -1000, 320, 745, 1806, -1000, 10460, 10460, -1000,
	-1000, 582, 8138, 315, -1000, -1000, -1000, 78, 413, 78,
	10460, 10460, -1000, 10460, 10460, -1000, -145, 645, 271, -1000,
	9470, 258, -1000, 5446, -1000, 10460, 10460, -1000, -1000, -1000,
	-1000, 784, 16431, 686, -1000, 12122, 15771, 718, -1000, 283,
	779, 710, 778, 667, -1000, -1000, -1000, -1000, 820, -1000,
	819, -1000, -1000, -1000, -1000, -1000, 101, 97, 94, 15771,
	-1000, 915, 9470, 713, -1000, -1000, 192, -1000, -1000, -105,
	-111, -1000, -1000, -1000, 3388, -1000, 3388, 15771, 56, -1000,
	518, 518, -1000, -1000, -1000, 704, 777, 10460, -1000, -1000,
	-1000, 589, 153, 153, -1000, 232, -1000, -1000, -1000, 573,
	-1000, 568, 622, 566, 16101, -1000, -1000, -1000, 469, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 504, -1000, 502, 16101, -1000, -1000, -1000, -1000, -1000,
	15771, -153, 495, 15771, 15771, 15771, 16101, -1000, 287, -1000,
	315, -1000, 5103, -1000, 924, 13784, -1000, -1000, 489, -1000,
	10460, 745, 745, -1000, -1000, 489, 698, 698, -1000, 698,
	701, -1000, 698, 3, 698, 2, 489, 489, 1744, 1679,
	1626, 1558, 686, -135, -1000, 315, 9470, -1000, 1455, 702,
	-1000, 874, 606, 615, -1000, -1000, 7808, 489, 551, 140,
	549, -1000, 915, 16431, 9470, -1000, -1000, 9470, 699, -1000,
	9470, -1000, -1000, -1000, 686, 686, 686, 549, 909, 315,
	-1000, -1000, -1000, -1000, 3045, -1000, 544, -1000, 698, -1000,
	-1000, -1000, 15771, -41, 940, 745, -1000, -1000, -1000, -1000,
	-1000, -17, 440, -17, 382, -1000, 372, 3731, 490, -1000,
	-1000, -1000, -1000, 84, -1000, -1000, 883, -1000, 5103, -1000,
	-1000, 697, 741, -1000, -1000, -1000, 921, 617, -1000, 745,
	-1000, -1000, 115, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10460, 10460, 10460, 10460, 10460, 489, 427, 315, 10460,
	10460, 872, -1000, 686, -1000, -1000, 687, 15771, 15771, -1000,
	15771, 909, -1000, 315, 315, 15771, 315, 15771, 15771, 15771,
	11780, -1000, 148, 15771, -1000, 510, -1000, 177, -1000, -149,
	153, -1000, 153, 574, 552, -1000, 545, -1000, 476, 686,
	616, -1000, 277, 15771, 16101, 918, 911, -1000, -1000, 415,
	415, 415, 415, 51, -1000, -1000, 415, 415, 939, -1000,
	686, -1000, 668, 125, -1000, -1000, -1000, 488, 485, 485,
	485, 156, 148, -1000, 467, 273, 424, -1000, 50, 15771,
	335, 871, -1000, 869, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35, 5103, 3388, 482, -1000, -1000, 9470, 9470, -1000,
	-1000, -1000, -1000, 489, 64, -161, -1000, -1000, 16431, 615,
	489, 15771, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 366,
	-1000, -1000, 16101, -1000, -1000, 369, -1000, -1000, -1000, 479,
	-1000, 15771, -1000, -1000, 707, 315, 614, -1000, 837, -150,
	-164, 610, -1000, -1000, -1000, 696, -1000, -1000, 35, 855,
	-153, -1000, 834, -1000, 15771, -1000, 31, -1000, -159, 472,
	29, -162, 764, 686, -172, 762, -1000, 931, 9800, -1000,
	-1000, 938, 160, 160, 415, 489, -1000, -1000, -1000, 62,
	400, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1190, 34, 469, 1183, 1181, 1180, 1174, 1172, 1171,
	1170, 1169, 1168, 1166, 1165, 1164, 1163, 1162, 1161, 1159,
	1158, 1156, 1154, 1153, 1151, 1149, 90, 1144, 1143, 1139,
	75, 1138, 76, 1135, 1133, 41, 222, 50, 42, 1223,
	1128, 25, 62, 59, 1126, 38, 1125, 1124, 80, 1122,
	1118, 56, 1117, 1116, 1563, 1113, 66, 1108, 11, 33,
	1104, 1103, 1102, 1100, 70, 411, 1099, 1098, 16, 1097,
	1096, 114, 1095, 58, 4, 15, 46, 19, 1093, 269,
	6, 1092, 57, 1091, 1089, 1088, 1087, 23, 1084, 61,
	1083, 20, 60, 1082, 9, 71, 30, 21, 7, 77,
	64, 1081, 24, 65, 53, 1080, 1079, 430, 51, 1078,
	1077, 48, 1071, 1070, 26, 1068, 111, 383, 1067, 1066,
	1063, 1058, 52, 0, 856, 132, 73, 1057, 1055, 1053,
	1627, 43, 54, 14, 1044, 37, 1464, 44, 1037, 1020,
	40, 1019, 1016, 1015, 1012, 1010, 1008, 1005, 1004, 87,
	1003, 1002, 1000, 29, 55, 993, 992, 63, 22, 988,
	987, 986, 47, 17, 985, 984, 69, 27, 982, 980,
	974, 972, 970, 31, 10, 969, 18, 966, 8, 962,
	28, 961, 5, 960, 13, 959, 2, 957, 12, 49,
	1, 956, 3, 954, 953, 78, 164, 89, 951, 107,
}
var yyR1 = [...]int{

	0, 193, 194, 194, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 197, 197, 48, 48, 49, 49, 95, 95,
	10, 10, 10, 10, 100, 100, 104, 104, 104, 105,
	105, 105, 105, 138, 138, 11, 11, 11, 11, 11,
	11, 11, 188, 188, 187, 186, 186, 185, 185, 184,
	17, 169, 171, 171, 170, 170, 170, 170, 163, 141,
	141, 141, 141, 141, 144, 144, 145, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 143, 143, 143, 143,
	143, 146, 146, 146, 146, 146, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 148, 148, 148, 148, 148, 148, 148, 148, 162,
	162, 149, 149, 157, 157, 158, 158, 158, 155, 155,
	156, 156, 159, 159, 159, 151, 151, 152, 152, 160,
	160, 153, 153, 153, 154, 154, 154, 161, 161, 161,
	161, 161, 150, 150, 164, 164, 179, 179, 178, 178,
	178, 168, 168, 175, 175, 175, 175, 175, 166, 166,
	167, 167, 177, 177, 176, 165, 165, 180, 180, 180,
	180, 191, 192, 190, 190, 190, 190, 190, 172, 172,
	172, 173, 173, 173, 174, 174, 174, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 108, 108, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 183, 181,
	181, 182, 182, 13, 18, 18, 14, 14, 14, 14,
	14, 15, 15, 19, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 112, 112, 110, 110, 113, 113, 111, 111,
	111, 114, 114, 114, 115, 115, 139, 139, 139, 21,
	21, 23, 23, 24, 25, 22, 22, 22, 22, 22,
	22, 22, 22, 16, 198, 26, 27, 27, 28, 28,
	28, 32, 32, 32, 30, 30, 31, 31, 37, 37,
	36, 36, 38, 38, 38, 38, 127, 127, 127, 126,
	126, 40, 40, 41, 41, 42, 42, 43, 43, 43,
	43, 57, 57, 94, 94, 96, 96, 44, 44, 44,
	44, 45, 45, 46, 46, 47, 47, 134, 134, 133,
	133, 133, 132, 132, 50, 50, 50, 52, 51, 51,
	51, 51, 53, 53, 55, 55, 54, 54, 56, 58,
	58, 58, 58, 59, 59, 39, 39, 39, 39, 39,
	39, 39, 109, 109, 61, 61, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 72, 72, 72, 72,
	72, 72, 62, 62, 62, 62, 62, 62, 62, 35,
	35, 73, 73, 73, 79, 74, 74, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 69,
	69, 69, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 199, 199, 71, 70, 70, 70, 70, 70, 70,
	33, 33, 33, 33, 33, 137, 137, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	83, 83, 34, 34, 81, 81, 82, 84, 84, 80,
	80, 80, 64, 64, 64, 64, 64, 64, 64, 64,
	66, 66, 66, 85, 85, 86, 86, 87, 87, 88,
	88, 89, 90, 90, 90, 91, 91, 91, 91, 92,
	92, 92, 63, 63, 63, 63, 63, 63, 93, 93,
	93, 93, 97, 97, 75, 75, 77, 77, 76, 78,
	98, 98, 102, 99, 99, 103, 103, 103, 103, 101,
	101, 101, 129, 129, 129, 106, 106, 116, 116, 117,
	117, 107, 107, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 119, 119, 119, 120, 120, 121, 121,
	121, 128, 128, 124, 124, 125, 125, 130, 130, 131,
	131, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 195,
	196, 135, 136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 10, 8,
	7, 7, 7, 9, 7, 7, 4, 5, 7, 5,
	5, 5, 12, 7, 5, 9, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 3, 4, 4, 4,
	4, 4, 4, 3, 2, 3, 3, 2, 3, 4,
	3, 7, 5, 4, 2, 4, 4, 3, 3, 5,
	2, 3, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	2, 3, 3, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 1,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 8, 8, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -193, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 150, 119, 143, 50, 164,
	165, 167, 168, 25, 144, 145, 148, 149, 31, 32,
	121, -195, 8, 250, 54, -194, 348, -87, 15, -28,
	5, -26, -198, -26, -26, -26, -26, -26, -169, -171,
	54, 90, -121, 125, 72, 242, 122, 123, 129, -124,
	57, -123, 260, 136, 292, 293, 164, 175, 169, 197,
	189, 261, 294, 137, 187, 190, 229, 135, 295, 217,
	224, 66, 167, 238, 296, 146, 185, 181, 297, 269,
	179, 27, 298, 226, 202, 299, 265, 180, 225, 121,
	300, 139, 133, 301, 203, 207, 302, 230, 303, 304,
	305, 173, 174, 306, 232, 201, 134, 33, 262, 35,
	154, 233, 205, 307, 200, 196, 308, 309, 310, 311,
	199, 172, 195, 39, 209, 208, 210, 228, 192, 312,
	313, 314, 140, 315, 182, 18, 316, 317, 318, 319,
	320, 236, 149, 321, 152, 322, 323, 324, 325, 326,
	327, 227, 204, 206, 130, 156, 264, 328, 234, 178,
	329, 141, 153, 148, 237, 142, 330, 331, 332, 333,
	334, 335, 336, 168, 337, 338, 339, 340, 163, 231,
	240, 38, 214, 341, 171, 132, 342, 165, 160, 219,
	193, 155, 343, 344, 183, 184, 198, 170, 194, 166,
	157, 150, 345, 239, 215, 266, 177, 191, 188, 161,
	346, 158, 159, 347, 220, 221, 162, 263, 235, 186,
	216, -107, 125, 221, 127, 123, 123, 124, 125, 242,
	122, 123, -54, -130, 57, -123, 125, 123, 108, 190,
	229, 115, 218, 226, 124, 33, 227, 156, -139, 123,
	-110, 217, 220, 221, 162, 57, 231, 230, 222, -130,
	166, -135, -54, -135, -135, -135, -135, 219, 219, -135,
	-2, -91, 17, 16, -5, -3, -195, 6, 20, 21,
	-32, 40, 41, -27, -38, 99, -39, -130, -60, 74,
	-65, 29, 57, -123, 23, -64, -61, -80, -78, -79,
	108, 109, 110, 97, 98, 105, 75, 111, -69, -67,
	-68, -70, 59, 58, 67, 60, 61, 62, 63, 68,
	69, 70, -124, -76, -195, 44, 45, 251, 252, 253,
	254, 259, 255, 77, 34, 241, 249, 248, 247, 245,
	246, 243, 244, 257, 258, 128, 242, 103, 250, -107,
	-107, 11, -48, -49, -54, -56, -130, -99, -138, 166,
	-103, 231, 230, -125, -101, -124, -122, 229, 190, 228,
	120, 267, 73, 22, 24, 212, 76, 108, 16, 77,
	107, 251, 115, 48, 268, 243, 244, 241, 253, 254,
	242, 218, 29, 10, 270, 25, 144, 21, 101, 117,
	80, 81, 147, 23, 145, 70, 273, 19, 51, 11,
	13, 274, 275, 14, 128, 127, 92, 124, 46, 8,
	111, 26, 89, 42, 276, 28, 277, 278, 279, 280,
	44, 90, 17, 245, 246, 31, 281, 259, 151, 103,
	49, 36, 74, 282, 283, 68, 284, 71, 52, 72,
	15, 47, 285, 286, 287, 288, 91, 118, 250, 45,
	289, 122, 6, 256, 30, 143, 43, 290, 123, 79,
	257, 258, 126, 69, 5, 129, 32, 9, 50, 53,
	247, 248, 249, 177, 34, 78, 12, 291, -170, 90,
	-163, 57, -54, 124, -54, 250, -117, 128, -117, -117,
	123, -54, 115, 117, 120, 52, -18, -54, -116, 128,
	57, -116, -116, -116, -54, 112, -54, 57, 30, -136,
	-195, -125, 242, 57, 156, 123, 157, 125, -136, -136,
	-136, -136, 160, 161, -136, -113, -112, 224, 225, 219,
	223, 12, 161, 219, 159, -136, -135, -135, -196, 56,
	-92, 19, 31, -39, -130, -88, -89, -39, -87, -2,
	-26, 36, -30, 21, 65, 11, -127, 73, 72, 89,
	-126, 22, -124, 59, 112, -39, -62, 92, 74, 90,
	91, 76, 94, 93, 104, 97, 98, 99, 100, 101,
	102, 103, 95, 96, 107, 82, 83, 84, 85, 86,
	87, 88, -109, -195, -79, -195, 113, 114, -65, -65,
	-65, -65, -65, -65, -65, -65, -195, -2, -74, -39,
	-195, -195, -195, -195, -195, -195, -195, -195, -195, -83,
	-39, -195, -199, -71, -195, -199, -71, -199, -71, -199,
	-195, -199, -71, -199, -71, -199, -199, -71, -195, -195,
	-195, -195, -195, -195, -55, 26, -54, -41, -42, -43,
	-44, -57, -79, -195, -54, -54, -48, -197, 55, 11,
	53, -197, 55, 112, 55, -99, 166, -100, -104, 232,
	234, 82, -129, -124, 59, 29, 30, 56, 55, -54,
	-141, -144, -145, -147, -146, -148, -142, -143, 177, 187,
	188, 108, 191, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 30, 146, 183, 184, 185, 186, 203,
	204, 205, 206, 207, 208, 209, 210, 169, 189, 261,
	170, 171, 172, 173, 174, 175, 178, 179, 180, 181,
	182, 57, -136, 125, 57, 74, 57, -54, -54, -136,
	158, 158, 123, 123, 163, -54, 55, 126, -48, 23,
	52, -54, 57, 57, -131, -130, -122, -136, -136, -136,
	-136, -136, -54, -136, -136, -136, -136, 11, -111, 11,
	92, -39, -115, 90, 52, 9, 92, 55, 18, 112,
	55, -90, 24, 25, -91, -196, -32, -66, -124, 60,
	63, -31, 43, -54, -39, -39, -72, 68, 74, 69,
	70, -126, 99, -131, -125, -122, -65, -73, -76, -79,
	64, 92, 90, 91, 76, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-137, 57, 59, 57, -64, -64, -124, -37, 21, -36,
	-38, -196, 55, -196, -2, -36, -36, -39, -39, -80,
	59, -36, -80, 59, -36, -36, -30, -81, -82, 78,
	-80, -124, -130, -196, -65, -124, -124, -36, -37, -36,
	-36, -95, 152, -54, 30, 55, -50, -52, -51, -53,
	42, 46, 48, 43, 44, 45, 49, -134, 22, -41,
	-195, -133, 152, -132, 22, -130, 59, -95, 53, -41,
	-54, -41, -56, -130, 99, -103, -100, 55, 233, 235,
	236, 52, 71, -39, -154, 107, -172, -173, -174, -125,
	59, 60, -163, -164, -165, -175, 138, -180, 130, 132,
	129, -166, 139, 124, 28, 56, -159, 68, 74, -155,
	215, -149, 54, -149, -149, -149, -149, -153, 190, -153,
	-153, -153, 54, 54, -149, -149, -149, -157, 54, -157,
	-157, -158, 54, -158, -128, 53, -54, -136, 23, -136,
	-118, 120, 117, 118, -183, 116, 212, 190, 66, 29,
	15, 251, 152, 266, 57, 153, -54, -54, -54, -54,
	-54, 120, 117, -54, -54, -54, -136, -54, -114, 90,
	12, -130, -130, 59, -54, 38, -39, -39, -131, -89,
	-92, -106, 19, 11, 34, 34, -36, 68, 69, 70,
	112, -195, -73, -65, -65, -65, -35, 147, 73, -196,
	-196, -36, 55, -39, -196, -196, -196, 55, 53, 22,
	11, 11, -196, 11, 11, -196, -196, -36, -84, -82,
	80, -39, -196, 112, -196, 55, 55, -196, -196, -196,
	-196, -63, 30, 34, -2, -195, -195, -98, -102, -80,
	-42, -43, -43, -42, -43, 42, 42, 42, 47, 42,
	47, 42, -51, -130, -196, -58, 50, 127, 51, -195,
	-132, -59, 12, -41, -59, -59, 112, -104, -105, 237,
	234, 240, 57, 59, 55, -174, 82, 54, 57, 28,
	-166, -166, -167, 57, -167, 28, -151, 29, 68, -156,
	216, 60, -153, -153, -154, 30, -154, -154, -154, -162,
	59, -162, 60, 60, 52, -124, -136, -135, -108, -189,
	131, 135, 138, 139, 133, 124, 28, 130, 132, 152,
	129, -108, -189, 131, -119, -120, 126, 22, 124, 28,
	152, -188, 53, 158, 212, 158, 126, -136, -111, 59,
	-39, 39, 112, -54, -40, 11, 99, -125, -37, -35,
	73, -65, -65, -196, -38, -140, 108, 187, 146, 185,
	181, 201, 192, 214, 183, 215, -137, -140, -65, -65,
	-65, -65, 260, -87, 81, -39, 79, -125, -65, -65,
	-97, 52, -98, -75, -77, -76, -195, -2, -93, -124,
	-96, -124, -59, 55, 82, -46, -45, 52, 53, -47,
	52, -45, 42, 42, 124, 124, 124, -96, -87, -39,
	-59, 234, 238, 239, -173, -174, -177, -176, -124, -180,
	-167, -167, 54, -152, 52, -65, 56, -154, -154, 57,
	108, 56, 55, 56, 55, 56, 55, -54, 54, -163,
	-135, 57, -135, 57, -54, -135, -124, -186, 263, -187,
	57, -124, -124, -124, -54, -114, -59, -41, -196, -65,
	-196, -149, -149, -149, -158, -149, 174, -149, 174, -196,
	-196, 19, 19, 19, 19, -195, -34, 256, -39, 55,
	55, 27, -97, 55, -196, -196, -196, 55, 112, -196,
	55, -87, -102, -39, -39, 54, -39, -195, -195, -195,
	-196, -91, 56, 55, -149, -94, -124, -160, 212, 9,
	-153, 59, -153, 60, 60, -136, -163, -135, 126, 26,
	-185, -184, -125, 54, 53, -85, 13, -153, 57, -65,
	-65, -65, -65, -65, -196, 59, -65, -65, 28, -77,
	34, -2, -195, -124, -124, -124, -91, -94, -94, -94,
	-94, -133, -179, -178, 53, 134, 66, -176, 56, 55,
	-161, 130, 28, 129, -68, -154, -154, 56, 56, 56,
	57, -195, 55, 82, -94, -54, -86, 14, 16, -196,
	-196, -196, -196, -33, 92, 263, -196, -196, 9, -75,
	-2, 112, 56, -196, -196, -196, -58, -178, 57, -168,
	82, 59, 141, -124, -150, 66, 28, 28, -135, -181,
	-182, 152, -184, -174, 56, -39, -74, -196, 261, 49,
	264, -98, -196, -124, 60, -54, 59, -196, 55, -124,
	-188, 39, 262, 265, 54, -182, 34, -186, 39, -94,
	154, 263, 56, 155, 264, -191, -192, 52, -195, 265,
	-192, 52, 10, 9, -65, 151, -190, 142, 137, 140,
	30, -190, -196, -196, 136, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 567, 0, 324, 324, 324, 324, 324, 324,
	0, 638, 621, 0, 0, 0, 0, -2, 310, 311,
	0, 313, 314, 941, 941, 941, 941, 941, 0, 0,
	941, 0, 35, 36, 939, 1, 3, 575, 0, 0,
	328, 331, 326, 0, 621, 621, 0, 0, 65, 66,
	0, 0, 0, 928, 0, 619, 619, 619, 639, 640,
	643, 644, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 0, 0, 0, 622, 0, 617, 0, 617, 617,
	617, 0, 262, 396, 647, 648, 928, 0, 0, 0,
	942, 0, 942, 274, 942, 942, 277, 942, 0, 942,
	0, 284, 0, 0, 290, 942, 307, 308, 295, 309,
	312, 315, 316, 317, 318, 319, 320, 941, 941, 323,
	29, 579, 0, 0, 567, 31, 0, 324, 329, 330,
	334, 332, 333, 325, 0, 342, 346, 0, 405, 0,
	410, 412, -2, -2, 0, 447, 448, 449, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 475, 476,
	477, 478, 552, 553, 554, 555, 556, 557, 558, 559,
	414, 415, 549, 599, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 0, 511, 511, 511, 511, 511,
	511, 511, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 46, 396, 50, 0, 916,
	603, -2, -2, 0, 0, 645, 646, -2, 782, -2,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 0, 0,
	84, 0, 82, 0, 942, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 261, 0, 263, 942, 942, 266,
	943, 944, 942, 942, 942, 0, 942, 942, 273, 275,
	276, 278, 942, 942, 280, 0, 298, 296, 297, 292,
	293, 0, 304, 287, 288, 291, 321, 322, 30, 940,
	24, 0, 0, 576, 0, 568, 569, 572, 575, 29,
	331, 0, 336, 335, 327, 0, 343, 0, 0, 0,
	347, 0, 349, 350, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 433, 434, 435, 436,
	437, 438, 411, 0, 425, 0, 0, 0, 467, 468,
	469, 470, 471, 472, 473, 0, 338, 29, 0, 445,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	541, 0, 495, 503, 0, 496, 504, 497, 505, 498,
	0, 499, 506, 500, 507, 501, 502, 508, 0, 0,
	0, 338, 0, 0, 48, 0, 395, 0, 353, 355,
	356, 357, -2, 0, 379, -2, 0, 0, 0, 42,
	43, 0, 0, 0, 0, 51, 916, 53, 54, 0,
	0, 0, 164, 612, 613, 614, 610, 208, 0, 0,
	152, 148, 90, 91, 92, 93, 141, 95, 96, 141,
	141, 141, 141, 161, 161, 161, 161, 124, 125, 126,
	127, 128, 0, 0, 111, 141, 141, 141, 115, 131,
	132, 133, 134, 135, 136, 137, 138, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 143, 143, 143, 145,
	145, 641, 68, 0, 942, 0, 942, 80, 0, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 618,
	0, 942, 259, 260, 397, 649, 650, 264, 265, 267,
	268, 269, 270, 271, 272, 279, 283, 0, 301, 0,
	0, 285, 286, 0, 0, 580, 0, 0, 0, 0,
	0, 571, 573, 574, 579, 32, 334, 0, 560, 0,
	0, 0, 337, 27, 406, 407, 409, 426, 0, 428,
	430, 348, 344, 0, 550, -2, 416, 417, 441, 442,
	443, 0, 0, 0, 0, 439, 421, 0, 452, 453,
	454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
	466, 525, 526, 0, 464, 465, 474, 0, 0, 339,
	340, 444, 0, 598, 29, 0, 0, 0, 0, 449,
	552, 0, 449, 552, 0, 0, 0, 547, 544, 0,
	0, 549, 0, 512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 394, 0, 0, 0, 0, 0, 0,
	384, 0, 0, 387, 0, 0, 0, 0, 378, 0,
	0, 399, 861, 380, 0, 382, 383, 403, 0, 403,
	45, 403, 47, 0, 398, 604, 52, 0, 0, 57,
	58, 605, 606, 607, 608, 0, 81, 209, 211, 214,
	215, 216, 85, 86, 87, 0, 0, 196, 0, 0,
	190, 190, 0, 188, 189, 83, 155, 153, 0, 150,
	149, 94, 0, 161, 161, 118, 119, 164, 0, 164,
	164, 164, 0, 0, 112, 113, 114, 106, 0, 107,
	108, 109, 0, 110, 0, 0, 942, 70, 620, 71,
	941, 236, 236, 633, 227, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 0, 72, 229, 231, 230,
	234, 0, 0, 0, 254, 942, 258, 298, 282, 0,
	0, 299, 300, 305, 289, 0, 577, 578, 0, 570,
	25, 0, 615, 616, 561, 562, 351, 427, 429, 431,
	0, 338, 418, 439, 422, 0, 419, 0, 0, 413,
	479, 0, 0, 446, -2, 482, 483, 0, 0, 0,
	0, 0, 518, 0, 0, 519, 0, 567, 0, 545,
	0, 0, 494, 0, 513, 0, 0, 514, 515, 516,
	517, 592, 0, 0, -2, 0, 0, 403, 600, 0,
	354, 373, 375, 0, 370, 385, 386, 388, 0, 390,
	0, 392, 393, 358, 360, 361, 0, 0, 0, 0,
	381, 567, 0, 403, 40, 41, 0, 55, 56, 0,
	0, 62, 165, 166, 0, 212, 0, 0, 0, 183,
	190, 190, 186, 191, 187, 0, 157, 0, 154, 89,
	151, 0, 164, 164, 120, 0, 121, 122, 123, 0,
	139, 0, 0, 0, 0, 642, 69, 217, 0, 941,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 941, 0, 0, 941, 634, 635, 636, 637,
	0, 75, 0, 0, 0, 0, 0, 257, 301, 302,
	303, 581, 0, 26, 403, 0, 345, 551, 0, 420,
	0, 440, 423, 480, 341, 0, 141, 141, 530, 141,
	145, 533, 141, 535, 141, 538, 0, 0, 0, 0,
	0, 0, 0, 542, 493, 548, 0, 550, 0, 0,
	33, 0, 592, 582, 594, 596, 0, 29, 0, 588,
	0, 365, 567, 0, 0, 367, 374, 0, 0, 368,
	0, 369, 389, 391, 0, 0, 0, 0, 575, 404,
	39, 59, 60, 61, 210, 213, 0, 192, 141, 195,
	184, 185, 0, 159, 0, 156, 142, 116, 117, 162,
	163, 161, 0, 161, 0, 146, 0, 942, 0, 941,
	220, 221, 222, 0, 224, 225, 0, 228, 0, 73,
	74, 0, 0, 233, 255, 281, 563, 352, 481, 424,
	484, 527, 161, 531, 532, 534, 536, 537, 539, 486,
	485, 0, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 0, 34, 0, 597, -2, 0, 0, 0, 49,
	0, 575, 601, 602, 371, 0, 376, 0, 0, 0,
	379, 38, 175, 0, 194, 0, 363, 167, 160, 0,
	164, 140, 164, 0, 0, 67, 0, 219, 0, 0,
	76, 77, 0, 0, 0, 565, 0, 528, 529, 0,
	0, 0, 0, 520, 492, 543, 0, 0, 0, 595,
	0, -2, 0, 590, 589, 366, 37, 0, 0, 0,
	0, 399, 174, 176, 0, 181, 0, 193, 0, 0,
	172, 0, 169, 171, 158, 129, 130, 144, 147, 941,
	223, 0, 0, 0, 0, 235, 28, 0, 0, 487,
	489, 488, 490, 0, 0, 0, 509, 510, 0, 585,
	29, 0, 372, 400, 401, 402, 362, 177, 178, 0,
	182, 180, 0, 364, 88, 0, 168, 170, 218, 0,
	249, 0, 78, 79, 72, 566, 564, 491, 0, 0,
	0, 593, -2, 591, 179, 0, 173, 248, 0, 0,
	75, 521, 0, 524, 0, 250, 0, 232, 522, 0,
	0, 0, 197, 0, 0, 198, 199, 0, 0, 523,
	200, 0, 0, 0, 0, 0, 201, 203, 204, 0,
	0, 202, 251, 252, 205, 206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 348,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:323
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:328
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:329
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:333
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:355
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:361
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:369
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:379
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:402
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:406
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:413
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:425
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:437
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:441
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:457
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:461
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:470
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:475
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:479
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:489
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:494
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:498
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:568
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:579
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:585
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:590
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:607
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:622
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:644
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:661
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:668
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:672
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:683
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:687
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:691
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:697
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:932
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:937
		{
			yyVAL.sqlVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:941
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:946
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:950
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:962
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:968
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:976
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:985
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:989
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:995
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1012
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.colKeyOpt = colKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1077
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1082
		{
			yyVAL.sqlVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1092
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1116
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1127
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1178
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1182
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1194
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1205
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1209
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1213
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1217
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1229
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1243
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1247
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1251
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1286
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1290
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1300
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1304
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1311
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1318
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1322
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1326
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1334
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1339
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1421
		{
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1423
		{
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1439
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 251:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1455
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 252:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1459
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1471
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1475
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1491
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1496
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1504
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1508
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1599
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1604
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1622
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1628
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = "full "
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1685
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1709
		{
			yyVAL.showFilter = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1713
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1723
		{
			yyVAL.showFilter = nil
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.str = SessionStr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = GlobalStr
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Begin{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1761
		{
			yyVAL.statement = &Begin{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &Commit{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &Rollback{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1788
		{
			yyVAL.statement = &OtherRead{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &OtherRead{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			setAllowComments(yylex, true)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1822
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1828
		{
			yyVAL.bytes2 = nil
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1832
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = UnionStr
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1842
		{
			yyVAL.str = UnionAllStr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1846
		{
			yyVAL.str = UnionDistinctStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = SQLCacheStr
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1864
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.str = DistinctStr
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = StraightJoinHint
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1882
		{
			yyVAL.selectExprs = nil
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1892
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1896
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1906
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1910
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1914
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1927
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1934
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1939
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1943
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1967
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1987
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2003
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2020
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2024
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2028
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2040
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2044
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2050
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2055
		{
			yyVAL.empty = struct{}{}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.empty = struct{}{}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2060
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = JoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = JoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = JoinStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = StraightJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2101
		{
			yyVAL.str = LeftJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2105
		{
			yyVAL.str = LeftJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2109
		{
			yyVAL.str = RightJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2113
		{
			yyVAL.str = RightJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = NaturalJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2123
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2133
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2158
		{
			yyVAL.indexHints = nil
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2162
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2166
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2170
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = nil
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2215
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2225
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2229
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2239
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2243
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2247
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2251
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2259
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2263
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2267
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.str = IsNullStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2281
		{
			yyVAL.str = IsNotNullStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.str = IsTrueStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2289
		{
			yyVAL.str = IsNotTrueStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.str = IsFalseStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2297
		{
			yyVAL.str = IsNotFalseStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = EqualStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = LessThanStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2311
		{
			yyVAL.str = GreaterThanStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2315
		{
			yyVAL.str = LessEqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.str = GreaterEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.str = NotEqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2366
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2464
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2472
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2494
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2708
		{
			yyVAL.str = BooleanModeStr
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2712
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = QueryExpansionStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2791
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2800
		{
			yyVAL.str = string("")
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2804
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2810
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2820
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2825
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2839
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2843
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &NullVal{}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2901
		{
			yyVAL.exprs = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2905
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2919
		{
			yyVAL.orderBy = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2944
		{
			yyVAL.str = AscScr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.str = AscScr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.str = DescScr
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2957
		{
			yyVAL.limit = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2965
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2969
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2974
		{
			yyVAL.str = ""
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.str = ForUpdateStr
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2982
		{
			yyVAL.str = ShareModeStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2995
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3008
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3012
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3016
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3027
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3031
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3035
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3040
		{
			yyVAL.updateExprs = nil
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3044
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3050
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3090
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3096
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3106
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3112
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3116
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3120
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3124
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.bytes = []byte("charset")
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.expr = &Default{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3155
		{
			yyVAL.byt = 0
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3157
		{
			yyVAL.byt = 1
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3160
		{
			yyVAL.byt = 0
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3162
		{
			yyVAL.byt = 1
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3165
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.str = IgnoreStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3194
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3212
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3214
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3246
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3560
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			decNesting(yylex)
		}
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3574
		{
			skipToEnd(yylex)
		}
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3579
		{
			skipToEnd(yylex)
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3583
		{
			skipToEnd(yylex)
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3587
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
