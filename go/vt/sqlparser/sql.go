// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const UNIQUE = 57377
const KEY = 57378
const SYSTEM_TIME = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const ELSEIF = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const INTERVAL = 57442
const JSON_EXTRACT_OP = 57443
const JSON_UNQUOTE_EXTRACT_OP = 57444
const CREATE = 57445
const ALTER = 57446
const DROP = 57447
const RENAME = 57448
const ANALYZE = 57449
const ADD = 57450
const FLUSH = 57451
const MODIFY = 57452
const CHANGE = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const INDEXES = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const KEY_BLOCK_SIZE = 57466
const CHECK = 57467
const ACTION = 57468
const CASCADE = 57469
const CONSTRAINT = 57470
const FOREIGN = 57471
const NO = 57472
const REFERENCES = 57473
const RESTRICT = 57474
const FIRST = 57475
const AFTER = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const FORMAT = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const TRIGGERS = 57493
const FUNCTION = 57494
const VINDEX = 57495
const VINDEXES = 57496
const STATUS = 57497
const VARIABLES = 57498
const WARNINGS = 57499
const SEQUENCE = 57500
const EACH = 57501
const ROW = 57502
const BEFORE = 57503
const FOLLOWS = 57504
const PRECEDES = 57505
const DEFINER = 57506
const INVOKER = 57507
const INOUT = 57508
const OUT = 57509
const DETERMINISTIC = 57510
const CONTAINS = 57511
const READS = 57512
const MODIFIES = 57513
const SQL = 57514
const DATA = 57515
const SECURITY = 57516
const CLASS_ORIGIN = 57517
const SUBCLASS_ORIGIN = 57518
const MESSAGE_TEXT = 57519
const MYSQL_ERRNO = 57520
const CONSTRAINT_CATALOG = 57521
const CONSTRAINT_SCHEMA = 57522
const CONSTRAINT_NAME = 57523
const CATALOG_NAME = 57524
const SCHEMA_NAME = 57525
const TABLE_NAME = 57526
const COLUMN_NAME = 57527
const CURSOR_NAME = 57528
const SIGNAL = 57529
const SQLSTATE = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const MEDIUMINT = 57539
const INT = 57540
const INTEGER = 57541
const BIGINT = 57542
const INTNUM = 57543
const REAL = 57544
const DOUBLE = 57545
const FLOAT_TYPE = 57546
const DECIMAL = 57547
const NUMERIC = 57548
const DEC = 57549
const FIXED = 57550
const PRECISION = 57551
const TIME = 57552
const TIMESTAMP = 57553
const DATETIME = 57554
const YEAR = 57555
const CHAR = 57556
const VARCHAR = 57557
const BOOL = 57558
const CHARACTER = 57559
const VARBINARY = 57560
const NCHAR = 57561
const NVARCHAR = 57562
const NATIONAL = 57563
const VARYING = 57564
const TEXT = 57565
const TINYTEXT = 57566
const MEDIUMTEXT = 57567
const LONGTEXT = 57568
const LONG = 57569
const BLOB = 57570
const TINYBLOB = 57571
const MEDIUMBLOB = 57572
const LONGBLOB = 57573
const JSON = 57574
const ENUM = 57575
const GEOMETRY = 57576
const POINT = 57577
const LINESTRING = 57578
const POLYGON = 57579
const GEOMETRYCOLLECTION = 57580
const MULTIPOINT = 57581
const MULTILINESTRING = 57582
const MULTIPOLYGON = 57583
const NULLX = 57584
const AUTO_INCREMENT = 57585
const APPROXNUM = 57586
const SIGNED = 57587
const UNSIGNED = 57588
const ZEROFILL = 57589
const COLLATION = 57590
const DATABASES = 57591
const SCHEMAS = 57592
const TABLES = 57593
const VITESS_METADATA = 57594
const VSCHEMA = 57595
const FULL = 57596
const PROCESSLIST = 57597
const COLUMNS = 57598
const FIELDS = 57599
const ENGINES = 57600
const PLUGINS = 57601
const NAMES = 57602
const CHARSET = 57603
const GLOBAL = 57604
const SESSION = 57605
const ISOLATION = 57606
const LEVEL = 57607
const READ = 57608
const WRITE = 57609
const ONLY = 57610
const REPEATABLE = 57611
const COMMITTED = 57612
const UNCOMMITTED = 57613
const SERIALIZABLE = 57614
const CURRENT_TIMESTAMP = 57615
const DATABASE = 57616
const CURRENT_DATE = 57617
const CURRENT_USER = 57618
const CURRENT_TIME = 57619
const LOCALTIME = 57620
const LOCALTIMESTAMP = 57621
const UTC_DATE = 57622
const UTC_TIME = 57623
const UTC_TIMESTAMP = 57624
const REPLACE = 57625
const CONVERT = 57626
const CAST = 57627
const SUBSTR = 57628
const SUBSTRING = 57629
const GROUP_CONCAT = 57630
const SEPARATOR = 57631
const TIMESTAMPADD = 57632
const TIMESTAMPDIFF = 57633
const OVER = 57634
const WINDOW = 57635
const GROUPING = 57636
const GROUPS = 57637
const AVG = 57638
const BIT_AND = 57639
const BIT_OR = 57640
const BIT_XOR = 57641
const COUNT = 57642
const JSON_ARRAYAGG = 57643
const JSON_OBJECTAGG = 57644
const MAX = 57645
const MIN = 57646
const STDDEV_POP = 57647
const STDDEV = 57648
const STD = 57649
const STDDEV_SAMP = 57650
const SUM = 57651
const VAR_POP = 57652
const VARIANCE = 57653
const VAR_SAMP = 57654
const CUME_DIST = 57655
const DENSE_RANK = 57656
const FIRST_VALUE = 57657
const LAG = 57658
const LAST_VALUE = 57659
const LEAD = 57660
const NTH_VALUE = 57661
const NTILE = 57662
const ROW_NUMBER = 57663
const PERCENT_RANK = 57664
const RANK = 57665
const MATCH = 57666
const AGAINST = 57667
const BOOLEAN = 57668
const LANGUAGE = 57669
const WITH = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const ARRAY = 57674
const DESCRIPTION = 57675
const EMPTY = 57676
const EXCEPT = 57677
const JSON_TABLE = 57678
const LATERAL = 57679
const MEMBER = 57680
const RECURSIVE = 57681
const ACTIVE = 57682
const ADMIN = 57683
const BUCKETS = 57684
const CLONE = 57685
const COMPONENT = 57686
const DEFINITION = 57687
const ENFORCED = 57688
const EXCLUDE = 57689
const FOLLOWING = 57690
const GEOMCOLLECTION = 57691
const GET_MASTER_PUBLIC_KEY = 57692
const HISTOGRAM = 57693
const HISTORY = 57694
const INACTIVE = 57695
const INVISIBLE = 57696
const LOCKED = 57697
const MASTER_COMPRESSION_ALGORITHMS = 57698
const MASTER_PUBLIC_KEY_PATH = 57699
const MASTER_TLS_CIPHERSUITES = 57700
const MASTER_ZSTD_COMPRESSION_LEVEL = 57701
const NESTED = 57702
const NETWORK_NAMESPACE = 57703
const NOWAIT = 57704
const NULLS = 57705
const OJ = 57706
const OLD = 57707
const OPTIONAL = 57708
const ORDINALITY = 57709
const ORGANIZATION = 57710
const OTHERS = 57711
const PATH = 57712
const PERSIST = 57713
const PERSIST_ONLY = 57714
const PRECEDING = 57715
const PRIVILEGE_CHECKS_USER = 57716
const PROCESS = 57717
const RANDOM = 57718
const REFERENCE = 57719
const REQUIRE_ROW_FORMAT = 57720
const RESOURCE = 57721
const RESPECT = 57722
const RESTART = 57723
const RETAIN = 57724
const REUSE = 57725
const ROLE = 57726
const SECONDARY = 57727
const SECONDARY_ENGINE = 57728
const SECONDARY_LOAD = 57729
const SECONDARY_UNLOAD = 57730
const SKIP = 57731
const SRID = 57732
const THREAD_PRIORITY = 57733
const TIES = 57734
const UNBOUNDED = 57735
const VCPU = 57736
const VISIBLE = 57737
const SYSTEM = 57738

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"DATA",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 35,
	131, 863,
	-2, 128,
	-1, 43,
	172, 469,
	173, 469,
	-2, 457,
	-1, 50,
	1, 1227,
	414, 1227,
	-2, 489,
	-1, 365,
	117, 871,
	-2, 867,
	-1, 366,
	117, 872,
	-2, 868,
	-1, 467,
	87, 1151,
	117, 1151,
	-2, 69,
	-1, 468,
	87, 1063,
	117, 1063,
	-2, 70,
	-1, 473,
	87, 1023,
	117, 1023,
	-2, 832,
	-1, 475,
	87, 1096,
	117, 1096,
	-2, 834,
	-1, 679,
	5, 33,
	-2, 483,
	-1, 683,
	5, 33,
	-2, 482,
	-1, 903,
	1, 541,
	5, 541,
	12, 541,
	13, 541,
	14, 541,
	15, 541,
	17, 541,
	19, 541,
	30, 541,
	31, 541,
	46, 541,
	47, 541,
	48, 541,
	49, 541,
	50, 541,
	52, 541,
	53, 541,
	56, 541,
	57, 541,
	59, 541,
	60, 541,
	414, 541,
	-2, 566,
	-1, 906,
	57, 50,
	59, 50,
	-2, 54,
	-1, 1097,
	117, 874,
	-2, 870,
	-1, 1336,
	58, 396,
	61, 396,
	-2, 360,
	-1, 1385,
	5, 34,
	-2, 631,
	-1, 1445,
	5, 33,
	-2, 809,
	-1, 1538,
	5, 33,
	-2, 71,
	-1, 1681,
	1, 586,
	5, 586,
	12, 586,
	13, 586,
	14, 586,
	15, 586,
	17, 586,
	19, 586,
	30, 586,
	31, 586,
	46, 586,
	47, 586,
	48, 586,
	49, 586,
	50, 586,
	52, 586,
	53, 586,
	56, 586,
	57, 586,
	59, 586,
	60, 586,
	414, 586,
	-2, 566,
	-1, 1796,
	5, 34,
	-2, 810,
	-1, 1826,
	5, 33,
	-2, 71,
	-1, 1882,
	5, 33,
	-2, 812,
	-1, 1962,
	5, 33,
	-2, 103,
	-1, 2014,
	5, 34,
	-2, 813,
	-1, 2063,
	414, 181,
	-2, 33,
}

const yyPrivate = 57344

const yyLast = 21138

var yyAct = [...]int{

	399, 58, 2103, 2125, 2093, 2062, 2018, 2069, 2061, 2068,
	1302, 2094, 2070, 24, 2066, 7, 2065, 6, 2005, 2071,
	1961, 1896, 1753, 1809, 2067, 8, 1996, 1592, 1244, 2064,
	5, 370, 1860, 1589, 398, 69, 2042, 1661, 1830, 1300,
	463, 329, 1845, 2019, 1694, 1212, 1072, 828, 1214, 1695,
	344, 1662, 1546, 1206, 932, 1253, 1658, 1243, 383, 58,
	1493, 91, 1672, 1609, 1210, 1295, 1135, 1122, 1668, 478,
	1328, 1208, 349, 1471, 1158, 1567, 368, 1030, 1041, 1257,
	1023, 1566, 1290, 1238, 899, 1278, 1265, 1250, 900, 1197,
	919, 1530, 1150, 330, 331, 700, 1099, 334, 918, 1642,
	512, 466, 706, 1190, 750, 353, 484, 458, 908, 461,
	2146, 469, 1009, 2142, 2132, 845, 2115, 741, 2105, 2097,
	2088, 2045, 68, 1831, 2107, 2035, 844, 2092, 2011, 2077,
	1754, 1833, 2034, 1626, 1414, 1781, 483, 1690, 1691, 2063,
	3, 73, 357, 1153, 1233, 1234, 920, 1689, 921, 1232,
	1219, 1942, 793, 792, 802, 803, 795, 796, 797, 798,
	799, 800, 801, 794, 1480, 333, 804, 1479, 2010, 676,
	1481, 75, 76, 77, 78, 79, 366, 28, 666, 59,
	31, 32, 332, 510, 412, 1513, 418, 420, 419, 416,
	417, 415, 414, 413, 1264, 486, 1594, 489, 338, 1867,
	1836, 421, 422, 1266, 1266, 1279, 1772, 101, 97, 98,
	1291, 99, 93, 1284, 340, 1279, 342, 1770, 108, 1270,
	1272, 108, 1271, 343, 336, 1919, 648, 108, 1988, 66,
	1610, 1987, 1918, 1917, 372, 1916, 1915, 1913, 1834, 1835,
	1837, 1838, 1839, 1914, 103, 102, 1989, 1990, 2039, 2040,
	1309, 2020, 1960, 86, 1547, 108, 1063, 661, 662, 674,
	108, 28, 108, 59, 31, 32, 675, 508, 660, 59,
	31, 32, 1612, 108, 659, 497, 1596, 1308, 669, 1062,
	1060, 108, 670, 667, 668, 33, 1595, 488, 487, 2091,
	1548, 33, 2076, 1997, 647, 651, 1591, 1191, 653, 326,
	1258, 1064, 509, 1958, 509, 509, 88, 90, 1846, 1847,
	85, 2138, 509, 66, 1571, 70, 95, 94, 509, 1061,
	2147, 2144, 2133, 2116, 485, 494, 58, 58, 990, 342,
	1855, 649, 652, 1551, 650, 327, 1984, 999, 1470, 1614,
	680, 2145, 682, 1469, 1618, 1468, 1613, 481, 1611, 1854,
	58, 341, 694, 1616, 298, 681, 96, 1950, 92, 93,
	2129, 1359, 816, 817, 1358, 813, 1615, 1799, 815, 100,
	1484, 1476, 1279, 1374, 685, 686, 1549, 1550, 1293, 1617,
	1619, 1260, 1070, 737, 1520, 1269, 927, 914, 784, 1260,
	504, 1985, 1215, 1217, 1395, 1239, 1392, 1832, 826, 1943,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 804, 843, 846, 846, 846, 852, 846, 846, 852,
	846, 852, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 646, 904, 2009, 56,
	1853, 2072, 1786, 95, 94, 679, 683, 2072, 87, 1228,
	1897, 60, 1713, 1216, 2127, 108, 1259, 2128, 497, 2126,
	497, 497, 692, 1899, 1259, 1256, 1260, 1260, 497, 738,
	1575, 1571, 739, 1067, 497, 1572, 469, 708, 1579, 1581,
	699, 816, 817, 816, 817, 916, 794, 509, 509, 804,
	754, 479, 1494, 82, 479, 1576, 1037, 108, 797, 798,
	799, 800, 801, 794, 1714, 1031, 804, 493, 898, 848,
	850, 1318, 854, 856, 749, 859, 753, 2131, 1628, 827,
	847, 849, 851, 853, 855, 857, 858, 860, 477, 657,
	83, 1505, 748, 747, 1898, 60, 1590, 1510, 1509, 2135,
	1025, 60, 748, 747, 696, 907, 697, 747, 912, 698,
	749, 654, 655, 28, 1931, 59, 31, 32, 1506, 663,
	749, 1259, 1259, 1333, 749, 677, 1586, 1254, 671, 1255,
	922, 1106, 1511, 684, 1503, 1252, 1258, 33, 2085, 1260,
	1504, 1000, 814, 490, 992, 1011, 1104, 1105, 1103, 1073,
	1074, 1032, 28, 1151, 59, 31, 32, 1319, 1701, 1390,
	28, 1389, 59, 31, 32, 66, 744, 498, 499, 500,
	501, 502, 108, 108, 108, 658, 33, 2139, 748, 747,
	2119, 2104, 2118, 1024, 33, 2016, 1824, 497, 1984, 509,
	509, 509, 1823, 2141, 108, 1151, 749, 1403, 497, 1508,
	748, 747, 509, 509, 66, 1535, 108, 748, 747, 339,
	108, 673, 66, 26, 2087, 108, 1533, 1514, 749, 66,
	2140, 108, 1957, 497, 497, 749, 2043, 1984, 2058, 1102,
	2057, 903, 2122, 1912, 1259, 1984, 509, 1585, 2100, 2104,
	2099, 1582, 1123, 1985, 1124, 1482, 1391, 1483, 1069, 1874,
	879, 880, 881, 882, 883, 867, 868, 869, 884, 885,
	870, 871, 872, 878, 886, 873, 874, 875, 876, 877,
	889, 888, 887, 890, 891, 893, 892, 894, 693, 1057,
	1821, 1026, 1985, 1706, 1033, 348, 455, 456, 1531, 1068,
	1985, 748, 747, 1014, 1015, 1075, 1330, 1320, 2044, 748,
	747, 28, 359, 59, 31, 32, 748, 747, 1055, 749,
	2056, 56, 2055, 2072, 1012, 1013, 1955, 749, 1260, 1371,
	1372, 1373, 1507, 1925, 749, 33, 689, 1494, 1076, 1922,
	28, 479, 59, 31, 32, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1851, 688, 1080,
	56, 1756, 2072, 66, 33, 1750, 58, 1746, 56, 1743,
	2072, 1735, 1100, 1741, 479, 497, 497, 497, 108, 108,
	108, 830, 1081, 108, 1740, 1082, 1984, 1731, 497, 497,
	1730, 2114, 66, 748, 747, 1078, 748, 747, 1729, 2043,
	1891, 2078, 363, 1630, 1643, 1558, 1093, 1089, 1091, 1092,
	1557, 749, 1489, 1090, 749, 1984, 1316, 60, 1140, 1143,
	1315, 108, 497, 1259, 1125, 1152, 108, 1815, 2075, 1575,
	1571, 1039, 1077, 1008, 1572, 1097, 1007, 1573, 1574, 2029,
	693, 1985, 1006, 1126, 1127, 1815, 2026, 1095, 1891, 2000,
	1815, 1959, 754, 1005, 1576, 1209, 60, 1891, 1951, 904,
	1891, 1902, 1920, 904, 60, 997, 1016, 1017, 1018, 995,
	1985, 994, 108, 1891, 693, 1815, 1814, 1906, 753, 1027,
	1028, 1801, 693, 1798, 693, 910, 1164, 993, 1166, 1199,
	1202, 1203, 1204, 1200, 1129, 1201, 1205, 469, 991, 1673,
	1674, 1721, 1720, 1717, 1718, 827, 1717, 1716, 1148, 56,
	910, 2072, 506, 1059, 1386, 693, 1194, 693, 1096, 337,
	1133, 1130, 1132, 1131, 1334, 1131, 693, 1137, 930, 929,
	1223, 911, 1905, 913, 1225, 1726, 1659, 1707, 56, 915,
	2072, 1261, 509, 28, 509, 915, 1173, 1174, 70, 70,
	1248, 1178, 497, 1472, 1181, 2032, 911, 1472, 909, 1186,
	1221, 1162, 1163, 1794, 66, 1011, 1230, 1229, 1169, 1170,
	1171, 1172, 1101, 1226, 1600, 1881, 1267, 1268, 1097, 1273,
	1274, 1275, 1276, 1277, 1280, 1281, 1282, 1283, 497, 497,
	1241, 28, 1131, 1386, 827, 66, 28, 1287, 1288, 1289,
	1194, 1297, 1298, 1299, 915, 60, 1930, 795, 796, 797,
	798, 799, 800, 801, 794, 1292, 1294, 804, 1194, 1222,
	1443, 909, 1386, 108, 1193, 1727, 1719, 1485, 1444, 1231,
	1386, 108, 108, 1408, 60, 108, 108, 1593, 1407, 108,
	108, 108, 1332, 66, 350, 1314, 909, 1375, 66, 2111,
	1071, 998, 1301, 1194, 2037, 2027, 497, 1923, 703, 707,
	1863, 1240, 693, 1245, 1327, 1199, 1202, 1203, 1204, 1200,
	1862, 1201, 1205, 1825, 1266, 785, 793, 792, 802, 803,
	795, 796, 797, 798, 799, 800, 801, 794, 1100, 903,
	804, 1804, 1296, 903, 1700, 1291, 66, 903, 1673, 1674,
	793, 792, 802, 803, 795, 796, 797, 798, 799, 800,
	801, 794, 829, 1488, 804, 1310, 1286, 108, 497, 1285,
	497, 1097, 1364, 842, 1363, 108, 108, 691, 1380, 108,
	2109, 2095, 1725, 1241, 1329, 1676, 1659, 1536, 1038, 1002,
	1084, 1446, 1447, 1679, 1678, 904, 904, 904, 904, 904,
	1376, 1455, 1458, 1454, 1383, 2052, 108, 1459, 108, 108,
	1209, 1456, 1464, 354, 355, 108, 1457, 1460, 2033, 1203,
	1204, 1597, 708, 904, 1360, 469, 818, 819, 820, 821,
	822, 823, 824, 825, 1448, 2049, 1369, 108, 108, 108,
	108, 108, 1402, 792, 802, 803, 795, 796, 797, 798,
	799, 800, 801, 794, 1096, 1462, 804, 742, 743, 1304,
	1467, 1306, 1466, 1368, 1879, 1745, 1496, 1705, 1704, 1382,
	1490, 1561, 1486, 1524, 928, 687, 740, 1385, 1387, 1449,
	1388, 701, 1452, 507, 1450, 1451, 1394, 1453, 1792, 1397,
	1398, 1399, 1858, 702, 1473, 1461, 1405, 1474, 1406, 1475,
	1305, 1409, 1410, 58, 1411, 1412, 1073, 1074, 1416, 1417,
	1418, 1419, 1420, 1001, 509, 1539, 509, 509, 1495, 1427,
	1428, 1429, 1477, 1431, 1432, 1324, 1434, 1435, 1436, 1437,
	1445, 1439, 1440, 1441, 1207, 1491, 1492, 989, 1101, 802,
	803, 795, 796, 797, 798, 799, 800, 801, 794, 1133,
	1909, 804, 1463, 1515, 1516, 1367, 1517, 1518, 1519, 1521,
	1522, 1936, 1523, 1366, 1525, 1526, 1527, 1528, 742, 743,
	1529, 108, 108, 108, 108, 108, 1534, 1565, 1532, 351,
	352, 345, 1878, 108, 346, 70, 108, 1935, 1865, 1472,
	108, 1556, 388, 387, 390, 391, 392, 393, 1396, 108,
	1559, 389, 394, 1393, 1560, 1029, 1541, 1542, 1543, 2112,
	1564, 1563, 745, 1578, 397, 1634, 1568, 1580, 1584, 1577,
	497, 1587, 1588, 2113, 1570, 2113, 2112, 1245, 1947, 903,
	903, 903, 903, 903, 1034, 1703, 1627, 1066, 72, 1976,
	46, 74, 1538, 49, 903, 1664, 67, 58, 1604, 1,
	1603, 1978, 19, 1608, 829, 1621, 1784, 903, 1620, 1977,
	18, 1979, 20, 1980, 21, 1975, 15, 1974, 14, 1683,
	1684, 1685, 1968, 10, 1159, 469, 1982, 25, 497, 1663,
	1973, 13, 1970, 12, 1660, 1969, 11, 1967, 9, 1829,
	497, 108, 497, 497, 471, 793, 792, 802, 803, 795,
	796, 797, 798, 799, 800, 801, 794, 1686, 1828, 804,
	1086, 1087, 1682, 495, 1545, 1677, 1693, 1544, 690, 1569,
	1755, 1859, 1670, 1341, 1995, 1251, 1035, 1607, 1644, 1645,
	1242, 1647, 1648, 1680, 1650, 1651, 1652, 1653, 81, 1655,
	1656, 1657, 108, 1692, 476, 1697, 80, 1688, 1317, 1723,
	1724, 497, 1698, 1699, 656, 1849, 306, 1249, 1602, 1501,
	1500, 1497, 1512, 1263, 1499, 1498, 1502, 936, 934, 1640,
	1641, 935, 933, 938, 1646, 937, 1262, 1649, 310, 464,
	923, 1552, 1654, 1554, 1555, 746, 1665, 89, 50, 1852,
	1583, 497, 1335, 829, 84, 1036, 664, 1138, 1139, 1708,
	1709, 904, 1728, 1710, 665, 312, 1712, 1711, 812, 1737,
	1365, 1478, 470, 1715, 1666, 2038, 705, 2001, 1934, 1864,
	1742, 1401, 841, 497, 497, 1149, 371, 1779, 2004, 1738,
	1088, 1739, 386, 385, 384, 381, 1736, 382, 1323, 1098,
	1733, 497, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1749, 1079, 1442,
	786, 497, 497, 369, 497, 497, 361, 902, 1602, 1245,
	1785, 1245, 1761, 1760, 895, 1198, 1196, 1195, 1003, 459,
	1768, 1675, 1671, 901, 1599, 1237, 672, 325, 1780, 1941,
	1083, 30, 71, 356, 17, 678, 22, 1765, 1766, 1154,
	1767, 16, 491, 1769, 34, 1771, 1802, 38, 1811, 1812,
	37, 36, 1540, 108, 1307, 335, 511, 1793, 511, 511,
	1042, 1486, 1040, 2101, 1817, 58, 511, 1807, 108, 2041,
	2024, 1983, 511, 23, 2079, 1808, 4, 1813, 347, 27,
	1787, 1788, 2, 0, 0, 0, 1789, 1762, 0, 1790,
	0, 0, 0, 1764, 1791, 0, 0, 497, 0, 0,
	108, 497, 1818, 0, 1773, 1774, 0, 0, 497, 0,
	0, 497, 497, 497, 0, 0, 0, 108, 1848, 0,
	1840, 0, 0, 1816, 1841, 1842, 1843, 0, 1321, 0,
	0, 0, 1856, 0, 1819, 1664, 1697, 0, 1883, 0,
	0, 0, 1820, 0, 1822, 1844, 0, 0, 1795, 1796,
	1797, 0, 1800, 0, 0, 0, 0, 0, 0, 1850,
	1857, 0, 0, 0, 1806, 0, 0, 0, 1888, 1663,
	0, 1361, 1362, 0, 707, 903, 0, 1908, 0, 1910,
	0, 0, 0, 0, 0, 0, 1880, 0, 0, 0,
	0, 0, 1866, 1887, 0, 0, 0, 1890, 1895, 1929,
	497, 497, 497, 1901, 1826, 1900, 0, 0, 1911, 497,
	1907, 1889, 0, 0, 0, 0, 1245, 497, 0, 471,
	0, 0, 1664, 0, 58, 924, 1932, 1921, 0, 0,
	0, 0, 0, 0, 1384, 0, 988, 0, 1927, 0,
	1928, 0, 108, 0, 1903, 0, 1904, 0, 0, 0,
	1924, 58, 0, 0, 1404, 0, 1663, 1954, 1972, 1948,
	1971, 511, 511, 1981, 1873, 1965, 1946, 1964, 0, 1877,
	0, 497, 1956, 0, 0, 1966, 1952, 1882, 1861, 0,
	1963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1892, 0, 1893, 1894, 1377, 1378, 1379,
	1999, 0, 1991, 1998, 1993, 0, 0, 0, 1992, 0,
	1994, 0, 2021, 0, 0, 497, 497, 0, 497, 469,
	0, 497, 2012, 108, 0, 108, 0, 58, 2013, 0,
	0, 0, 497, 0, 1972, 0, 1971, 0, 0, 1981,
	0, 1965, 497, 1964, 0, 0, 0, 2025, 0, 0,
	0, 1966, 1937, 1938, 1939, 1940, 1963, 1413, 1415, 1944,
	1945, 0, 0, 1949, 1421, 1422, 1423, 1424, 2031, 0,
	0, 0, 497, 2046, 0, 0, 0, 0, 0, 497,
	108, 1954, 0, 0, 0, 58, 58, 0, 0, 2054,
	1962, 2051, 0, 1972, 2050, 1971, 2048, 0, 1981, 58,
	1965, 2053, 1964, 511, 511, 511, 2074, 2086, 497, 2084,
	1966, 2083, 2047, 58, 2080, 1963, 511, 511, 2059, 2081,
	0, 2089, 2090, 0, 2082, 2008, 2003, 2007, 58, 58,
	2096, 0, 2106, 2014, 2102, 0, 2098, 0, 58, 2110,
	497, 58, 0, 2102, 2120, 2108, 58, 497, 497, 2117,
	511, 2102, 0, 0, 1861, 1245, 58, 2130, 0, 0,
	58, 2102, 0, 0, 0, 0, 1962, 497, 2134, 0,
	0, 1347, 0, 58, 0, 108, 58, 0, 2102, 2028,
	1207, 0, 0, 58, 2143, 1346, 0, 58, 2102, 0,
	0, 0, 2102, 0, 0, 0, 2036, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1629, 0, 0, 0,
	0, 1215, 1217, 0, 497, 0, 0, 1351, 0, 0,
	0, 0, 1562, 2007, 0, 1962, 1345, 793, 792, 802,
	803, 795, 796, 797, 798, 799, 800, 801, 794, 511,
	0, 804, 0, 0, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 497, 793, 792, 802, 803, 795,
	796, 797, 798, 799, 800, 801, 794, 0, 0, 804,
	0, 0, 0, 0, 1606, 1687, 0, 1343, 1337, 1338,
	1128, 1336, 1783, 1339, 1340, 1622, 1623, 0, 1624, 1625,
	0, 0, 1216, 0, 0, 0, 0, 0, 471, 0,
	1631, 1632, 0, 0, 0, 0, 0, 2136, 2137, 0,
	0, 1635, 1636, 1637, 1638, 1639, 1155, 1156, 1349, 1352,
	0, 793, 792, 802, 803, 795, 796, 797, 798, 799,
	800, 801, 794, 0, 0, 804, 0, 0, 1778, 0,
	0, 0, 0, 0, 0, 0, 1134, 1136, 0, 0,
	0, 1142, 1145, 1146, 1147, 0, 0, 0, 1681, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 0, 0, 0, 1157, 0,
	1160, 1161, 511, 0, 511, 1165, 0, 1167, 1168, 0,
	1344, 0, 1751, 0, 0, 1175, 1176, 1177, 1702, 1179,
	1180, 0, 1182, 1183, 1184, 1185, 0, 1187, 1188, 1189,
	0, 0, 0, 0, 0, 0, 1342, 793, 792, 802,
	803, 795, 796, 797, 798, 799, 800, 801, 794, 0,
	0, 804, 0, 1782, 1777, 0, 28, 29, 59, 31,
	32, 0, 0, 0, 0, 0, 511, 0, 511, 0,
	57, 0, 0, 0, 1734, 0, 65, 1348, 905, 0,
	33, 53, 54, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 1803, 0, 0, 1805,
	0, 0, 0, 0, 44, 0, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1763, 0,
	105, 0, 0, 0, 1350, 0, 0, 0, 0, 328,
	0, 0, 0, 793, 792, 802, 803, 795, 796, 797,
	798, 799, 800, 801, 794, 511, 704, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 460, 0, 0,
	0, 0, 480, 0, 482, 0, 0, 0, 0, 0,
	35, 61, 40, 39, 42, 492, 55, 0, 0, 0,
	0, 0, 0, 503, 0, 0, 0, 0, 106, 0,
	0, 324, 1776, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 43, 64, 63, 0, 0, 51, 52, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 1370, 0,
	0, 0, 360, 0, 0, 462, 472, 0, 0, 0,
	106, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 56, 0, 45, 62, 0, 47,
	48, 0, 0, 0, 0, 0, 0, 0, 471, 0,
	0, 793, 792, 802, 803, 795, 796, 797, 798, 799,
	800, 801, 794, 1400, 0, 804, 0, 0, 1868, 1869,
	1870, 1871, 1872, 0, 0, 0, 1875, 1876, 0, 0,
	28, 829, 59, 31, 32, 0, 0, 0, 1425, 1426,
	0, 0, 0, 1430, 57, 0, 1433, 788, 511, 791,
	65, 1438, 0, 0, 33, 0, 805, 806, 807, 808,
	809, 810, 811, 0, 789, 790, 787, 793, 792, 802,
	803, 795, 796, 797, 798, 799, 800, 801, 794, 0,
	60, 804, 66, 0, 0, 0, 0, 0, 2002, 2006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1984, 1537, 505, 0, 0,
	2073, 0, 0, 0, 0, 0, 0, 0, 511, 0,
	511, 511, 0, 0, 0, 0, 320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2022, 2023, 0,
	0, 0, 0, 0, 35, 61, 40, 39, 42, 695,
	0, 0, 0, 0, 317, 0, 1775, 0, 0, 0,
	1985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 43, 64, 63, 511,
	0, 0, 0, 41, 0, 2006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 106, 0, 1633,
	0, 958, 0, 311, 318, 319, 0, 0, 56, 0,
	1986, 62, 0, 47, 48, 793, 792, 802, 803, 795,
	796, 797, 798, 799, 800, 801, 794, 0, 471, 804,
	1605, 1667, 1669, 0, 0, 0, 0, 2121, 0, 308,
	0, 0, 309, 0, 897, 0, 906, 316, 0, 1669,
	0, 793, 792, 802, 803, 795, 796, 797, 798, 799,
	800, 801, 794, 0, 0, 804, 931, 1381, 0, 511,
	511, 0, 511, 1696, 0, 0, 0, 0, 996, 0,
	0, 0, 460, 0, 945, 0, 0, 1004, 793, 792,
	802, 803, 795, 796, 797, 798, 799, 800, 801, 794,
	0, 0, 804, 0, 60, 0, 0, 300, 0, 0,
	0, 0, 106, 106, 106, 0, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 959, 0, 0, 2123,
	0, 0, 0, 0, 106, 0, 0, 0, 313, 303,
	304, 0, 314, 315, 323, 0, 106, 0, 305, 307,
	106, 301, 322, 321, 0, 106, 0, 0, 0, 0,
	0, 1010, 0, 0, 0, 1744, 0, 0, 0, 1748,
	0, 0, 0, 0, 0, 0, 1752, 0, 0, 1757,
	1758, 1759, 972, 975, 976, 977, 978, 979, 980, 0,
	981, 982, 983, 984, 985, 986, 987, 0, 960, 961,
	962, 963, 939, 943, 973, 940, 946, 942, 944, 941,
	0, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 964, 965, 966, 967, 968, 969, 970, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1019, 1020, 1021, 0, 0, 1022, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	28, 0, 59, 31, 32, 0, 0, 0, 1810, 1810,
	1810, 0, 0, 0, 57, 0, 0, 511, 0, 0,
	65, 0, 0, 1058, 33, 1810, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 106,
	106, 0, 66, 106, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 1984, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 35, 61, 40, 39, 42, 0,
	0, 0, 0, 1884, 1885, 0, 1886, 0, 0, 1810,
	1985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1696, 0, 106, 0, 0, 0, 43, 64, 63, 0,
	1696, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1926, 1010, 0, 0, 0, 0, 0, 1810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	1986, 62, 0, 47, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1953, 0, 0, 0,
	0, 0, 0, 0, 0, 1192, 0, 0, 360, 360,
	0, 0, 0, 360, 360, 360, 360, 0, 1224, 0,
	472, 0, 0, 0, 0, 0, 0, 0, 1696, 0,
	0, 0, 0, 0, 0, 511, 511, 0, 0, 0,
	360, 360, 360, 360, 0, 0, 360, 360, 360, 360,
	360, 0, 471, 0, 0, 2015, 0, 360, 360, 360,
	0, 360, 360, 0, 360, 360, 360, 360, 0, 360,
	360, 360, 0, 106, 60, 0, 0, 0, 0, 0,
	0, 106, 1218, 0, 0, 106, 106, 0, 0, 106,
	1227, 1010, 472, 0, 0, 0, 0, 0, 0, 1303,
	0, 0, 2030, 0, 1010, 0, 0, 1311, 1312, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1696, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 1810, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 1353,
	1354, 1355, 1356, 1357, 0, 106, 106, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 1325, 1326,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 106, 106,
	106, 106, 0, 0, 0, 0, 0, 1010, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 360, 0, 0, 0, 360, 0, 0, 360, 0,
	0, 0, 0, 360, 0, 0, 0, 0, 0, 0,
	472, 106, 106, 106, 106, 106, 0, 0, 0, 0,
	0, 0, 0, 1218, 0, 0, 106, 0, 0, 0,
	1218, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1598, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1827, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1218, 0, 1218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2017, 0, 630,
	610, 0, 568, 633, 540, 557, 644, 558, 561, 599,
	526, 580, 205, 555, 527, 0, 544, 517, 551, 518,
	541, 570, 147, 539, 612, 583, 632, 174, 595, 631,
	576, 0, 639, 177, 592, 0, 253, 192, 0, 0,
	572, 619, 578, 608, 567, 601, 533, 591, 634, 556,
	597, 635, 0, 0, 472, 496, 0, 1246, 1247, 0,
	0, 0, 0, 0, 131, 106, 594, 629, 553, 596,
	598, 515, 593, 0, 521, 528, 643, 625, 547, 548,
	549, 1487, 0, 0, 0, 0, 0, 0, 571, 579,
	605, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	545, 0, 589, 0, 0, 0, 529, 522, 0, 0,
	569, 0, 0, 0, 532, 0, 546, 606, 0, 513,
	155, 0, 0, 609, 624, 566, 0, 287, 628, 563,
	562, 222, 0, 258, 158, 175, 125, 110, 120, 0,
	157, 201, 231, 239, 554, 514, 613, 542, 552, 141,
	550, 233, 209, 278, 0, 586, 214, 232, 178, 267,
	224, 276, 277, 159, 288, 289, 262, 285, 293, 250,
	0, 0, 0, 0, 0, 0, 171, 565, 600, 543,
	138, 603, 590, 618, 140, 249, 126, 263, 191, 196,
	135, 137, 136, 121, 244, 265, 130, 139, 254, 259,
	113, 261, 275, 132, 243, 115, 273, 257, 189, 168,
	169, 114, 0, 229, 146, 154, 143, 204, 0, 0,
	0, 270, 271, 142, 296, 122, 284, 117, 123, 283,
	198, 0, 0, 0, 266, 274, 190, 183, 0, 116,
	272, 188, 182, 173, 150, 161, 219, 180, 220, 162,
	194, 193, 195, 0, 519, 0, 255, 281, 297, 128,
	538, 0, 264, 291, 292, 0, 0, 129, 153, 149,
	218, 197, 124, 164, 252, 172, 179, 228, 295, 208,
	234, 133, 280, 251, 536, 537, 534, 0, 535, 581,
	582, 636, 637, 638, 607, 530, 0, 620, 621, 0,
	611, 626, 627, 602, 645, 559, 560, 520, 523, 524,
	525, 531, 573, 574, 585, 588, 616, 615, 614, 617,
	622, 641, 640, 642, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 109, 118, 176, 294,
	226, 152, 282, 516, 145, 0, 0, 575, 577, 587,
	604, 111, 112, 119, 127, 134, 144, 148, 151, 156,
	160, 163, 165, 166, 167, 170, 181, 184, 185, 186,
	187, 199, 200, 202, 203, 206, 207, 210, 211, 212,
	213, 215, 216, 217, 221, 223, 225, 227, 230, 235,
	236, 237, 238, 240, 241, 242, 245, 246, 247, 248,
	256, 260, 268, 269, 279, 286, 290, 623, 630, 610,
	0, 568, 633, 540, 557, 644, 558, 561, 599, 526,
	580, 205, 555, 527, 0, 544, 517, 551, 518, 541,
	570, 147, 539, 612, 583, 632, 174, 595, 631, 576,
	0, 639, 177, 592, 0, 253, 192, 0, 0, 572,
	619, 578, 608, 567, 601, 533, 591, 634, 556, 597,
	635, 0, 0, 0, 496, 0, 1246, 1247, 0, 0,
	0, 0, 0, 131, 0, 594, 629, 553, 596, 598,
	515, 593, 0, 521, 528, 643, 625, 547, 548, 549,
	0, 0, 0, 0, 0, 0, 0, 571, 579, 605,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 545,
	0, 589, 0, 0, 0, 529, 522, 0, 0, 569,
	0, 0, 0, 532, 0, 546, 606, 0, 513, 155,
	0, 0, 609, 624, 566, 0, 287, 628, 563, 562,
	222, 0, 258, 158, 175, 125, 110, 120, 0, 157,
	201, 231, 239, 554, 514, 613, 542, 552, 141, 550,
	233, 209, 278, 0, 586, 214, 232, 178, 267, 224,
	276, 277, 159, 288, 289, 262, 285, 293, 250, 0,
	0, 0, 0, 0, 0, 171, 565, 600, 543, 138,
	603, 590, 618, 140, 249, 126, 263, 191, 196, 135,
	137, 136, 121, 244, 265, 130, 139, 254, 259, 113,
	261, 275, 132, 243, 115, 273, 257, 189, 168, 169,
	114, 0, 229, 146, 154, 143, 204, 0, 0, 0,
	270, 271, 142, 296, 122, 284, 117, 123, 283, 198,
	0, 0, 0, 266, 274, 190, 183, 0, 116, 272,
	188, 182, 173, 150, 161, 219, 180, 220, 162, 194,
	193, 195, 0, 519, 0, 255, 281, 297, 128, 538,
	0, 264, 291, 292, 0, 0, 129, 153, 149, 218,
	197, 124, 164, 252, 172, 179, 228, 295, 208, 234,
	133, 280, 251, 536, 537, 534, 0, 535, 581, 582,
	636, 637, 638, 607, 530, 0, 620, 621, 0, 611,
	626, 627, 602, 645, 559, 560, 520, 523, 524, 525,
	531, 573, 574, 585, 588, 616, 615, 614, 617, 622,
	641, 640, 642, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 109, 118, 176, 294, 226,
	152, 282, 516, 145, 0, 0, 575, 577, 587, 604,
	111, 112, 119, 127, 134, 144, 148, 151, 156, 160,
	163, 165, 166, 167, 170, 181, 184, 185, 186, 187,
	199, 200, 202, 203, 206, 207, 210, 211, 212, 213,
	215, 216, 217, 221, 223, 225, 227, 230, 235, 236,
	237, 238, 240, 241, 242, 245, 246, 247, 248, 256,
	260, 268, 269, 279, 286, 290, 623, 630, 610, 0,
	568, 633, 540, 557, 644, 558, 561, 599, 526, 580,
	205, 555, 527, 0, 544, 517, 551, 518, 541, 570,
	147, 539, 612, 583, 632, 174, 595, 631, 576, 0,
	639, 177, 592, 0, 253, 192, 0, 0, 572, 619,
	578, 608, 567, 601, 533, 591, 634, 556, 597, 635,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 594, 629, 553, 596, 598, 515,
	593, 0, 521, 528, 643, 625, 547, 548, 549, 0,
	0, 0, 0, 0, 0, 0, 571, 579, 605, 564,
	0, 0, 0, 0, 0, 0, 1601, 0, 545, 0,
	589, 0, 0, 0, 529, 522, 0, 0, 569, 0,
	0, 0, 532, 0, 546, 606, 0, 513, 155, 0,
	0, 609, 624, 566, 0, 287, 628, 563, 562, 222,
	0, 258, 158, 175, 125, 110, 120, 0, 157, 201,
	231, 239, 554, 514, 613, 542, 552, 141, 550, 233,
	209, 278, 0, 586, 214, 232, 178, 267, 224, 276,
	277, 159, 288, 289, 262, 285, 293, 250, 0, 0,
	0, 0, 0, 0, 171, 565, 600, 543, 138, 603,
	590, 618, 140, 249, 126, 263, 191, 196, 135, 137,
	136, 121, 244, 265, 130, 139, 254, 259, 113, 261,
	275, 132, 243, 115, 273, 257, 189, 168, 169, 114,
	0, 229, 146, 154, 143, 204, 0, 0, 0, 270,
	271, 142, 296, 122, 284, 117, 123, 283, 198, 0,
	0, 0, 266, 274, 190, 183, 0, 116, 272, 188,
	182, 173, 150, 161, 219, 180, 220, 162, 194, 193,
	195, 0, 519, 0, 255, 281, 297, 128, 538, 0,
	264, 291, 292, 0, 0, 129, 153, 149, 218, 197,
	124, 164, 252, 172, 179, 228, 295, 208, 234, 133,
	280, 251, 536, 537, 534, 0, 535, 581, 582, 636,
	637, 638, 607, 530, 0, 620, 621, 0, 611, 626,
	627, 602, 645, 559, 560, 520, 523, 524, 525, 531,
	573, 574, 585, 588, 616, 615, 614, 617, 622, 641,
	640, 642, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 109, 118, 176, 294, 226, 152,
	282, 516, 145, 0, 0, 575, 577, 587, 604, 111,
	112, 119, 127, 134, 144, 148, 151, 156, 160, 163,
	165, 166, 167, 170, 181, 184, 185, 186, 187, 199,
	200, 202, 203, 206, 207, 210, 211, 212, 213, 215,
	216, 217, 221, 223, 225, 227, 230, 235, 236, 237,
	238, 240, 241, 242, 245, 246, 247, 248, 256, 260,
	268, 269, 279, 286, 290, 623, 630, 610, 0, 568,
	633, 540, 557, 644, 558, 561, 599, 526, 580, 205,
	555, 527, 0, 544, 517, 551, 518, 541, 570, 147,
	539, 612, 583, 632, 174, 595, 631, 576, 0, 639,
	177, 592, 0, 253, 192, 0, 0, 572, 619, 578,
	608, 567, 601, 533, 591, 634, 556, 597, 635, 66,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 594, 629, 553, 596, 598, 515, 593,
	0, 521, 528, 643, 625, 547, 548, 549, 0, 0,
	0, 0, 0, 0, 0, 571, 579, 605, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 545, 0, 589,
	0, 0, 0, 529, 522, 0, 0, 569, 0, 0,
	0, 532, 0, 546, 606, 0, 513, 155, 0, 0,
	609, 624, 566, 0, 287, 628, 563, 562, 222, 0,
	258, 158, 175, 125, 110, 120, 0, 157, 201, 231,
	239, 554, 514, 613, 542, 552, 141, 550, 233, 209,
	278, 0, 586, 214, 232, 178, 267, 224, 276, 277,
	159, 288, 289, 262, 285, 293, 250, 0, 0, 0,
	0, 0, 0, 171, 565, 600, 543, 138, 603, 590,
	618, 140, 249, 126, 263, 191, 196, 135, 137, 136,
	121, 244, 265, 130, 139, 254, 259, 113, 261, 275,
	132, 243, 115, 273, 257, 189, 168, 169, 114, 0,
	229, 146, 154, 143, 204, 0, 0, 0, 270, 271,
	142, 296, 122, 284, 117, 123, 283, 198, 0, 0,
	0, 266, 274, 190, 183, 0, 116, 272, 188, 182,
	173, 150, 161, 219, 180, 220, 162, 194, 193, 195,
	0, 519, 0, 255, 281, 297, 128, 538, 0, 264,
	291, 292, 0, 0, 129, 153, 149, 218, 197, 124,
	164, 252, 172, 179, 228, 295, 208, 234, 133, 280,
	251, 536, 537, 534, 0, 535, 581, 582, 636, 637,
	638, 607, 530, 0, 620, 621, 0, 611, 626, 627,
	602, 645, 559, 560, 520, 523, 524, 525, 531, 573,
	574, 585, 588, 616, 615, 614, 617, 622, 641, 640,
	642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 109, 118, 176, 294, 226, 152, 282,
	516, 145, 0, 0, 575, 577, 587, 604, 111, 112,
	119, 127, 134, 144, 148, 151, 156, 160, 163, 165,
	166, 167, 170, 181, 184, 185, 186, 187, 199, 200,
	202, 203, 206, 207, 210, 211, 212, 213, 215, 216,
	217, 221, 223, 225, 227, 230, 235, 236, 237, 238,
	240, 241, 242, 245, 246, 247, 248, 256, 260, 268,
	269, 279, 286, 290, 623, 630, 610, 0, 568, 633,
	540, 557, 644, 558, 561, 599, 526, 580, 205, 555,
	527, 0, 544, 517, 551, 518, 541, 570, 147, 539,
	612, 583, 632, 174, 595, 631, 576, 0, 639, 177,
	592, 0, 253, 192, 0, 0, 572, 619, 578, 608,
	567, 601, 533, 591, 634, 556, 597, 635, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 594, 629, 553, 596, 598, 515, 593, 0,
	521, 528, 643, 625, 547, 548, 549, 0, 0, 0,
	0, 0, 0, 0, 571, 579, 605, 564, 0, 0,
	0, 0, 0, 0, 1228, 0, 545, 0, 589, 0,
	0, 0, 529, 522, 0, 0, 569, 0, 0, 0,
	532, 0, 546, 606, 0, 513, 155, 0, 0, 609,
	624, 566, 0, 287, 628, 563, 562, 222, 0, 258,
	158, 175, 125, 110, 120, 0, 157, 201, 231, 239,
	554, 514, 613, 542, 552, 141, 550, 233, 209, 278,
	0, 586, 214, 232, 178, 267, 224, 276, 277, 159,
	288, 289, 262, 285, 293, 250, 0, 0, 0, 0,
	0, 0, 171, 565, 600, 543, 138, 603, 590, 618,
	140, 249, 126, 263, 191, 196, 135, 137, 136, 121,
	244, 265, 130, 139, 254, 259, 113, 261, 275, 132,
	243, 115, 273, 257, 189, 168, 169, 114, 0, 229,
	146, 154, 143, 204, 0, 0, 0, 270, 271, 142,
	296, 122, 284, 117, 123, 283, 198, 0, 0, 0,
	266, 274, 190, 183, 0, 116, 272, 188, 182, 173,
	150, 161, 219, 180, 220, 162, 194, 193, 195, 0,
	519, 0, 255, 281, 297, 128, 538, 0, 264, 291,
	292, 0, 0, 129, 153, 149, 218, 197, 124, 164,
	252, 172, 179, 228, 295, 208, 234, 133, 280, 251,
	536, 537, 534, 0, 535, 581, 582, 636, 637, 638,
	607, 530, 0, 620, 621, 0, 611, 626, 627, 602,
	645, 559, 560, 520, 523, 524, 525, 531, 573, 574,
	585, 588, 616, 615, 614, 617, 622, 641, 640, 642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 109, 118, 176, 294, 226, 152, 282, 516,
	145, 0, 0, 575, 577, 587, 604, 111, 112, 119,
	127, 134, 144, 148, 151, 156, 160, 163, 165, 166,
	167, 170, 181, 184, 185, 186, 187, 199, 200, 202,
	203, 206, 207, 210, 211, 212, 213, 215, 216, 217,
	221, 223, 225, 227, 230, 235, 236, 237, 238, 240,
	241, 242, 245, 246, 247, 248, 256, 260, 268, 269,
	279, 286, 290, 623, 630, 610, 0, 568, 633, 540,
	557, 644, 558, 561, 599, 526, 580, 205, 555, 527,
	0, 544, 517, 551, 518, 541, 570, 147, 539, 612,
	583, 632, 174, 595, 631, 576, 0, 639, 177, 592,
	0, 253, 192, 0, 0, 572, 619, 578, 608, 567,
	601, 533, 591, 634, 556, 597, 635, 0, 0, 0,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 594, 629, 553, 596, 598, 515, 593, 0, 521,
	528, 643, 625, 547, 548, 549, 0, 0, 0, 0,
	0, 0, 0, 571, 579, 605, 564, 0, 0, 0,
	0, 0, 0, 1094, 0, 545, 0, 589, 0, 0,
	0, 529, 522, 0, 0, 569, 0, 0, 0, 532,
	0, 546, 606, 0, 513, 155, 0, 0, 609, 624,
	566, 0, 287, 628, 563, 562, 222, 0, 258, 158,
	175, 125, 110, 120, 0, 157, 201, 231, 239, 554,
	514, 613, 542, 552, 141, 550, 233, 209, 278, 0,
	586, 214, 232, 178, 267, 224, 276, 277, 159, 288,
	289, 262, 285, 293, 250, 0, 0, 0, 0, 0,
	0, 171, 565, 600, 543, 138, 603, 590, 618, 140,
	249, 126, 263, 191, 196, 135, 137, 136, 121, 244,
	265, 130, 139, 254, 259, 113, 261, 275, 132, 243,
	115, 273, 257, 189, 168, 169, 114, 0, 229, 146,
	154, 143, 204, 0, 0, 0, 270, 271, 142, 296,
	122, 284, 117, 123, 283, 198, 0, 0, 0, 266,
	274, 190, 183, 0, 116, 272, 188, 182, 173, 150,
	161, 219, 180, 220, 162, 194, 193, 195, 0, 519,
	0, 255, 281, 297, 128, 538, 0, 264, 291, 292,
	0, 0, 129, 153, 149, 218, 197, 124, 164, 252,
	172, 179, 228, 295, 208, 234, 133, 280, 251, 536,
	537, 534, 0, 535, 581, 582, 636, 637, 638, 607,
	530, 0, 620, 621, 0, 611, 626, 627, 602, 645,
	559, 560, 520, 523, 524, 525, 531, 573, 574, 585,
	588, 616, 615, 614, 617, 622, 641, 640, 642, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 109, 118, 176, 294, 226, 152, 282, 516, 145,
	0, 0, 575, 577, 587, 604, 111, 112, 119, 127,
	134, 144, 148, 151, 156, 160, 163, 165, 166, 167,
	170, 181, 184, 185, 186, 187, 199, 200, 202, 203,
	206, 207, 210, 211, 212, 213, 215, 216, 217, 221,
	223, 225, 227, 230, 235, 236, 237, 238, 240, 241,
	242, 245, 246, 247, 248, 256, 260, 268, 269, 279,
	286, 290, 623, 630, 610, 0, 568, 633, 540, 557,
	644, 558, 561, 599, 526, 580, 205, 555, 527, 0,
	544, 517, 551, 518, 541, 570, 147, 539, 612, 583,
	632, 174, 595, 631, 576, 0, 639, 177, 592, 0,
	253, 192, 0, 0, 572, 619, 578, 608, 567, 601,
	533, 591, 634, 556, 597, 635, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	594, 629, 553, 596, 598, 515, 593, 0, 521, 528,
	643, 625, 547, 548, 549, 0, 0, 0, 0, 0,
	0, 0, 571, 579, 605, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 545, 0, 589, 0, 0, 0,
	529, 522, 0, 0, 569, 0, 0, 0, 532, 0,
	546, 606, 0, 513, 155, 0, 0, 609, 624, 566,
	0, 287, 628, 563, 562, 222, 0, 258, 158, 175,
	125, 110, 120, 0, 157, 201, 231, 239, 554, 514,
	613, 542, 552, 141, 550, 233, 209, 278, 0, 586,
	214, 232, 178, 267, 224, 276, 277, 159, 288, 289,
	262, 285, 293, 250, 0, 0, 0, 0, 0, 0,
	171, 565, 600, 543, 138, 603, 590, 618, 140, 249,
	126, 263, 191, 196, 135, 137, 136, 121, 244, 265,
	130, 139, 254, 259, 113, 261, 275, 132, 243, 115,
	273, 257, 189, 168, 169, 114, 0, 229, 146, 154,
	143, 204, 0, 0, 0, 270, 271, 142, 296, 122,
	284, 117, 123, 283, 198, 0, 0, 0, 266, 274,
	190, 183, 0, 116, 272, 188, 182, 173, 150, 161,
	219, 180, 220, 162, 194, 193, 195, 0, 519, 0,
	255, 281, 297, 128, 538, 0, 264, 291, 292, 0,
	0, 129, 153, 149, 218, 197, 124, 164, 252, 172,
	179, 228, 295, 208, 234, 133, 280, 251, 536, 537,
	534, 0, 535, 581, 582, 636, 637, 638, 607, 530,
	0, 620, 621, 0, 611, 626, 627, 602, 645, 559,
	560, 520, 523, 524, 525, 531, 573, 574, 585, 588,
	616, 615, 614, 617, 622, 641, 640, 642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	109, 118, 176, 294, 226, 152, 282, 516, 145, 0,
	0, 575, 577, 587, 604, 111, 112, 119, 127, 134,
	144, 148, 151, 156, 160, 163, 165, 166, 167, 170,
	181, 184, 185, 186, 187, 199, 200, 202, 203, 206,
	207, 210, 211, 212, 213, 215, 216, 217, 221, 223,
	225, 227, 230, 235, 236, 237, 238, 240, 241, 242,
	245, 246, 247, 248, 256, 260, 268, 269, 279, 286,
	290, 623, 630, 610, 0, 568, 633, 540, 557, 644,
	558, 561, 599, 526, 580, 205, 555, 527, 0, 544,
	517, 551, 518, 541, 570, 147, 539, 612, 583, 632,
	174, 595, 631, 576, 0, 639, 177, 592, 0, 253,
	192, 0, 0, 572, 619, 578, 608, 567, 601, 533,
	591, 634, 556, 597, 635, 0, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 594,
	629, 553, 596, 598, 515, 593, 0, 521, 528, 643,
	625, 547, 548, 549, 0, 0, 0, 0, 0, 0,
	0, 571, 579, 605, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 545, 0, 589, 0, 0, 0, 529,
	522, 0, 0, 569, 0, 0, 0, 532, 0, 546,
	606, 0, 513, 155, 0, 0, 609, 624, 566, 0,
	287, 628, 563, 562, 222, 0, 258, 158, 175, 125,
	110, 120, 0, 157, 201, 231, 239, 554, 514, 613,
	542, 552, 141, 550, 233, 209, 278, 0, 586, 214,
	232, 178, 267, 224, 276, 277, 159, 288, 289, 262,
	285, 293, 250, 0, 0, 0, 0, 0, 0, 171,
	565, 600, 543, 138, 603, 590, 618, 140, 249, 126,
	263, 191, 196, 135, 137, 136, 121, 244, 265, 130,
	139, 254, 259, 113, 261, 275, 132, 243, 115, 273,
	257, 189, 168, 169, 114, 0, 229, 146, 154, 143,
	204, 0, 0, 0, 270, 271, 142, 296, 122, 284,
	117, 123, 283, 198, 0, 0, 0, 266, 274, 190,
	183, 0, 116, 272, 188, 182, 173, 150, 161, 219,
	180, 220, 162, 194, 193, 195, 0, 519, 0, 255,
	281, 297, 128, 538, 0, 264, 291, 292, 0, 0,
	129, 153, 149, 218, 197, 124, 164, 252, 172, 179,
	228, 295, 208, 234, 133, 280, 251, 536, 537, 534,
	0, 535, 581, 582, 636, 637, 638, 607, 530, 0,
	620, 621, 0, 611, 626, 627, 602, 645, 559, 560,
	520, 523, 524, 525, 531, 573, 574, 585, 588, 616,
	615, 614, 617, 622, 641, 640, 642, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 109,
	118, 176, 294, 226, 152, 282, 516, 145, 0, 0,
	575, 577, 587, 604, 111, 112, 119, 127, 134, 144,
	148, 151, 156, 160, 163, 165, 166, 167, 170, 181,
	184, 185, 186, 187, 199, 200, 202, 203, 206, 207,
	210, 211, 212, 213, 215, 216, 217, 221, 223, 225,
	227, 230, 235, 236, 237, 238, 240, 241, 242, 245,
	246, 247, 248, 256, 260, 268, 269, 279, 286, 290,
	623, 630, 610, 0, 568, 633, 540, 557, 644, 558,
	561, 599, 526, 580, 205, 555, 527, 0, 544, 517,
	551, 518, 541, 570, 147, 539, 612, 583, 632, 174,
	595, 631, 576, 0, 639, 177, 592, 0, 253, 192,
	0, 0, 572, 619, 578, 608, 567, 601, 533, 591,
	634, 556, 597, 635, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 594, 629,
	553, 596, 598, 515, 593, 0, 521, 528, 643, 625,
	547, 548, 549, 0, 0, 0, 0, 0, 0, 0,
	571, 579, 605, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 545, 0, 589, 0, 0, 0, 529, 522,
	0, 0, 569, 0, 0, 0, 532, 0, 546, 606,
	0, 513, 155, 0, 0, 609, 624, 566, 0, 287,
	628, 563, 562, 222, 0, 258, 158, 175, 125, 110,
	120, 0, 157, 201, 231, 239, 554, 514, 613, 542,
	552, 141, 550, 233, 209, 278, 0, 586, 214, 232,
	178, 267, 224, 276, 277, 159, 288, 289, 262, 285,
	293, 250, 0, 0, 0, 0, 0, 0, 171, 565,
	600, 543, 138, 603, 590, 618, 140, 249, 126, 263,
	191, 196, 135, 137, 136, 121, 244, 265, 130, 139,
	254, 259, 113, 261, 275, 132, 243, 115, 273, 257,
	189, 168, 169, 114, 0, 229, 146, 154, 143, 204,
	0, 0, 0, 270, 271, 142, 296, 122, 284, 117,
	123, 283, 198, 0, 0, 0, 266, 274, 190, 183,
	0, 116, 272, 188, 182, 173, 150, 161, 219, 180,
	220, 162, 194, 193, 195, 0, 519, 0, 255, 281,
	297, 128, 538, 0, 264, 291, 292, 0, 0, 129,
	153, 149, 218, 197, 124, 164, 252, 172, 179, 228,
	295, 208, 234, 133, 280, 251, 536, 537, 534, 0,
	535, 581, 582, 636, 637, 638, 607, 530, 0, 620,
	621, 0, 611, 626, 627, 602, 645, 559, 560, 520,
	523, 524, 525, 531, 573, 574, 585, 588, 616, 615,
	614, 617, 622, 641, 640, 642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 109, 118,
	176, 294, 226, 152, 282, 516, 145, 0, 0, 575,
	577, 587, 604, 111, 112, 119, 127, 134, 144, 148,
	151, 156, 160, 163, 165, 166, 167, 170, 181, 184,
	185, 186, 187, 199, 200, 202, 203, 206, 207, 210,
	211, 212, 213, 215, 216, 217, 221, 223, 225, 227,
	230, 235, 236, 237, 238, 240, 241, 242, 245, 246,
	247, 248, 256, 260, 268, 269, 279, 286, 290, 623,
	205, 0, 0, 0, 0, 0, 367, 0, 0, 0,
	147, 364, 0, 0, 0, 174, 0, 0, 0, 0,
	411, 177, 0, 0, 253, 192, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 1235, 0,
	66, 0, 0, 365, 388, 387, 390, 391, 392, 393,
	0, 0, 131, 389, 394, 395, 396, 1236, 0, 0,
	362, 379, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 376, 377, 0, 0, 0, 0,
	425, 0, 378, 0, 0, 373, 374, 375, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 402, 0, 0, 0, 287, 0, 0, 423, 222,
	0, 258, 158, 175, 125, 110, 120, 0, 157, 201,
	231, 239, 408, 0, 0, 0, 0, 141, 0, 233,
	209, 278, 0, 0, 214, 232, 178, 267, 224, 276,
	277, 159, 288, 289, 262, 285, 293, 250, 0, 0,
	0, 0, 0, 0, 171, 0, 0, 0, 138, 0,
	0, 0, 140, 249, 126, 263, 191, 196, 135, 137,
	136, 121, 244, 265, 130, 139, 254, 259, 113, 261,
	275, 132, 243, 115, 273, 257, 189, 168, 169, 114,
	0, 229, 146, 154, 143, 204, 0, 0, 0, 270,
	271, 142, 296, 122, 284, 117, 123, 283, 198, 0,
	0, 0, 266, 274, 190, 183, 0, 116, 272, 188,
	182, 173, 150, 161, 219, 180, 220, 162, 194, 193,
	195, 0, 0, 0, 255, 281, 297, 128, 0, 0,
	264, 291, 292, 0, 0, 129, 153, 149, 218, 197,
	124, 164, 252, 172, 179, 228, 295, 208, 234, 133,
	280, 251, 412, 424, 418, 420, 419, 416, 417, 415,
	414, 413, 426, 403, 404, 405, 406, 409, 0, 421,
	422, 0, 0, 0, 0, 439, 440, 441, 442, 443,
	444, 445, 438, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 427, 428, 429, 430, 431, 432, 433, 434,
	437, 435, 436, 407, 109, 118, 176, 294, 226, 152,
	282, 0, 145, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 134, 144, 148, 151, 156, 160, 163,
	165, 166, 167, 170, 181, 184, 185, 186, 187, 199,
	200, 202, 203, 206, 207, 210, 211, 212, 213, 215,
	216, 217, 221, 223, 225, 227, 230, 235, 236, 237,
	238, 240, 241, 242, 245, 246, 247, 248, 256, 260,
	268, 269, 279, 286, 290, 205, 0, 0, 0, 0,
	0, 367, 0, 0, 0, 147, 364, 0, 0, 0,
	174, 0, 0, 0, 0, 411, 177, 0, 0, 253,
	192, 0, 0, 0, 0, 400, 401, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 693, 365, 388,
	387, 390, 391, 392, 393, 0, 0, 131, 389, 394,
	395, 396, 0, 0, 0, 362, 379, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 425, 0, 378, 0, 0,
	373, 374, 375, 380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 402, 0, 0, 0,
	287, 0, 0, 423, 222, 0, 258, 158, 175, 125,
	110, 120, 0, 157, 201, 231, 239, 408, 0, 0,
	0, 0, 141, 0, 233, 209, 278, 0, 0, 214,
	232, 178, 267, 224, 276, 277, 159, 288, 289, 262,
	285, 293, 250, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 0, 138, 0, 0, 0, 140, 249, 126,
	263, 191, 196, 135, 137, 136, 121, 244, 265, 130,
	139, 254, 259, 113, 261, 275, 132, 243, 115, 273,
	257, 189, 168, 169, 114, 0, 229, 146, 154, 143,
	204, 0, 0, 0, 270, 271, 142, 296, 122, 284,
	117, 123, 283, 198, 0, 0, 0, 266, 274, 190,
	183, 0, 116, 272, 188, 182, 173, 150, 161, 219,
	180, 220, 162, 194, 193, 195, 0, 0, 0, 255,
	281, 297, 128, 0, 0, 264, 291, 292, 0, 0,
	129, 153, 149, 218, 197, 124, 164, 252, 172, 179,
	228, 295, 208, 234, 133, 280, 251, 412, 424, 418,
	420, 419, 416, 417, 415, 414, 413, 426, 403, 404,
	405, 406, 409, 0, 421, 422, 0, 0, 0, 0,
	439, 440, 441, 442, 443, 444, 445, 438, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 427, 428, 429,
	430, 431, 432, 433, 434, 437, 435, 436, 407, 109,
	118, 176, 294, 226, 152, 282, 0, 145, 0, 0,
	0, 0, 0, 0, 111, 112, 119, 127, 134, 144,
	148, 151, 156, 160, 163, 165, 166, 167, 170, 181,
	184, 185, 186, 187, 199, 200, 202, 203, 206, 207,
	210, 211, 212, 213, 215, 216, 217, 221, 223, 225,
	227, 230, 235, 236, 237, 238, 240, 241, 242, 245,
	246, 247, 248, 256, 260, 268, 269, 279, 286, 290,
	205, 0, 0, 0, 0, 0, 367, 0, 0, 0,
	147, 364, 0, 0, 0, 174, 0, 0, 0, 0,
	411, 177, 0, 0, 253, 192, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 365, 388, 387, 390, 391, 392, 393,
	0, 0, 131, 389, 394, 395, 396, 0, 0, 0,
	362, 379, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 376, 377, 358, 0, 0, 0,
	425, 0, 378, 0, 0, 373, 374, 375, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 402, 0, 0, 0, 287, 0, 0, 423, 222,
	0, 258, 158, 175, 125, 110, 120, 0, 157, 201,
	231, 239, 408, 0, 0, 0, 0, 141, 0, 233,
	209, 278, 0, 0, 214, 232, 178, 267, 224, 276,
	277, 159, 288, 289, 262, 285, 293, 250, 0, 0,
	0, 0, 0, 0, 171, 0, 0, 0, 138, 0,
	0, 0, 140, 249, 126, 263, 191, 196, 135, 137,
	136, 121, 244, 265, 130, 139, 254, 259, 113, 261,
	275, 132, 243, 115, 273, 257, 189, 168, 169, 114,
	0, 229, 146, 154, 143, 204, 0, 0, 0, 270,
	271, 142, 296, 122, 284, 117, 123, 283, 198, 0,
	0, 0, 266, 274, 190, 183, 0, 116, 272, 188,
	182, 173, 150, 161, 219, 180, 220, 162, 194, 193,
	195, 0, 0, 0, 255, 281, 297, 128, 0, 0,
	264, 291, 292, 0, 0, 129, 153, 149, 218, 197,
	124, 164, 252, 172, 179, 228, 295, 208, 234, 133,
	280, 251, 412, 424, 418, 420, 419, 416, 417, 415,
	414, 413, 426, 403, 404, 405, 406, 409, 0, 421,
	422, 0, 0, 0, 0, 439, 440, 441, 442, 443,
	444, 445, 438, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 427, 428, 429, 430, 431, 432, 433, 434,
	437, 435, 436, 407, 109, 118, 176, 294, 226, 152,
	282, 0, 145, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 134, 144, 148, 151, 156, 160, 163,
	165, 166, 167, 170, 181, 184, 185, 186, 187, 199,
	200, 202, 203, 206, 207, 210, 211, 212, 213, 215,
	216, 217, 221, 223, 225, 227, 230, 235, 236, 237,
	238, 240, 241, 242, 245, 246, 247, 248, 256, 260,
	268, 269, 279, 286, 290, 205, 0, 0, 0, 0,
	0, 367, 0, 0, 0, 147, 364, 0, 0, 0,
	174, 0, 0, 0, 0, 411, 177, 0, 0, 253,
	192, 0, 0, 0, 0, 400, 401, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 365, 388,
	1144, 390, 391, 392, 393, 0, 0, 131, 389, 394,
	395, 396, 0, 0, 0, 362, 379, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 376,
	377, 358, 0, 0, 0, 425, 0, 378, 0, 0,
	373, 374, 375, 380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 402, 0, 0, 0,
	287, 0, 0, 423, 222, 0, 258, 158, 175, 125,
	110, 120, 0, 157, 201, 231, 239, 408, 0, 0,
	0, 0, 141, 0, 233, 209, 278, 0, 0, 214,
	232, 178, 267, 224, 276, 277, 159, 288, 289, 262,
	285, 293, 250, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 0, 138, 0, 0, 0, 140, 249, 126,
	263, 191, 196, 135, 137, 136, 121, 244, 265, 130,
	139, 254, 259, 113, 261, 275, 132, 243, 115, 273,
	257, 189, 168, 169, 114, 0, 229, 146, 154, 143,
	204, 0, 0, 0, 270, 271, 142, 296, 122, 284,
	117, 123, 283, 198, 0, 0, 0, 266, 274, 190,
	183, 0, 116, 272, 188, 182, 173, 150, 161, 219,
	180, 220, 162, 194, 193, 195, 0, 0, 0, 255,
	281, 297, 128, 0, 0, 264, 291, 292, 0, 0,
	129, 153, 149, 218, 197, 124, 164, 252, 172, 179,
	228, 295, 208, 234, 133, 280, 251, 412, 424, 418,
	420, 419, 416, 417, 415, 414, 413, 426, 403, 404,
	405, 406, 409, 0, 421, 422, 0, 0, 0, 0,
	439, 440, 441, 442, 443, 444, 445, 438, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 427, 428, 429,
	430, 431, 432, 433, 434, 437, 435, 436, 407, 109,
	118, 176, 294, 226, 152, 282, 0, 145, 0, 0,
	0, 0, 0, 0, 111, 112, 119, 127, 134, 144,
	148, 151, 156, 160, 163, 165, 166, 167, 170, 181,
	184, 185, 186, 187, 199, 200, 202, 203, 206, 207,
	210, 211, 212, 213, 215, 216, 217, 221, 223, 225,
	227, 230, 235, 236, 237, 238, 240, 241, 242, 245,
	246, 247, 248, 256, 260, 268, 269, 279, 286, 290,
	205, 0, 0, 0, 0, 0, 367, 0, 0, 0,
	147, 364, 0, 0, 0, 174, 0, 0, 0, 0,
	411, 177, 0, 0, 253, 192, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 365, 388, 1141, 390, 391, 392, 393,
	0, 0, 131, 389, 394, 395, 396, 0, 0, 0,
	362, 379, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 376, 377, 358, 0, 0, 0,
	425, 0, 378, 0, 0, 373, 374, 375, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 402, 0, 0, 0, 287, 0, 0, 423, 222,
	0, 258, 158, 175, 125, 110, 120, 0, 157, 201,
	231, 239, 408, 0, 0, 0, 0, 141, 0, 233,
	209, 278, 0, 0, 214, 232, 178, 267, 224, 276,
	277, 159, 288, 289, 262, 285, 293, 250, 0, 0,
	0, 0, 0, 0, 171, 0, 0, 0, 138, 0,
	0, 0, 140, 249, 126, 263, 191, 196, 135, 137,
	136, 121, 244, 265, 130, 139, 254, 259, 113, 261,
	275, 132, 243, 115, 273, 257, 189, 168, 169, 114,
	0, 229, 146, 154, 143, 204, 0, 0, 0, 270,
	271, 142, 296, 122, 284, 117, 123, 283, 198, 0,
	0, 0, 266, 274, 190, 183, 0, 116, 272, 188,
	182, 173, 150, 161, 219, 180, 220, 162, 194, 193,
	195, 0, 0, 0, 255, 281, 297, 128, 0, 0,
	264, 291, 292, 0, 0, 129, 153, 149, 218, 197,
	124, 164, 252, 172, 179, 228, 295, 208, 234, 133,
	280, 251, 412, 424, 418, 420, 419, 416, 417, 415,
	414, 413, 426, 403, 404, 405, 406, 409, 0, 421,
	422, 0, 0, 0, 0, 439, 440, 441, 442, 443,
	444, 445, 438, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 427, 428, 429, 430, 431, 432, 433, 434,
	437, 435, 436, 407, 109, 118, 176, 294, 226, 152,
	282, 0, 145, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 134, 144, 148, 151, 156, 160, 163,
	165, 166, 167, 170, 181, 184, 185, 186, 187, 199,
	200, 202, 203, 206, 207, 210, 211, 212, 213, 215,
	216, 217, 221, 223, 225, 227, 230, 235, 236, 237,
	238, 240, 241, 242, 245, 246, 247, 248, 256, 260,
	268, 269, 279, 286, 290, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 367, 0, 0, 0, 147, 364, 0,
	0, 0, 174, 0, 0, 0, 0, 411, 177, 0,
	0, 253, 192, 0, 0, 0, 0, 400, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	365, 388, 387, 390, 391, 392, 393, 0, 0, 131,
	389, 394, 395, 396, 0, 0, 0, 362, 379, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 0, 0, 0, 0, 425, 0, 378,
	0, 0, 373, 374, 375, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 402, 0,
	0, 0, 287, 0, 0, 423, 222, 0, 258, 158,
	175, 125, 110, 120, 0, 157, 201, 231, 239, 408,
	0, 0, 0, 0, 141, 0, 233, 209, 278, 0,
	0, 214, 232, 178, 267, 224, 276, 277, 159, 288,
	289, 262, 285, 293, 250, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 138, 0, 0, 0, 140,
	249, 126, 263, 191, 196, 135, 137, 136, 121, 244,
	265, 130, 139, 254, 259, 113, 261, 275, 132, 243,
	115, 273, 257, 189, 168, 169, 114, 0, 229, 146,
	154, 143, 204, 0, 0, 0, 270, 271, 142, 296,
	122, 284, 117, 123, 283, 198, 0, 0, 0, 266,
	274, 190, 183, 0, 116, 272, 188, 182, 173, 150,
	161, 219, 180, 220, 162, 194, 193, 195, 0, 0,
	0, 255, 281, 297, 128, 0, 0, 264, 291, 292,
	0, 0, 129, 153, 149, 218, 197, 124, 164, 252,
	172, 179, 228, 295, 208, 234, 133, 280, 251, 412,
	424, 418, 420, 419, 416, 417, 415, 414, 413, 426,
	403, 404, 405, 406, 409, 0, 421, 422, 0, 0,
	0, 0, 439, 440, 441, 442, 443, 444, 445, 438,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 427,
	428, 429, 430, 431, 432, 433, 434, 437, 435, 436,
	407, 109, 118, 176, 294, 226, 152, 282, 0, 145,
	0, 0, 0, 0, 0, 0, 111, 112, 119, 127,
	134, 144, 148, 151, 156, 160, 163, 165, 166, 167,
	170, 181, 184, 185, 186, 187, 199, 200, 202, 203,
	206, 207, 210, 211, 212, 213, 215, 216, 217, 221,
	223, 225, 227, 230, 235, 236, 237, 238, 240, 241,
	242, 245, 246, 247, 248, 256, 260, 268, 269, 279,
	286, 290, 205, 0, 0, 0, 0, 0, 367, 0,
	0, 0, 147, 364, 0, 0, 0, 174, 0, 0,
	0, 0, 411, 177, 0, 0, 253, 192, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 1056, 365, 388, 387, 390, 391,
	392, 393, 0, 0, 131, 389, 394, 395, 396, 0,
	0, 0, 362, 379, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 425, 0, 378, 0, 0, 373, 374, 375,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 402, 0, 0, 0, 287, 0, 0,
	423, 222, 0, 258, 158, 175, 125, 110, 120, 0,
	157, 201, 231, 239, 408, 0, 0, 0, 0, 141,
	0, 233, 209, 278, 0, 0, 214, 232, 178, 267,
	224, 276, 277, 159, 288, 289, 262, 285, 293, 250,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	138, 0, 0, 0, 140, 249, 126, 263, 191, 196,
	135, 137, 136, 121, 244, 265, 130, 139, 254, 259,
	113, 261, 275, 132, 243, 115, 273, 257, 189, 168,
	169, 114, 0, 229, 146, 154, 143, 204, 0, 0,
	0, 270, 271, 142, 296, 122, 284, 117, 123, 283,
	198, 0, 0, 0, 266, 274, 190, 183, 0, 116,
	272, 188, 182, 173, 150, 161, 219, 180, 220, 162,
	194, 193, 195, 0, 0, 0, 255, 281, 297, 128,
	0, 0, 264, 291, 292, 0, 0, 129, 153, 149,
	218, 197, 124, 164, 252, 172, 179, 228, 295, 208,
	234, 133, 280, 251, 412, 424, 418, 420, 419, 416,
	417, 415, 414, 413, 426, 403, 404, 405, 406, 409,
	0, 421, 422, 0, 0, 0, 0, 439, 440, 441,
	442, 443, 444, 445, 438, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 427, 428, 429, 430, 431, 432,
	433, 434, 437, 435, 436, 407, 109, 118, 176, 294,
	226, 152, 282, 0, 145, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 134, 144, 148, 151, 156,
	160, 163, 165, 166, 167, 170, 181, 184, 185, 186,
	187, 199, 200, 202, 203, 206, 207, 210, 211, 212,
	213, 215, 216, 217, 221, 223, 225, 227, 230, 235,
	236, 237, 238, 240, 241, 242, 245, 246, 247, 248,
	256, 260, 268, 269, 279, 286, 290, 205, 0, 0,
	0, 0, 0, 367, 0, 0, 0, 147, 364, 0,
	0, 0, 174, 0, 0, 0, 0, 411, 177, 0,
	0, 253, 192, 0, 0, 0, 0, 400, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	365, 388, 387, 390, 391, 392, 393, 0, 0, 131,
	389, 394, 395, 396, 0, 0, 0, 362, 379, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 0, 0, 0, 0, 425, 0, 378,
	0, 0, 373, 374, 375, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 402, 0,
	0, 0, 287, 0, 0, 423, 222, 0, 258, 158,
	175, 125, 110, 120, 0, 157, 201, 231, 239, 408,
	0, 0, 0, 0, 141, 0, 233, 209, 278, 0,
	0, 214, 232, 178, 267, 224, 276, 277, 159, 288,
	289, 262, 285, 293, 250, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 138, 0, 0, 0, 140,
	249, 126, 263, 191, 196, 135, 137, 136, 121, 244,
	265, 130, 139, 254, 259, 113, 261, 275, 132, 243,
	115, 273, 257, 189, 168, 169, 114, 0, 229, 146,
	154, 143, 204, 0, 0, 0, 270, 271, 142, 296,
	122, 284, 117, 123, 283, 198, 0, 0, 0, 266,
	274, 190, 183, 0, 116, 272, 188, 182, 173, 150,
	161, 219, 180, 220, 162, 194, 193, 195, 0, 0,
	0, 255, 281, 297, 128, 0, 0, 264, 291, 292,
	0, 0, 129, 153, 149, 218, 197, 124, 164, 252,
	172, 179, 228, 295, 208, 234, 133, 280, 251, 412,
	424, 418, 420, 419, 416, 417, 415, 414, 413, 426,
	403, 404, 405, 406, 409, 0, 421, 422, 0, 0,
	0, 0, 439, 440, 441, 442, 443, 444, 445, 438,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 427,
	428, 429, 430, 431, 432, 433, 434, 437, 435, 436,
	407, 109, 118, 176, 294, 226, 152, 282, 0, 145,
	0, 0, 0, 0, 0, 0, 111, 112, 119, 127,
	134, 144, 148, 151, 156, 160, 163, 165, 166, 167,
	170, 181, 184, 185, 186, 187, 199, 200, 202, 203,
	206, 207, 210, 211, 212, 213, 215, 216, 217, 221,
	223, 225, 227, 230, 235, 236, 237, 238, 240, 241,
	242, 245, 246, 247, 248, 256, 260, 268, 269, 279,
	286, 290, 205, 0, 0, 0, 0, 0, 367, 0,
	0, 0, 147, 364, 0, 0, 0, 174, 0, 0,
	0, 0, 411, 177, 0, 0, 253, 192, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 365, 388, 387, 390, 391,
	392, 393, 0, 0, 131, 389, 394, 395, 396, 0,
	0, 0, 362, 379, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 425, 0, 378, 0, 0, 373, 374, 375,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 402, 0, 0, 0, 287, 0, 0,
	423, 222, 0, 258, 158, 175, 125, 110, 120, 0,
	157, 201, 231, 239, 408, 0, 0, 0, 0, 141,
	0, 233, 209, 278, 0, 0, 214, 232, 178, 267,
	224, 276, 277, 159, 288, 289, 262, 285, 293, 250,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	138, 0, 0, 0, 140, 249, 126, 263, 191, 196,
	135, 137, 136, 121, 244, 265, 130, 139, 254, 259,
	113, 261, 275, 132, 243, 115, 273, 257, 189, 168,
	169, 114, 0, 229, 146, 154, 143, 204, 0, 0,
	0, 270, 271, 142, 296, 122, 284, 117, 123, 283,
	198, 0, 0, 0, 266, 274, 190, 183, 0, 116,
	272, 188, 182, 173, 150, 161, 219, 180, 220, 162,
	194, 193, 195, 0, 0, 0, 255, 281, 297, 128,
	0, 0, 264, 291, 292, 0, 0, 129, 153, 149,
	218, 197, 124, 164, 252, 172, 179, 228, 295, 208,
	234, 133, 280, 251, 412, 424, 418, 420, 419, 416,
	417, 415, 414, 413, 426, 403, 404, 405, 406, 409,
	0, 421, 422, 0, 0, 0, 0, 709, 710, 711,
	712, 713, 717, 718, 722, 723, 731, 730, 729, 732,
	733, 735, 734, 736, 714, 715, 716, 719, 720, 721,
	724, 725, 728, 726, 727, 407, 109, 118, 176, 294,
	226, 152, 282, 0, 145, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 134, 144, 148, 151, 156,
	160, 163, 165, 166, 167, 170, 181, 184, 185, 186,
	187, 199, 200, 202, 203, 206, 207, 210, 211, 212,
	213, 215, 216, 217, 221, 223, 225, 227, 230, 235,
	236, 237, 238, 240, 241, 242, 245, 246, 247, 248,
	256, 260, 268, 269, 279, 286, 290, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 411, 177, 0,
	0, 253, 192, 0, 0, 0, 0, 400, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	365, 388, 387, 390, 391, 392, 393, 0, 0, 131,
	389, 394, 395, 396, 0, 0, 0, 0, 379, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 0, 0, 0, 0, 425, 0, 378,
	0, 0, 373, 374, 375, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 402, 0,
	0, 0, 287, 0, 0, 423, 222, 0, 258, 158,
	175, 125, 110, 120, 0, 157, 201, 231, 239, 408,
	0, 0, 0, 0, 141, 0, 233, 209, 278, 0,
	2124, 214, 232, 178, 267, 224, 276, 277, 159, 288,
	289, 262, 285, 293, 250, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 138, 0, 0, 0, 140,
	249, 126, 263, 191, 196, 135, 137, 136, 121, 244,
	265, 130, 139, 254, 259, 113, 261, 275, 132, 243,
	115, 273, 257, 189, 168, 169, 114, 0, 229, 146,
	154, 143, 204, 0, 0, 0, 270, 271, 142, 296,
	122, 284, 117, 123, 283, 198, 0, 0, 0, 266,
	274, 190, 183, 0, 116, 272, 188, 182, 173, 150,
	161, 219, 180, 220, 162, 194, 193, 195, 0, 0,
	0, 255, 281, 297, 128, 0, 0, 264, 291, 292,
	0, 0, 129, 153, 149, 218, 197, 124, 164, 252,
	172, 179, 228, 295, 208, 234, 133, 280, 251, 412,
	424, 418, 420, 419, 416, 417, 415, 414, 413, 426,
	403, 404, 405, 406, 409, 0, 421, 422, 0, 0,
	0, 0, 439, 440, 441, 442, 443, 444, 445, 438,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 427,
	428, 429, 430, 431, 432, 433, 434, 437, 435, 436,
	407, 109, 118, 176, 294, 226, 152, 282, 0, 145,
	0, 0, 0, 0, 0, 0, 111, 112, 119, 127,
	134, 144, 148, 151, 156, 160, 163, 165, 166, 167,
	170, 181, 184, 185, 186, 187, 199, 200, 202, 203,
	206, 207, 210, 211, 212, 213, 215, 216, 217, 221,
	223, 225, 227, 230, 235, 236, 237, 238, 240, 241,
	242, 245, 246, 247, 248, 256, 260, 268, 269, 279,
	286, 290, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 411, 177, 0, 0, 253, 192, 0, 0,
	0, 0, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 693, 365, 388, 387, 390, 391,
	392, 393, 0, 0, 131, 389, 394, 395, 396, 0,
	0, 0, 0, 379, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 425, 0, 378, 0, 0, 373, 374, 375,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 402, 0, 0, 0, 287, 0, 0,
	423, 222, 0, 258, 158, 175, 125, 110, 120, 0,
	157, 201, 231, 239, 408, 0, 0, 0, 0, 141,
	0, 233, 209, 278, 0, 0, 214, 232, 178, 267,
	224, 276, 277, 159, 288, 289, 262, 285, 293, 250,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	138, 0, 0, 0, 140, 249, 126, 263, 191, 196,
	135, 137, 136, 121, 244, 265, 130, 139, 254, 259,
	113, 261, 275, 132, 243, 115, 273, 257, 189, 168,
	169, 114, 0, 229, 146, 154, 143, 204, 0, 0,
	0, 270, 271, 142, 296, 122, 284, 117, 123, 283,
	198, 0, 0, 0, 266, 274, 190, 183, 0, 116,
	272, 188, 182, 173, 150, 161, 219, 180, 220, 162,
	194, 193, 195, 0, 0, 0, 255, 281, 297, 128,
	0, 0, 264, 291, 292, 0, 0, 129, 153, 149,
	218, 197, 124, 164, 252, 172, 179, 228, 295, 208,
	234, 133, 280, 251, 412, 424, 418, 420, 419, 416,
	417, 415, 414, 413, 426, 403, 404, 405, 406, 409,
	0, 421, 422, 0, 0, 0, 0, 439, 440, 441,
	442, 443, 444, 445, 438, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 427, 428, 429, 430, 431, 432,
	433, 434, 437, 435, 436, 407, 109, 118, 176, 294,
	226, 152, 282, 0, 145, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 134, 144, 148, 151, 156,
	160, 163, 165, 166, 167, 170, 181, 184, 185, 186,
	187, 199, 200, 202, 203, 206, 207, 210, 211, 212,
	213, 215, 216, 217, 221, 223, 225, 227, 230, 235,
	236, 237, 238, 240, 241, 242, 245, 246, 247, 248,
	256, 260, 268, 269, 279, 286, 290, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 411, 177, 0,
	0, 253, 192, 0, 0, 0, 0, 400, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	365, 388, 387, 390, 391, 392, 393, 0, 0, 131,
	389, 394, 395, 396, 0, 0, 0, 0, 379, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 0, 0, 0, 0, 425, 0, 378,
	0, 0, 373, 374, 375, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 402, 0,
	0, 0, 287, 0, 0, 423, 222, 0, 258, 158,
	175, 125, 110, 120, 0, 157, 201, 231, 239, 408,
	0, 0, 0, 0, 141, 0, 233, 209, 278, 0,
	0, 214, 232, 178, 267, 224, 276, 277, 159, 288,
	289, 262, 285, 293, 250, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 138, 0, 0, 0, 140,
	249, 126, 263, 191, 196, 135, 137, 136, 121, 244,
	265, 130, 139, 254, 259, 113, 261, 275, 132, 243,
	115, 273, 257, 189, 168, 169, 114, 0, 229, 146,
	154, 143, 204, 0, 0, 0, 270, 271, 142, 296,
	122, 284, 117, 123, 283, 198, 0, 0, 0, 266,
	274, 190, 183, 0, 116, 272, 188, 182, 173, 150,
	161, 219, 180, 220, 162, 194, 193, 195, 0, 0,
	0, 255, 281, 297, 128, 0, 0, 264, 291, 292,
	0, 0, 129, 153, 149, 218, 197, 124, 164, 252,
	172, 179, 228, 295, 208, 234, 133, 280, 251, 412,
	424, 418, 420, 419, 416, 417, 415, 414, 413, 426,
	403, 404, 405, 406, 409, 0, 421, 422, 0, 0,
	0, 0, 439, 440, 441, 442, 443, 444, 445, 438,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 427,
	428, 429, 430, 431, 432, 433, 434, 437, 435, 436,
	407, 109, 118, 176, 294, 226, 152, 282, 0, 145,
	0, 0, 0, 0, 0, 0, 111, 112, 119, 127,
	134, 144, 148, 151, 156, 160, 163, 165, 166, 167,
	170, 181, 184, 185, 186, 187, 199, 200, 202, 203,
	206, 207, 210, 211, 212, 213, 215, 216, 217, 221,
	223, 225, 227, 230, 235, 236, 237, 238, 240, 241,
	242, 245, 246, 247, 248, 256, 260, 268, 269, 279,
	286, 290, 205, 0, 0, 0, 0, 1213, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 177, 0, 0, 253, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1215, 1217,
	0, 0, 0, 0, 0, 107, 0, 1220, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 287, 0, 1216,
	0, 222, 0, 258, 158, 175, 125, 110, 120, 0,
	157, 201, 231, 239, 0, 0, 0, 0, 0, 141,
	0, 233, 209, 278, 0, 0, 214, 232, 178, 267,
	224, 276, 277, 159, 288, 289, 262, 285, 293, 250,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	138, 0, 0, 0, 140, 249, 126, 263, 191, 196,
	135, 137, 136, 121, 244, 265, 130, 139, 254, 259,
	113, 261, 275, 132, 243, 115, 273, 257, 189, 168,
	169, 114, 0, 229, 146, 154, 143, 204, 0, 0,
	0, 270, 271, 142, 296, 122, 284, 117, 123, 283,
	198, 0, 0, 0, 266, 274, 190, 183, 0, 116,
	272, 188, 182, 173, 150, 161, 219, 180, 220, 162,
	194, 193, 195, 0, 0, 0, 255, 281, 297, 128,
	0, 0, 264, 291, 292, 0, 0, 129, 153, 149,
	218, 197, 124, 164, 252, 172, 179, 228, 295, 208,
	234, 133, 280, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 756, 757, 758,
	759, 760, 764, 765, 769, 770, 778, 777, 776, 779,
	780, 782, 781, 783, 761, 762, 763, 766, 767, 768,
	771, 772, 775, 773, 774, 0, 109, 118, 176, 294,
	226, 152, 282, 0, 145, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 134, 144, 148, 151, 156,
	160, 163, 165, 166, 167, 170, 181, 184, 185, 186,
	187, 199, 200, 202, 203, 206, 207, 210, 211, 212,
	213, 215, 216, 217, 221, 223, 225, 227, 230, 235,
	236, 237, 238, 240, 241, 242, 245, 246, 247, 248,
	256, 260, 268, 269, 279, 286, 290, 205, 0, 0,
	0, 0, 1213, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 177, 0,
	0, 253, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1215, 1217, 0, 0, 0, 0, 0,
	107, 0, 1220, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	0, 0, 287, 0, 1216, 0, 222, 0, 258, 158,
	175, 125, 110, 120, 0, 157, 201, 231, 239, 0,
	0, 0, 0, 0, 141, 0, 233, 209, 278, 0,
	0, 1211, 232, 178, 267, 224, 276, 277, 159, 288,
	289, 262, 285, 293, 250, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 138, 0, 0, 0, 140,
	249, 126, 263, 191, 196, 135, 137, 136, 121, 244,
	265, 130, 139, 254, 259, 113, 261, 275, 132, 243,
	115, 273, 257, 189, 168, 169, 114, 0, 229, 146,
	154, 143, 204, 0, 0, 0, 270, 271, 142, 296,
	122, 284, 117, 123, 283, 198, 0, 0, 0, 266,
	274, 190, 183, 0, 116, 272, 188, 182, 173, 150,
	161, 219, 180, 220, 162, 194, 193, 195, 0, 0,
	0, 255, 281, 297, 128, 0, 0, 264, 291, 292,
	0, 0, 129, 153, 149, 218, 197, 124, 164, 252,
	172, 179, 228, 295, 208, 234, 133, 280, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 756, 757, 758, 759, 760, 764, 765, 769,
	770, 778, 777, 776, 779, 780, 782, 781, 783, 761,
	762, 763, 766, 767, 768, 771, 772, 775, 773, 774,
	0, 109, 118, 176, 294, 226, 152, 282, 0, 145,
	0, 0, 0, 0, 0, 0, 111, 112, 119, 127,
	134, 144, 148, 151, 156, 160, 163, 165, 166, 167,
	170, 181, 184, 185, 186, 187, 199, 200, 202, 203,
	206, 207, 210, 211, 212, 213, 215, 216, 217, 221,
	223, 225, 227, 230, 235, 236, 237, 238, 240, 241,
	242, 245, 246, 247, 248, 256, 260, 268, 269, 279,
	286, 290, 205, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 177, 0, 0, 253, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 0, 755, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	748, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 222, 0, 258, 158, 175, 125, 110, 120, 0,
	157, 201, 231, 239, 0, 0, 0, 0, 0, 141,
	0, 233, 209, 278, 0, 0, 214, 232, 178, 267,
	224, 276, 277, 159, 288, 289, 262, 285, 293, 250,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	138, 0, 0, 0, 140, 249, 126, 263, 191, 196,
	135, 137, 136, 121, 244, 265, 130, 139, 254, 259,
	113, 261, 275, 132, 243, 115, 273, 257, 189, 168,
	169, 114, 0, 229, 146, 154, 143, 204, 0, 0,
	0, 270, 271, 142, 296, 122, 284, 117, 123, 283,
	198, 0, 0, 0, 266, 274, 190, 183, 0, 116,
	272, 188, 182, 173, 150, 161, 219, 180, 220, 162,
	194, 193, 195, 0, 0, 0, 255, 281, 297, 128,
	0, 0, 264, 291, 292, 0, 0, 129, 153, 149,
	218, 197, 124, 164, 252, 172, 179, 228, 295, 208,
	234, 133, 280, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 756, 757, 758,
	759, 760, 764, 765, 769, 770, 778, 777, 776, 779,
	780, 782, 781, 783, 761, 762, 763, 766, 767, 768,
	771, 772, 775, 773, 774, 0, 109, 118, 176, 294,
	226, 152, 282, 0, 145, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 134, 144, 148, 151, 156,
	160, 163, 165, 166, 167, 170, 181, 184, 185, 186,
	187, 199, 200, 202, 203, 206, 207, 210, 211, 212,
	213, 215, 216, 217, 221, 223, 225, 227, 230, 235,
	236, 237, 238, 240, 241, 242, 245, 246, 247, 248,
	256, 260, 268, 269, 279, 286, 290, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 174, 1465, 0, 0, 0, 0, 177, 0,
	0, 253, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 1220, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 222, 0, 258, 158,
	175, 125, 110, 120, 0, 157, 201, 231, 239, 0,
	0, 0, 0, 0, 141, 0, 233, 209, 278, 0,
	0, 214, 232, 178, 267, 224, 276, 277, 159, 288,
	289, 262, 285, 293, 250, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 138, 0, 0, 0, 140,
	249, 126, 263, 191, 196, 135, 137, 136, 121, 244,
	265, 130, 139, 254, 259, 113, 261, 275, 132, 243,
	115, 273, 257, 189, 168, 169, 114, 0, 229, 146,
	154, 143, 204, 0, 0, 0, 270, 271, 142, 296,
	122, 284, 117, 123, 283, 198, 0, 0, 0, 266,
	274, 190, 183, 0, 116, 272, 188, 182, 173, 150,
	161, 219, 180, 220, 162, 194, 193, 195, 0, 0,
	0, 255, 281, 297, 128, 0, 0, 264, 291, 292,
	0, 0, 129, 153, 149, 218, 197, 124, 164, 252,
	172, 179, 228, 295, 208, 234, 133, 280, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 756, 757, 758, 759, 760, 764, 765, 769,
	770, 778, 777, 776, 779, 780, 782, 781, 783, 761,
	762, 763, 766, 767, 768, 771, 772, 775, 773, 774,
	0, 109, 118, 176, 294, 226, 152, 282, 0, 145,
	0, 0, 0, 0, 0, 0, 111, 112, 119, 127,
	134, 144, 148, 151, 156, 160, 163, 165, 166, 167,
	170, 181, 184, 185, 186, 187, 199, 200, 202, 203,
	206, 207, 210, 211, 212, 213, 215, 216, 217, 221,
	223, 225, 227, 230, 235, 236, 237, 238, 240, 241,
	242, 245, 246, 247, 248, 256, 260, 268, 269, 279,
	286, 290, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 177, 0, 0, 253, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 1220, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 222, 0, 258, 158, 175, 125, 110, 120, 0,
	157, 201, 231, 239, 0, 0, 0, 0, 0, 141,
	0, 233, 209, 278, 0, 0, 214, 232, 178, 267,
	224, 276, 277, 159, 288, 289, 262, 285, 293, 250,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	138, 0, 0, 0, 140, 249, 126, 263, 191, 196,
	135, 137, 136, 121, 244, 265, 130, 139, 254, 259,
	113, 261, 275, 132, 243, 115, 273, 257, 189, 168,
	169, 114, 0, 229, 146, 154, 143, 204, 0, 0,
	0, 270, 271, 142, 296, 122, 284, 117, 123, 283,
	198, 0, 0, 0, 266, 274, 190, 183, 0, 116,
	272, 188, 182, 173, 150, 161, 219, 180, 220, 162,
	194, 193, 195, 0, 0, 0, 255, 281, 297, 128,
	0, 0, 264, 291, 292, 0, 0, 129, 153, 149,
	218, 197, 124, 164, 252, 172, 179, 228, 295, 208,
	234, 133, 280, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 756, 757, 758,
	759, 760, 764, 765, 769, 770, 778, 777, 776, 779,
	780, 782, 781, 783, 761, 762, 763, 766, 767, 768,
	771, 772, 775, 773, 774, 0, 109, 118, 176, 294,
	226, 152, 282, 0, 145, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 134, 144, 148, 151, 156,
	160, 163, 165, 166, 167, 170, 181, 184, 185, 186,
	187, 199, 200, 202, 203, 206, 207, 210, 211, 212,
	213, 215, 216, 217, 221, 223, 225, 227, 230, 235,
	236, 237, 238, 240, 241, 242, 245, 246, 247, 248,
	256, 260, 268, 269, 279, 286, 290, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 177, 0,
	0, 253, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	752, 0, 755, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 222, 0, 258, 158,
	175, 125, 110, 120, 0, 157, 201, 231, 239, 0,
	0, 0, 0, 0, 141, 0, 233, 209, 278, 0,
	0, 214, 232, 178, 267, 224, 276, 277, 159, 288,
	289, 262, 285, 293, 250, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 138, 0, 0, 0, 140,
	249, 126, 263, 191, 196, 135, 137, 136, 121, 244,
	265, 130, 139, 254, 259, 113, 261, 275, 132, 243,
	115, 273, 257, 189, 168, 169, 114, 0, 229, 146,
	154, 143, 204, 0, 0, 0, 270, 271, 142, 296,
	122, 284, 117, 123, 283, 198, 0, 0, 0, 266,
	274, 190, 183, 0, 116, 272, 188, 182, 173, 150,
	161, 219, 180, 220, 162, 194, 193, 195, 0, 0,
	0, 255, 281, 297, 128, 0, 0, 264, 291, 292,
	0, 0, 129, 153, 149, 218, 197, 124, 164, 252,
	172, 179, 228, 295, 208, 234, 133, 280, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 756, 757, 758, 759, 760, 764, 765, 769,
	770, 778, 777, 776, 779, 780, 782, 781, 783, 761,
	762, 763, 766, 767, 768, 771, 772, 775, 773, 774,
	0, 109, 118, 176, 294, 226, 152, 282, 0, 145,
	0, 0, 0, 0, 0, 0, 111, 112, 119, 127,
	134, 144, 148, 151, 156, 160, 163, 165, 166, 167,
	170, 181, 184, 185, 186, 187, 199, 200, 202, 203,
	206, 207, 210, 211, 212, 213, 215, 216, 217, 221,
	223, 225, 227, 230, 235, 236, 237, 238, 240, 241,
	242, 245, 246, 247, 248, 256, 260, 268, 269, 279,
	286, 290, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 177, 0, 0, 253, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 793, 792, 802, 803, 795, 796, 797, 798,
	799, 800, 801, 794, 0, 0, 804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 222, 0, 258, 158, 175, 125, 110, 120, 0,
	157, 201, 231, 239, 0, 0, 0, 0, 0, 141,
	0, 233, 209, 278, 0, 0, 214, 232, 178, 267,
	224, 276, 277, 159, 288, 289, 262, 285, 293, 250,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	138, 0, 0, 0, 140, 249, 126, 263, 191, 196,
	135, 137, 136, 121, 244, 265, 130, 139, 254, 259,
	113, 261, 275, 132, 243, 115, 273, 257, 189, 168,
	169, 114, 0, 229, 146, 154, 143, 204, 0, 0,
	0, 270, 271, 142, 296, 122, 284, 117, 123, 283,
	198, 0, 0, 0, 266, 274, 190, 183, 0, 116,
	272, 188, 182, 173, 150, 161, 219, 180, 220, 162,
	194, 193, 195, 0, 0, 0, 255, 281, 297, 128,
	0, 0, 264, 291, 292, 0, 0, 129, 153, 149,
	218, 197, 124, 164, 252, 172, 179, 228, 295, 208,
	234, 133, 280, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 176, 294,
	226, 152, 282, 0, 145, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 134, 144, 148, 151, 156,
	160, 163, 165, 166, 167, 170, 181, 184, 185, 186,
	187, 199, 200, 202, 203, 206, 207, 210, 211, 212,
	213, 215, 216, 217, 221, 223, 225, 227, 230, 235,
	236, 237, 238, 240, 241, 242, 245, 246, 247, 248,
	256, 260, 268, 269, 279, 286, 290, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	177, 0, 0, 253, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 222, 0,
	258, 158, 175, 125, 110, 120, 0, 157, 201, 231,
	239, 0, 0, 0, 0, 0, 141, 0, 233, 209,
	278, 0, 0, 214, 232, 178, 267, 224, 276, 277,
	159, 288, 289, 262, 285, 293, 250, 0, 0, 0,
	0, 0, 0, 171, 0, 0, 0, 138, 0, 0,
	0, 140, 249, 126, 263, 191, 196, 135, 137, 136,
	121, 244, 265, 130, 139, 254, 259, 113, 261, 275,
	132, 243, 115, 273, 257, 189, 168, 169, 114, 0,
	229, 146, 154, 143, 204, 0, 0, 0, 270, 271,
	142, 296, 122, 284, 117, 123, 283, 198, 0, 0,
	0, 266, 274, 190, 183, 0, 116, 272, 188, 182,
	173, 150, 161, 219, 180, 220, 162, 194, 193, 195,
	0, 0, 0, 255, 281, 297, 128, 0, 0, 264,
	291, 292, 0, 0, 129, 153, 149, 218, 197, 124,
	164, 252, 172, 179, 228, 295, 208, 234, 133, 280,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 118, 176, 294, 226, 152, 282,
	0, 145, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 134, 144, 148, 151, 156, 160, 163, 165,
	166, 167, 170, 181, 184, 185, 186, 187, 199, 200,
	202, 203, 206, 207, 210, 211, 212, 213, 215, 216,
	217, 221, 223, 225, 227, 230, 235, 236, 237, 238,
	240, 241, 242, 245, 246, 247, 248, 256, 260, 268,
	269, 279, 286, 290, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 177, 0, 0,
	253, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 222, 0, 258, 158, 175,
	125, 110, 120, 0, 157, 201, 231, 239, 0, 0,
	0, 0, 0, 141, 0, 233, 209, 278, 0, 0,
	214, 232, 178, 267, 224, 276, 277, 159, 288, 289,
	262, 285, 293, 250, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 138, 0, 0, 0, 140, 249,
	126, 263, 191, 196, 135, 137, 136, 121, 244, 265,
	130, 139, 254, 259, 113, 261, 275, 132, 243, 115,
	273, 257, 189, 168, 169, 114, 0, 229, 146, 154,
	143, 204, 0, 0, 0, 270, 271, 142, 296, 122,
	284, 117, 123, 283, 198, 0, 0, 0, 266, 274,
	190, 183, 0, 116, 272, 188, 182, 173, 150, 161,
	219, 180, 220, 162, 194, 193, 195, 0, 0, 0,
	255, 281, 297, 128, 0, 0, 264, 291, 292, 0,
	0, 129, 153, 149, 218, 197, 124, 164, 252, 172,
	179, 228, 295, 208, 234, 133, 280, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 118, 176, 294, 226, 152, 282, 0, 145, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 134,
	144, 148, 151, 156, 160, 163, 165, 166, 167, 170,
	181, 184, 185, 186, 187, 199, 200, 202, 203, 206,
	207, 210, 211, 212, 213, 215, 216, 217, 221, 223,
	225, 227, 230, 235, 236, 237, 238, 240, 241, 242,
	245, 246, 247, 248, 256, 260, 268, 269, 279, 286,
	290, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 926, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 177, 0, 0, 253, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 496, 0, 925, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	222, 0, 258, 158, 175, 125, 110, 120, 0, 157,
	201, 231, 239, 0, 0, 0, 0, 0, 141, 0,
	233, 209, 278, 0, 0, 214, 232, 178, 267, 224,
	276, 277, 159, 288, 289, 262, 285, 293, 250, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 138,
	0, 0, 0, 140, 249, 126, 263, 191, 196, 135,
	137, 136, 121, 244, 265, 130, 139, 254, 259, 113,
	261, 275, 132, 243, 115, 273, 257, 189, 168, 169,
	114, 0, 229, 146, 154, 143, 204, 0, 0, 0,
	270, 271, 142, 296, 122, 284, 117, 123, 283, 198,
	0, 0, 0, 266, 274, 190, 183, 0, 116, 272,
	188, 182, 173, 150, 161, 219, 180, 220, 162, 194,
	193, 195, 0, 0, 0, 255, 281, 297, 128, 0,
	0, 264, 291, 292, 0, 0, 129, 153, 149, 218,
	197, 124, 164, 252, 172, 179, 228, 295, 208, 234,
	133, 280, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 118, 176, 294, 226,
	152, 282, 0, 145, 0, 0, 0, 0, 0, 0,
	111, 112, 119, 127, 134, 144, 148, 151, 156, 160,
	163, 165, 166, 167, 170, 181, 184, 185, 186, 187,
	199, 200, 202, 203, 206, 207, 210, 211, 212, 213,
	215, 216, 217, 221, 223, 225, 227, 230, 235, 236,
	237, 238, 240, 241, 242, 245, 246, 247, 248, 256,
	260, 268, 269, 279, 286, 290, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 177, 0, 0,
	253, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 222, 0, 258, 158, 175,
	125, 110, 120, 0, 157, 201, 231, 239, 0, 0,
	0, 0, 0, 141, 0, 233, 209, 278, 0, 0,
	214, 232, 178, 267, 224, 276, 277, 159, 288, 289,
	262, 285, 293, 250, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 138, 0, 0, 0, 140, 249,
	126, 263, 191, 196, 135, 137, 136, 121, 244, 265,
	130, 139, 254, 259, 113, 261, 275, 132, 243, 115,
	273, 257, 189, 168, 169, 114, 0, 229, 146, 154,
	143, 204, 0, 0, 0, 270, 271, 142, 296, 122,
	284, 117, 123, 283, 198, 0, 0, 0, 266, 274,
	190, 183, 0, 116, 272, 188, 182, 173, 150, 161,
	219, 180, 220, 162, 194, 193, 195, 0, 0, 0,
	255, 281, 297, 128, 0, 0, 264, 291, 292, 0,
	0, 129, 153, 149, 218, 197, 124, 164, 252, 172,
	179, 228, 295, 208, 234, 133, 280, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 118, 176, 294, 226, 152, 282, 0, 145, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 134,
	144, 148, 151, 156, 160, 163, 165, 166, 167, 170,
	181, 184, 185, 186, 187, 199, 200, 202, 203, 206,
	207, 210, 211, 212, 213, 215, 216, 217, 221, 223,
	225, 227, 230, 235, 236, 237, 238, 240, 241, 242,
	245, 246, 247, 248, 256, 260, 268, 269, 279, 286,
	290, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 177, 0, 0, 253, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	222, 0, 258, 158, 175, 125, 110, 120, 0, 157,
	201, 231, 239, 0, 0, 0, 0, 0, 141, 0,
	233, 209, 278, 0, 0, 214, 232, 178, 267, 224,
	276, 277, 159, 288, 289, 262, 285, 293, 250, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 138,
	0, 0, 0, 140, 249, 126, 263, 191, 196, 135,
	137, 136, 121, 244, 265, 130, 139, 254, 259, 113,
	261, 275, 132, 243, 115, 273, 257, 189, 168, 169,
	114, 0, 229, 146, 154, 143, 204, 0, 0, 0,
	270, 271, 142, 296, 122, 284, 117, 123, 283, 198,
	0, 0, 0, 266, 274, 190, 183, 0, 116, 272,
	188, 182, 173, 150, 161, 219, 180, 220, 162, 194,
	193, 195, 0, 0, 0, 255, 281, 297, 128, 0,
	0, 264, 291, 292, 0, 0, 129, 153, 149, 218,
	197, 124, 164, 252, 172, 179, 228, 295, 208, 234,
	133, 280, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 118, 176, 294, 226,
	152, 282, 0, 145, 0, 0, 0, 0, 0, 0,
	111, 112, 119, 127, 134, 144, 148, 151, 156, 160,
	163, 165, 166, 167, 170, 181, 184, 185, 186, 187,
	199, 200, 202, 203, 206, 207, 210, 211, 212, 213,
	215, 216, 217, 221, 223, 225, 227, 230, 235, 236,
	237, 238, 240, 241, 242, 245, 246, 247, 248, 256,
	260, 268, 269, 279, 286, 290, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 147, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 177, 0, 0,
	253, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 222, 0, 258, 158, 175,
	125, 110, 120, 0, 157, 201, 231, 239, 0, 0,
	0, 0, 0, 141, 0, 233, 209, 278, 0, 0,
	214, 232, 178, 267, 224, 276, 277, 159, 288, 289,
	262, 285, 293, 250, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 138, 0, 0, 0, 140, 249,
	126, 263, 191, 196, 135, 137, 136, 121, 244, 265,
	130, 139, 254, 259, 113, 261, 275, 132, 243, 115,
	273, 257, 189, 168, 169, 114, 0, 229, 146, 154,
	143, 204, 0, 0, 0, 270, 271, 142, 296, 122,
	284, 117, 123, 283, 198, 0, 0, 0, 266, 274,
	190, 183, 0, 116, 272, 188, 182, 173, 150, 161,
	219, 180, 220, 162, 194, 193, 195, 0, 0, 0,
	255, 281, 297, 128, 0, 0, 264, 291, 292, 0,
	0, 129, 153, 149, 218, 197, 124, 164, 252, 172,
	179, 228, 295, 208, 234, 133, 280, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 118, 176, 294, 226, 152, 282, 0, 145, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 134,
	144, 148, 151, 156, 160, 163, 165, 166, 167, 170,
	181, 184, 185, 186, 187, 199, 200, 202, 203, 206,
	207, 210, 211, 212, 213, 215, 216, 217, 221, 223,
	225, 227, 230, 235, 236, 237, 238, 240, 241, 242,
	245, 246, 247, 248, 256, 260, 268, 269, 279, 286,
	290, 457, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 177,
	0, 0, 253, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 222, 0, 258,
	158, 175, 125, 110, 120, 0, 157, 201, 231, 239,
	0, 0, 0, 0, 0, 141, 0, 233, 209, 278,
	0, 0, 214, 232, 178, 267, 224, 276, 277, 159,
	288, 289, 262, 285, 293, 250, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 138, 0, 0, 0,
	140, 249, 126, 263, 191, 196, 135, 137, 136, 121,
	244, 265, 130, 139, 254, 259, 113, 261, 275, 132,
	243, 115, 273, 257, 189, 168, 169, 114, 0, 229,
	146, 154, 143, 204, 0, 0, 0, 270, 271, 142,
	296, 122, 284, 117, 123, 283, 198, 0, 0, 0,
	266, 274, 190, 183, 0, 116, 272, 188, 182, 173,
	150, 161, 219, 180, 220, 162, 194, 193, 195, 0,
	0, 0, 255, 281, 297, 128, 0, 0, 264, 291,
	292, 0, 0, 129, 153, 149, 218, 197, 124, 164,
	252, 172, 179, 228, 295, 208, 234, 133, 280, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 118, 176, 294, 226, 152, 282, 0,
	145, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 134, 144, 148, 151, 156, 160, 163, 165, 166,
	167, 170, 181, 184, 185, 186, 187, 199, 200, 202,
	203, 206, 207, 210, 211, 212, 213, 215, 216, 217,
	221, 223, 225, 227, 230, 235, 236, 237, 238, 240,
	241, 242, 245, 246, 247, 248, 256, 260, 268, 269,
	279, 286, 290, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 177, 0, 0, 253, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 104, 0, 0, 287, 0,
	0, 0, 222, 0, 258, 158, 175, 125, 110, 120,
	0, 157, 201, 231, 239, 0, 0, 0, 0, 0,
	141, 0, 233, 209, 278, 0, 0, 214, 232, 178,
	267, 224, 276, 277, 159, 288, 289, 262, 285, 293,
	250, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 138, 0, 0, 0, 140, 249, 126, 263, 191,
	196, 135, 137, 136, 121, 244, 265, 130, 139, 254,
	259, 113, 261, 275, 132, 243, 115, 273, 257, 189,
	168, 169, 114, 0, 229, 146, 154, 143, 204, 0,
	0, 0, 270, 271, 142, 296, 122, 284, 117, 123,
	283, 198, 0, 0, 0, 266, 274, 190, 183, 0,
	116, 272, 188, 182, 173, 150, 161, 219, 180, 220,
	162, 194, 193, 195, 0, 0, 0, 255, 281, 297,
	128, 0, 0, 264, 291, 292, 0, 0, 129, 153,
	149, 218, 197, 124, 164, 252, 172, 179, 228, 295,
	208, 234, 133, 280, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 118, 176,
	294, 226, 152, 282, 0, 145, 0, 0, 0, 0,
	0, 0, 111, 112, 119, 127, 134, 144, 148, 151,
	156, 160, 163, 165, 166, 167, 170, 181, 184, 185,
	186, 187, 199, 200, 202, 203, 206, 207, 210, 211,
	212, 213, 215, 216, 217, 221, 223, 225, 227, 230,
	235, 236, 237, 238, 240, 241, 242, 245, 246, 247,
	248, 256, 260, 268, 269, 279, 286, 290, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 177,
	0, 0, 253, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 222, 0, 258,
	158, 175, 125, 110, 120, 0, 157, 201, 231, 239,
	0, 0, 0, 0, 0, 141, 0, 233, 209, 278,
	0, 0, 214, 232, 178, 267, 224, 276, 277, 159,
	288, 289, 262, 285, 293, 250, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 138, 0, 0, 0,
	140, 249, 126, 263, 191, 196, 135, 137, 136, 121,
	244, 265, 130, 139, 254, 259, 113, 261, 275, 132,
	243, 115, 273, 257, 189, 168, 169, 114, 0, 229,
	146, 154, 143, 204, 0, 0, 0, 270, 271, 142,
	296, 122, 284, 117, 123, 283, 198, 0, 0, 0,
	266, 274, 190, 183, 0, 116, 272, 188, 182, 173,
	150, 161, 219, 180, 220, 162, 194, 193, 195, 0,
	0, 0, 255, 281, 297, 128, 0, 0, 264, 291,
	292, 0, 0, 129, 153, 149, 218, 197, 124, 164,
	252, 172, 179, 228, 295, 208, 234, 133, 280, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 118, 176, 294, 226, 152, 282, 0,
	145, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 134, 144, 148, 151, 156, 160, 163, 165, 166,
	167, 170, 181, 184, 185, 186, 187, 199, 200, 202,
	203, 206, 207, 210, 211, 212, 213, 215, 216, 217,
	221, 223, 225, 227, 230, 235, 236, 237, 238, 240,
	241, 242, 245, 246, 247, 248, 256, 260, 268, 269,
	279, 286, 290, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 177, 0, 0, 253, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 222, 0, 258, 158, 175, 125, 110, 120,
	0, 157, 201, 231, 239, 0, 0, 0, 0, 0,
	141, 0, 233, 209, 278, 0, 0, 214, 232, 178,
	267, 224, 276, 277, 159, 288, 289, 262, 285, 293,
	250, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 138, 0, 0, 0, 140, 249, 126, 263, 191,
	196, 135, 137, 136, 121, 244, 265, 130, 139, 254,
	259, 113, 261, 275, 132, 243, 115, 273, 257, 189,
	168, 169, 114, 0, 229, 146, 154, 143, 204, 0,
	0, 0, 270, 271, 142, 296, 122, 284, 117, 123,
	283, 198, 0, 0, 0, 266, 274, 190, 183, 0,
	116, 272, 188, 182, 173, 150, 161, 219, 180, 220,
	162, 194, 193, 195, 0, 0, 0, 255, 281, 297,
	128, 0, 0, 264, 291, 292, 0, 0, 129, 153,
	149, 218, 197, 124, 164, 252, 172, 179, 228, 295,
	208, 234, 133, 280, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 118, 176,
	294, 226, 152, 282, 0, 145, 0, 0, 0, 0,
	0, 0, 111, 112, 119, 127, 134, 144, 148, 151,
	156, 160, 163, 165, 166, 167, 170, 181, 184, 185,
	186, 187, 199, 200, 202, 203, 206, 207, 210, 211,
	212, 213, 215, 216, 217, 221, 223, 225, 227, 230,
	235, 236, 237, 238, 240, 241, 242, 245, 246, 247,
	248, 256, 260, 268, 269, 279, 286, 290, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 177,
	0, 0, 253, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 222, 0, 258,
	158, 175, 125, 110, 120, 0, 157, 201, 231, 239,
	0, 0, 0, 0, 0, 141, 0, 233, 209, 278,
	0, 0, 214, 232, 178, 267, 224, 276, 277, 159,
	288, 289, 262, 285, 293, 250, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 138, 0, 0, 0,
	140, 249, 126, 263, 191, 196, 135, 137, 136, 121,
	244, 265, 130, 139, 254, 259, 113, 261, 275, 132,
	243, 115, 273, 257, 189, 168, 169, 114, 0, 229,
	146, 154, 143, 204, 0, 0, 0, 270, 271, 142,
	296, 122, 284, 117, 474, 283, 198, 0, 0, 0,
	266, 274, 190, 183, 0, 116, 272, 188, 182, 173,
	150, 161, 219, 180, 220, 162, 194, 193, 195, 0,
	0, 0, 255, 281, 297, 128, 0, 0, 264, 291,
	292, 0, 0, 129, 153, 149, 218, 475, 473, 164,
	252, 172, 179, 228, 295, 208, 234, 133, 280, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 118, 176, 294, 226, 152, 282, 0,
	145, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 134, 144, 148, 151, 156, 160, 163, 165, 166,
	167, 170, 181, 184, 185, 186, 187, 199, 200, 202,
	203, 206, 207, 210, 211, 212, 213, 215, 216, 217,
	221, 223, 225, 227, 230, 235, 236, 237, 238, 240,
	241, 242, 245, 246, 247, 248, 256, 260, 268, 269,
	279, 286, 290, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 177, 0, 0, 253, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 222, 0, 258, 158, 175, 125, 110, 120,
	0, 157, 201, 231, 239, 0, 0, 0, 0, 0,
	141, 0, 233, 209, 278, 0, 0, 214, 232, 178,
	267, 224, 276, 277, 159, 288, 289, 262, 285, 293,
	250, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 138, 0, 0, 0, 140, 249, 126, 263, 191,
	196, 135, 137, 136, 121, 244, 265, 130, 139, 254,
	259, 113, 261, 275, 132, 243, 115, 273, 257, 189,
	168, 169, 114, 0, 229, 146, 154, 143, 204, 0,
	0, 0, 270, 271, 142, 296, 122, 284, 117, 123,
	283, 198, 0, 0, 0, 266, 274, 190, 183, 0,
	116, 272, 188, 182, 173, 150, 161, 219, 180, 220,
	162, 194, 193, 195, 0, 0, 0, 255, 281, 297,
	128, 0, 0, 264, 291, 292, 0, 0, 129, 153,
	149, 218, 197, 124, 164, 252, 172, 179, 228, 295,
	208, 234, 133, 280, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 118, 176,
	294, 226, 152, 282, 0, 145, 0, 0, 0, 0,
	0, 0, 111, 112, 119, 127, 134, 144, 148, 151,
	156, 160, 163, 165, 166, 167, 170, 181, 184, 185,
	186, 187, 199, 200, 202, 203, 206, 207, 210, 211,
	212, 213, 215, 216, 217, 221, 223, 225, 227, 230,
	235, 236, 237, 238, 240, 241, 242, 245, 246, 247,
	248, 256, 260, 268, 269, 279, 286, 290, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 177,
	0, 0, 253, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 222, 0, 258,
	158, 175, 125, 110, 120, 0, 157, 201, 231, 239,
	0, 0, 0, 0, 0, 141, 0, 233, 209, 278,
	0, 0, 214, 232, 178, 267, 224, 276, 277, 159,
	288, 289, 262, 285, 293, 250, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 138, 0, 0, 0,
	140, 249, 126, 263, 191, 196, 135, 137, 136, 121,
	244, 265, 130, 139, 254, 259, 113, 261, 917, 132,
	243, 115, 273, 257, 189, 168, 169, 114, 0, 229,
	146, 154, 143, 204, 0, 0, 0, 270, 271, 142,
	296, 122, 284, 117, 474, 283, 198, 0, 0, 0,
	266, 274, 190, 183, 0, 116, 272, 188, 182, 173,
	150, 161, 219, 180, 220, 162, 194, 193, 195, 0,
	0, 0, 255, 281, 297, 128, 0, 0, 264, 291,
	292, 0, 0, 129, 153, 149, 218, 475, 473, 164,
	252, 172, 179, 228, 295, 208, 234, 133, 280, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 118, 176, 294, 226, 152, 282, 0,
	145, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 134, 144, 148, 151, 156, 160, 163, 165, 166,
	167, 170, 181, 184, 185, 186, 187, 199, 200, 202,
	203, 206, 207, 210, 211, 212, 213, 215, 216, 217,
	221, 223, 225, 227, 230, 235, 236, 237, 238, 240,
	241, 242, 245, 246, 247, 248, 256, 260, 268, 269,
	279, 286, 290, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 177, 0, 0, 253, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 222, 0, 258, 158, 175, 125, 110, 120,
	0, 157, 201, 231, 239, 0, 0, 0, 0, 0,
	141, 0, 233, 209, 278, 0, 0, 214, 232, 178,
	267, 224, 276, 277, 159, 288, 289, 262, 285, 293,
	250, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 138, 0, 0, 0, 140, 249, 126, 263, 191,
	196, 135, 137, 136, 121, 244, 265, 130, 139, 254,
	259, 113, 261, 465, 132, 243, 115, 273, 257, 189,
	168, 169, 114, 0, 229, 146, 154, 143, 204, 0,
	0, 0, 270, 271, 142, 296, 122, 284, 117, 474,
	283, 198, 0, 0, 0, 266, 274, 190, 183, 0,
	116, 272, 188, 182, 173, 150, 161, 219, 180, 220,
	162, 194, 193, 195, 0, 0, 0, 255, 281, 297,
	128, 0, 0, 264, 291, 292, 0, 0, 129, 153,
	149, 218, 475, 473, 468, 467, 172, 179, 228, 295,
	208, 234, 133, 280, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 118, 176,
	294, 226, 152, 282, 0, 145, 0, 0, 0, 0,
	0, 0, 111, 112, 119, 127, 134, 144, 148, 151,
	156, 160, 163, 165, 166, 167, 170, 181, 184, 185,
	186, 187, 199, 200, 202, 203, 206, 207, 210, 211,
	212, 213, 215, 216, 217, 221, 223, 225, 227, 230,
	235, 236, 237, 238, 240, 241, 242, 245, 246, 247,
	248, 256, 260, 268, 269, 279, 286, 290,
}
var yyPact = [...]int{

	2390, -1000, -292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1370, 1433, -1000, -1000,
	-1000, -1000, -1000, -1000, 455, 177, -1000, -1000, -1000, 226,
	78, 18355, 224, 2703, 19145, -1000, -1000, -1000, -1000, 175,
	19145, -1000, -1000, -86, -103, -1000, 19, 908, 1035, -1000,
	-1000, 81, 15, -1000, -1000, -1000, -1000, -1000, -1000, 1364,
	1368, 1088, 1358, 1169, -1000, 8832, 194, 194, 17960, 20725,
	-1000, -1000, 453, 19145, 216, 19145, -164, 188, 188, 121,
	188, -1000, 516, -1000, -1000, -1000, 19145, 189, 18750, 189,
	189, 189, 189, 189, 19145, -1000, 273, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19145, 901,
	1253, 5601, 165, 5601, 5601, -1000, 538, -1000, 102, 96,
	85, 5601, 10, 576, 86, -2, -1000, 5601, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 171, 1035, 506, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1245, 745, 1119, 678, 222,
	19145, 444, -1000, -1000, 1262, 10819, 11214, 1370, -1000, 1035,
	-1000, -1000, -1000, 1236, -1000, -1000, 557, 1401, -1000, 13584,
	271, -1000, 10819, 2579, 956, -1000, -1000, 956, -1000, -1000,
	244, -1000, -1000, 12399, 12399, 12399, 12399, 12399, 12399, 12399,
	12399, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 956, -1000, 10029,
	956, 956, 956, 956, 956, 956, 956, 956, 956, 956,
	10819, 956, 956, 956, 956, 956, 956, 956, 956, 956,
	956, 956, 956, 956, 956, 956, 956, 956, 956, 956,
	956, 956, 956, 956, 956, 956, 956, 956, 956, 956,
	956, 956, 956, 956, 956, 956, 956, 956, 956, 956,
	956, 956, 956, 956, 956, 17558, 16768, 19145, 949, 924,
	-1000, -1000, 270, 936, 20330, -135, -1000, -1000, -1000, 503,
	16373, -1000, 269, -1000, 1244, -1000, 919, 19145, -1000, 2801,
	-1000, 18750, 1314, 195, 887, 526, 876, 860, 858, 19145,
	854, 1042, 203, 19145, 1289, 1133, -1000, -1000, 19145, 842,
	831, 825, 822, -1000, 7646, -1000, 5601, 5601, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 188, 188, 5601, 5601,
	5601, 19145, 19145, 19145, -1000, -1000, 19145, -1000, -1000, 548,
	548, 5601, 5601, -1000, 1394, 514, 514, -1000, -1000, -1000,
	-1000, 10819, -1000, 12399, 421, -1000, 1132, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 820, -1000, -1000, 603, -1000, 705,
	-1000, 10424, -1000, -1000, 19145, 5601, 110, 149, 126, 19145,
	-1000, 1428, 396, 690, 265, 1041, -1000, 584, 1281, 956,
	956, 956, 956, 956, 956, 956, 956, 956, 956, 956,
	956, 956, 956, 956, 956, 956, 956, 956, 956, 956,
	956, 956, 956, 956, 956, 956, 956, 1364, 678, 1169,
	768, 1143, -1000, -1000, -1000, 19145, -1000, 10819, 10819, 785,
	-1000, 14769, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6419, 440, 12399, 621, 511, 12399,
	12399, 12399, 12399, 12399, 12399, 12399, 12399, 12399, 12399, 12399,
	12399, 12399, 12399, 12399, 641, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 813, -1000, 1035, 1330, 1330, 299, 299,
	299, 299, 299, 299, 299, 15164, 1347, 678, 916, 486,
	10029, 8832, 8832, 678, 10819, 10819, 9622, 9227, 8832, 8832,
	1347, 531, 486, 19935, -1000, -1000, 12004, -1000, -1000, -1000,
	-1000, -1000, 678, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18750, 18750, 8832, 8832, 8832, 8832, 678, 678, 8832,
	8832, 8832, 8832, 8832, 678, 678, 678, 678, 1347, 1347,
	8832, 8832, 8832, 1347, 8832, 8832, 1347, 8832, 8832, 8832,
	8832, 1347, 8832, 8832, 8832, 135, 19145, -1000, 1044, 1069,
	-1000, -1000, -1000, 1311, 15978, 13189, 135, 1012, 16768, 19145,
	-1000, -1000, 16768, 19145, 6010, 19540, 936, -135, 1020, -1000,
	-133, -140, 8042, 283, -1000, -1000, -1000, 7237, -1000, 4783,
	450, 931, -1000, -69, -1000, -1000, -1000, 1066, -1000, 1066,
	146, -12, 1066, 1066, 1066, 1066, 1066, -29, -29, -29,
	-29, -19, -1000, -1000, -1000, -1000, -1000, 1111, 1108, -1000,
	1066, 1066, 1066, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1087, 152, 1087, 1084, 1084, 1084, 1084, 1045, -1000,
	19145, 5601, 1276, 5601, 99, 1107, -1000, -1000, 19145, 19145,
	1037, -1000, 19145, 1036, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 809, 805, -1000, -1000, -1000, -1000,
	-1000, -1000, 520, -1000, 694, 10819, -1000, -1000, -1000, 19145,
	1302, 19145, 19145, 548, 486, 1028, -1000, 693, 19145, -1000,
	1033, -1000, 496, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 914, 2116, -1000,
	19145, 19145, 19145, 19145, 19145, 239, -1000, 1182, 10819, 10819,
	7237, 11214, -1000, -1000, -1000, -1000, 1262, -1000, 1347, 1344,
	-1000, 1225, 1198, 8832, -1000, -1000, 440, 490, -1000, -1000,
	707, -1000, -1000, -1000, -1000, 256, 956, -1000, 2089, -1000,
	-1000, -1000, -1000, 621, 12399, 12399, 12399, 1028, 2089, 2820,
	1239, 1144, 299, 414, 414, 397, 397, 397, 397, 397,
	955, 955, -1000, -1000, -1000, 678, -1000, -1000, -1000, 8832,
	-1000, 10819, -1000, 678, 905, -1000, 905, -1000, 562, 683,
	385, 1392, 905, 383, 1387, 905, 905, 905, 8832, 573,
	-1000, 10819, 678, -1000, 1052, 1029, 1024, 905, 678, 1021,
	905, 905, -175, -175, 678, 905, 678, 905, 905, -175,
	-175, -175, -175, 8832, 8832, 905, 905, 905, 8832, 905,
	905, 8832, 905, 905, 905, 905, 8832, 905, 905, 905,
	1040, 956, -1000, 19540, 16768, 16768, 16768, 16768, 16768, -1000,
	1157, 1155, -1000, 1165, 1156, 1171, 14374, -1000, 907, 15978,
	-1000, 956, -1000, 13979, 338, 214, 212, 207, -1000, -1000,
	-1000, 1377, 16768, 991, -1000, 991, -1000, 254, -1000, -1000,
	1020, -135, -119, -1000, -1000, -1000, -1000, 486, -1000, 644,
	-1000, 253, 1018, 4374, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1105, 801, -1000, 1234, 345, 451, 726, 1230, -1000,
	-1000, -1000, 522, -79, -1000, -1000, 613, -29, -29, 1066,
	1066, 145, 1066, -1000, -29, -1000, -1000, -1000, 283, 1243,
	283, 283, 283, 283, -29, 685, 685, -1000, -1000, -1000,
	-1000, 612, -1000, 1087, -1000, -1000, 601, -1000, -1000, -1000,
	1131, 18750, 1035, 1292, -1000, -1000, -1000, 1398, -1000, -1000,
	193, 199, -1000, 5601, 19145, 5601, 5601, 1377, 799, 794,
	-1000, 486, 514, 548, 1237, -1000, -1000, -1000, -1000, 12399,
	-1000, -1000, 603, 1330, -1000, -1000, 742, 353, 563, 176,
	176, -1000, 469, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 134, 1030, -1000, -1000, -1000, -1000, 26, 106,
	1178, 486, 486, -1000, -1000, 19145, -1000, -1000, -1000, -1000,
	1013, -1000, -1000, -1000, 5192, 8832, -1000, 1028, 2089, 2783,
	-1000, 12399, -1000, 678, 486, -1000, 8832, -1000, -1000, 117,
	641, 117, 12399, 12399, -1000, 12399, 12399, -1000, -209, -1000,
	984, 452, -1000, 10819, 770, -1000, -1000, 12399, 12399, -1000,
	-1000, -1000, -1000, -1000, 17163, -1000, -175, -175, -175, -175,
	-175, -1000, -1000, -1000, -1000, 905, 905, -175, -175, -175,
	905, -175, -175, 905, -175, -175, -175, -175, 905, -175,
	-175, -175, 1130, 19540, 956, -1000, 15571, 18750, 995, 1069,
	1092, 1129, 893, -1000, -1000, -1000, -1000, 1148, -1000, 1147,
	-1000, -1000, -1000, -1000, 18750, 12399, 338, -1000, 956, 956,
	956, 1370, 10819, 991, -1000, -1000, 365, -1000, -1000, -136,
	-150, -1000, -1000, -1000, 6828, 4783, -1000, 4783, 18750, 154,
	-1000, 726, 726, -1000, -1000, -1000, 1086, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 546, 12399, 1426, -1000, 1232, -1000,
	1231, 680, -1000, -1000, 927, 283, 283, -29, -1000, -1000,
	1066, -1000, 283, -1000, 411, -1000, -1000, -1000, -1000, 283,
	897, -1000, 894, 1017, -1000, 892, 19145, -1000, -1000, -1000,
	1126, -1000, -1000, -1000, 925, 1016, -1000, 2801, 787, 779,
	776, 19145, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 548,
	-1000, 12399, 2089, -1000, -1000, -1000, 763, -1000, 726, 324,
	-1000, -1000, -1000, 773, 1230, -1000, -1000, 762, -1000, 758,
	18750, 1229, 756, 19145, 18750, -1000, -1000, 730, 754, 10819,
	-1000, 18750, -215, 750, 18750, 18750, 18750, -1000, -1000, 1377,
	16768, -1000, -1000, 678, -1000, 12399, 2089, -1000, -1000, 678,
	1066, 1066, -1000, 1066, 1084, -1000, 1066, 1, 1066, -10,
	678, 678, 2747, 2513, 2375, 2279, 956, -171, -1000, 486,
	10819, 2183, 1397, -1000, 300, -1000, -1000, -1000, -1000, -1000,
	-175, -175, -1000, -1000, -1000, -1000, -175, -1000, -1000, -175,
	-1000, -1000, -1000, -1000, -175, -1000, -1000, -1000, -1000, 1260,
	930, 954, -1000, -1000, 8437, 678, 874, 250, 872, -1000,
	1370, -1000, -1000, 10819, 1083, -1000, 10819, -1000, -1000, -1000,
	872, 2117, -1000, 18750, 18750, 18750, 1364, 486, -1000, -1000,
	-1000, -1000, 4374, -1000, 866, -1000, 1066, -1000, -1000, -1000,
	18750, -1000, 2089, -106, -1000, -1000, -1000, -1000, -1000, -1000,
	283, -1000, -1000, -1000, -1000, -1000, -29, 677, -29, 588,
	-1000, 582, 1065, -1000, 1035, 19145, 53, 193, -1000, 2801,
	2801, 2801, -1000, -1000, 2089, 730, 158, -1000, 1045, 345,
	154, -1000, -1000, -1000, -1000, 746, 326, -1000, 196, 158,
	730, 486, 1265, -1000, 6828, -1000, -1000, 1062, 1053, -1000,
	1375, 1009, -1000, 2089, -1000, -1000, 138, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12399, 12399, 12399, 12399, 12399,
	678, 646, 486, 12399, 12399, 678, 1366, -1000, -1000, -1000,
	-1000, -1000, 1228, -1000, 956, -1000, -1000, 987, 18750, 18750,
	-1000, 18750, 1364, 486, 18750, 486, 12794, -1000, 14374, 864,
	-1000, 864, 864, -1000, 413, 18750, 1281, 851, -1000, -1000,
	283, -1000, 283, 922, 867, 18750, -1000, 1331, -1000, 53,
	-1000, 630, 48, 58, -1000, 47, 46, 44, 43, 34,
	-1000, -1000, -1000, -1000, 852, -1000, -1000, 728, 1049, 726,
	-1000, -1000, 722, -1000, -1000, 18750, -1000, 158, 956, 997,
	-1000, 487, 18750, 19145, 1373, 1345, -1000, -1000, 1052, 1052,
	1052, 1052, 54, -1000, -1000, 1052, 1052, -1000, 10819, 1419,
	-1000, 956, -1000, 1035, 240, -1000, -1000, -1000, 848, -1000,
	338, 18750, -1000, -1000, -1000, 413, -1000, 715, 469, 619,
	-1000, -1000, 155, -1000, -1000, -1000, -1000, 841, -1000, 76,
	3084, -1000, -1000, -1000, -1000, -1000, -1000, 41, 38, 65,
	-1000, -1000, -1000, 18750, 1045, -1000, -1000, -1000, -1000, 131,
	6828, 4783, 839, -1000, -1000, 11214, 11214, -1000, -1000, -1000,
	-1000, 678, 115, -218, -1000, -1000, 983, 19540, 954, 678,
	18750, -1000, -1000, -1000, -1000, -1000, 581, -1000, 19145, 413,
	74, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10819, 10819, 3084, -1000, -1000, -1000,
	-1000, -1000, 836, 1047, -1000, 830, -1000, 18750, -1000, -1000,
	1030, -1000, 486, -1000, 946, -1000, 486, -1000, -1000, 1175,
	-212, -222, 678, 936, -1000, -1000, -1000, 1046, -1000, 413,
	69, -1000, 767, 675, -293, -1000, 413, 18750, -1000, 131,
	1197, -215, 11214, -1000, 1162, -1000, -1000, 18750, -1000, 711,
	709, 604, -1000, 10819, 784, 2634, -1000, 818, -1000, 128,
	-1000, -1000, -216, 791, 261, -1000, -1000, 517, 784, -1000,
	591, -294, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 784, -1000, -1000, 413, 124, -219, 1125, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -295, 784, 614, -296,
	-1000, 956, -223, 1124, 1043, 1416, -1000, 755, -298, 187,
	784, 556, -1000, -1000, 10819, 606, 11609, -1000, -1000, 1414,
	-1000, 1399, 330, 330, 456, 784, -1000, -300, 186, 784,
	-1000, 476, -1000, 1052, 678, -1000, -1000, -1000, 168, 608,
	-1000, -1000, 567, -1000, -301, 784, -1000, -1000, -1000, -1000,
	-1000, 185, 255, -304, -1000, 184, 784, -1000,
}
var yyPgo = [...]int{

	0, 1742, 139, 673, 1739, 1738, 1736, 29, 16, 14,
	24, 1734, 1487, 1485, 1482, 1480, 1733, 1476, 19, 5,
	9, 7, 12, 20, 1731, 8, 1730, 1729, 36, 1723,
	2, 78, 1722, 1720, 1715, 1714, 1712, 1472, 1711, 1710,
	1707, 1704, 1702, 1467, 1465, 1701, 1696, 1463, 1461, 1695,
	1694, 1459, 1451, 1439, 141, 1693, 1692, 1691, 117, 1690,
	105, 1689, 1688, 1687, 70, 1474, 74, 66, 762, 1686,
	18, 1684, 71, 84, 88, 1683, 62, 1682, 1681, 107,
	1679, 1678, 1677, 89, 1676, 1675, 2418, 1674, 109, 1667,
	64, 45, 73, 1666, 1663, 1660, 1659, 76, 852, 1658,
	1638, 1637, 58, 1635, 1634, 115, 1633, 1632, 1630, 96,
	47, 1628, 37, 34, 51, 1626, 234, 31, 1625, 92,
	1622, 1621, 1619, 1618, 1617, 35, 1616, 42, 1615, 102,
	854, 99, 10, 46, 50, 95, 1614, 23, 103, 68,
	56, 40, 98, 1612, 101, 90, 1611, 1610, 669, 1608,
	1605, 77, 1604, 1596, 80, 1595, 527, 106, 61, 1594,
	1592, 1590, 1589, 53, 81, 1588, 1587, 41, 267, 100,
	176, 150, 1414, 183, 104, 1585, 39, 1580, 2486, 112,
	48, 67, 1579, 1578, 63, 54, 1576, 1575, 1573, 1572,
	1571, 1568, 1567, 86, 1566, 1565, 1564, 85, 83, 1563,
	1562, 82, 65, 1561, 1560, 1559, 91, 69, 1557, 87,
	79, 1556, 1555, 1554, 1548, 60, 33, 1546, 1544, 1538,
	1530, 57, 28, 1525, 49, 44, 21, 43, 6, 55,
	1524, 26, 1523, 32, 1521, 22, 1520, 27, 75, 3,
	4, 11, 1519, 1518, 1517, 1514, 52, 1508, 1489, 38,
	1449, 1446, 0, 143, 108, 1443, 1441, 126,
}
var yyR1 = [...]int{

	0, 250, 251, 251, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 6, 3, 4, 4, 5, 5, 7, 7, 57,
	57, 8, 9, 9, 9, 9, 254, 254, 81, 81,
	79, 79, 80, 80, 138, 138, 10, 10, 10, 10,
	142, 142, 145, 145, 145, 146, 146, 146, 146, 182,
	182, 132, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 244, 244, 245, 245, 246, 246, 246, 246, 247,
	247, 248, 248, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 24, 26, 26, 166, 166,
	35, 35, 36, 36, 36, 128, 128, 128, 11, 11,
	11, 11, 11, 18, 20, 20, 27, 27, 28, 21,
	21, 21, 21, 29, 29, 30, 22, 22, 34, 34,
	32, 32, 31, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 17, 243, 243, 243, 25,
	25, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	237, 237, 236, 235, 235, 234, 234, 233, 41, 217,
	219, 219, 218, 218, 218, 218, 207, 186, 186, 186,
	186, 186, 186, 186, 185, 185, 185, 185, 189, 189,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 188,
	188, 188, 188, 188, 188, 188, 188, 190, 190, 190,
	190, 190, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 192, 192, 192,
	192, 192, 192, 192, 192, 206, 206, 193, 193, 201,
	201, 202, 202, 202, 199, 199, 200, 200, 203, 203,
	195, 196, 204, 197, 197, 197, 198, 198, 198, 205,
	205, 205, 205, 194, 208, 208, 228, 228, 227, 227,
	226, 226, 226, 216, 216, 223, 223, 223, 223, 223,
	211, 211, 211, 210, 210, 212, 212, 215, 215, 225,
	225, 224, 209, 209, 229, 229, 229, 229, 229, 213,
	213, 214, 214, 214, 240, 241, 239, 239, 239, 239,
	239, 220, 220, 220, 221, 221, 221, 222, 222, 222,
	242, 242, 37, 37, 37, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 127, 127, 127, 39, 40, 40,
	40, 40, 40, 40, 40, 40, 164, 164, 238, 238,
	238, 238, 238, 232, 230, 230, 231, 231, 13, 42,
	42, 14, 14, 14, 14, 14, 14, 14, 15, 15,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 69, 152, 152, 150, 150, 153,
	153, 151, 151, 151, 154, 154, 154, 155, 155, 183,
	183, 183, 45, 45, 50, 50, 53, 51, 52, 165,
	165, 48, 48, 49, 49, 49, 49, 63, 63, 255,
	255, 47, 47, 46, 46, 46, 46, 16, 256, 54,
	55, 55, 56, 56, 56, 60, 60, 60, 58, 58,
	58, 59, 59, 66, 66, 65, 65, 67, 67, 67,
	67, 130, 130, 130, 131, 131, 175, 175, 175, 174,
	174, 174, 174, 71, 71, 72, 72, 73, 73, 74,
	74, 74, 74, 89, 89, 90, 90, 90, 90, 90,
	100, 100, 137, 137, 139, 139, 75, 75, 75, 75,
	76, 76, 77, 77, 78, 78, 163, 163, 180, 180,
	180, 82, 82, 82, 84, 83, 83, 83, 83, 85,
	85, 87, 87, 86, 86, 88, 91, 91, 91, 91,
	92, 92, 68, 68, 68, 68, 68, 68, 68, 149,
	149, 94, 94, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 108, 108, 108, 108, 108, 108, 95,
	95, 95, 95, 95, 95, 95, 64, 64, 109, 109,
	109, 116, 110, 110, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 103, 103,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	257, 257, 105, 104, 104, 104, 104, 104, 104, 61,
	61, 61, 61, 61, 181, 181, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 120,
	120, 62, 62, 118, 118, 119, 121, 121, 117, 117,
	117, 97, 97, 97, 97, 97, 97, 97, 97, 99,
	99, 99, 122, 122, 111, 111, 70, 70, 123, 123,
	124, 124, 125, 125, 126, 126, 129, 129, 133, 133,
	133, 134, 134, 134, 134, 135, 135, 135, 96, 96,
	96, 96, 96, 96, 136, 136, 136, 136, 140, 140,
	112, 112, 114, 114, 113, 115, 141, 141, 144, 144,
	144, 144, 143, 143, 143, 177, 177, 177, 147, 147,
	156, 156, 157, 157, 148, 148, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 162, 162, 161, 161, 161,
	158, 158, 158, 159, 159, 176, 176, 172, 172, 173,
	173, 178, 178, 179, 179, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 252, 253, 167, 168, 168,
	168,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	7, 5, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 6, 1, 1, 1, 3,
	1, 3, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 0, 2, 2, 11, 7, 9, 5, 5, 15,
	11, 0, 1, 1, 3, 2, 3, 3, 3, 0,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 5, 8, 1, 2, 5, 7,
	10, 8, 11, 1, 2, 5, 2, 4, 2, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 2, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	2, 4, 1, 3, 3, 3, 3, 0, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 3, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 3, 3, 2, 4, 5, 2,
	3, 4, 2, 2, 3, 3, 3, 3, 3, 4,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 1, 2,
	2, 3, 1, 0, 3, 3, 0, 2, 2, 2,
	1, 2, 1, 2, 5, 4, 0, 1, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	3, 3, 3, 1, 10, 11, 11, 12, 12, 1,
	1, 0, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	0, 2, 1, 1, 1, 6, 10, 9, 7, 7,
	7, 9, 7, 12, 14, 7, 7, 9, 9, 10,
	5, 6, 8, 7, 0, 1, 2, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 0, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 3, 3,
	5, 4, 6, 4, 4, 4, 4, 4, 3, 2,
	3, 4, 4, 3, 6, 6, 4, 4, 4, 4,
	4, 4, 3, 3, 2, 6, 2, 4, 4, 4,
	3, 7, 6, 5, 4, 2, 4, 3, 4, 3,
	3, 5, 2, 3, 3, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 0, 3, 1,
	1, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 2, 4, 7, 0, 1, 0, 1, 2, 1,
	1, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 2, 6, 1, 4, 6, 3, 2,
	0, 3, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 1, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 1, 1, 5, 6,
	6, 6, 5, 5, 5, 6, 5, 5, 6, 5,
	5, 5, 5, 6, 5, 5, 5, 4, 4, 5,
	5, 5, 5, 5, 4, 4, 4, 4, 4, 4,
	3, 6, 6, 6, 8, 8, 8, 8, 9, 4,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 1, 3, 1, 1, 0, 2,
	1, 1, 0, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -250, -1, -2, -6, -7, -8, -9, -10, -12,
	-37, -13, -14, -15, -43, -44, -45, -50, -51, -52,
	-48, -47, -46, -16, -22, -17, -3, -4, 6, 7,
	-57, 9, 10, 30, -41, 120, -38, -39, -40, 123,
	122, 159, 124, 152, 54, 206, -53, 209, 210, -255,
	-165, 157, 158, 31, 32, 126, 204, 20, -252, 8,
	300, 121, 207, 154, 153, 26, 58, -251, 414, -125,
	15, -56, 5, -54, -256, -54, -54, -54, -54, -54,
	-217, -219, 58, 95, -159, 133, 76, 291, 129, -166,
	130, -158, 181, 35, 140, 139, 130, 130, 131, 133,
	291, 129, 167, 166, 130, -86, -178, 61, -170, 342,
	143, 357, 358, 206, 217, 211, 245, 233, 343, 359,
	144, 199, 231, 234, 278, 142, 192, 360, 265, 273,
	202, 70, 209, 287, 361, 196, 198, 197, 186, 203,
	190, 155, 229, 222, 362, 350, 220, 28, 363, 275,
	250, 364, 347, 274, 221, 126, 365, 146, 140, 169,
	366, 251, 255, 367, 279, 368, 369, 370, 215, 216,
	371, 182, 281, 249, 33, 141, 344, 39, 164, 282,
	253, 372, 248, 243, 373, 374, 375, 376, 247, 214,
	242, 194, 43, 257, 256, 258, 195, 277, 236, 377,
	378, 147, 379, 380, 223, 18, 381, 382, 285, 158,
	383, 384, 385, 386, 162, 387, 388, 389, 276, 252,
	254, 390, 137, 391, 166, 392, 346, 393, 283, 219,
	394, 148, 163, 157, 286, 395, 396, 397, 398, 149,
	399, 400, 401, 210, 200, 402, 403, 404, 405, 191,
	175, 289, 280, 42, 204, 262, 406, 213, 139, 205,
	407, 207, 172, 193, 268, 201, 240, 165, 408, 409,
	227, 228, 246, 212, 241, 208, 167, 168, 159, 410,
	288, 263, 348, 235, 232, 173, 411, 133, 170, 171,
	412, 269, 270, 174, 345, 284, 230, 264, 130, 113,
	234, 278, 120, 266, 267, 275, -211, 276, 166, 169,
	-183, 130, -150, 265, 269, 270, 174, 61, 131, 132,
	33, 280, 279, 271, -178, -63, 124, 160, -86, -167,
	-167, -167, 268, 268, -167, -34, 205, 61, -2, -148,
	133, 270, 135, 208, -134, 17, 16, -5, -3, -252,
	6, 21, 22, -60, 44, 45, -55, -67, 104, -68,
	-178, -93, 78, -98, 29, 61, -170, 24, -97, -94,
	-117, -115, -116, 113, 114, 115, 102, 103, 110, 79,
	116, -103, -101, -102, -104, -106, -107, 63, 62, 71,
	64, 65, 66, 67, 72, 73, 74, -172, -113, -252,
	48, 49, 129, 301, 302, 303, 304, 341, 150, 305,
	81, 38, 290, 299, 298, 297, 295, 296, 292, 294,
	293, 307, 308, 136, 291, 108, 300, 330, 331, 332,
	333, 334, 335, 336, 337, 339, 340, 338, 320, 313,
	314, 315, 316, 317, 318, 319, 321, 322, 323, 324,
	325, 326, 327, 328, 329, -148, -148, 11, -79, -80,
	-86, -88, -178, -141, -182, 208, -144, 280, 279, -117,
	-143, -172, -178, 278, 234, 277, -218, 95, -207, 61,
	-86, 131, -86, 300, -157, 136, -157, 167, 166, -157,
	87, -42, -86, -156, 136, -172, 61, -170, -156, -156,
	-156, -156, -156, -86, 117, -86, 61, 30, -168, -252,
	-173, -172, -169, 125, 151, 77, 349, 23, 25, 260,
	313, 80, 113, 314, 315, 316, 16, 20, 81, 112,
	301, 317, 120, 52, 292, 294, 290, 291, 266, 29,
	10, 26, 153, 185, 22, 106, 122, 84, 85, 86,
	156, 24, 154, 74, 150, 19, 55, 11, 13, 311,
	312, 14, 136, 135, 97, 183, 131, 50, 8, 116,
	27, 94, 46, 318, 319, 353, 36, 354, 48, 95,
	17, 295, 296, 31, 341, 320, 161, 355, 321, 108,
	188, 53, 40, 78, 72, 34, 75, 56, 76, 15,
	184, 51, 309, 187, 356, 96, 123, 300, 49, 129,
	6, 306, 30, 152, 324, 323, 322, 325, 189, 47,
	303, 304, 326, 413, 130, 83, 307, 308, 134, 73,
	5, 35, 32, 9, 54, 57, 297, 298, 299, 38,
	328, 327, 329, 82, 12, 310, 291, 129, 61, 166,
	169, 130, 167, 133, -168, -168, -213, 11, 97, 172,
	172, 172, 173, -168, -153, -152, 168, 273, 274, 268,
	272, 12, -69, 95, 173, 268, 171, -168, -49, -2,
	-9, -7, -8, -2, 87, -167, -167, 30, 63, 41,
	-243, 58, -253, 60, 130, -86, 120, 122, 125, 56,
	-135, 19, 31, -68, -178, -126, -129, -68, -171, 313,
	314, 315, 316, 317, 330, 331, 332, 318, 319, 333,
	334, 335, 320, 321, 336, 337, 339, 340, 338, 324,
	323, 322, 325, 326, 328, 327, 329, -125, -2, -54,
	40, -58, 21, 22, 69, 11, -175, 77, 76, 94,
	-174, 23, 61, -170, -171, 63, 313, 314, 315, 316,
	317, 330, 331, 332, 318, 319, 333, 334, 335, 320,
	321, 336, 337, 339, 340, 338, 324, 323, 322, 325,
	326, 328, 327, 329, 117, -68, -95, 97, 78, 95,
	96, 80, 99, 98, 109, 102, 103, 104, 105, 106,
	107, 108, 100, 101, 112, 87, 88, 89, 90, 91,
	92, 93, -149, -252, -116, -252, 118, 119, -98, -98,
	-98, -98, -98, -98, -98, -98, -252, -2, -110, -68,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -120, -68, -252, -257, -105, -252, -257, -105, -257,
	-105, -257, -252, -257, -105, -257, -105, -257, -257, -105,
	-257, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -87, 27, -86, -72, -73,
	-74, -75, -89, -116, -252, -86, -86, -79, -254, 59,
	11, 57, -254, 59, 117, 59, -141, 208, -142, -145,
	281, 283, 87, -177, -172, 63, 29, 117, 30, 60,
	59, -86, -185, -189, -191, -190, -192, -187, -188, 231,
	234, 238, 236, 232, 237, 113, 235, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 30, 155,
	227, 228, 229, 230, 251, 252, 253, 254, 255, 256,
	257, 258, 211, 233, 343, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 223, 224, 225, -172, 23,
	133, 61, 78, 61, 61, 61, -86, 61, 59, 134,
	-79, 24, 56, -81, -86, 61, 61, 61, 61, -179,
	-178, -169, -168, -168, -157, -157, -168, -168, -168, -86,
	-86, -86, -86, -154, 95, 12, -154, -168, -168, 11,
	-151, 11, 97, -151, -68, -98, -155, 95, 56, 61,
	-32, -31, -33, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 63, 60, -110, -86, -168,
	170, 170, 130, 130, 175, -86, 9, 97, 59, 18,
	117, 59, -133, 25, 26, -133, -134, -253, -60, -99,
	41, 64, 67, -59, 47, -86, -68, -68, -108, 72,
	78, 73, 74, -174, 104, -179, -173, -169, -98, -109,
	-113, -116, 68, 97, 95, 96, 80, -98, -98, -98,
	-98, -98, -98, -98, -98, -98, -98, -98, -98, -98,
	-98, -98, -181, 61, 63, 61, -97, -97, -172, -58,
	-253, 59, -253, -2, -65, -67, -65, -253, -68, -68,
	-117, 63, -65, -117, 63, -65, -65, -65, -58, -118,
	-119, 82, -117, -253, -98, -172, -172, -65, -66, -65,
	-65, -65, -253, -253, -67, -65, -67, -65, -65, -253,
	-253, -253, -253, -58, -58, -65, -65, -65, -58, -65,
	-65, -58, -65, -65, -65, -65, -58, -65, -65, -65,
	-138, 162, -86, 30, 59, -82, -84, -83, -85, 46,
	50, 52, 47, 48, 49, 53, -163, 23, -72, -252,
	-90, 162, -91, 23, -180, 54, 135, 55, -178, -171,
	63, -138, 57, -72, -86, -72, -88, -178, 104, -144,
	-142, 59, 282, 284, 285, 56, 75, -68, -198, 112,
	-173, -179, -220, -221, -222, -173, 63, 64, -207, -208,
	-209, -223, 145, -229, 137, 139, 35, -210, 146, 131,
	36, 60, -186, -199, 263, -193, 58, -193, -193, 239,
	231, 234, 232, -193, -193, -193, -193, -193, -197, 234,
	-197, -197, -197, -197, 232, 58, 58, -193, -193, -193,
	-201, 58, -201, 226, -201, -202, 58, -202, -202, -202,
	-176, 57, -132, -86, -168, 24, -168, -35, 178, 151,
	58, -86, -86, -86, 59, 61, 61, -214, 11, 97,
	63, -68, -86, -100, 23, -178, -178, -154, -64, 156,
	63, -86, 59, 87, 60, -160, 125, 122, 123, 127,
	128, -232, 260, 121, 234, 70, 29, 15, 301, 162,
	348, 61, 163, -86, -86, -86, -86, -86, 125, 122,
	42, -68, -68, -129, -135, -147, 19, 11, 38, 38,
	-65, 72, 73, 74, 117, -252, -109, -98, -98, -98,
	-64, 77, -253, -66, -68, -253, 59, -253, -253, 59,
	57, 23, 11, 11, -253, 11, 11, -253, -253, -253,
	-65, -121, -119, 84, -68, -253, -253, 59, 59, -253,
	-253, -253, -253, -130, 309, -130, -253, -253, -253, -253,
	-253, -130, -130, -130, -130, -65, -65, -253, -253, -253,
	-65, -253, -253, -65, -253, -253, -253, -253, -65, -253,
	-253, -253, -96, 30, 38, -2, -252, -252, -141, -73,
	-74, -74, -73, -74, 46, 46, 46, 51, 46, 51,
	46, -83, -180, -253, -252, 34, -180, -91, 131, 131,
	131, -92, 12, -72, -92, -92, 117, -145, -146, 286,
	283, 289, 61, 63, 117, 59, -222, 87, 58, 61,
	36, -210, -210, -215, 61, -215, 36, -203, -195, -196,
	-204, -205, -194, 72, 78, 29, 56, 260, 137, 36,
	35, 70, -200, 264, 64, -197, -197, -193, -193, -193,
	239, -193, -197, -198, 30, -198, -198, -198, -198, -197,
	-206, 63, -206, 64, -201, 64, 56, -172, -2, 23,
	-36, 8, 9, 10, -244, -245, -246, 61, 97, 183,
	184, 134, -168, -86, -168, -168, -92, 61, 61, -151,
	-154, 34, -98, -31, -97, -167, -164, -238, -210, -242,
	-209, 138, 142, 145, 146, 137, 162, -164, -238, 145,
	-210, 146, 138, -161, -210, 134, 23, -164, -164, -216,
	87, 162, -237, 57, 170, 260, 170, 43, -86, -71,
	11, 104, -173, -66, -64, 77, -98, -253, -67, -184,
	113, 231, 155, 229, 222, 249, 236, 262, 227, 263,
	-181, -184, -98, -98, -98, -98, 342, -125, 86, -68,
	83, -98, -98, -172, -252, -130, -130, -130, -130, -130,
	-253, -253, -131, -130, -131, -131, -253, -131, -131, -253,
	-131, -131, -131, -131, -253, -131, -131, -131, -140, 56,
	-141, -112, -114, -113, -252, -2, -136, -172, -139, -172,
	-92, -77, -76, 56, 57, -78, 56, -76, 46, 46,
	-139, -98, -91, -252, -252, -252, -125, -68, -92, 283,
	287, 288, -221, -222, -225, -224, -172, -229, -215, -215,
	58, 72, -98, 9, 36, 36, 63, 60, -198, -198,
	-197, -193, -198, 61, 113, -198, 60, 59, 60, 59,
	60, 59, -86, -132, -132, 56, 60, 59, -185, 61,
	61, 61, -86, -154, -98, 58, -207, -167, -215, -158,
	61, 61, -167, 61, -172, 36, 61, -86, -172, -207,
	61, -68, -172, -235, 345, -236, 61, -172, -172, -172,
	-92, -72, -253, -98, -253, -193, -193, -193, -202, -193,
	216, -193, 216, -253, -253, 19, 19, 19, 19, -252,
	-62, 306, -68, 59, 59, -125, 162, -131, -131, -131,
	-131, -131, 28, -140, 59, -253, -253, -253, 59, 117,
	-253, 59, -125, -68, 58, -68, -253, -91, -163, -137,
	-172, -137, -137, -134, 60, 59, -193, -137, -102, -198,
	-197, 63, -197, 64, 64, 58, -2, -86, -247, -248,
	-249, 70, 344, 78, 185, 186, 147, 187, 188, 189,
	-246, -185, -185, -185, -207, -127, 150, 151, -176, -212,
	-210, 61, -162, 134, 23, 134, -127, -207, 27, -234,
	-233, -173, 58, 57, -122, 13, -197, 61, -98, -98,
	-98, -98, -98, -253, 63, -98, -98, -253, 16, 36,
	-114, 38, -2, -252, -172, -172, -172, -134, -137, -90,
	-180, 59, -253, -253, -253, -227, -226, 57, 141, 70,
	-224, -133, 60, -198, -198, 60, 60, -225, -132, 19,
	-132, -249, 63, 189, 185, 189, 189, 189, 189, 191,
	60, -167, 61, 58, -215, 61, -172, -167, -127, -252,
	59, 87, -137, -86, -123, 14, 16, -253, -253, -253,
	-253, -61, 97, 345, -253, -253, -110, 9, -112, -2,
	117, 60, -91, -172, -226, 61, -216, 63, 148, 60,
	176, -23, -2, -7, -8, -9, -10, -12, -37, -13,
	-14, -20, -21, -15, -43, -44, -53, -51, -52, -48,
	-47, -22, -17, -24, 81, 136, 206, 190, 190, 181,
	182, -167, -225, -176, -167, -230, -231, 162, -233, -222,
	60, -124, -68, -171, -111, -70, -68, -171, -253, 343,
	53, 346, -125, -141, -253, -172, 64, -86, -228, -227,
	177, -132, -68, -68, -26, -23, 60, 58, -253, 59,
	-172, -237, 59, 43, 344, 347, -253, 58, -128, 179,
	180, -27, -28, 82, 83, 414, -228, -225, -231, 38,
	-235, -70, 43, -137, -132, 61, 61, 86, 84, -28,
	-68, -25, -19, -2, -7, -8, -9, -10, -20, -21,
	-22, -18, 206, 86, -23, 60, 164, 345, 60, -11,
	-18, -10, -7, -8, -9, 81, -25, 83, 414, -25,
	-228, 165, 346, -240, -241, 56, -132, 414, -25, 86,
	84, -29, -19, -30, 85, 414, -252, 347, -241, 56,
	-240, 56, 10, 9, 86, 414, 136, -25, 86, 84,
	-30, -68, 86, -98, 161, -239, 149, 144, 147, 30,
	-239, 81, 414, 136, -25, 83, -253, -253, 143, 29,
	72, 86, 414, -25, 136, 86, 414, 136,
}
var yyDef = [...]int{

	27, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 792, 0, 498, 498,
	498, 498, 498, 498, 0, -2, 362, 363, 364, 0,
	0, 0, 0, -2, 473, 474, 475, 477, 478, 487,
	-2, 1227, 1227, 0, 0, 1227, 0, 0, 0, 39,
	40, 844, 0, 490, 479, 480, 1225, 1, 3, 801,
	0, 0, 502, 505, 500, 0, 844, 844, 0, 0,
	72, 73, 0, 0, 0, 0, 0, 842, 842, 0,
	842, 864, 0, 860, 861, 862, 0, 840, 0, 840,
	840, 840, 840, 840, 0, 419, 583, 871, 872, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 0, 0,
	0, 1228, 0, 1228, 1228, 434, 0, 436, 0, 0,
	0, 1228, 0, 445, 0, 0, 452, 1228, 320, 321,
	322, 470, 471, 458, 472, 0, 0, 0, 491, 492,
	493, 494, 1227, 1227, 497, 156, 0, 176, 33, 0,
	0, 0, 845, 476, 805, 0, 0, 792, 35, 0,
	498, 503, 504, 508, 506, 507, 499, 0, 517, 526,
	0, 592, 0, 597, 599, -2, -2, 0, 634, 635,
	636, 637, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 662, 663, 664, 665, 666, 667, 771, 772, 773,
	774, 775, 776, 777, 778, 601, 602, 768, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 0, 730, 730, 730, 730, 730, 730, 730, 730,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 52, 583, 56, 0, 1174, 826, -2, -2, 0,
	0, 768, 0, -2, 1022, -2, 0, 0, 202, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 408, 0, 0, 0, 0, 867, 868, 0, 0,
	0, 0, 0, 418, 0, 420, 1228, 1228, 423, 1229,
	1230, 869, 870, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 842, 842, 1228, 1228,
	1228, 0, 0, 0, 432, 433, 0, 339, 340, 464,
	464, 1228, 1228, 440, 0, 461, 461, 459, 460, 455,
	456, 0, 447, 0, 467, 449, 450, 453, 481, -2,
	484, 485, 486, -2, 0, 495, 496, 0, 158, 0,
	175, 0, 34, 1226, 0, 1228, 0, 0, 0, 0,
	28, 0, 0, 802, 0, 793, 794, 798, 798, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 801, 33, 505,
	0, 511, 509, 510, 501, 0, 518, 0, 0, 0,
	527, 0, 529, 530, 531, 532, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 0, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 620, 621, 622, 623,
	624, 625, 598, 0, 612, 0, 0, 0, 654, 655,
	656, 657, 658, 659, 660, 0, 508, 33, 0, 632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	508, 0, 760, 0, 713, 722, 0, 714, 723, 715,
	724, 716, 0, 717, 725, 718, 726, 719, 720, 727,
	721, 0, 0, 0, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 508,
	0, 0, 0, 508, 0, 0, 508, 0, 0, 0,
	0, 508, 0, 0, 0, 54, 0, 582, 0, 535,
	537, 538, 539, -2, 0, 586, -2, 0, 0, 0,
	46, 47, 0, 0, 0, 0, 57, 1174, 59, 60,
	0, 0, 0, 296, 835, 836, 837, 0, 833, 351,
	0, 0, 207, 284, 215, 216, 217, 277, 219, 277,
	277, 0, 277, 277, 277, 277, 277, 293, 293, 293,
	293, 293, 260, 261, 262, 263, 264, 0, 0, 237,
	277, 277, 277, 241, 267, 268, 269, 270, 271, 272,
	273, 274, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 279, 279, 279, 281, 281, 281, 281, 865, 71,
	0, 1228, 0, 1228, 0, 0, 198, 129, 0, 0,
	411, 841, 0, 413, 48, 414, 415, 416, 417, 584,
	873, 874, 421, 422, 0, 0, 426, 427, 428, 429,
	430, 431, 341, 437, 0, 0, 438, 439, 444, 0,
	550, 0, 0, 464, 446, 626, 448, 0, 0, 488,
	157, 160, 0, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 159, 177, 0, 0, 387,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 796, 799, 800, 797, 805, 36, 508, 0,
	779, 0, 0, 0, 512, 31, 593, 594, 596, 613,
	0, 615, 617, 528, 519, 0, 769, -2, 603, 604,
	628, 629, 630, 0, 0, 0, 0, 626, 608, 0,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 653, 744, 745, 0, 651, 652, 661, 513,
	631, 0, 824, 33, 0, 515, 0, 700, 0, 0,
	636, 771, 0, 636, 771, 0, 0, 0, 0, 766,
	763, 0, 0, 731, 0, 0, 0, 0, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 574, 0, 0, 0, 0, 567, 0, 0,
	543, 1113, 545, 0, 586, 0, 0, 0, 568, 569,
	570, 590, 0, 590, 51, 590, 53, 0, 585, 827,
	58, 0, 0, 63, 64, 828, 829, 830, 831, 0,
	769, 0, 199, 352, 354, 357, 358, 359, 203, 204,
	205, 0, 0, 333, 0, 0, 327, 327, 0, 323,
	324, 201, 206, 286, 285, 218, 0, 293, 293, 277,
	277, 277, 277, 246, 293, 249, 252, 253, 296, 0,
	296, 296, 296, 296, 293, 0, 0, 238, 239, 240,
	229, 0, 230, 279, 232, 233, 0, 234, 235, 236,
	0, 0, 0, 0, 77, 843, 78, 0, 130, 131,
	81, 0, 409, 1228, 0, 1228, 1228, 590, 0, 0,
	465, 466, 461, 464, 0, 462, 463, 443, 454, 0,
	468, 451, 0, 0, 178, 1227, -2, 396, 857, 396,
	396, 380, 313, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 0, 190, 389, 391, 390, 394, 0, 0,
	0, 803, 804, 795, 29, 0, 838, 839, 780, 781,
	533, 614, 616, 618, 0, 513, 605, 626, 609, 0,
	606, 0, 600, 0, 633, -2, 0, 698, 699, 0,
	0, 0, 0, 0, 737, 0, 0, 738, 0, 709,
	792, 0, 764, 0, 0, 712, 732, 0, 0, 733,
	734, 735, 736, 687, 0, 688, 0, 0, 0, 0,
	0, 694, 695, 696, 697, 0, 0, 524, 524, 524,
	0, 524, 524, 0, 524, 524, 524, 524, 0, 524,
	524, 524, 818, 0, 0, -2, 0, 0, 590, 536,
	562, 564, 0, 559, 572, 573, 575, 0, 577, 0,
	579, 580, 540, 542, 0, 0, 586, 549, 0, 0,
	0, 792, 0, 590, 44, 45, 0, 61, 62, 0,
	0, 68, 297, 298, 0, 0, 355, 0, 0, 0,
	315, 327, 327, 318, 328, 319, 0, 208, 209, 210,
	211, 212, 213, 288, 0, 0, 0, 292, 0, 300,
	302, 0, 214, 287, 0, 296, 296, 293, 244, 245,
	277, 250, 296, 254, 0, 255, 256, 257, 258, 296,
	0, 275, 0, 0, 231, 0, 0, 866, -2, 71,
	0, 132, 133, 134, 0, 82, 83, 0, 0, 0,
	0, 0, 412, 49, 424, 425, 435, 342, 343, 464,
	442, 0, 627, 161, 162, 365, 0, 1227, 327, 0,
	381, 397, 398, 399, 400, 401, 402, 0, 1227, 399,
	0, 400, 0, 0, 0, 858, 859, 0, 0, 0,
	314, 0, 193, 0, 0, 0, 0, 807, 30, 590,
	0, 520, 770, 0, 607, 0, 610, 668, 516, 0,
	277, 277, 749, 277, 281, 752, 277, 754, 277, 757,
	0, 0, 0, 0, 0, 0, 0, 761, 711, 767,
	0, 0, 0, 521, 792, 689, 690, 691, 692, 693,
	524, 524, 672, 525, 673, 674, 524, 676, 677, 524,
	679, 680, 681, 682, 524, 684, 685, 686, 37, 0,
	818, 808, 820, 822, 0, 33, 0, 814, 0, 554,
	792, 556, 563, 0, 0, 557, 0, 558, 576, 578,
	0, -2, 548, 0, 0, 0, 801, 591, 43, 65,
	66, 67, 353, 356, 0, 329, 277, 332, 316, 317,
	0, 289, 290, 0, 299, 301, 303, 278, 242, 243,
	296, 251, 247, 294, 295, 259, 293, 0, 293, 0,
	282, 0, 0, 75, 0, 0, 89, 0, 85, 0,
	0, 0, 410, 441, 551, 0, 384, 368, 865, 325,
	361, 369, 370, 375, 376, 0, 0, 372, 0, 384,
	0, 383, 0, 388, 0, 191, 192, 0, 0, 393,
	782, 534, 669, 611, 701, 746, 293, 750, 751, 753,
	755, 756, 758, 703, 702, 0, 0, 0, 0, 0,
	0, 0, 765, 0, 0, 0, 0, 670, 671, 675,
	678, 683, 0, 38, 0, 823, -2, 0, 0, 0,
	55, 0, 801, 560, 0, 565, 586, 546, 0, 0,
	552, 0, 0, 42, 305, 0, 798, 0, 291, 248,
	296, 276, 296, 0, 0, 0, -2, 0, 71, 90,
	91, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	84, 86, 87, 88, 0, 1227, 385, 0, 0, 327,
	326, 382, 0, 855, 856, 0, 1227, 384, 0, 194,
	195, 0, 0, 0, 788, 0, 747, 748, 0, 0,
	0, 0, 739, 710, 762, 0, 0, 522, 0, 0,
	821, 0, -2, 0, 816, 815, 555, 41, 0, 544,
	586, 0, 587, 588, 589, 304, 308, 0, 313, 0,
	330, 331, 0, 265, 266, 280, 283, 0, 76, 0,
	0, 92, 93, 94, 95, 97, 98, 0, 0, 0,
	1227, 367, 386, 0, 865, 371, 377, 378, 1227, 0,
	0, 0, 0, 395, 32, 0, 0, 704, 706, 705,
	707, 0, 0, 0, 728, 729, 792, 0, 811, 33,
	0, 561, 547, 553, 309, 310, 0, 312, 0, 306,
	0, 71, -2, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 0, 0, 0, 99, 100, 101,
	102, 366, 0, 0, 379, 0, 404, 0, 196, 197,
	190, 789, 790, 791, 783, 784, 786, 787, 708, 0,
	0, 0, 0, 819, -2, 817, 311, 0, 74, 307,
	135, 80, 0, 0, 0, 126, 306, 0, 403, 0,
	0, 193, 0, 740, 0, 743, 523, 0, 71, 0,
	0, 0, 146, 0, 0, 0, 373, 0, 405, 0,
	392, 785, 741, 0, 0, 136, 137, 0, 0, 147,
	0, 0, 179, -2, 182, 183, 184, 185, 186, 187,
	188, 189, 0, 125, 127, 306, 0, 0, 334, 71,
	138, 139, 140, 141, 142, 144, 0, 0, 0, 0,
	374, 0, 0, 335, 336, 0, 79, 0, 0, 0,
	0, 0, 180, 153, 0, 0, 0, 742, 337, 0,
	338, 0, 0, 0, 0, 148, 149, 0, 0, 0,
	154, 0, 143, 0, 0, 344, 346, 347, 0, 0,
	345, 145, 0, 151, 0, 0, 406, 407, 348, 349,
	350, 0, 0, 0, 150, 0, 155, 152,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 107, 99, 3,
	58, 60, 104, 102, 59, 103, 117, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 414,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:380
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:385
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:416
		{
			setParseTree(yylex, nil)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:422
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:430
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:440
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:447
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:457
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:467
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:474
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:486
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:502
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:518
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:531
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:532
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:540
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:546
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:550
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:556
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:560
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:565
		{
			yyVAL.partitions = nil
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:569
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:597
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:603
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:607
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:617
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:635
		{
			yyVAL.str = SessionStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:639
		{
			yyVAL.str = GlobalStr
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:644
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 74:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:664
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:668
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 76:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:672
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:676
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:684
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 79:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:692
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 80:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:696
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:701
		{
			yyVAL.procedureParams = nil
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:711
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:715
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:729
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:738
		{
			yyVAL.characteristics = nil
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:762
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:774
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:782
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:790
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:794
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:827
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:837
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:842
		{
			yyVAL.str = ""
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:846
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.str = BeforeStr
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.str = AfterStr
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.str = InsertStr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.str = UpdateStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.str = DeleteStr
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:875
		{
			yyVAL.triggerOrder = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:879
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:883
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:899
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:905
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 145:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:909
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:925
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:931
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 150:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:936
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:941
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 152:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:947
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:959
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:965
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:971
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:975
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1001
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1029
		{
			yyVAL.exprs = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.exprs = nil
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1047
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1081
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1103
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1109
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1120
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1127
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1131
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1137
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1142
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1165
		{
			yyVAL.columnType = ColumnType{}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1178
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1205
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1214
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1297
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1309
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1321
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1381
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1401
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1409
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1417
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1449
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1494
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1499
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1504
		{
			yyVAL.sqlVal = nil
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1508
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1513
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1517
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1525
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1529
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1535
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1543
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1547
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1552
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1563
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1579
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1585
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1590
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1594
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1603
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1607
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1611
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.colKeyOpt = colKey
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1625
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1629
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1635
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1641
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1645
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1650
		{
			yyVAL.indexOptions = nil
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1670
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1674
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1685
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1695
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1699
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1707
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1731
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1740
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1744
		{
			yyVAL.str = yyDollar[1].str
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1749
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1763
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1769
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1779
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 334:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1786
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 335:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1790
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 336:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1794
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 337:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1798
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 338:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1802
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1831
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1837
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1851
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1864
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = yyDollar[1].str
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1884
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1894
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1898
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1907
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1922
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1926
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 367:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1933
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1940
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1944
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1948
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1952
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1956
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 373:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 374:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1974
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 377:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1978
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 378:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1982
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 379:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1989
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1995
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1999
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 382:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2005
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2010
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2015
		{
			yyVAL.columnOrder = nil
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2023
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2029
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2035
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2047
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2057
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2061
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 392:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2065
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2078
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2088
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 395:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2092
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2105
		{
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
		}
	case 403:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2118
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2128
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 406:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2134
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2138
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2144
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2154
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2162
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2170
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2174
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2182
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2190
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2198
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2206
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2220
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2231
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2236
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2240
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2244
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2248
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2253
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2257
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2261
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2265
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2269
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2273
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2277
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2281
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2285
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2289
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2293
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2297
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2301
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2305
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2309
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2313
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2318
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2328
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2332
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2340
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2354
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2385
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2407
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.str = "full "
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2441
		{
			yyVAL.showFilter = nil
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2455
		{
			yyVAL.showFilter = nil
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2459
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = SessionStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = GlobalStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2489
		{
			yyVAL.statement = &Begin{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.statement = &Begin{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.statement = &Commit{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.statement = &Rollback{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2554
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.statement = &OtherRead{}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2572
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2576
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2586
		{
			setAllowComments(yylex, true)
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2596
		{
			yyVAL.bytes2 = nil
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.str = UnionStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.str = UnionAllStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2614
		{
			yyVAL.str = UnionDistinctStr
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2619
		{
			yyVAL.str = ""
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.str = SQLCacheStr
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2632
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.str = ""
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2640
		{
			yyVAL.str = DistinctStr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2645
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.str = StraightJoinHint
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2654
		{
			yyVAL.selectExprs = nil
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2686
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2693
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2697
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2701
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2706
		{
			yyVAL.over = nil
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.over = yyDollar[1].over
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2715
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2719
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2723
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2741
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2746
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2750
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2774
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2795
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2806
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2810
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2814
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2818
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2822
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2833
		{
			yyVAL.expr = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2874
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2878
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2888
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2890
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2894
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2900
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2902
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2905
		{
			yyVAL.empty = struct{}{}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.str = JoinStr
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2926
		{
			yyVAL.str = JoinStr
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2930
		{
			yyVAL.str = JoinStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.str = StraightJoinStr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.str = LeftJoinStr
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2946
		{
			yyVAL.str = LeftJoinStr
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2950
		{
			yyVAL.str = RightJoinStr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.str = RightJoinStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2960
		{
			yyVAL.str = NaturalJoinStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2964
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2974
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2988
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2999
		{
			yyVAL.indexHints = nil
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3003
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3007
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3011
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = nil
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3056
		{
			yyVAL.str = ""
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3060
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3076
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3080
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.str = IsNullStr
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3122
		{
			yyVAL.str = IsNotNullStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.str = IsTrueStr
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.str = IsNotTrueStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = IsFalseStr
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3138
		{
			yyVAL.str = IsNotFalseStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.str = EqualStr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.str = LessThanStr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.str = GreaterThanStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.str = LessEqualStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.str = GreaterEqualStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.str = NotEqualStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3173
		{
			yyVAL.expr = nil
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3177
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3197
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3233
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3249
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3253
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3257
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3261
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3265
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3269
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3273
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3277
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3281
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3285
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3289
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3293
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3297
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3301
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3305
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3313
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3327
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3331
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3335
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3355
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 669:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3359
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 671:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3389
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3397
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3409
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3413
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 683:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3425
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3429
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3433
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3446
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3450
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3454
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 691:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3482
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3500
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3504
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 702:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3508
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3512
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3516
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 705:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3520
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 706:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3524
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 707:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3528
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 708:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3532
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3540
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3544
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3548
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3558
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3562
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3566
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3581
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3592
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3601
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3605
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3609
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3614
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3619
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3624
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3628
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 729:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3632
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3642
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3652
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3672
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3678
		{
			yyVAL.str = ""
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3682
		{
			yyVAL.str = BooleanModeStr
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3686
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 742:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3690
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3694
		{
			yyVAL.str = QueryExpansionStr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3700
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3760
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3765
		{
			yyVAL.expr = nil
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3769
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3774
		{
			yyVAL.str = string("")
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3778
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3784
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3788
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3794
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3799
		{
			yyVAL.expr = nil
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3803
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3809
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3813
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 770:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3817
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3823
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3827
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3831
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3835
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3839
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3843
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3847
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3851
		{
			yyVAL.expr = &NullVal{}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3857
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3861
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3865
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3870
		{
			yyVAL.exprs = nil
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3874
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3880
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3884
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3890
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3894
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3899
		{
			yyVAL.expr = nil
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3903
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3909
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3913
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3918
		{
			yyVAL.orderBy = nil
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3922
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3928
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3932
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3938
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3942
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3947
		{
			yyVAL.str = AscScr
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3951
		{
			yyVAL.str = AscScr
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3955
		{
			yyVAL.str = DescScr
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3960
		{
			yyVAL.limit = nil
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3964
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3968
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3972
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3977
		{
			yyVAL.str = ""
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3981
		{
			yyVAL.str = ForUpdateStr
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3985
		{
			yyVAL.str = ShareModeStr
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3998
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4002
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4006
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 811:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4011
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4015
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 813:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4019
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4026
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4030
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4034
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 817:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4038
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4043
		{
			yyVAL.setExprs = nil
		}
	case 819:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4047
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4053
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4057
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4063
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4067
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4073
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4079
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4089
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4093
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4099
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4103
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4107
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4111
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4118
		{
			yyVAL.bytes = []byte("charset")
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4125
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4129
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4133
		{
			yyVAL.expr = &Default{}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4142
		{
			yyVAL.byt = 0
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4144
		{
			yyVAL.byt = 1
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4147
		{
			yyVAL.byt = 0
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4149
		{
			yyVAL.byt = 1
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4152
		{
			yyVAL.str = ""
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4154
		{
			yyVAL.str = IgnoreStr
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4158
		{
			yyVAL.empty = struct{}{}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4160
		{
			yyVAL.empty = struct{}{}
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4162
		{
			yyVAL.empty = struct{}{}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4164
		{
			yyVAL.empty = struct{}{}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4166
		{
			yyVAL.empty = struct{}{}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4168
		{
			yyVAL.empty = struct{}{}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4170
		{
			yyVAL.empty = struct{}{}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4172
		{
			yyVAL.empty = struct{}{}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4174
		{
			yyVAL.empty = struct{}{}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4178
		{
			yyVAL.empty = struct{}{}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4180
		{
			yyVAL.empty = struct{}{}
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4183
		{
			yyVAL.empty = struct{}{}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4185
		{
			yyVAL.empty = struct{}{}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4187
		{
			yyVAL.empty = struct{}{}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4191
		{
			yyVAL.str = UniqueStr
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4193
		{
			yyVAL.str = FulltextStr
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4195
		{
			yyVAL.str = SpatialStr
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4198
		{
			yyVAL.str = ""
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4200
		{
			yyVAL.str = yyDollar[1].str
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4203
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4205
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4209
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4213
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4220
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4226
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4230
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4237
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4617
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4626
		{
			decNesting(yylex)
		}
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4631
		{
			skipToEnd(yylex)
		}
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4636
		{
			skipToEnd(yylex)
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4640
		{
			skipToEnd(yylex)
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4644
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
