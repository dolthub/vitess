// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

func yyOldPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).OldPosition
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:61
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	showFilter            *ShowFilter
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
	Fields                *Fields
	Lines                 *Lines
	EnclosedBy            *EnclosedBy
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const OPTIONALLY = 57384
const STARTING = 57385
const UNIQUE = 57386
const KEY = 57387
const SYSTEM_TIME = 57388
const VALUES = 57389
const LAST_INSERT_ID = 57390
const NEXT = 57391
const VALUE = 57392
const SHARE = 57393
const MODE = 57394
const SQL_NO_CACHE = 57395
const SQL_CACHE = 57396
const JOIN = 57397
const STRAIGHT_JOIN = 57398
const LEFT = 57399
const RIGHT = 57400
const INNER = 57401
const OUTER = 57402
const CROSS = 57403
const NATURAL = 57404
const USE = 57405
const FORCE = 57406
const ON = 57407
const USING = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const BIT_LITERAL = 57419
const NULL = 57420
const TRUE = 57421
const FALSE = 57422
const OFF = 57423
const OR = 57424
const AND = 57425
const NOT = 57426
const BETWEEN = 57427
const CASE = 57428
const WHEN = 57429
const THEN = 57430
const ELSE = 57431
const ELSEIF = 57432
const END = 57433
const LE = 57434
const GE = 57435
const NE = 57436
const NULL_SAFE_EQUAL = 57437
const IS = 57438
const LIKE = 57439
const REGEXP = 57440
const IN = 57441
const SHIFT_LEFT = 57442
const SHIFT_RIGHT = 57443
const DIV = 57444
const MOD = 57445
const UNARY = 57446
const COLLATE = 57447
const BINARY = 57448
const UNDERSCORE_BINARY = 57449
const UNDERSCORE_UTF8MB4 = 57450
const INTERVAL = 57451
const JSON_EXTRACT_OP = 57452
const JSON_UNQUOTE_EXTRACT_OP = 57453
const CREATE = 57454
const ALTER = 57455
const DROP = 57456
const RENAME = 57457
const ANALYZE = 57458
const ADD = 57459
const FLUSH = 57460
const MODIFY = 57461
const CHANGE = 57462
const SCHEMA = 57463
const TABLE = 57464
const INDEX = 57465
const INDEXES = 57466
const VIEW = 57467
const TO = 57468
const IGNORE = 57469
const IF = 57470
const PRIMARY = 57471
const COLUMN = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const KEY_BLOCK_SIZE = 57475
const CHECK = 57476
const ACTION = 57477
const CASCADE = 57478
const CONSTRAINT = 57479
const FOREIGN = 57480
const NO = 57481
const REFERENCES = 57482
const RESTRICT = 57483
const FIRST = 57484
const AFTER = 57485
const SHOW = 57486
const DESCRIBE = 57487
const EXPLAIN = 57488
const DATE = 57489
const ESCAPE = 57490
const REPAIR = 57491
const OPTIMIZE = 57492
const TRUNCATE = 57493
const FORMAT = 57494
const MAXVALUE = 57495
const PARTITION = 57496
const REORGANIZE = 57497
const LESS = 57498
const THAN = 57499
const PROCEDURE = 57500
const TRIGGER = 57501
const TRIGGERS = 57502
const FUNCTION = 57503
const STATUS = 57504
const VARIABLES = 57505
const WARNINGS = 57506
const SEQUENCE = 57507
const EACH = 57508
const ROW = 57509
const BEFORE = 57510
const FOLLOWS = 57511
const PRECEDES = 57512
const DEFINER = 57513
const INVOKER = 57514
const INOUT = 57515
const OUT = 57516
const DETERMINISTIC = 57517
const CONTAINS = 57518
const READS = 57519
const MODIFIES = 57520
const SQL = 57521
const SECURITY = 57522
const CLASS_ORIGIN = 57523
const SUBCLASS_ORIGIN = 57524
const MESSAGE_TEXT = 57525
const MYSQL_ERRNO = 57526
const CONSTRAINT_CATALOG = 57527
const CONSTRAINT_SCHEMA = 57528
const CONSTRAINT_NAME = 57529
const CATALOG_NAME = 57530
const SCHEMA_NAME = 57531
const TABLE_NAME = 57532
const COLUMN_NAME = 57533
const CURSOR_NAME = 57534
const SIGNAL = 57535
const SQLSTATE = 57536
const BEGIN = 57537
const START = 57538
const TRANSACTION = 57539
const COMMIT = 57540
const ROLLBACK = 57541
const BIT = 57542
const TINYINT = 57543
const SMALLINT = 57544
const MEDIUMINT = 57545
const INT = 57546
const INTEGER = 57547
const BIGINT = 57548
const INTNUM = 57549
const REAL = 57550
const DOUBLE = 57551
const FLOAT_TYPE = 57552
const DECIMAL = 57553
const NUMERIC = 57554
const DEC = 57555
const FIXED = 57556
const PRECISION = 57557
const TIME = 57558
const TIMESTAMP = 57559
const DATETIME = 57560
const YEAR = 57561
const CHAR = 57562
const VARCHAR = 57563
const BOOL = 57564
const CHARACTER = 57565
const VARBINARY = 57566
const NCHAR = 57567
const NVARCHAR = 57568
const NATIONAL = 57569
const VARYING = 57570
const TEXT = 57571
const TINYTEXT = 57572
const MEDIUMTEXT = 57573
const LONGTEXT = 57574
const LONG = 57575
const BLOB = 57576
const TINYBLOB = 57577
const MEDIUMBLOB = 57578
const LONGBLOB = 57579
const JSON = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const NULLX = 57590
const AUTO_INCREMENT = 57591
const APPROXNUM = 57592
const SIGNED = 57593
const UNSIGNED = 57594
const ZEROFILL = 57595
const LOCAL = 57596
const COLLATION = 57597
const DATABASES = 57598
const SCHEMAS = 57599
const TABLES = 57600
const FULL = 57601
const PROCESSLIST = 57602
const COLUMNS = 57603
const FIELDS = 57604
const ENGINES = 57605
const PLUGINS = 57606
const NAMES = 57607
const CHARSET = 57608
const GLOBAL = 57609
const SESSION = 57610
const ISOLATION = 57611
const LEVEL = 57612
const READ = 57613
const WRITE = 57614
const ONLY = 57615
const REPEATABLE = 57616
const COMMITTED = 57617
const UNCOMMITTED = 57618
const SERIALIZABLE = 57619
const CURRENT_TIMESTAMP = 57620
const DATABASE = 57621
const CURRENT_DATE = 57622
const CURRENT_USER = 57623
const CURRENT_TIME = 57624
const LOCALTIME = 57625
const LOCALTIMESTAMP = 57626
const UTC_DATE = 57627
const UTC_TIME = 57628
const UTC_TIMESTAMP = 57629
const REPLACE = 57630
const CONVERT = 57631
const CAST = 57632
const SUBSTR = 57633
const SUBSTRING = 57634
const GROUP_CONCAT = 57635
const SEPARATOR = 57636
const TIMESTAMPADD = 57637
const TIMESTAMPDIFF = 57638
const OVER = 57639
const WINDOW = 57640
const GROUPING = 57641
const GROUPS = 57642
const AVG = 57643
const BIT_AND = 57644
const BIT_OR = 57645
const BIT_XOR = 57646
const COUNT = 57647
const JSON_ARRAYAGG = 57648
const JSON_OBJECTAGG = 57649
const MAX = 57650
const MIN = 57651
const STDDEV_POP = 57652
const STDDEV = 57653
const STD = 57654
const STDDEV_SAMP = 57655
const SUM = 57656
const VAR_POP = 57657
const VARIANCE = 57658
const VAR_SAMP = 57659
const CUME_DIST = 57660
const DENSE_RANK = 57661
const FIRST_VALUE = 57662
const LAG = 57663
const LAST_VALUE = 57664
const LEAD = 57665
const NTH_VALUE = 57666
const NTILE = 57667
const ROW_NUMBER = 57668
const PERCENT_RANK = 57669
const RANK = 57670
const MATCH = 57671
const AGAINST = 57672
const BOOLEAN = 57673
const LANGUAGE = 57674
const WITH = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const ARRAY = 57679
const DESCRIPTION = 57680
const EMPTY = 57681
const EXCEPT = 57682
const JSON_TABLE = 57683
const LATERAL = 57684
const MEMBER = 57685
const RECURSIVE = 57686
const ACTIVE = 57687
const ADMIN = 57688
const BUCKETS = 57689
const CLONE = 57690
const COMPONENT = 57691
const DEFINITION = 57692
const ENFORCED = 57693
const EXCLUDE = 57694
const FOLLOWING = 57695
const GEOMCOLLECTION = 57696
const GET_MASTER_PUBLIC_KEY = 57697
const HISTOGRAM = 57698
const HISTORY = 57699
const INACTIVE = 57700
const INVISIBLE = 57701
const LOCKED = 57702
const MASTER_COMPRESSION_ALGORITHMS = 57703
const MASTER_PUBLIC_KEY_PATH = 57704
const MASTER_TLS_CIPHERSUITES = 57705
const MASTER_ZSTD_COMPRESSION_LEVEL = 57706
const NESTED = 57707
const NETWORK_NAMESPACE = 57708
const NOWAIT = 57709
const NULLS = 57710
const OJ = 57711
const OLD = 57712
const OPTIONAL = 57713
const ORDINALITY = 57714
const ORGANIZATION = 57715
const OTHERS = 57716
const PATH = 57717
const PERSIST = 57718
const PERSIST_ONLY = 57719
const PRECEDING = 57720
const PRIVILEGE_CHECKS_USER = 57721
const PROCESS = 57722
const RANDOM = 57723
const REFERENCE = 57724
const REQUIRE_ROW_FORMAT = 57725
const RESOURCE = 57726
const RESPECT = 57727
const RESTART = 57728
const RETAIN = 57729
const REUSE = 57730
const ROLE = 57731
const SECONDARY = 57732
const SECONDARY_ENGINE = 57733
const SECONDARY_LOAD = 57734
const SECONDARY_UNLOAD = 57735
const SKIP = 57736
const SRID = 57737
const THREAD_PRIORITY = 57738
const TIES = 57739
const UNBOUNDED = 57740
const VCPU = 57741
const VISIBLE = 57742
const SYSTEM = 57743
const INFILE = 57744

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"LOCAL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 42,
	-2, 4,
	-1, 36,
	140, 847,
	-2, 114,
	-1, 43,
	179, 444,
	180, 444,
	-2, 434,
	-1, 50,
	1, 1246,
	420, 1246,
	-2, 464,
	-1, 416,
	126, 855,
	-2, 851,
	-1, 417,
	126, 856,
	-2, 852,
	-1, 518,
	96, 1171,
	126, 1171,
	-2, 78,
	-1, 519,
	96, 1073,
	126, 1073,
	-2, 79,
	-1, 524,
	96, 1029,
	126, 1029,
	-2, 814,
	-1, 526,
	96, 1111,
	126, 1111,
	-2, 816,
	-1, 729,
	5, 42,
	-2, 458,
	-1, 733,
	5, 42,
	-2, 457,
	-1, 927,
	1, 516,
	5, 516,
	12, 516,
	13, 516,
	14, 516,
	15, 516,
	17, 516,
	19, 516,
	30, 516,
	31, 516,
	55, 516,
	56, 516,
	57, 516,
	58, 516,
	59, 516,
	61, 516,
	62, 516,
	65, 516,
	66, 516,
	68, 516,
	69, 516,
	420, 516,
	-2, 543,
	-1, 930,
	66, 59,
	68, 59,
	-2, 63,
	-1, 1118,
	126, 858,
	-2, 854,
	-1, 1277,
	67, 317,
	-2, 995,
	-1, 1280,
	67, 313,
	70, 313,
	-2, 930,
	-1, 1281,
	67, 314,
	70, 314,
	-2, 940,
	-1, 1356,
	67, 377,
	70, 377,
	-2, 350,
	-1, 1402,
	5, 43,
	-2, 609,
	-1, 1463,
	5, 42,
	-2, 791,
	-1, 1558,
	5, 42,
	-2, 80,
	-1, 1705,
	1, 564,
	5, 564,
	12, 564,
	13, 564,
	14, 564,
	15, 564,
	17, 564,
	19, 564,
	30, 564,
	31, 564,
	55, 564,
	56, 564,
	57, 564,
	58, 564,
	59, 564,
	61, 564,
	62, 564,
	65, 564,
	66, 564,
	68, 564,
	69, 564,
	420, 564,
	-2, 543,
	-1, 1824,
	5, 43,
	-2, 792,
	-1, 1852,
	5, 42,
	-2, 80,
	-1, 1912,
	5, 42,
	-2, 794,
	-1, 1950,
	41, 865,
	-2, 863,
	-1, 1997,
	5, 42,
	-2, 167,
	-1, 2050,
	5, 43,
	-2, 795,
}

const yyPrivate = 57344

const yyLast = 23250

var yyAct = [...]int{

	450, 60, 2143, 2134, 2164, 2133, 2053, 2086, 2060, 414,
	1835, 1322, 2040, 2000, 7, 1999, 6, 2059, 1998, 5,
	2001, 8, 1718, 1968, 1924, 1890, 1320, 1784, 1950, 1612,
	1686, 1856, 1874, 421, 365, 1387, 514, 449, 1513, 1282,
	1093, 1489, 1234, 1232, 345, 2054, 1236, 72, 852, 1687,
	1719, 408, 1566, 395, 434, 1274, 1285, 1683, 93, 1265,
	1764, 60, 363, 1314, 1259, 1230, 717, 1386, 1264, 1692,
	1177, 1696, 1634, 1278, 1085, 400, 1143, 1032, 1346, 1182,
	1590, 1310, 1104, 1550, 419, 1271, 1589, 943, 955, 1221,
	1156, 1174, 924, 1120, 752, 758, 346, 347, 529, 1214,
	350, 694, 793, 1061, 942, 532, 802, 517, 923, 362,
	512, 404, 672, 868, 932, 509, 520, 2186, 2182, 2172,
	2155, 1053, 869, 2153, 2138, 2129, 2089, 71, 1079, 1978,
	817, 816, 826, 827, 819, 820, 821, 822, 823, 824,
	825, 818, 1857, 2146, 828, 2079, 2132, 2047, 2117, 2078,
	1859, 1651, 1432, 76, 1809, 671, 2046, 1713, 1498, 1714,
	1715, 1497, 1253, 29, 1499, 61, 32, 33, 1254, 1255,
	743, 944, 95, 945, 720, 721, 707, 29, 29, 699,
	29, 401, 349, 348, 78, 79, 80, 81, 82, 705,
	463, 719, 469, 471, 470, 467, 468, 466, 465, 464,
	1533, 1461, 1284, 674, 1635, 677, 1897, 472, 473, 1286,
	1286, 1997, 3, 88, 61, 32, 33, 1299, 1462, 1862,
	1311, 1911, 1290, 1292, 69, 1291, 103, 99, 100, 1304,
	101, 1299, 1800, 1798, 360, 1158, 34, 352, 69, 69,
	1947, 69, 69, 1946, 1945, 1944, 1637, 698, 702, 1943,
	1941, 704, 1942, 2055, 1567, 1860, 1861, 1863, 1864, 1865,
	2024, 2025, 530, 105, 104, 713, 90, 92, 1995, 712,
	87, 2131, 356, 1668, 714, 715, 97, 96, 2083, 2084,
	2168, 1329, 676, 675, 700, 703, 2116, 701, 73, 722,
	1568, 723, 720, 721, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1328, 1993, 2041, 1614,
	1639, 1525, 1215, 342, 410, 1643, 94, 1638, 1722, 1636,
	1875, 1876, 706, 706, 1641, 2178, 1530, 1529, 1594, 2027,
	706, 1925, 1239, 1241, 706, 2187, 2184, 1640, 2173, 2156,
	673, 682, 60, 60, 1927, 359, 358, 1526, 359, 343,
	1642, 1644, 1885, 1571, 1022, 730, 1013, 732, 1488, 1487,
	731, 1531, 1486, 1523, 751, 669, 1586, 747, 316, 1524,
	98, 840, 841, 1979, 1569, 1570, 1299, 1791, 1783, 1502,
	1494, 1405, 1391, 1375, 102, 1313, 1091, 1540, 1289, 951,
	1884, 1738, 938, 735, 736, 818, 808, 690, 828, 1260,
	828, 60, 1249, 2166, 1088, 697, 2167, 801, 2165, 1613,
	1349, 1609, 1858, 1240, 946, 1926, 837, 1653, 2125, 839,
	2159, 2144, 2158, 1511, 89, 95, 1413, 745, 1528, 800,
	799, 1511, 760, 1511, 842, 843, 844, 845, 846, 847,
	848, 849, 2045, 1739, 1814, 806, 789, 801, 1514, 850,
	1054, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 62, 867, 870, 870, 870, 876, 870, 870,
	876, 870, 876, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 68, 928, 744,
	1883, 62, 708, 29, 30, 61, 32, 33, 1510, 716,
	734, 68, 68, 727, 68, 68, 1510, 57, 1510, 97,
	96, 1608, 1338, 67, 1410, 1605, 710, 34, 53, 54,
	85, 678, 840, 841, 58, 1055, 1511, 423, 1527, 520,
	1175, 922, 940, 729, 733, 791, 746, 817, 816, 826,
	827, 819, 820, 821, 822, 823, 824, 825, 818, 696,
	44, 828, 799, 1175, 69, 1421, 1015, 84, 871, 873,
	875, 877, 879, 881, 882, 884, 1511, 872, 874, 801,
	878, 880, 2171, 883, 817, 816, 826, 827, 819, 820,
	821, 822, 823, 824, 825, 818, 1094, 1095, 828, 2126,
	357, 2179, 790, 1127, 1726, 1347, 819, 820, 821, 822,
	823, 824, 825, 818, 931, 936, 828, 1339, 1125, 1126,
	1124, 711, 755, 759, 69, 27, 36, 63, 40, 39,
	42, 1510, 55, 796, 1123, 724, 2063, 1598, 1594, 809,
	840, 841, 1595, 681, 2104, 1602, 1604, 1408, 2051, 1407,
	1850, 695, 851, 2180, 800, 799, 800, 799, 43, 66,
	65, 2175, 1599, 51, 52, 41, 800, 799, 1388, 1389,
	1390, 1510, 801, 1849, 801, 1812, 853, 1598, 1594, 1555,
	506, 507, 1595, 706, 801, 1596, 1597, 866, 1553, 1534,
	706, 706, 706, 821, 822, 823, 824, 825, 818, 2114,
	399, 828, 1599, 2113, 2092, 706, 706, 56, 2069, 45,
	64, 1992, 47, 48, 817, 816, 826, 827, 819, 820,
	821, 822, 823, 824, 825, 818, 1058, 726, 828, 1940,
	1110, 1112, 1113, 800, 799, 1144, 1111, 1145, 1904, 706,
	2128, 839, 1847, 1731, 1090, 684, 685, 686, 687, 688,
	1551, 801, 903, 904, 905, 906, 907, 891, 892, 893,
	908, 909, 894, 895, 896, 902, 910, 897, 898, 899,
	900, 901, 913, 912, 911, 914, 915, 917, 916, 918,
	1077, 800, 799, 1101, 1353, 1036, 1034, 1023, 2088, 800,
	799, 1096, 1075, 1037, 1089, 2087, 1919, 2118, 746, 801,
	1039, 1040, 62, 1953, 1048, 1049, 1102, 801, 2103, 1103,
	1119, 800, 799, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 806, 801,
	60, 1056, 1990, 1097, 800, 799, 1500, 1959, 1501, 1121,
	1409, 1655, 1841, 2115, 1934, 854, 1080, 68, 1514, 1083,
	1955, 1098, 801, 1298, 817, 816, 826, 827, 819, 820,
	821, 822, 823, 824, 825, 818, 929, 2087, 828, 2106,
	1178, 2105, 1035, 1765, 1763, 739, 1116, 1765, 1881, 1041,
	1042, 1043, 1667, 1779, 1164, 1167, 1919, 2112, 2074, 746,
	1933, 1176, 1811, 1099, 1050, 1051, 1775, 738, 1841, 2071,
	1114, 1772, 800, 799, 1118, 1841, 1994, 1751, 107, 1919,
	1986, 1732, 1151, 1153, 1770, 1147, 1148, 344, 1161, 1233,
	801, 1769, 1038, 928, 1919, 1930, 939, 928, 1082, 1919,
	746, 817, 816, 826, 827, 819, 820, 821, 822, 823,
	824, 825, 818, 1150, 1756, 828, 1841, 1840, 511, 1755,
	1057, 527, 1186, 1187, 670, 1754, 838, 1172, 1578, 1193,
	1194, 1195, 1196, 520, 1577, 680, 1244, 853, 1827, 746,
	1246, 1374, 746, 689, 1188, 1117, 1190, 1746, 1745, 1742,
	1743, 1231, 1238, 1507, 816, 826, 827, 819, 820, 821,
	822, 823, 824, 825, 818, 1197, 1198, 828, 1806, 1336,
	1202, 1742, 1741, 1205, 1335, 706, 1146, 706, 1210, 1287,
	1288, 1059, 1293, 1294, 1295, 1296, 1297, 1403, 746, 1262,
	1242, 1239, 1241, 1218, 746, 1107, 1108, 1152, 1350, 1822,
	1307, 1308, 1309, 1031, 1034, 1030, 1251, 1250, 1247, 1152,
	746, 851, 1029, 1269, 1028, 927, 1020, 1118, 439, 438,
	441, 442, 443, 444, 1621, 1490, 1154, 440, 445, 1018,
	1017, 1316, 1317, 1318, 1319, 817, 816, 826, 827, 819,
	820, 821, 822, 823, 824, 825, 818, 1312, 1016, 828,
	853, 1014, 954, 953, 1162, 1163, 817, 816, 826, 827,
	819, 820, 821, 822, 823, 824, 825, 818, 934, 934,
	828, 692, 1240, 353, 73, 1490, 1684, 73, 1392, 939,
	1628, 1622, 1243, 1217, 933, 2042, 1752, 760, 1261, 1872,
	1266, 530, 1744, 1490, 1503, 1394, 1395, 1396, 1252, 1403,
	851, 817, 816, 826, 827, 819, 820, 821, 822, 823,
	824, 825, 818, 1426, 1425, 828, 1373, 1348, 1345, 1334,
	933, 1218, 1121, 935, 935, 937, 933, 1152, 1092, 1262,
	1403, 1218, 826, 827, 819, 820, 821, 822, 823, 824,
	825, 818, 1258, 1354, 828, 1021, 1622, 749, 1379, 939,
	69, 2081, 1380, 691, 750, 2072, 2062, 1118, 1957, 1851,
	1286, 1830, 1315, 1725, 1324, 1311, 1326, 1397, 1697, 1698,
	1105, 1506, 1330, 1306, 1305, 1464, 1465, 1399, 1393, 928,
	928, 928, 928, 928, 741, 1402, 1404, 1321, 2150, 2148,
	1400, 1406, 2135, 1750, 1233, 748, 1482, 1412, 69, 1700,
	1415, 1416, 1417, 1684, 928, 1556, 1025, 1423, 1703, 1424,
	1702, 520, 1427, 1428, 1466, 1429, 1430, 1473, 1472, 1434,
	1435, 1436, 1437, 1438, 1476, 1420, 405, 406, 1117, 1477,
	1445, 1446, 1447, 1376, 1449, 1450, 1474, 1452, 1453, 1454,
	1455, 1475, 1457, 1458, 1459, 1485, 1492, 1491, 1493, 1478,
	2100, 1227, 1228, 1480, 2077, 1618, 2099, 1385, 1084, 1384,
	1484, 794, 795, 1481, 1909, 1516, 1774, 1730, 1729, 1508,
	2029, 417, 1468, 1469, 2032, 1471, 2068, 1515, 2067, 1479,
	1951, 2091, 1949, 60, 1504, 1377, 1378, 1467, 759, 792,
	1470, 2023, 2022, 354, 706, 1581, 706, 706, 1544, 448,
	1495, 952, 753, 737, 693, 1820, 1537, 1538, 1539, 1541,
	1509, 1512, 1888, 110, 754, 1352, 110, 1582, 1325, 1122,
	1094, 1095, 110, 1543, 1024, 1545, 1546, 1547, 1548, 1615,
	1559, 1223, 1226, 1227, 1228, 1224, 1342, 1225, 1229, 1576,
	110, 1697, 1698, 921, 1231, 930, 794, 795, 1401, 1012,
	1552, 402, 403, 110, 1383, 1554, 110, 534, 1937, 110,
	1588, 396, 1382, 2094, 2093, 2065, 2033, 1908, 1629, 1892,
	110, 1422, 534, 397, 73, 1891, 1785, 1490, 110, 1414,
	1647, 1648, 522, 1649, 1650, 531, 1463, 1411, 1620, 1052,
	1591, 1603, 1607, 1659, 1584, 1656, 1657, 1587, 1601, 1623,
	683, 1266, 1593, 1580, 1600, 1154, 1610, 1611, 1561, 1562,
	1563, 1585, 1583, 2152, 2151, 2152, 797, 2151, 1983, 1728,
	1431, 1433, 1579, 1689, 1087, 60, 1652, 1439, 1440, 1441,
	1442, 1630, 1626, 1627, 355, 75, 927, 2011, 46, 77,
	927, 49, 1646, 1633, 927, 1645, 70, 1707, 1708, 1709,
	2013, 19, 1, 1705, 1631, 520, 2012, 18, 1685, 2066,
	1688, 2014, 20, 1223, 1226, 1227, 1228, 1224, 1694, 1225,
	1229, 1118, 2015, 21, 1665, 1666, 2010, 15, 2028, 1671,
	2009, 14, 1674, 1572, 2030, 1574, 1575, 1679, 2003, 10,
	1948, 1706, 1870, 1712, 1558, 1727, 1855, 1710, 1854, 1691,
	2016, 24, 1701, 2017, 25, 2008, 13, 1565, 1723, 2005,
	12, 1724, 1704, 1564, 1019, 2004, 11, 740, 511, 2002,
	9, 1027, 1078, 1721, 1592, 1717, 1361, 2039, 1625, 1272,
	1748, 1749, 1716, 1263, 528, 83, 1337, 709, 1879, 1044,
	1045, 1046, 1117, 324, 1270, 1521, 1047, 2031, 742, 1520,
	1517, 1759, 1532, 1283, 1519, 1518, 2026, 1736, 1522, 959,
	1733, 1734, 957, 958, 956, 961, 960, 1737, 328, 515,
	947, 798, 91, 50, 1740, 1882, 839, 1606, 1355, 86,
	718, 330, 928, 410, 1081, 836, 1381, 1496, 110, 521,
	1767, 2061, 2082, 534, 534, 1766, 757, 1964, 1790, 1419,
	865, 534, 1173, 422, 1967, 534, 1771, 1109, 437, 436,
	435, 1768, 1807, 432, 433, 1762, 1753, 1654, 1787, 1788,
	1341, 531, 531, 1100, 1460, 1786, 810, 420, 412, 531,
	110, 1778, 1122, 531, 1106, 926, 1690, 919, 1351, 1625,
	1266, 1758, 1266, 1222, 1220, 1219, 1026, 510, 1699, 1695,
	925, 361, 1793, 1794, 59, 1795, 725, 1789, 1797, 341,
	1799, 1808, 1977, 1796, 31, 1792, 74, 1813, 1660, 1661,
	1662, 1663, 1664, 407, 26, 17, 1801, 1802, 728, 1837,
	1838, 22, 805, 16, 679, 35, 1711, 38, 37, 1560,
	1327, 351, 1062, 1060, 2142, 2085, 1843, 2018, 2007, 2006,
	2120, 23, 1828, 1821, 2119, 4, 398, 28, 2, 0,
	60, 0, 1833, 0, 0, 0, 0, 0, 0, 0,
	1823, 1824, 1825, 1826, 1839, 0, 927, 927, 927, 927,
	927, 1834, 0, 0, 0, 1832, 1504, 1842, 0, 0,
	0, 927, 0, 1844, 0, 0, 0, 0, 0, 0,
	0, 927, 0, 0, 1878, 0, 0, 1216, 0, 0,
	1845, 0, 0, 0, 0, 1866, 0, 0, 0, 0,
	1245, 1886, 0, 1898, 1899, 1900, 1901, 1902, 110, 110,
	110, 1905, 1906, 1689, 1873, 1721, 1913, 1871, 1893, 0,
	0, 0, 0, 534, 0, 1300, 1301, 1302, 1303, 1894,
	1887, 1916, 1880, 1867, 1868, 1869, 0, 0, 1780, 0,
	0, 0, 0, 0, 1877, 522, 0, 0, 0, 0,
	1688, 948, 0, 0, 1936, 0, 1938, 0, 0, 0,
	0, 0, 1910, 928, 1935, 1917, 0, 0, 0, 1903,
	0, 0, 1915, 1929, 1907, 0, 1923, 1939, 0, 1963,
	1323, 1810, 1928, 1266, 0, 1238, 0, 1918, 1331, 1332,
	0, 0, 1333, 0, 0, 0, 1920, 0, 1921, 1922,
	0, 1931, 1689, 1932, 60, 0, 1952, 1956, 1958, 1954,
	1962, 1971, 0, 0, 0, 853, 1966, 1970, 0, 1340,
	1972, 1961, 0, 1829, 0, 0, 1831, 0, 0, 60,
	0, 0, 1984, 0, 0, 0, 0, 1996, 1989, 1688,
	0, 0, 0, 0, 0, 0, 1991, 1982, 0, 0,
	0, 1852, 0, 0, 0, 1987, 0, 0, 1625, 1973,
	1974, 1975, 1976, 0, 0, 0, 1980, 1981, 0, 0,
	2036, 534, 0, 0, 0, 2037, 0, 0, 0, 110,
	0, 0, 0, 110, 2034, 0, 110, 2043, 2035, 0,
	0, 0, 110, 0, 534, 0, 0, 2038, 2056, 1011,
	0, 534, 534, 534, 110, 110, 110, 520, 0, 0,
	2049, 110, 60, 410, 0, 0, 534, 534, 0, 0,
	2048, 0, 531, 0, 0, 0, 0, 1912, 0, 531,
	531, 531, 0, 0, 0, 0, 0, 0, 2044, 0,
	0, 0, 0, 0, 531, 531, 2050, 2064, 0, 110,
	534, 110, 2070, 534, 0, 0, 2076, 1183, 0, 0,
	0, 0, 0, 2090, 0, 0, 0, 1970, 2096, 1989,
	0, 0, 0, 0, 0, 0, 0, 2098, 531, 60,
	60, 1086, 2101, 2107, 2102, 2097, 2095, 0, 2111, 0,
	0, 0, 0, 0, 0, 0, 2109, 60, 0, 110,
	2073, 0, 0, 0, 0, 805, 2124, 0, 2123, 2080,
	0, 2122, 2130, 2121, 2127, 1985, 60, 1965, 1969, 60,
	60, 2136, 2145, 0, 0, 0, 0, 2147, 2111, 60,
	2149, 0, 60, 2137, 853, 2160, 2139, 2111, 531, 0,
	0, 1535, 1536, 1367, 60, 2162, 60, 2169, 1542, 2157,
	60, 534, 2111, 1782, 2111, 0, 0, 1366, 1549, 927,
	0, 0, 0, 60, 0, 0, 60, 2174, 0, 0,
	0, 2111, 0, 60, 0, 0, 0, 60, 0, 1149,
	0, 2111, 0, 2183, 0, 2111, 0, 534, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 1371, 0,
	0, 1573, 0, 0, 0, 0, 0, 1365, 0, 0,
	0, 0, 0, 0, 0, 1179, 1180, 0, 0, 0,
	0, 0, 110, 2176, 2177, 0, 0, 0, 0, 0,
	110, 110, 0, 0, 110, 110, 0, 0, 110, 110,
	110, 0, 0, 0, 0, 2057, 2058, 0, 1619, 0,
	0, 0, 0, 0, 0, 534, 534, 0, 1363, 1357,
	1358, 0, 1356, 0, 1359, 1360, 0, 0, 1969, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 0, 531, 531, 0, 0, 0, 29, 0,
	61, 32, 33, 0, 0, 0, 0, 0, 0, 1369,
	1372, 0, 57, 0, 0, 0, 0, 1805, 67, 0,
	0, 0, 34, 2108, 0, 110, 534, 0, 534, 0,
	0, 0, 0, 110, 110, 0, 0, 110, 0, 1669,
	1670, 0, 1672, 1673, 0, 1675, 1676, 1677, 1678, 0,
	1680, 1681, 1682, 0, 531, 0, 531, 0, 0, 69,
	0, 0, 0, 0, 110, 0, 110, 110, 1398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	2161, 0, 2019, 0, 0, 2141, 2144, 2140, 0, 817,
	816, 826, 827, 819, 820, 821, 822, 823, 824, 825,
	818, 1735, 0, 828, 1362, 817, 816, 826, 827, 819,
	820, 821, 822, 823, 824, 825, 818, 0, 0, 828,
	927, 36, 63, 40, 39, 42, 0, 0, 0, 0,
	756, 531, 0, 1747, 0, 0, 0, 2020, 0, 0,
	0, 0, 0, 0, 1368, 0, 0, 0, 1757, 1760,
	0, 0, 0, 43, 66, 65, 0, 0, 0, 0,
	41, 0, 29, 1761, 61, 32, 33, 0, 0, 0,
	0, 0, 108, 0, 0, 340, 57, 0, 0, 0,
	0, 108, 67, 1776, 0, 0, 34, 0, 0, 0,
	0, 1370, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 0, 56, 0, 2021, 64, 0, 47, 48, 411,
	0, 0, 513, 523, 0, 108, 0, 0, 108, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 108,
	110, 110, 110, 110, 110, 0, 0, 108, 0, 0,
	0, 0, 110, 0, 0, 110, 2019, 0, 0, 110,
	0, 2185, 0, 0, 0, 110, 0, 522, 1815, 1816,
	0, 0, 0, 0, 1817, 0, 0, 1818, 0, 0,
	0, 0, 1819, 0, 0, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 63, 40, 39, 42,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 2020, 0, 0, 531, 1846, 0, 1848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 66, 65,
	0, 0, 0, 0, 41, 0, 0, 1853, 0, 0,
	0, 0, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 1804, 534, 110, 534, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1896, 0,
	1803, 1557, 0, 0, 0, 0, 56, 0, 2021, 64,
	0, 47, 48, 531, 0, 531, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 534, 534, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 534, 61, 32, 33, 0, 0, 0,
	0, 0, 0, 0, 1616, 1617, 57, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 34, 0, 0, 0,
	0, 531, 817, 816, 826, 827, 819, 820, 821, 822,
	823, 824, 825, 818, 534, 531, 828, 108, 817, 816,
	826, 827, 819, 820, 821, 822, 823, 824, 825, 818,
	0, 62, 828, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 1658, 0, 0, 0, 534, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 2019, 0, 0, 108,
	0, 2181, 0, 0, 534, 0, 0, 0, 0, 0,
	0, 522, 0, 0, 1086, 1693, 68, 0, 0, 0,
	0, 0, 0, 0, 534, 534, 0, 534, 534, 0,
	0, 0, 1693, 0, 0, 36, 63, 40, 39, 42,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2020, 531, 531, 0, 531, 1720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 66, 65,
	0, 0, 0, 0, 41, 0, 0, 0, 110, 0,
	2052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 2021, 64,
	0, 47, 48, 0, 0, 534, 0, 0, 110, 534,
	0, 0, 0, 1155, 1160, 0, 534, 0, 1166, 1169,
	1170, 1171, 0, 110, 0, 0, 0, 108, 108, 108,
	0, 0, 0, 1773, 0, 0, 523, 1777, 0, 0,
	0, 0, 0, 0, 1781, 1181, 0, 1184, 1185, 0,
	0, 0, 1189, 0, 1191, 1192, 0, 0, 0, 0,
	0, 0, 1199, 1200, 1201, 0, 1203, 1204, 0, 1206,
	1207, 1208, 1209, 0, 1211, 1212, 1213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 29, 336, 61, 32, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 534,
	534, 534, 67, 0, 0, 0, 34, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 534, 0, 0,
	333, 0, 0, 0, 0, 0, 68, 1836, 1836, 1836,
	0, 0, 0, 0, 0, 0, 531, 0, 0, 0,
	0, 0, 110, 69, 0, 1836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2019, 0, 0, 0,
	0, 2170, 317, 0, 0, 534, 0, 0, 0, 320,
	0, 0, 0, 534, 0, 0, 0, 0, 108, 329,
	334, 335, 108, 0, 0, 108, 0, 0, 0, 0,
	0, 1033, 0, 1889, 0, 36, 63, 40, 39, 42,
	0, 531, 0, 108, 108, 108, 0, 0, 0, 534,
	108, 2020, 534, 0, 110, 326, 110, 0, 327, 0,
	0, 332, 0, 534, 0, 0, 0, 43, 66, 65,
	0, 0, 0, 534, 41, 0, 0, 1914, 0, 0,
	1836, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	364, 1720, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 1720, 0, 0, 0, 0, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 2021, 64,
	318, 47, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1960, 0, 0, 108, 0,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 1033,
	1418, 0, 331, 321, 322, 0, 339, 0, 0, 0,
	323, 325, 0, 319, 338, 337, 0, 0, 0, 1988,
	0, 0, 0, 0, 0, 1443, 1444, 0, 0, 534,
	1448, 0, 0, 1451, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 1159, 1159, 0, 0,
	0, 1159, 1159, 1159, 1159, 0, 0, 1720, 523, 0,
	0, 62, 0, 0, 0, 110, 0, 981, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1159, 1159,
	1159, 1159, 0, 522, 1159, 1159, 1159, 1159, 1159, 0,
	0, 0, 0, 0, 0, 1159, 1159, 1159, 0, 1159,
	1159, 0, 1159, 1159, 1159, 1159, 68, 1159, 1159, 1159,
	0, 108, 0, 534, 0, 0, 0, 0, 0, 108,
	364, 0, 0, 108, 108, 0, 0, 108, 1248, 1033,
	523, 0, 0, 0, 534, 0, 0, 0, 0, 0,
	0, 2075, 1033, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 534, 0, 0, 0, 0, 0, 968,
	0, 0, 1836, 0, 0, 812, 0, 815, 0, 0,
	0, 0, 1720, 0, 829, 830, 831, 832, 833, 834,
	835, 1836, 813, 814, 811, 817, 816, 826, 827, 819,
	820, 821, 822, 823, 824, 825, 818, 0, 0, 828,
	0, 982, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 108, 108, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 1343, 1344, 0, 0, 0,
	0, 0, 0, 0, 995, 998, 999, 1000, 1001, 1002,
	1003, 0, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 0,
	983, 984, 985, 986, 962, 966, 996, 963, 969, 965,
	967, 964, 1033, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 987, 988, 989, 990, 991, 992,
	993, 994, 0, 0, 0, 0, 29, 0, 61, 32,
	33, 0, 0, 0, 29, 0, 61, 32, 33, 0,
	57, 0, 0, 0, 0, 0, 67, 0, 57, 0,
	34, 0, 0, 29, 67, 61, 32, 33, 34, 0,
	0, 1159, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 1159, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 0, 0, 1159, 1159,
	2019, 0, 0, 1159, 69, 2154, 1159, 0, 2019, 0,
	0, 1159, 0, 2110, 0, 0, 0, 0, 523, 108,
	108, 108, 108, 108, 0, 0, 0, 2019, 0, 0,
	0, 364, 0, 0, 108, 0, 0, 0, 364, 36,
	63, 40, 39, 42, 108, 0, 0, 36, 63, 40,
	39, 42, 0, 0, 0, 2020, 0, 0, 0, 0,
	0, 0, 0, 2020, 0, 0, 36, 63, 40, 39,
	42, 43, 66, 65, 0, 0, 0, 0, 41, 43,
	66, 65, 2020, 0, 0, 0, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 66,
	65, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 2021, 64, 0, 47, 48, 0, 56, 0,
	2021, 64, 0, 47, 48, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 2021,
	64, 0, 47, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 411, 0,
	0, 0, 0, 1159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1159, 0, 1033, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 523, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 0, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 652, 632, 283, 590, 655,
	562, 579, 666, 580, 583, 621, 548, 602, 220, 577,
	549, 0, 566, 539, 573, 540, 563, 592, 154, 561,
	634, 605, 654, 184, 617, 0, 146, 192, 190, 0,
	0, 0, 226, 281, 653, 598, 0, 661, 187, 614,
	304, 272, 205, 0, 0, 594, 641, 600, 630, 589,
	623, 555, 613, 656, 578, 619, 657, 0, 0, 0,
	533, 0, 1267, 1268, 0, 0, 0, 0, 0, 136,
	0, 616, 651, 575, 618, 620, 537, 615, 0, 543,
	550, 665, 647, 569, 570, 571, 1505, 0, 0, 0,
	0, 0, 0, 593, 601, 627, 586, 0, 0, 0,
	0, 0, 0, 0, 523, 567, 0, 611, 0, 0,
	0, 551, 544, 0, 108, 591, 0, 0, 0, 554,
	115, 568, 628, 0, 535, 164, 206, 126, 631, 646,
	588, 177, 310, 650, 585, 584, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 576,
	536, 635, 564, 574, 147, 572, 251, 224, 299, 0,
	608, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	587, 622, 565, 144, 625, 612, 640, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 541, 0, 274, 302,
	315, 193, 133, 560, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 558, 559, 556, 0, 557,
	603, 604, 658, 659, 660, 629, 552, 0, 642, 643,
	0, 633, 648, 649, 624, 667, 581, 582, 542, 545,
	546, 547, 553, 595, 596, 607, 610, 638, 637, 636,
	639, 644, 663, 662, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 111, 122, 186,
	668, 244, 160, 303, 538, 152, 0, 0, 597, 599,
	609, 626, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 645, 652,
	632, 283, 590, 655, 562, 579, 666, 580, 583, 621,
	548, 602, 220, 577, 549, 0, 566, 539, 573, 540,
	563, 592, 154, 561, 634, 605, 654, 184, 617, 0,
	146, 192, 190, 0, 0, 0, 226, 281, 653, 598,
	0, 661, 187, 614, 304, 272, 205, 0, 0, 594,
	641, 600, 630, 589, 623, 555, 613, 656, 578, 619,
	657, 0, 0, 0, 533, 0, 1267, 1268, 0, 0,
	0, 0, 0, 136, 0, 616, 651, 575, 618, 620,
	537, 615, 0, 543, 550, 665, 647, 569, 570, 571,
	0, 0, 0, 0, 0, 0, 0, 593, 601, 627,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	0, 611, 0, 0, 0, 551, 544, 0, 0, 591,
	0, 0, 0, 554, 115, 568, 628, 0, 535, 164,
	206, 126, 631, 646, 588, 177, 310, 650, 585, 584,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 576, 536, 635, 564, 574, 147, 572,
	251, 224, 299, 0, 608, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 587, 622, 565, 144, 625, 612,
	640, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	541, 0, 274, 302, 315, 193, 133, 560, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 558,
	559, 556, 0, 557, 603, 604, 658, 659, 660, 629,
	552, 0, 642, 643, 0, 633, 648, 649, 624, 667,
	581, 582, 542, 545, 546, 547, 553, 595, 596, 607,
	610, 638, 637, 636, 639, 644, 663, 662, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 111, 122, 186, 668, 244, 160, 303, 538, 152,
	0, 0, 597, 599, 609, 626, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 645, 652, 632, 283, 590, 655, 562, 579,
	666, 580, 583, 621, 548, 602, 220, 577, 549, 0,
	566, 539, 573, 540, 563, 592, 154, 561, 634, 605,
	654, 184, 617, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 653, 598, 0, 661, 187, 614, 304, 272,
	205, 0, 0, 594, 641, 600, 630, 589, 623, 555,
	613, 656, 578, 619, 657, 0, 0, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 616,
	651, 575, 618, 620, 537, 615, 0, 543, 550, 665,
	647, 569, 570, 571, 0, 0, 0, 0, 0, 0,
	0, 593, 601, 627, 586, 0, 0, 0, 0, 0,
	0, 1895, 0, 567, 0, 611, 0, 0, 0, 551,
	544, 0, 0, 591, 0, 0, 0, 554, 115, 568,
	628, 0, 535, 164, 206, 126, 631, 646, 588, 177,
	310, 650, 585, 584, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 576, 536, 635,
	564, 574, 147, 572, 251, 224, 299, 0, 608, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 587, 622,
	565, 144, 625, 612, 640, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 541, 0, 274, 302, 315, 193,
	133, 560, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 558, 559, 556, 0, 557, 603, 604,
	658, 659, 660, 629, 552, 0, 642, 643, 0, 633,
	648, 649, 624, 667, 581, 582, 542, 545, 546, 547,
	553, 595, 596, 607, 610, 638, 637, 636, 639, 644,
	663, 662, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 111, 122, 186, 668, 244,
	160, 303, 538, 152, 0, 0, 597, 599, 609, 626,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 645, 652, 632, 283,
	590, 655, 562, 579, 666, 580, 583, 621, 548, 602,
	220, 577, 549, 0, 566, 539, 573, 540, 563, 592,
	154, 561, 634, 605, 654, 184, 617, 0, 146, 192,
	190, 0, 0, 0, 226, 281, 653, 598, 0, 661,
	187, 614, 304, 272, 205, 0, 0, 594, 641, 600,
	630, 589, 623, 555, 613, 656, 578, 619, 657, 0,
	0, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 616, 651, 575, 618, 620, 537, 615,
	0, 543, 550, 665, 647, 569, 570, 571, 0, 0,
	0, 0, 0, 0, 0, 593, 601, 627, 586, 0,
	0, 0, 0, 0, 0, 1632, 0, 567, 0, 611,
	0, 0, 0, 551, 544, 0, 0, 591, 0, 0,
	0, 554, 115, 568, 628, 0, 535, 164, 206, 126,
	631, 646, 588, 177, 310, 650, 585, 584, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 576, 536, 635, 564, 574, 147, 572, 251, 224,
	299, 0, 608, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 587, 622, 565, 144, 625, 612, 640, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 541, 0,
	274, 302, 315, 193, 133, 560, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 558, 559, 556,
	0, 557, 603, 604, 658, 659, 660, 629, 552, 0,
	642, 643, 0, 633, 648, 649, 624, 667, 581, 582,
	542, 545, 546, 547, 553, 595, 596, 607, 610, 638,
	637, 636, 639, 644, 663, 662, 664, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 111,
	122, 186, 668, 244, 160, 303, 538, 152, 0, 0,
	597, 599, 609, 626, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	645, 652, 632, 283, 590, 655, 562, 579, 666, 580,
	583, 621, 548, 602, 220, 577, 549, 0, 566, 539,
	573, 540, 563, 592, 154, 561, 634, 605, 654, 184,
	617, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	653, 598, 0, 661, 187, 614, 304, 272, 205, 0,
	0, 594, 641, 600, 630, 589, 623, 555, 613, 656,
	578, 619, 657, 0, 0, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 616, 651, 575,
	618, 620, 537, 615, 0, 543, 550, 665, 647, 569,
	570, 571, 0, 0, 0, 0, 0, 0, 0, 593,
	601, 627, 586, 0, 0, 0, 0, 0, 0, 1624,
	0, 567, 0, 611, 0, 0, 0, 551, 544, 0,
	0, 591, 0, 0, 0, 554, 115, 568, 628, 0,
	535, 164, 206, 126, 631, 646, 588, 177, 310, 650,
	585, 584, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 576, 536, 635, 564, 574,
	147, 572, 251, 224, 299, 0, 608, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 587, 622, 565, 144,
	625, 612, 640, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 541, 0, 274, 302, 315, 193, 133, 560,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 558, 559, 556, 0, 557, 603, 604, 658, 659,
	660, 629, 552, 0, 642, 643, 0, 633, 648, 649,
	624, 667, 581, 582, 542, 545, 546, 547, 553, 595,
	596, 607, 610, 638, 637, 636, 639, 644, 663, 662,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 111, 122, 186, 668, 244, 160, 303,
	538, 152, 0, 0, 597, 599, 609, 626, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 645, 652, 632, 283, 590, 655,
	562, 579, 666, 580, 583, 621, 548, 602, 220, 577,
	549, 0, 566, 539, 573, 540, 563, 592, 154, 561,
	634, 605, 654, 184, 617, 0, 146, 192, 190, 0,
	0, 0, 226, 281, 653, 598, 0, 661, 187, 614,
	304, 272, 205, 0, 0, 594, 641, 600, 630, 589,
	623, 555, 613, 656, 578, 619, 657, 69, 0, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 616, 651, 575, 618, 620, 537, 615, 0, 543,
	550, 665, 647, 569, 570, 571, 0, 0, 0, 0,
	0, 0, 0, 593, 601, 627, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 0, 611, 0, 0,
	0, 551, 544, 0, 0, 591, 0, 0, 0, 554,
	115, 568, 628, 0, 535, 164, 206, 126, 631, 646,
	588, 177, 310, 650, 585, 584, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 576,
	536, 635, 564, 574, 147, 572, 251, 224, 299, 0,
	608, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	587, 622, 565, 144, 625, 612, 640, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 541, 0, 274, 302,
	315, 193, 133, 560, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 558, 559, 556, 0, 557,
	603, 604, 658, 659, 660, 629, 552, 0, 642, 643,
	0, 633, 648, 649, 624, 667, 581, 582, 542, 545,
	546, 547, 553, 595, 596, 607, 610, 638, 637, 636,
	639, 644, 663, 662, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 111, 122, 186,
	668, 244, 160, 303, 538, 152, 0, 0, 597, 599,
	609, 626, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 645, 652,
	632, 283, 590, 655, 562, 579, 666, 580, 583, 621,
	548, 602, 220, 577, 549, 0, 566, 539, 573, 540,
	563, 592, 154, 561, 634, 605, 654, 184, 617, 0,
	146, 192, 190, 0, 0, 0, 226, 281, 653, 598,
	0, 661, 187, 614, 304, 272, 205, 0, 0, 594,
	641, 600, 630, 589, 623, 555, 613, 656, 578, 619,
	657, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 616, 651, 575, 618, 620,
	537, 615, 0, 543, 550, 665, 647, 569, 570, 571,
	0, 0, 0, 0, 0, 0, 0, 593, 601, 627,
	586, 0, 0, 0, 0, 0, 0, 1249, 0, 567,
	0, 611, 0, 0, 0, 551, 544, 0, 0, 591,
	0, 0, 0, 554, 115, 568, 628, 0, 535, 164,
	206, 126, 631, 646, 588, 177, 310, 650, 585, 584,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 576, 536, 635, 564, 574, 147, 572,
	251, 224, 299, 0, 608, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 587, 622, 565, 144, 625, 612,
	640, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	541, 0, 274, 302, 315, 193, 133, 560, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 558,
	559, 556, 0, 557, 603, 604, 658, 659, 660, 629,
	552, 0, 642, 643, 0, 633, 648, 649, 624, 667,
	581, 582, 542, 545, 546, 547, 553, 595, 596, 607,
	610, 638, 637, 636, 639, 644, 663, 662, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 111, 122, 186, 668, 244, 160, 303, 538, 152,
	0, 0, 597, 599, 609, 626, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 645, 652, 632, 283, 590, 655, 562, 579,
	666, 580, 583, 621, 548, 602, 220, 577, 549, 0,
	566, 539, 573, 540, 563, 592, 154, 561, 634, 605,
	654, 184, 617, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 653, 598, 0, 661, 187, 614, 304, 272,
	205, 0, 0, 594, 641, 600, 630, 589, 623, 555,
	613, 656, 578, 619, 657, 0, 0, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 616,
	651, 575, 618, 620, 537, 615, 0, 543, 550, 665,
	647, 569, 570, 571, 0, 0, 0, 0, 0, 0,
	0, 593, 601, 627, 586, 0, 0, 0, 0, 0,
	0, 1115, 0, 567, 0, 611, 0, 0, 0, 551,
	544, 0, 0, 591, 0, 0, 0, 554, 115, 568,
	628, 0, 535, 164, 206, 126, 631, 646, 588, 177,
	310, 650, 585, 584, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 576, 536, 635,
	564, 574, 147, 572, 251, 224, 299, 0, 608, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 587, 622,
	565, 144, 625, 612, 640, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 541, 0, 274, 302, 315, 193,
	133, 560, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 558, 559, 556, 0, 557, 603, 604,
	658, 659, 660, 629, 552, 0, 642, 643, 0, 633,
	648, 649, 624, 667, 581, 582, 542, 545, 546, 547,
	553, 595, 596, 607, 610, 638, 637, 636, 639, 644,
	663, 662, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 111, 122, 186, 668, 244,
	160, 303, 538, 152, 0, 0, 597, 599, 609, 626,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 645, 652, 632, 283,
	590, 655, 562, 579, 666, 580, 583, 621, 548, 602,
	220, 577, 549, 0, 566, 539, 573, 540, 563, 592,
	154, 561, 634, 605, 654, 184, 617, 0, 146, 192,
	190, 0, 0, 0, 226, 281, 653, 598, 0, 661,
	187, 614, 304, 272, 205, 0, 0, 594, 641, 600,
	630, 589, 623, 555, 613, 656, 578, 619, 657, 0,
	0, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 616, 651, 575, 618, 620, 537, 615,
	0, 543, 550, 665, 647, 569, 570, 571, 0, 0,
	0, 0, 0, 0, 0, 593, 601, 627, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 0, 611,
	0, 0, 0, 551, 544, 0, 0, 591, 0, 0,
	0, 554, 115, 568, 628, 0, 535, 164, 206, 126,
	631, 646, 588, 177, 310, 650, 585, 584, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 576, 536, 635, 564, 574, 147, 572, 251, 224,
	299, 0, 608, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 587, 622, 565, 144, 625, 612, 640, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 541, 0,
	274, 302, 315, 193, 133, 560, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 558, 559, 556,
	0, 557, 603, 604, 658, 659, 660, 629, 552, 0,
	642, 643, 0, 633, 648, 649, 624, 667, 581, 582,
	542, 545, 546, 547, 553, 595, 596, 607, 610, 638,
	637, 636, 639, 644, 663, 662, 664, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 111,
	122, 186, 668, 244, 160, 303, 538, 152, 0, 0,
	597, 599, 609, 626, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	645, 652, 632, 283, 590, 655, 562, 579, 666, 580,
	583, 621, 548, 602, 220, 577, 549, 0, 566, 539,
	573, 540, 563, 592, 154, 561, 634, 605, 654, 184,
	617, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	653, 598, 0, 661, 187, 614, 304, 272, 205, 0,
	0, 594, 641, 600, 630, 589, 623, 555, 613, 656,
	578, 619, 657, 0, 0, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 616, 651, 575,
	618, 620, 537, 615, 0, 543, 550, 665, 647, 569,
	570, 571, 0, 0, 0, 0, 0, 0, 0, 593,
	601, 627, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 0, 611, 0, 0, 0, 551, 544, 0,
	0, 591, 0, 0, 0, 554, 115, 568, 628, 0,
	535, 164, 206, 126, 631, 646, 588, 177, 310, 650,
	585, 584, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 576, 536, 635, 564, 574,
	147, 572, 251, 224, 299, 0, 608, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 587, 622, 565, 144,
	625, 612, 640, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 541, 0, 274, 302, 315, 193, 133, 560,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 558, 559, 556, 0, 557, 603, 604, 658, 659,
	660, 629, 552, 0, 642, 643, 0, 633, 648, 649,
	624, 667, 581, 582, 542, 545, 546, 547, 553, 595,
	596, 607, 610, 638, 637, 636, 639, 644, 663, 662,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 111, 122, 186, 668, 244, 160, 303,
	538, 152, 0, 0, 597, 599, 609, 626, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 645, 652, 632, 283, 590, 655,
	562, 579, 666, 580, 583, 621, 548, 602, 220, 577,
	549, 0, 566, 539, 573, 540, 563, 592, 154, 561,
	634, 605, 654, 184, 617, 0, 146, 192, 190, 0,
	0, 0, 226, 281, 1277, 1281, 0, 661, 187, 614,
	304, 272, 205, 0, 0, 594, 641, 600, 630, 589,
	623, 555, 613, 656, 578, 619, 657, 0, 0, 0,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 616, 651, 575, 618, 620, 537, 615, 0, 543,
	550, 665, 647, 569, 570, 571, 0, 0, 0, 0,
	0, 0, 0, 593, 601, 627, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 0, 611, 0, 0,
	0, 551, 544, 0, 0, 591, 0, 0, 0, 554,
	115, 568, 628, 0, 535, 164, 206, 126, 631, 646,
	1280, 177, 310, 650, 585, 584, 1275, 0, 1276, 167,
	185, 130, 112, 124, 1273, 1279, 216, 249, 257, 576,
	536, 635, 564, 574, 147, 572, 251, 224, 299, 0,
	608, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	587, 622, 565, 144, 625, 612, 640, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 541, 0, 274, 302,
	315, 193, 133, 560, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 558, 559, 556, 0, 557,
	603, 604, 658, 659, 660, 629, 552, 0, 642, 643,
	0, 633, 648, 649, 624, 667, 581, 582, 542, 545,
	546, 547, 553, 595, 596, 607, 610, 638, 637, 636,
	639, 644, 663, 662, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 111, 122, 186,
	668, 244, 160, 303, 538, 152, 0, 0, 597, 599,
	609, 626, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 645, 652,
	632, 283, 590, 655, 562, 579, 666, 580, 583, 621,
	548, 602, 220, 577, 549, 0, 566, 539, 573, 540,
	563, 592, 154, 561, 634, 605, 654, 184, 617, 0,
	146, 192, 190, 0, 0, 0, 226, 281, 653, 598,
	0, 661, 187, 614, 304, 272, 205, 0, 0, 594,
	641, 600, 630, 589, 623, 555, 613, 656, 578, 619,
	657, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 616, 651, 575, 618, 620,
	537, 615, 0, 543, 550, 665, 647, 569, 570, 571,
	0, 0, 0, 0, 0, 0, 0, 593, 601, 627,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	0, 611, 0, 0, 0, 551, 544, 0, 0, 591,
	0, 0, 0, 554, 115, 568, 628, 0, 535, 164,
	206, 126, 631, 646, 588, 177, 310, 650, 585, 584,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 576, 536, 635, 564, 574, 147, 572,
	251, 224, 299, 0, 608, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 587, 622, 565, 144, 625, 612,
	640, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	541, 0, 274, 302, 315, 193, 133, 560, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 558,
	559, 556, 0, 557, 603, 604, 658, 659, 660, 629,
	552, 0, 642, 643, 0, 633, 648, 649, 624, 667,
	581, 582, 542, 545, 546, 547, 553, 595, 596, 607,
	610, 638, 637, 636, 639, 644, 663, 662, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 111, 122, 186, 668, 244, 160, 303, 538, 152,
	0, 0, 597, 599, 609, 626, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 645, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	418, 0, 0, 0, 154, 415, 0, 0, 0, 184,
	0, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	0, 0, 0, 462, 187, 0, 304, 272, 205, 0,
	0, 0, 0, 451, 452, 0, 0, 0, 0, 0,
	0, 1256, 0, 69, 0, 0, 416, 439, 438, 441,
	442, 443, 444, 0, 0, 136, 440, 445, 446, 447,
	1257, 0, 0, 413, 430, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 427, 428, 0,
	0, 0, 0, 476, 0, 429, 0, 0, 424, 425,
	426, 431, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 453, 0, 0, 177, 310, 0,
	0, 474, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 459, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 463, 475, 469, 471, 470, 467, 468, 466, 465,
	464, 477, 454, 455, 456, 457, 460, 0, 472, 473,
	0, 0, 0, 0, 490, 491, 492, 493, 494, 495,
	496, 489, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 478, 479, 480, 481, 482, 483, 484, 485, 488,
	486, 487, 458, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 29, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 418, 0, 0, 0, 154, 415, 0, 0,
	0, 184, 0, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 0, 0, 0, 462, 187, 0, 304, 272,
	205, 0, 0, 0, 0, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 416, 439,
	438, 441, 442, 443, 444, 0, 0, 136, 440, 445,
	446, 447, 0, 0, 0, 413, 430, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	428, 0, 0, 0, 0, 476, 0, 429, 0, 0,
	424, 425, 426, 431, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 453, 0, 0, 177,
	310, 0, 0, 474, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 459, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 463, 475, 469, 471, 470, 467, 468,
	466, 465, 464, 477, 454, 455, 456, 457, 460, 0,
	472, 473, 0, 0, 0, 0, 490, 491, 492, 493,
	494, 495, 496, 489, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 478, 479, 480, 481, 482, 483, 484,
	485, 488, 486, 487, 458, 111, 122, 186, 68, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 418, 0, 0, 0, 154, 415, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 462, 187, 0, 304,
	272, 205, 0, 0, 0, 0, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 416,
	439, 438, 441, 442, 443, 444, 0, 0, 136, 440,
	445, 446, 447, 0, 0, 0, 413, 430, 0, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	427, 428, 409, 0, 0, 0, 476, 0, 429, 0,
	0, 424, 425, 426, 431, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 164, 206, 126, 453, 0, 0,
	177, 310, 0, 0, 474, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 459, 0,
	0, 0, 0, 147, 0, 251, 224, 299, 0, 0,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 0,
	0, 0, 144, 0, 0, 0, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 0, 0, 274, 302, 315,
	193, 133, 0, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 463, 475, 469, 471, 470, 467,
	468, 466, 465, 464, 477, 454, 455, 456, 457, 460,
	0, 472, 473, 0, 0, 0, 0, 490, 491, 492,
	493, 494, 495, 496, 489, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 478, 479, 480, 481, 482, 483,
	484, 485, 488, 486, 487, 458, 111, 122, 186, 0,
	244, 160, 303, 0, 152, 0, 0, 0, 0, 0,
	0, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 418, 0, 0, 0, 154, 415,
	0, 0, 0, 184, 0, 0, 146, 192, 190, 0,
	0, 0, 226, 281, 0, 0, 0, 462, 187, 0,
	304, 272, 205, 0, 0, 0, 0, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 746,
	416, 439, 438, 441, 442, 443, 444, 0, 0, 136,
	440, 445, 446, 447, 0, 0, 0, 413, 430, 0,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 428, 0, 0, 0, 0, 476, 0, 429,
	0, 0, 424, 425, 426, 431, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 453, 0,
	0, 177, 310, 0, 0, 474, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 459,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 463, 475, 469, 471, 470,
	467, 468, 466, 465, 464, 477, 454, 455, 456, 457,
	460, 0, 472, 473, 0, 0, 0, 0, 490, 491,
	492, 493, 494, 495, 496, 489, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 478, 479, 480, 481, 482,
	483, 484, 485, 488, 486, 487, 458, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 418, 0, 0, 0, 154,
	415, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 462, 187,
	0, 304, 272, 205, 0, 0, 0, 0, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 416, 439, 438, 441, 442, 443, 444, 0, 0,
	136, 440, 445, 446, 447, 0, 0, 0, 413, 430,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 427, 428, 1157, 0, 0, 0, 476, 0,
	429, 0, 0, 424, 425, 426, 431, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 164, 206, 126, 453,
	0, 0, 177, 310, 0, 0, 474, 240, 0, 277,
	167, 185, 130, 112, 124, 140, 166, 216, 249, 257,
	459, 0, 0, 0, 0, 147, 0, 251, 224, 299,
	0, 0, 230, 250, 188, 288, 242, 297, 298, 168,
	282, 307, 312, 269, 155, 0, 116, 0, 237, 150,
	181, 0, 0, 0, 144, 0, 0, 0, 268, 131,
	284, 204, 210, 141, 143, 142, 125, 263, 286, 135,
	145, 273, 278, 117, 280, 296, 137, 261, 119, 294,
	276, 202, 178, 179, 118, 0, 247, 153, 163, 149,
	219, 0, 162, 239, 291, 292, 148, 314, 127, 306,
	121, 128, 305, 213, 0, 212, 308, 287, 295, 203,
	196, 0, 120, 293, 201, 195, 183, 158, 170, 235,
	191, 236, 171, 208, 207, 209, 0, 0, 0, 274,
	302, 315, 193, 133, 0, 262, 285, 0, 0, 134,
	161, 157, 234, 211, 129, 173, 271, 182, 189, 246,
	313, 223, 252, 138, 301, 270, 463, 475, 469, 471,
	470, 467, 468, 466, 465, 464, 477, 454, 455, 456,
	457, 460, 0, 472, 473, 0, 0, 0, 0, 490,
	491, 492, 493, 494, 495, 496, 489, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 478, 479, 480, 481,
	482, 483, 484, 485, 488, 486, 487, 458, 111, 122,
	186, 0, 244, 160, 303, 0, 152, 0, 0, 0,
	0, 0, 0, 113, 114, 123, 132, 139, 151, 156,
	159, 165, 169, 172, 174, 175, 176, 180, 194, 197,
	198, 199, 200, 214, 215, 217, 218, 221, 222, 225,
	227, 228, 229, 231, 232, 233, 238, 241, 243, 245,
	248, 253, 254, 255, 256, 258, 259, 260, 264, 265,
	266, 267, 275, 279, 289, 290, 300, 309, 311, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 418, 0, 0, 0,
	154, 415, 0, 0, 0, 184, 0, 0, 146, 192,
	190, 0, 0, 0, 226, 281, 0, 0, 0, 462,
	187, 0, 304, 272, 205, 0, 0, 0, 0, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 416, 439, 1168, 441, 442, 443, 444, 0,
	0, 136, 440, 445, 446, 447, 0, 0, 0, 413,
	430, 0, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 427, 428, 1157, 0, 0, 0, 476,
	0, 429, 0, 0, 424, 425, 426, 431, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	453, 0, 0, 177, 310, 0, 0, 474, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 459, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 463, 475, 469,
	471, 470, 467, 468, 466, 465, 464, 477, 454, 455,
	456, 457, 460, 0, 472, 473, 0, 0, 0, 0,
	490, 491, 492, 493, 494, 495, 496, 489, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 478, 479, 480,
	481, 482, 483, 484, 485, 488, 486, 487, 458, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 418, 0, 0,
	0, 154, 415, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	462, 187, 0, 304, 272, 205, 0, 0, 0, 0,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 416, 439, 1165, 441, 442, 443, 444,
	0, 0, 136, 440, 445, 446, 447, 0, 0, 0,
	413, 430, 0, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 427, 428, 1157, 0, 0, 0,
	476, 0, 429, 0, 0, 424, 425, 426, 431, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 164, 206,
	126, 453, 0, 0, 177, 310, 0, 0, 474, 240,
	0, 277, 167, 185, 130, 112, 124, 140, 166, 216,
	249, 257, 459, 0, 0, 0, 0, 147, 0, 251,
	224, 299, 0, 0, 230, 250, 188, 288, 242, 297,
	298, 168, 282, 307, 312, 269, 155, 0, 116, 0,
	237, 150, 181, 0, 0, 0, 144, 0, 0, 0,
	268, 131, 284, 204, 210, 141, 143, 142, 125, 263,
	286, 135, 145, 273, 278, 117, 280, 296, 137, 261,
	119, 294, 276, 202, 178, 179, 118, 0, 247, 153,
	163, 149, 219, 0, 162, 239, 291, 292, 148, 314,
	127, 306, 121, 128, 305, 213, 0, 212, 308, 287,
	295, 203, 196, 0, 120, 293, 201, 195, 183, 158,
	170, 235, 191, 236, 171, 208, 207, 209, 0, 0,
	0, 274, 302, 315, 193, 133, 0, 262, 285, 0,
	0, 134, 161, 157, 234, 211, 129, 173, 271, 182,
	189, 246, 313, 223, 252, 138, 301, 270, 463, 475,
	469, 471, 470, 467, 468, 466, 465, 464, 477, 454,
	455, 456, 457, 460, 0, 472, 473, 0, 0, 0,
	0, 490, 491, 492, 493, 494, 495, 496, 489, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 478, 479,
	480, 481, 482, 483, 484, 485, 488, 486, 487, 458,
	111, 122, 186, 0, 244, 160, 303, 0, 152, 0,
	0, 0, 0, 0, 0, 113, 114, 123, 132, 139,
	151, 156, 159, 165, 169, 172, 174, 175, 176, 180,
	194, 197, 198, 199, 200, 214, 215, 217, 218, 221,
	222, 225, 227, 228, 229, 231, 232, 233, 238, 241,
	243, 245, 248, 253, 254, 255, 256, 258, 259, 260,
	264, 265, 266, 267, 275, 279, 289, 290, 300, 309,
	311, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 418, 0,
	0, 0, 154, 415, 0, 0, 0, 184, 0, 0,
	146, 192, 190, 0, 0, 0, 226, 281, 0, 0,
	0, 462, 187, 0, 304, 272, 205, 0, 0, 0,
	0, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 1076, 416, 439, 438, 441, 442, 443,
	444, 0, 0, 136, 440, 445, 446, 447, 0, 0,
	0, 413, 430, 0, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 427, 428, 0, 0, 0,
	0, 476, 0, 429, 0, 0, 424, 425, 426, 431,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 453, 0, 0, 177, 310, 0, 0, 474,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 459, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 463,
	475, 469, 471, 470, 467, 468, 466, 465, 464, 477,
	454, 455, 456, 457, 460, 0, 472, 473, 0, 0,
	0, 0, 490, 491, 492, 493, 494, 495, 496, 489,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 478,
	479, 480, 481, 482, 483, 484, 485, 488, 486, 487,
	458, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 418,
	0, 0, 0, 154, 415, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 462, 187, 0, 304, 272, 205, 0, 0,
	0, 0, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 416, 439, 438, 441, 442,
	443, 444, 0, 0, 136, 440, 445, 446, 447, 0,
	0, 0, 413, 430, 0, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 427, 428, 0, 0,
	0, 0, 476, 0, 429, 0, 0, 424, 425, 426,
	431, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	164, 206, 126, 453, 0, 0, 177, 310, 0, 0,
	474, 240, 0, 277, 167, 185, 130, 112, 124, 140,
	166, 216, 249, 257, 459, 0, 0, 0, 0, 147,
	0, 251, 224, 299, 0, 0, 230, 250, 188, 288,
	242, 297, 298, 168, 282, 307, 312, 269, 155, 0,
	116, 0, 237, 150, 181, 0, 0, 0, 144, 0,
	0, 0, 268, 131, 284, 204, 210, 141, 143, 142,
	125, 263, 286, 135, 145, 273, 278, 117, 280, 296,
	137, 261, 119, 294, 276, 202, 178, 179, 118, 0,
	247, 153, 163, 149, 219, 0, 162, 239, 291, 292,
	148, 314, 127, 306, 121, 128, 305, 213, 0, 212,
	308, 287, 295, 203, 196, 0, 120, 293, 201, 195,
	183, 158, 170, 235, 191, 236, 171, 208, 207, 209,
	0, 0, 0, 274, 302, 315, 193, 133, 0, 262,
	285, 0, 0, 134, 161, 157, 234, 211, 129, 173,
	271, 182, 189, 246, 313, 223, 252, 138, 301, 270,
	463, 475, 469, 471, 470, 467, 468, 466, 465, 464,
	477, 454, 455, 456, 457, 460, 0, 472, 473, 0,
	0, 0, 0, 490, 491, 492, 493, 494, 495, 496,
	489, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	478, 479, 480, 481, 482, 483, 484, 485, 488, 486,
	487, 458, 111, 122, 186, 0, 244, 160, 303, 0,
	152, 0, 0, 0, 0, 0, 0, 113, 114, 123,
	132, 139, 151, 156, 159, 165, 169, 172, 174, 175,
	176, 180, 194, 197, 198, 199, 200, 214, 215, 217,
	218, 221, 222, 225, 227, 228, 229, 231, 232, 233,
	238, 241, 243, 245, 248, 253, 254, 255, 256, 258,
	259, 260, 264, 265, 266, 267, 275, 279, 289, 290,
	300, 309, 311, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	418, 0, 0, 0, 154, 415, 0, 0, 0, 184,
	0, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	0, 0, 0, 462, 187, 0, 304, 272, 205, 0,
	0, 0, 0, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 416, 439, 438, 441,
	442, 443, 444, 0, 0, 136, 440, 445, 446, 447,
	0, 0, 0, 413, 430, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 427, 428, 0,
	0, 0, 0, 476, 0, 429, 0, 0, 424, 425,
	426, 431, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 453, 0, 0, 177, 310, 0,
	0, 474, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 459, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 463, 475, 469, 471, 470, 467, 468, 466, 465,
	464, 477, 454, 455, 456, 457, 460, 0, 472, 473,
	0, 0, 0, 0, 761, 762, 763, 764, 765, 769,
	770, 774, 775, 783, 782, 781, 784, 785, 787, 786,
	788, 766, 767, 768, 771, 772, 773, 776, 777, 780,
	778, 779, 458, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 462, 187, 0, 304, 272, 205,
	0, 0, 0, 0, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 416, 439, 438,
	441, 442, 443, 444, 0, 0, 136, 440, 445, 446,
	447, 0, 0, 0, 0, 430, 0, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 427, 428,
	0, 0, 0, 0, 476, 0, 429, 0, 0, 424,
	425, 426, 431, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 164, 206, 126, 453, 0, 0, 177, 310,
	0, 0, 474, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 459, 0, 0, 0,
	0, 147, 0, 251, 224, 299, 0, 2163, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 0, 0, 0,
	144, 0, 0, 0, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 0, 0, 274, 302, 315, 193, 133,
	0, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 463, 475, 469, 471, 470, 467, 468, 466,
	465, 464, 477, 454, 455, 456, 457, 460, 0, 472,
	473, 0, 0, 0, 0, 490, 491, 492, 493, 494,
	495, 496, 489, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 478, 479, 480, 481, 482, 483, 484, 485,
	488, 486, 487, 458, 111, 122, 186, 0, 244, 160,
	303, 0, 152, 0, 0, 0, 0, 0, 0, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 184, 0, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 0, 0, 0, 462, 187, 0, 304, 272,
	205, 0, 0, 0, 0, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 746, 416, 439,
	438, 441, 442, 443, 444, 0, 0, 136, 440, 445,
	446, 447, 0, 0, 0, 0, 430, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	428, 0, 0, 0, 0, 476, 0, 429, 0, 0,
	424, 425, 426, 431, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 453, 0, 0, 177,
	310, 0, 0, 474, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 459, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 463, 475, 469, 471, 470, 467, 468,
	466, 465, 464, 477, 454, 455, 456, 457, 460, 0,
	472, 473, 0, 0, 0, 0, 490, 491, 492, 493,
	494, 495, 496, 489, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 478, 479, 480, 481, 482, 483, 484,
	485, 488, 486, 487, 458, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 462, 187, 0, 304,
	272, 205, 0, 0, 0, 0, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 416,
	439, 438, 441, 442, 443, 444, 0, 0, 136, 440,
	445, 446, 447, 0, 0, 0, 0, 430, 0, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	427, 428, 0, 0, 0, 0, 476, 0, 429, 0,
	0, 424, 425, 426, 431, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 164, 206, 126, 453, 0, 0,
	177, 310, 0, 0, 474, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 459, 0,
	0, 0, 0, 147, 0, 251, 224, 299, 0, 0,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 0,
	0, 0, 144, 0, 0, 0, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 0, 0, 274, 302, 315,
	193, 133, 0, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 463, 475, 469, 471, 470, 467,
	468, 466, 465, 464, 477, 454, 455, 456, 457, 460,
	0, 472, 473, 0, 0, 0, 0, 490, 491, 492,
	493, 494, 495, 496, 489, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 478, 479, 480, 481, 482, 483,
	484, 485, 488, 486, 487, 458, 111, 122, 186, 0,
	244, 160, 303, 0, 152, 0, 0, 0, 0, 0,
	0, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 1237, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 184, 0, 0, 146, 192, 190, 0,
	0, 0, 226, 281, 0, 0, 0, 0, 187, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1239, 1241, 0, 0, 0, 0, 0,
	109, 0, 366, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 1240, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	369, 370, 371, 375, 376, 380, 381, 389, 388, 387,
	390, 391, 393, 392, 394, 372, 373, 374, 377, 378,
	379, 382, 383, 386, 384, 385, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 1237, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 304, 272, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1239, 1241, 0, 0, 0, 0,
	0, 109, 0, 366, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 164, 206, 126, 0,
	0, 0, 177, 310, 0, 1240, 0, 240, 0, 277,
	167, 185, 130, 112, 124, 140, 166, 216, 249, 257,
	0, 0, 0, 0, 0, 147, 0, 251, 224, 299,
	0, 0, 1235, 250, 188, 288, 242, 297, 298, 168,
	282, 307, 312, 269, 155, 0, 116, 0, 237, 150,
	181, 0, 0, 0, 144, 0, 0, 0, 268, 131,
	284, 204, 210, 141, 143, 142, 125, 263, 286, 135,
	145, 273, 278, 117, 280, 296, 137, 261, 119, 294,
	276, 202, 178, 179, 118, 0, 247, 153, 163, 149,
	219, 0, 162, 239, 291, 292, 148, 314, 127, 306,
	121, 128, 305, 213, 0, 212, 308, 287, 295, 203,
	196, 0, 120, 293, 201, 195, 183, 158, 170, 235,
	191, 236, 171, 208, 207, 209, 0, 0, 0, 274,
	302, 315, 193, 133, 0, 262, 285, 0, 0, 134,
	161, 157, 234, 211, 129, 173, 271, 182, 189, 246,
	313, 223, 252, 138, 301, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
	368, 369, 370, 371, 375, 376, 380, 381, 389, 388,
	387, 390, 391, 393, 392, 394, 372, 373, 374, 377,
	378, 379, 382, 383, 386, 384, 385, 0, 111, 122,
	186, 0, 244, 160, 303, 0, 152, 0, 0, 0,
	0, 0, 0, 113, 114, 123, 132, 139, 151, 156,
	159, 165, 169, 172, 174, 175, 176, 180, 194, 197,
	198, 199, 200, 214, 215, 217, 218, 221, 222, 225,
	227, 228, 229, 231, 232, 233, 238, 241, 243, 245,
	248, 253, 254, 255, 256, 258, 259, 260, 264, 265,
	266, 267, 275, 279, 289, 290, 300, 309, 311, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 184, 0, 0, 146, 192,
	190, 0, 0, 0, 226, 281, 0, 0, 0, 0,
	187, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 804, 0, 807, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 800, 799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 369, 370, 371, 375, 376, 380, 381, 389,
	388, 387, 390, 391, 393, 392, 394, 372, 373, 374,
	377, 378, 379, 382, 383, 386, 384, 385, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 1483, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 304, 272, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 366, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 164, 206,
	126, 0, 0, 0, 177, 310, 0, 0, 0, 240,
	0, 277, 167, 185, 130, 112, 124, 140, 166, 216,
	249, 257, 0, 0, 0, 0, 0, 147, 0, 251,
	224, 299, 0, 0, 230, 250, 188, 288, 242, 297,
	298, 168, 282, 307, 312, 269, 155, 0, 116, 0,
	237, 150, 181, 0, 0, 0, 144, 0, 0, 0,
	268, 131, 284, 204, 210, 141, 143, 142, 125, 263,
	286, 135, 145, 273, 278, 117, 280, 296, 137, 261,
	119, 294, 276, 202, 178, 179, 118, 0, 247, 153,
	163, 149, 219, 0, 162, 239, 291, 292, 148, 314,
	127, 306, 121, 128, 305, 213, 0, 212, 308, 287,
	295, 203, 196, 0, 120, 293, 201, 195, 183, 158,
	170, 235, 191, 236, 171, 208, 207, 209, 0, 0,
	0, 274, 302, 315, 193, 133, 0, 262, 285, 0,
	0, 134, 161, 157, 234, 211, 129, 173, 271, 182,
	189, 246, 313, 223, 252, 138, 301, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 367, 368, 369, 370, 371, 375, 376, 380, 381,
	389, 388, 387, 390, 391, 393, 392, 394, 372, 373,
	374, 377, 378, 379, 382, 383, 386, 384, 385, 0,
	111, 122, 186, 0, 244, 160, 303, 0, 152, 0,
	0, 0, 0, 0, 0, 113, 114, 123, 132, 139,
	151, 156, 159, 165, 169, 172, 174, 175, 176, 180,
	194, 197, 198, 199, 200, 214, 215, 217, 218, 221,
	222, 225, 227, 228, 229, 231, 232, 233, 238, 241,
	243, 245, 248, 253, 254, 255, 256, 258, 259, 260,
	264, 265, 266, 267, 275, 279, 289, 290, 300, 309,
	311, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 184, 0, 0,
	146, 192, 190, 0, 0, 0, 226, 281, 0, 0,
	0, 0, 187, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 366, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 369, 370, 371, 375, 376, 380,
	381, 389, 388, 387, 390, 391, 393, 392, 394, 372,
	373, 374, 377, 378, 379, 382, 383, 386, 384, 385,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 304, 272, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 804, 0, 807, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	164, 206, 126, 0, 0, 0, 177, 310, 0, 0,
	0, 240, 0, 277, 167, 185, 130, 112, 124, 140,
	166, 216, 249, 257, 0, 0, 0, 0, 0, 147,
	0, 251, 224, 299, 0, 0, 230, 250, 188, 288,
	242, 297, 298, 168, 282, 307, 312, 269, 155, 0,
	116, 0, 237, 150, 181, 0, 0, 0, 144, 0,
	0, 0, 268, 131, 284, 204, 210, 141, 143, 142,
	125, 263, 286, 135, 145, 273, 278, 117, 280, 296,
	137, 261, 119, 294, 276, 202, 178, 179, 118, 0,
	247, 153, 163, 149, 219, 0, 162, 239, 291, 292,
	148, 314, 127, 306, 121, 128, 305, 213, 0, 212,
	308, 287, 295, 203, 196, 0, 120, 293, 201, 195,
	183, 158, 170, 235, 191, 236, 171, 208, 207, 209,
	0, 0, 0, 274, 302, 315, 193, 133, 0, 262,
	285, 0, 0, 134, 161, 157, 234, 211, 129, 173,
	271, 182, 189, 246, 313, 223, 252, 138, 301, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 367, 368, 369, 370, 371, 375, 376,
	380, 381, 389, 388, 387, 390, 391, 393, 392, 394,
	372, 373, 374, 377, 378, 379, 382, 383, 386, 384,
	385, 0, 111, 122, 186, 0, 244, 160, 303, 0,
	152, 0, 0, 0, 0, 0, 0, 113, 114, 123,
	132, 139, 151, 156, 159, 165, 169, 172, 174, 175,
	176, 180, 194, 197, 198, 199, 200, 214, 215, 217,
	218, 221, 222, 225, 227, 228, 229, 231, 232, 233,
	238, 241, 243, 245, 248, 253, 254, 255, 256, 258,
	259, 260, 264, 265, 266, 267, 275, 279, 289, 290,
	300, 309, 311, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 184,
	0, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	0, 0, 0, 0, 187, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 816, 826, 827, 819, 820, 821,
	822, 823, 824, 825, 818, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 29, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 184, 0, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 0, 0, 0, 0, 187, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 122, 186, 68, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 29, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 184, 0, 0, 146, 192, 190, 0,
	0, 0, 226, 281, 0, 0, 0, 0, 187, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 122, 186,
	68, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	950, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 304, 272, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 0, 949, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 164, 206, 126, 0,
	0, 0, 177, 310, 0, 0, 0, 240, 0, 277,
	167, 185, 130, 112, 124, 140, 166, 216, 249, 257,
	0, 0, 0, 0, 0, 147, 0, 251, 224, 299,
	0, 0, 230, 250, 188, 288, 242, 297, 298, 168,
	282, 307, 312, 269, 155, 0, 116, 0, 237, 150,
	181, 0, 0, 0, 144, 0, 0, 0, 268, 131,
	284, 204, 210, 141, 143, 142, 125, 263, 286, 135,
	145, 273, 278, 117, 280, 296, 137, 261, 119, 294,
	276, 202, 178, 179, 118, 0, 247, 153, 163, 149,
	219, 0, 162, 239, 291, 292, 148, 314, 127, 306,
	121, 128, 305, 213, 0, 212, 308, 287, 295, 203,
	196, 0, 120, 293, 201, 195, 183, 158, 170, 235,
	191, 236, 171, 208, 207, 209, 0, 0, 0, 274,
	302, 315, 193, 133, 0, 262, 285, 0, 0, 134,
	161, 157, 234, 211, 129, 173, 271, 182, 189, 246,
	313, 223, 252, 138, 301, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 122,
	186, 0, 244, 160, 303, 0, 152, 0, 0, 0,
	0, 0, 0, 113, 114, 123, 132, 139, 151, 156,
	159, 165, 169, 172, 174, 175, 176, 180, 194, 197,
	198, 199, 200, 214, 215, 217, 218, 221, 222, 225,
	227, 228, 229, 231, 232, 233, 238, 241, 243, 245,
	248, 253, 254, 255, 256, 258, 259, 260, 264, 265,
	266, 267, 275, 279, 289, 290, 300, 309, 311, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 184, 0, 0, 146, 192,
	190, 0, 0, 0, 226, 281, 0, 0, 0, 0,
	187, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 304, 272, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 164, 206,
	126, 0, 0, 0, 177, 310, 0, 0, 0, 240,
	0, 277, 167, 185, 130, 112, 124, 140, 166, 216,
	249, 257, 0, 0, 0, 0, 0, 147, 0, 251,
	224, 299, 0, 0, 230, 250, 188, 288, 242, 297,
	298, 168, 282, 307, 312, 269, 155, 0, 116, 0,
	237, 150, 181, 0, 0, 0, 144, 0, 0, 0,
	268, 131, 284, 204, 210, 141, 143, 142, 125, 263,
	286, 135, 145, 273, 278, 117, 280, 296, 137, 261,
	119, 294, 276, 202, 178, 179, 118, 0, 247, 153,
	163, 149, 219, 0, 162, 239, 291, 292, 148, 314,
	127, 306, 121, 128, 305, 213, 0, 212, 308, 287,
	295, 203, 196, 0, 120, 293, 201, 195, 183, 158,
	170, 235, 191, 236, 171, 208, 207, 209, 0, 0,
	0, 274, 302, 315, 193, 133, 0, 262, 285, 0,
	0, 134, 161, 157, 234, 211, 129, 173, 271, 182,
	189, 246, 313, 223, 252, 138, 301, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 122, 186, 0, 244, 160, 303, 0, 152, 0,
	0, 0, 0, 0, 0, 113, 114, 123, 132, 139,
	151, 156, 159, 165, 169, 172, 174, 175, 176, 180,
	194, 197, 198, 199, 200, 214, 215, 217, 218, 221,
	222, 225, 227, 228, 229, 231, 232, 233, 238, 241,
	243, 245, 248, 253, 254, 255, 256, 258, 259, 260,
	264, 265, 266, 267, 275, 279, 289, 290, 300, 309,
	311, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 154, 0, 0, 0, 0, 184, 0, 0,
	146, 192, 190, 0, 0, 0, 226, 281, 0, 0,
	0, 0, 187, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 508, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 304, 272, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	164, 206, 126, 0, 0, 0, 177, 310, 0, 0,
	0, 240, 0, 277, 167, 185, 130, 112, 124, 140,
	166, 216, 249, 257, 0, 0, 0, 0, 0, 147,
	0, 251, 224, 299, 0, 0, 230, 250, 188, 288,
	242, 297, 298, 168, 282, 307, 312, 269, 155, 0,
	116, 0, 237, 150, 181, 0, 0, 0, 144, 0,
	0, 0, 268, 131, 284, 204, 210, 141, 143, 142,
	125, 263, 286, 135, 145, 273, 278, 117, 280, 296,
	137, 261, 119, 294, 276, 202, 178, 179, 118, 0,
	247, 153, 163, 149, 219, 0, 162, 239, 291, 292,
	148, 314, 127, 306, 121, 128, 305, 213, 0, 212,
	308, 287, 295, 203, 196, 0, 120, 293, 201, 195,
	183, 158, 170, 235, 191, 236, 171, 208, 207, 209,
	0, 0, 0, 274, 302, 315, 193, 133, 0, 262,
	285, 0, 0, 134, 161, 157, 234, 211, 129, 173,
	271, 182, 189, 246, 313, 223, 252, 138, 301, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 122, 186, 0, 244, 160, 303, 0,
	152, 0, 0, 0, 0, 0, 0, 113, 114, 123,
	132, 139, 151, 156, 159, 165, 169, 172, 174, 175,
	176, 180, 194, 197, 198, 199, 200, 214, 215, 217,
	218, 221, 222, 225, 227, 228, 229, 231, 232, 233,
	238, 241, 243, 245, 248, 253, 254, 255, 256, 258,
	259, 260, 264, 265, 266, 267, 275, 279, 289, 290,
	300, 309, 311, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 184,
	0, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	0, 0, 0, 0, 187, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 106, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 0, 187, 0, 304, 272, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 164, 206, 126, 0, 0, 0, 177, 310,
	0, 0, 0, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 0, 0, 0, 0,
	0, 147, 0, 251, 224, 299, 0, 0, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 0, 0, 0,
	144, 0, 0, 0, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 0, 0, 274, 302, 315, 193, 133,
	0, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 122, 186, 0, 244, 160,
	303, 0, 152, 0, 0, 0, 0, 0, 0, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 184, 0, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 0, 0, 0, 0, 187, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 0, 187, 0, 304,
	272, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 164, 206, 126, 0, 0, 0,
	177, 310, 0, 0, 0, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 0, 0,
	0, 0, 0, 147, 0, 251, 224, 299, 0, 0,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 0,
	0, 0, 144, 0, 0, 0, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 525,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 0, 0, 274, 302, 315,
	193, 133, 0, 262, 285, 0, 0, 134, 161, 157,
	234, 526, 524, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 122, 186, 0,
	244, 160, 303, 0, 152, 0, 0, 0, 0, 0,
	0, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 184, 0, 0, 146, 192, 190, 0,
	0, 0, 226, 281, 0, 0, 0, 0, 187, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 304, 272, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 164, 206, 126, 0,
	0, 0, 177, 310, 0, 0, 0, 240, 0, 277,
	167, 185, 130, 112, 124, 140, 166, 216, 249, 257,
	0, 0, 0, 0, 0, 147, 0, 251, 224, 299,
	0, 0, 230, 250, 188, 288, 242, 297, 298, 168,
	282, 307, 312, 269, 155, 0, 116, 0, 237, 150,
	181, 0, 0, 0, 144, 0, 0, 0, 268, 131,
	284, 204, 210, 141, 143, 142, 125, 263, 286, 135,
	145, 273, 278, 117, 280, 941, 137, 261, 119, 294,
	276, 202, 178, 179, 118, 0, 247, 153, 163, 149,
	219, 0, 162, 239, 291, 292, 148, 314, 127, 306,
	121, 525, 305, 213, 0, 212, 308, 287, 295, 203,
	196, 0, 120, 293, 201, 195, 183, 158, 170, 235,
	191, 236, 171, 208, 207, 209, 0, 0, 0, 274,
	302, 315, 193, 133, 0, 262, 285, 0, 0, 134,
	161, 157, 234, 526, 524, 173, 271, 182, 189, 246,
	313, 223, 252, 138, 301, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 122,
	186, 0, 244, 160, 303, 0, 152, 0, 0, 0,
	0, 0, 0, 113, 114, 123, 132, 139, 151, 156,
	159, 165, 169, 172, 174, 175, 176, 180, 194, 197,
	198, 199, 200, 214, 215, 217, 218, 221, 222, 225,
	227, 228, 229, 231, 232, 233, 238, 241, 243, 245,
	248, 253, 254, 255, 256, 258, 259, 260, 264, 265,
	266, 267, 275, 279, 289, 290, 300, 309, 311, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 184, 0, 0, 146, 192,
	190, 0, 0, 0, 226, 281, 0, 0, 0, 0,
	187, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 516, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 525, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 526, 524, 519, 518, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
}
var yyPact = [...]int{

	507, -1000, -293, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1399, 1470, -1000,
	-1000, -1000, -1000, -1000, -1000, 473, 128, -1000, -1000, 231,
	88, 20366, 229, 2970, 21188, -1000, -1000, -1000, -1000, 180,
	21188, -1000, -1000, -92, -93, -1000, 26, 1043, 1297, 1468,
	172, -1000, -1000, 204, 20, -1000, -1000, -1000, 16254, -1000,
	-1000, -1000, 1384, 1397, 175, 1370, 1213, -1000, 10089, 201,
	201, 19955, 22832, -1000, 21188, 7612, 225, 21188, -150, 195,
	195, 107, 195, -1000, 445, -1000, -1000, -1000, 21188, 196,
	20777, 196, 196, 196, 196, 196, 21188, -1000, 271, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 21188, 1041, 1314, 557,
	109, 6370, 6370, -1000, 525, -1000, 90, 86, 95, 6370,
	14, 633, -1000, 6370, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 157, 172, 424, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1313, 835, 1157, -101, -1000, 739, 228, 21188, -1000,
	-1000, 1119, -1000, 1171, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1323, 12555, 12966, 1399, -1000,
	172, -1000, -1000, -1000, 1280, -1000, -1000, 565, 1445, -1000,
	15432, 270, -1000, 12555, 3318, 1123, -1000, -1000, 1123, -1000,
	-1000, 244, -1000, -1000, 14199, 14199, 14199, 14199, 14199, 14199,
	14199, 14199, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1123, -1000,
	9678, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 12555, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 19544, 18722, 21188, 1098,
	1097, -1000, -1000, 266, 868, 22421, -115, -1000, -1000, -1000,
	318, 18311, -1000, 263, -1000, 1311, -1000, -1000, 1024, -1000,
	3277, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20777,
	1366, 214, 1021, 489, 1018, 1000, 999, 21188, 986, 1117,
	211, 21188, 1340, 1181, 21188, 984, 982, 975, 973, -1000,
	8854, -1000, 6370, 557, -1000, 731, 12555, 195, 195, 6370,
	6370, 6370, 21188, 21188, 21188, -1000, -1000, -1000, -1000, 21188,
	-1000, -1000, 557, 557, 6370, 6370, -1000, 1418, 439, 439,
	-1000, -1000, -1000, -1000, 12555, -1000, 14199, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 951, -1000, -1000, 96, -1000, 730,
	-1000, 12144, -291, -1000, 1213, -1000, -1000, 21188, 6370, 16254,
	1123, 20777, -1000, 1455, 298, 736, 260, 1100, -1000, 581,
	1335, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1384,
	739, 1213, 743, 1154, -1000, -1000, -1000, 21188, -1000, 12555,
	12555, 659, -1000, 16665, -1000, -1000, -1000, -1000, 7198, 304,
	14199, 567, 524, 14199, 14199, 14199, 14199, 14199, 14199, 14199,
	14199, 14199, 14199, 14199, 14199, 14199, 14199, 14199, 675, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 946, -1000, 172,
	987, 987, 279, 279, 279, 279, 279, 279, 279, 17076,
	1365, 739, 981, 344, 9678, 10911, 10911, 739, 12555, 12555,
	11733, 11322, 10911, 10911, 1365, 459, 344, 22010, -1000, -1000,
	13788, -1000, -1000, -1000, -1000, -1000, 739, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20777, 20777, 10911, 10911, 10911,
	10911, 739, 739, 10911, 10911, 10911, 10911, 10911, 739, 739,
	739, 739, 1365, 1365, 10911, 10911, 10911, 1365, 10911, 10911,
	1365, 10911, 10911, 10911, 10911, 1365, 10911, 10911, 10911, 141,
	21188, -1000, 1093, 1448, -1000, -1000, -1000, 1361, 17900, 15021,
	141, 1056, 18722, 21188, -1000, -1000, 18722, 21188, 6784, 21599,
	868, -115, 1070, -1000, -125, -121, 9266, 278, -1000, -1000,
	-1000, 8026, -1000, 4714, 8440, -1000, -67, -1000, -1000, -1000,
	1133, -1000, 1133, 143, -15, 1133, 1133, 1133, 1133, 1133,
	-23, -23, -23, -23, -9, -1000, -1000, -1000, -1000, -1000,
	1147, 1146, -1000, 1133, 1133, 1133, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1138, 153, 1135, 1135, 1135, 1135,
	1135, 1161, -1000, 21188, 6370, 1334, 6370, 121, 1145, -1000,
	-1000, 21188, 21188, 1092, -1000, 21188, 1091, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 344, 944,
	939, -1000, -1000, -1000, -1000, -1000, -1000, 521, -1000, -1000,
	-1000, -1000, 21188, 1353, 21188, 21188, 557, 344, 450, -1000,
	1089, -1000, 314, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 969, 1328, 722,
	1365, 2138, -1000, -1000, -1000, 913, 257, -1000, 1222, 12555,
	12555, 8026, 12966, -1000, -1000, -1000, -1000, 1323, -1000, 1365,
	1383, -1000, 1252, 1250, -1000, -1000, -1000, 304, 486, -1000,
	-1000, 597, -1000, -1000, -1000, -1000, 256, 1123, -1000, 757,
	-1000, -1000, -1000, -1000, 567, 14199, 14199, 14199, 450, 757,
	2282, 1063, 886, 279, 590, 590, 277, 277, 277, 277,
	277, 505, 505, -1000, -1000, -1000, 739, -1000, -1000, -1000,
	10911, -1000, 12555, -1000, 739, 959, -1000, -1000, 344, 255,
	959, -1000, 591, 827, 523, 1416, 959, 415, 1408, 959,
	959, 959, 10911, 482, -1000, 12555, 739, -1000, 487, 1086,
	1085, 959, 739, 1071, 959, 959, -162, -162, 739, 959,
	739, 959, 959, -162, -162, -162, -162, 10911, 10911, 959,
	959, 959, 10911, 959, 959, 10911, 959, 959, 959, 959,
	10911, 959, 959, 959, 171, 1123, -1000, 21599, 18722, 18722,
	18722, 18722, 18722, -1000, 1203, 1202, -1000, 1221, 1209, 1234,
	16254, -1000, 965, 17900, -1000, 1123, -1000, 15843, 269, 222,
	219, 218, 1405, 18722, 1103, -1000, 1103, -1000, 254, -1000,
	-1000, 1070, -115, -130, -1000, -1000, -1000, -1000, 344, -1000,
	776, -1000, 253, 1066, 4300, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1144, 923, -1000, 1264, 386, 378, 788, 1260,
	-1000, -1000, 282, -70, -1000, -1000, 626, -23, -23, 1133,
	1133, 142, 1133, -1000, -23, -1000, -1000, -1000, 278, 1308,
	278, 278, 278, 278, -23, 688, 688, -1000, -1000, -1000,
	-1000, 625, -1000, 1138, -1000, 616, -1000, -1000, -1000, -1000,
	1180, 20777, 172, 1347, -1000, -1000, -1000, 1440, -1000, -1000,
	184, 210, -1000, 6370, 21188, 6370, 6370, 1405, 904, 898,
	439, 557, 1301, -1000, -1000, -1000, -1000, 14199, 96, 987,
	-1000, 141, 227, -1000, 1154, -1000, 541, 501, 388, 181,
	181, -1000, 313, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 138, 1346, 20777, 20777, 1243, 344, 344, -1000,
	-1000, 21188, -1000, -1000, -1000, -1000, 1053, 10089, -1000, -1000,
	-1000, 5956, 10911, -1000, 450, 757, 1034, -1000, 14199, -1000,
	739, 344, -1000, 10911, -1000, 5542, -1000, 82, 675, 82,
	14199, 14199, -1000, 14199, 14199, -1000, -196, -1000, 1102, 322,
	-1000, 12555, 759, -1000, -1000, 14199, 14199, -1000, -1000, -1000,
	-1000, -1000, 19133, -1000, -162, -162, -162, -162, -162, -1000,
	-1000, -1000, -1000, 959, 959, -162, -162, -162, 959, -162,
	-162, 959, -162, -162, -162, -162, 959, -162, -162, -162,
	1178, 21599, 1123, -1000, 17488, 20777, 1121, 1448, 1143, 1174,
	1316, -1000, -1000, -1000, -1000, 1195, -1000, 1193, -1000, -1000,
	-1000, -1000, 20777, 14199, 269, -1000, 1123, 1123, 1123, 1399,
	12555, 1103, -1000, -1000, 289, -1000, -1000, -131, -133, -1000,
	-1000, -1000, 7612, 4714, -1000, 4714, 20777, 163, -1000, 788,
	-1000, -1000, 788, -1000, -1000, -1000, 1136, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 533, 14199, 1450, -1000, 1263, -1000,
	1262, 681, -1000, -1000, 852, 278, 278, -23, -1000, -1000,
	1133, -1000, 278, -1000, 321, -1000, -1000, -1000, -1000, 278,
	943, -1000, 921, 1064, -1000, 919, 21188, -1000, -1000, -1000,
	1168, -1000, -1000, -1000, 848, 1058, -1000, 3277, 895, 889,
	884, 21188, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 557,
	-1000, 14199, 757, -1000, -1000, -23, 21188, -1000, -1000, 817,
	-1000, 788, 381, -1000, -1000, -1000, 861, 1260, -1000, -1000,
	854, -1000, 841, 20777, 1261, 836, 21188, 20777, -1000, -1000,
	813, 823, 12555, -1000, 20777, 1123, 252, -1000, -1000, -1000,
	1403, 18722, -1000, -1000, -1000, -1000, 739, -1000, 14199, 757,
	-1000, -1000, -1000, 251, 739, 1133, 1133, -1000, 1133, 1135,
	-1000, 1133, 11, 1133, 10, 739, 739, 2641, 2625, 2298,
	989, 1123, -157, -1000, 344, 12555, 834, 617, -1000, 273,
	-1000, -1000, -1000, -1000, -1000, -162, -162, -1000, -1000, -1000,
	-1000, -162, -1000, -1000, -162, -1000, -1000, -1000, -1000, -162,
	-1000, -1000, -1000, -1000, 1317, 1051, 971, -1000, -1000, 10500,
	739, 913, 910, -1000, 1399, -1000, -1000, 12555, 1134, -1000,
	12555, -1000, -1000, -1000, 910, 968, -1000, 20777, 20777, 20777,
	1384, 344, -1000, -1000, -1000, -1000, 4300, -1000, 888, -1000,
	1133, -1000, 1260, -1000, -1000, 20777, -1000, 757, -105, -1000,
	-1000, -1000, -1000, -1000, -1000, 278, -1000, -1000, -1000, -1000,
	-1000, -23, 680, -23, 610, -1000, 587, 1132, -1000, 172,
	21188, 63, 184, -1000, 3277, 3277, 3277, -1000, -1000, 757,
	-104, -1000, 1118, 813, 161, 3277, -1000, 1161, 386, 163,
	-1000, -1000, -1000, -1000, 818, 367, -1000, 209, 161, 813,
	344, 1325, -1000, 20777, 1401, 1393, 1103, 10089, -1000, -1000,
	757, 5128, -1000, -1000, 136, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14199, 14199, 14199, 14199, 14199, 739, 676,
	344, 14199, 14199, 739, 1391, -1000, -1000, -1000, -1000, -1000,
	1259, -1000, 1123, -1000, -1000, 174, -1000, 20777, 1384, 344,
	20777, 344, 14610, -1000, 16254, 871, -1000, 871, 871, -1000,
	265, 20777, 1335, 866, -1000, -1000, 278, -1000, 278, 831,
	785, 20777, -1000, 1379, -1000, 63, -1000, 667, 54, 60,
	-1000, 53, 49, 48, 47, 43, -1000, -1000, -1000, -1000,
	1284, 1281, 18722, 744, -1000, -1000, 790, -1000, 1131, 788,
	-1000, -1000, 777, -1000, -1000, 20777, -1000, 161, 1123, -1000,
	-1000, 12966, 12966, 1403, -1000, -1000, -1000, -1000, 487, 487,
	487, 487, 23, -1000, -1000, 487, 487, -1000, 12555, 1449,
	-1000, 1123, -1000, 172, -1000, -1000, 851, -1000, 269, 20777,
	-1000, -1000, -1000, 265, -1000, 772, 313, 649, -1000, -1000,
	150, -1000, -1000, -1000, -1000, 847, -1000, 85, 3567, -1000,
	-1000, -1000, -1000, -1000, -1000, 1296, 1295, 72, 185, 1267,
	1272, 1390, 1103, -1000, -1000, -1000, 282, 20777, 1161, -1000,
	-1000, -1000, -1000, 137, -1000, 344, -1000, 1057, -1000, 344,
	-1000, 1401, -1000, -1000, -1000, -1000, -1000, 739, 94, -204,
	-1000, -1000, 1099, 21599, 971, 739, -1000, -1000, -1000, -1000,
	-1000, 585, -1000, 21188, 265, 69, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12555,
	12555, 3567, -1000, -1000, -1000, -1000, 1129, 573, 1281, 1389,
	1278, 1275, -1000, 646, 1403, -1000, 840, 1128, -1000, 830,
	-1000, 20777, 12966, -1000, -1000, 1242, -200, -207, 739, 868,
	-1000, -1000, 1124, -1000, 265, 92, -1000, 714, 706, -294,
	-1000, -1000, 20777, 1283, -1000, 642, -1000, 1388, 1387, -1000,
	1401, 265, 20777, -1000, 137, 1249, -1000, -1000, 1238, -1000,
	-1000, 20777, -1000, 748, 584, 786, -1000, 12555, 3567, 3548,
	828, -1000, -1000, 641, 637, -1000, -1000, 784, -1000, 113,
	-202, 738, 206, -1000, -1000, 519, 3567, -1000, 658, -295,
	-1000, -1000, -1000, -1000, -1000, 265, 97, -205, 1167, -1000,
	-1000, -1000, -1000, -1000, -1000, 3567, -1000, -296, 3567, 2292,
	-1000, 1123, -209, 1164, 1163, 1444, -1000, -297, 3540, -300,
	194, 3567, 327, -1000, 12555, 13377, -1000, -1000, 1446, -1000,
	1447, 250, 250, 2996, 502, 3567, -1000, -301, 193, 3567,
	-1000, 579, 487, 739, -1000, -1000, -1000, 173, 582, -1000,
	-1000, -1000, 2696, -1000, -302, 3567, -1000, -1000, -1000, -1000,
	-1000, 191, 2456, -303, -1000, 190, 3567, -1000,
}
var yyPgo = [...]int{

	0, 1748, 211, 635, 1747, 1746, 1745, 18, 15, 13,
	20, 1744, 1559, 1555, 1549, 1545, 1741, 1543, 1740, 8,
	1739, 1738, 1540, 1737, 17, 1735, 7, 1734, 2, 103,
	1733, 1732, 1731, 1730, 1729, 1528, 1728, 1727, 1725, 1724,
	1520, 1516, 1723, 1721, 1512, 1501, 1718, 1715, 1496, 1490,
	1477, 1714, 153, 1713, 1706, 1704, 102, 82, 111, 1702,
	1701, 1699, 78, 67, 2067, 79, 51, 90, 235, 1696,
	23, 43, 1694, 1691, 108, 92, 1690, 109, 71, 1689,
	1688, 115, 1687, 1686, 1685, 89, 1684, 1683, 876, 1678,
	1677, 110, 1675, 42, 46, 41, 1668, 1667, 1666, 1664,
	84, 9, 1663, 1660, 1654, 54, 1653, 1650, 122, 1649,
	1648, 1647, 93, 48, 1644, 30, 37, 49, 1643, 547,
	33, 1642, 91, 1640, 1639, 27, 25, 1637, 47, 1636,
	32, 1632, 95, 273, 892, 11, 35, 40, 53, 94,
	74, 10, 1631, 99, 69, 57, 36, 104, 1629, 107,
	87, 1627, 1626, 610, 1625, 1621, 121, 1620, 66, 101,
	653, 112, 58, 1619, 1618, 1617, 1615, 65, 86, 1613,
	1612, 44, 189, 105, 1311, 34, 1339, 176, 106, 1611,
	26, 1610, 2430, 77, 62, 76, 1609, 1608, 72, 88,
	39, 1606, 1605, 1604, 1603, 1602, 1599, 56, 1598, 1596,
	1595, 1594, 863, 64, 1593, 1592, 81, 63, 1590, 1589,
	1588, 1587, 1585, 83, 60, 98, 1584, 85, 73, 1583,
	1578, 1577, 1576, 38, 29, 1575, 1574, 1573, 68, 59,
	1569, 50, 22, 24, 45, 6, 55, 1567, 12, 1566,
	80, 4, 5, 3, 1564, 1562, 1557, 1553, 1547, 52,
	1538, 1536, 31, 1532, 1530, 1524, 28, 1518, 1499, 1492,
	1486, 0, 70, 114, 1481, 1479, 113,
}
var yyR1 = [...]int{

	0, 259, 260, 260, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 51,
	2, 2, 2, 6, 3, 3, 3, 72, 73, 73,
	77, 77, 4, 4, 5, 5, 7, 7, 55, 55,
	8, 9, 9, 9, 9, 263, 263, 83, 83, 81,
	81, 82, 82, 143, 143, 10, 10, 10, 10, 147,
	147, 150, 150, 150, 151, 151, 151, 151, 186, 186,
	135, 136, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 247, 247, 248, 248, 249, 249, 249, 249, 250,
	250, 251, 251, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 23, 170, 170, 33, 33, 34, 34,
	34, 131, 131, 131, 11, 11, 11, 11, 11, 18,
	20, 20, 25, 25, 26, 21, 21, 21, 21, 27,
	27, 28, 22, 22, 32, 32, 30, 30, 29, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 17, 246, 246, 246, 24, 24, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 38,
	225, 226, 226, 226, 226, 214, 215, 190, 190, 190,
	190, 190, 190, 190, 189, 189, 189, 189, 193, 193,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 192,
	192, 192, 192, 192, 192, 192, 192, 194, 194, 194,
	194, 194, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 196, 196, 196,
	196, 196, 196, 196, 196, 213, 213, 197, 197, 206,
	206, 207, 207, 207, 204, 204, 205, 205, 208, 208,
	200, 201, 209, 202, 202, 202, 203, 203, 203, 212,
	212, 212, 212, 198, 216, 216, 235, 235, 234, 234,
	233, 233, 233, 224, 224, 230, 230, 230, 230, 230,
	219, 219, 219, 218, 218, 220, 220, 223, 223, 232,
	232, 231, 217, 217, 236, 236, 236, 236, 236, 221,
	221, 222, 222, 222, 242, 243, 241, 241, 241, 241,
	241, 227, 227, 227, 228, 228, 228, 229, 229, 229,
	244, 244, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 130, 130, 130, 37, 168, 168, 240,
	240, 240, 240, 240, 239, 237, 237, 238, 238, 13,
	39, 39, 14, 14, 14, 14, 14, 14, 14, 15,
	15, 40, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 69, 157, 157, 155, 155, 158, 158, 156, 156,
	156, 159, 159, 159, 187, 187, 187, 42, 42, 47,
	47, 50, 48, 49, 169, 169, 45, 45, 46, 46,
	46, 46, 61, 61, 264, 264, 44, 44, 43, 43,
	43, 43, 16, 265, 52, 53, 53, 54, 54, 54,
	58, 58, 58, 56, 56, 56, 57, 57, 63, 63,
	67, 67, 67, 67, 66, 66, 66, 66, 133, 133,
	133, 134, 134, 179, 179, 179, 178, 178, 178, 178,
	71, 71, 74, 74, 75, 75, 75, 75, 92, 92,
	93, 93, 93, 93, 93, 103, 103, 142, 142, 141,
	141, 144, 144, 76, 76, 76, 76, 78, 78, 79,
	79, 80, 80, 167, 167, 184, 184, 184, 84, 84,
	84, 86, 85, 85, 85, 85, 87, 87, 89, 90,
	90, 88, 88, 91, 94, 94, 94, 94, 95, 95,
	68, 68, 68, 68, 68, 68, 68, 154, 154, 97,
	97, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 111, 111, 111, 111, 111, 111, 98, 98, 98,
	98, 98, 98, 98, 62, 62, 112, 112, 112, 119,
	65, 65, 64, 64, 113, 113, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	106, 106, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 266, 266, 108, 107, 107, 107, 107, 107,
	107, 59, 59, 59, 59, 59, 185, 185, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 123, 123, 60, 60, 121, 121, 122, 124, 124,
	120, 120, 120, 100, 100, 100, 100, 100, 100, 100,
	100, 102, 102, 102, 125, 125, 114, 114, 70, 70,
	126, 126, 127, 127, 128, 128, 129, 129, 132, 132,
	137, 137, 137, 138, 138, 138, 138, 139, 139, 139,
	99, 99, 99, 99, 99, 99, 140, 140, 140, 140,
	145, 145, 115, 115, 117, 117, 116, 118, 146, 146,
	149, 149, 149, 149, 148, 148, 148, 181, 181, 181,
	152, 152, 160, 160, 161, 161, 153, 153, 199, 199,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 166,
	166, 165, 165, 165, 162, 162, 162, 163, 163, 180,
	180, 176, 176, 177, 177, 182, 182, 183, 183, 245,
	245, 210, 210, 255, 255, 211, 211, 256, 256, 258,
	258, 253, 253, 254, 254, 257, 257, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 261, 262, 171, 172, 172, 172,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 11,
	4, 6, 7, 5, 9, 11, 12, 2, 1, 3,
	3, 6, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	0, 0, 2, 3, 11, 7, 9, 5, 5, 15,
	11, 0, 1, 1, 3, 2, 3, 3, 3, 0,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 3,
	3, 3, 3, 4, 0, 3, 1, 1, 1, 1,
	1, 0, 2, 2, 1, 1, 1, 1, 1, 4,
	5, 8, 1, 2, 5, 7, 10, 8, 11, 1,
	2, 5, 2, 4, 2, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 2, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 1, 3, 3, 3, 3, 3, 0, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 3, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 3, 3, 2, 4, 5, 2,
	3, 4, 2, 2, 3, 3, 3, 3, 3, 4,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 1, 2,
	2, 3, 1, 0, 3, 3, 0, 2, 2, 2,
	1, 2, 1, 2, 5, 4, 0, 1, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	3, 3, 3, 1, 10, 11, 11, 12, 12, 1,
	1, 0, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	0, 2, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 12, 14, 7, 7, 9, 9, 10, 5,
	6, 8, 7, 0, 1, 2, 4, 0, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 4, 4, 4, 4, 4, 3,
	2, 3, 4, 4, 3, 6, 6, 4, 4, 4,
	4, 4, 4, 3, 3, 2, 6, 2, 4, 4,
	4, 3, 7, 6, 5, 4, 2, 4, 3, 2,
	3, 3, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	1, 2, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 0, 3, 1, 1, 2, 2, 2, 2,
	3, 3, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 1, 0, 1, 3, 5,
	1, 1, 3, 5, 1, 2, 3, 5, 2, 4,
	7, 0, 1, 0, 1, 2, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 3, 1, 3, 2, 6,
	1, 4, 6, 3, 2, 0, 3, 0, 3, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 1, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 3, 2,
	1, 1, 3, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 1, 1,
	5, 6, 6, 6, 5, 5, 5, 6, 5, 5,
	6, 5, 5, 5, 5, 6, 5, 5, 5, 4,
	4, 5, 5, 5, 5, 5, 4, 4, 4, 4,
	4, 4, 3, 6, 6, 6, 8, 8, 8, 8,
	9, 4, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 1, 3, 1, 1,
	0, 2, 1, 1, 0, 3, 1, 3, 2, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 1, 0, 4, 0, 1, 0, 3, 0,
	3, 0, 4, 0, 3, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -259, -1, -2, -6, -7, -8, -9, -10, -12,
	-35, -13, -14, -15, -40, -41, -42, -47, -48, -49,
	-45, -44, -43, -16, -22, -17, -51, -3, -4, 6,
	7, -55, 9, 10, 30, -38, 129, -36, -37, 132,
	131, 168, 133, 161, 63, 212, -50, 215, 216, -264,
	-169, 166, 167, 31, 32, 135, 210, 20, 37, -72,
	-261, 8, 305, 130, 213, 163, 162, 26, 350, 67,
	-260, 420, -128, 15, -54, 5, -52, -265, -52, -52,
	-52, -52, -52, -225, 104, 67, -163, 142, 85, 296,
	138, -170, 139, -162, 188, 44, 149, 148, 139, 139,
	140, 142, 296, 138, 176, 175, 139, -88, -182, 70,
	-174, 347, 152, 362, 363, 130, 185, 212, 223, 217,
	251, 239, 348, 364, 153, 205, 137, 237, 240, 283,
	151, 198, 365, 272, 278, 208, 79, 215, 292, 366,
	154, 202, 204, 203, 193, 209, 36, 164, 235, 228,
	188, 367, 355, 226, 28, 183, 368, 280, 256, 369,
	352, 279, 231, 227, 135, 370, 155, 149, 178, 371,
	257, 261, 372, 284, 373, 374, 375, 141, 221, 222,
	376, 189, 286, 255, 33, 150, 349, 48, 173, 287,
	38, 259, 37, 271, 377, 254, 249, 378, 379, 380,
	381, 253, 220, 248, 200, 52, 136, 263, 262, 264,
	201, 282, 244, 242, 382, 383, 156, 384, 385, 229,
	18, 386, 387, 290, 167, 388, 42, 389, 390, 391,
	171, 392, 393, 394, 281, 258, 260, 187, 395, 232,
	146, 396, 175, 397, 351, 398, 288, 225, 399, 157,
	172, 166, 291, 400, 401, 402, 403, 158, 404, 405,
	406, 216, 274, 206, 407, 408, 409, 410, 197, 182,
	294, 285, 51, 210, 268, 411, 219, 148, 211, 412,
	213, 43, 179, 7, 199, 275, 207, 246, 174, 413,
	414, 233, 234, 252, 218, 247, 214, 176, 177, 168,
	415, 293, 269, 353, 50, 241, 238, 180, 245, 416,
	142, 417, 181, 289, 236, 270, 139, 122, 240, 283,
	129, 273, 274, 280, -219, 281, 175, 178, -187, 139,
	-155, 272, 181, 70, 140, 141, 33, 285, 284, 276,
	-182, -61, 133, 169, -88, -171, -171, -171, 275, 275,
	-171, -32, 211, 70, 36, 6, -2, -153, 142, 144,
	214, -73, -77, -184, -182, -175, 72, 318, 319, 320,
	321, 322, 335, 336, 337, 323, 324, 338, 339, 340,
	325, 326, 341, 342, 344, 345, 343, 329, 328, 327,
	330, 331, 333, 332, 334, -138, 17, 16, -5, -3,
	-261, 6, 21, 22, -58, 53, 54, -53, -66, 113,
	-68, -182, -96, 87, -101, 29, 70, -174, 24, -100,
	-97, -120, -118, -119, 122, 123, 124, 111, 112, 119,
	88, 125, -106, -104, -105, -107, -109, -110, 72, 71,
	80, 73, 74, 75, 76, 81, 82, 83, -176, -116,
	-261, 57, 58, 138, 306, 307, 308, 309, 346, 159,
	310, 90, 47, 295, 304, 303, 302, 300, 301, 297,
	299, 298, 312, 313, 145, 296, 117, 305, 335, 336,
	337, 338, 339, 340, 341, 342, 344, 345, 343, 325,
	318, 319, 320, 321, 322, 323, 324, 326, 327, 328,
	329, 330, 331, 332, 333, 334, -153, -153, 11, -81,
	-82, -88, -91, -182, -146, -186, 214, -149, 285, 284,
	-120, -148, -176, -182, 283, 240, 282, -88, -226, -215,
	-177, -176, -173, 70, -174, 134, 160, 86, 354, 23,
	25, 266, 318, 89, 122, 319, 320, 321, 16, 20,
	90, 121, 306, 322, 129, 61, 297, 299, 295, 296,
	273, 29, 10, 26, 162, 192, 22, 115, 131, 93,
	94, 95, 165, 24, 163, 83, 159, 19, 64, 11,
	13, 316, 317, 14, 145, 144, 106, 190, 140, 59,
	8, 125, 27, 103, 55, 323, 324, 358, 45, 359,
	57, 104, 17, 300, 301, 31, 346, 325, 170, 360,
	326, 117, 195, 62, 49, 87, 81, 34, 84, 65,
	85, 15, 191, 60, 314, 194, 361, 105, 132, 305,
	58, 138, 6, 311, 30, 161, 329, 328, 327, 330,
	196, 56, 308, 309, 331, 418, 139, 92, 312, 313,
	143, 82, 5, 44, 32, 9, 63, 66, 302, 303,
	304, 47, 333, 332, 334, 91, 12, 315, 350, 140,
	-88, 305, -161, 145, -161, 176, 175, -161, 96, -39,
	-88, -160, 145, -176, -160, -160, -160, -160, -160, -88,
	126, -88, 70, 30, -159, 104, 12, 296, 138, 70,
	175, 178, 139, 176, 142, -172, -261, -177, -172, -221,
	11, 106, 179, 179, 179, 180, -172, -158, -157, 177,
	278, 279, 275, 277, 12, -69, 104, -172, -46, -2,
	-9, -7, -8, -2, 96, -171, -171, 30, 72, 50,
	-246, 67, -210, 271, -52, -262, 69, 139, -88, 68,
	23, -261, -139, 19, 31, -68, -182, -129, -132, -68,
	-175, 318, 319, 320, 321, 322, 335, 336, 337, 323,
	324, 338, 339, 340, 325, 326, 341, 342, 344, 345,
	343, 329, 328, 327, 330, 331, 333, 332, 334, -128,
	-2, -52, 49, -56, 21, 22, 78, 11, -179, 86,
	85, 103, -178, 23, 70, -174, -175, 72, 126, -68,
	-98, 106, 87, 104, 105, 89, 108, 107, 118, 111,
	112, 113, 114, 115, 116, 117, 109, 110, 121, 96,
	97, 98, 99, 100, 101, 102, -154, -261, -119, -261,
	127, 128, -101, -101, -101, -101, -101, -101, -101, -101,
	-261, -2, -113, -68, -261, -261, -261, -261, -261, -261,
	-261, -261, -261, -261, -261, -123, -68, -261, -266, -108,
	-261, -266, -108, -266, -108, -266, -261, -266, -108, -266,
	-108, -266, -266, -108, -266, -261, -261, -261, -261, -261,
	-261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
	-261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
	-261, -261, -261, -261, -261, -261, -261, -261, -261, -90,
	27, -88, -71, -74, -75, -76, -92, -119, -261, -88,
	-88, -81, -263, 68, 11, 66, -263, 68, 126, 68,
	-146, 214, -147, -150, 286, 288, 96, -181, -176, 72,
	29, 126, 30, 69, 68, -189, -193, -195, -194, -196,
	-191, -192, 237, 240, 244, 242, 238, 243, 122, 241,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 30, 164, 233, 234, 235, 236, 257, 258, 259,
	260, 261, 262, 263, 264, 217, 239, 348, 218, 219,
	220, 221, 222, 223, 225, 226, 227, 228, 229, 230,
	231, -176, 23, 142, 70, 87, 70, 70, 70, -88,
	70, 68, 143, -81, 24, 65, -83, -88, 70, 70,
	70, 70, -183, -182, -173, -172, -159, 72, -68, -161,
	-161, -172, -172, -172, -88, -88, -88, -88, -159, -159,
	-172, -172, 11, -156, 11, 106, -156, -68, -101, 70,
	-30, -29, -31, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 72, 69, -113, -245, 419,
	-58, -88, -172, -77, -119, -140, -176, 9, 106, 68,
	18, 126, 68, -137, 25, 26, -137, -138, -262, -58,
	-102, 50, 73, 76, -57, 56, -88, -68, -68, -111,
	81, 87, 82, 83, -178, 113, -183, -177, -173, -101,
	-112, -116, -119, 77, 106, 104, 105, 89, -101, -101,
	-101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
	-101, -101, -101, -185, 70, 72, 70, -100, -100, -176,
	-56, -262, 68, -262, -2, -64, -67, 113, -68, -182,
	-64, -262, -68, -68, -120, 72, -64, -120, 72, -64,
	-64, -64, -56, -121, -122, 91, -120, -262, -101, -176,
	-176, -64, -65, -64, -64, -64, -262, -262, -67, -64,
	-67, -64, -64, -262, -262, -262, -262, -56, -56, -64,
	-64, -64, -56, -64, -64, -56, -64, -64, -64, -64,
	-56, -64, -64, -64, -143, 171, -88, 30, 68, -84,
	-86, -85, -87, 55, 59, 61, 56, 57, 58, 62,
	-167, 23, -71, -261, -93, 171, -94, 23, -184, 63,
	144, 64, -143, 66, -71, -88, -71, -91, -182, 113,
	-149, -147, 68, 287, 289, 290, 65, 84, -68, -203,
	121, -177, -183, -227, -228, -229, -177, 72, 73, -215,
	-216, -217, -230, 154, -236, 146, 148, 44, -218, 155,
	140, 45, -190, -204, 269, -197, 67, -197, -197, 245,
	237, 240, 238, -197, -197, -197, -197, -197, -202, 240,
	-202, -202, -202, -202, 238, 67, 67, -197, -197, -197,
	-206, 67, -206, 232, -207, 67, -207, -207, -207, -207,
	-180, 66, -135, -88, -172, 24, -172, -33, 185, 160,
	67, -88, -88, -88, 68, 70, 70, -222, 11, 106,
	-88, -103, 23, -182, -182, -159, -62, 165, 68, 96,
	69, -89, 27, 72, -56, -164, 134, 131, 132, 136,
	137, -239, 266, 130, 240, 79, 29, 15, 306, 171,
	353, 70, 172, -262, 68, 126, 51, -68, -68, -132,
	-139, -152, 19, 11, 47, 47, -63, -136, 81, 82,
	83, 126, -261, -112, -101, -101, -101, -62, 86, -262,
	-65, -68, -262, 68, -262, 126, -262, 68, 66, 23,
	11, 11, -262, 11, 11, -262, -262, -262, -64, -124,
	-122, 93, -68, -262, -262, 68, 68, -262, -262, -262,
	-262, -133, 314, -133, -262, -262, -262, -262, -262, -133,
	-133, -133, -133, -64, -64, -262, -262, -262, -64, -262,
	-262, -64, -262, -262, -262, -262, -64, -262, -262, -262,
	-99, 30, 47, -2, -261, -261, -146, -74, -75, -75,
	-74, -75, 55, 55, 55, 60, 55, 60, 55, -85,
	-184, -262, -261, 34, -184, -94, 140, 140, 140, -95,
	12, -71, -95, -95, 126, -150, -151, 291, 288, 294,
	70, 72, 126, 68, -229, 96, 67, 70, 45, -218,
	140, 45, -218, -223, 70, -223, 45, -208, -200, -201,
	-209, -212, -198, 81, 87, 29, 65, 266, 146, 45,
	44, 79, -205, 270, 73, -202, -202, -197, -197, -197,
	245, -197, -202, -203, 30, -203, -203, -203, -203, -202,
	-213, 72, -213, 73, -206, 73, 65, -176, -2, 23,
	-34, 8, 9, 10, -247, -248, -249, 70, 106, 190,
	191, 143, -172, -88, -172, -172, -95, 70, 70, -156,
	-159, 34, -101, -29, -100, -143, 139, -57, -171, -168,
	-240, -218, -244, -217, 147, 151, 154, 155, 146, 171,
	-168, -240, 154, -218, 155, 147, -165, -218, 143, 23,
	-168, -168, -224, 96, 171, 23, -176, -176, 52, -88,
	-95, 11, 68, -66, 113, -177, -65, -62, 86, -101,
	-262, -67, 113, -183, -188, 122, 237, 164, 235, 228,
	255, 242, 268, 233, 269, -185, -188, -101, -101, -101,
	-101, 347, -128, 95, -68, 92, -101, -101, -176, -261,
	-133, -133, -133, -133, -133, -262, -262, -134, -133, -134,
	-134, -262, -134, -134, -262, -134, -134, -134, -134, -262,
	-134, -134, -134, -145, 65, -146, -115, -117, -116, -261,
	-2, -140, -144, -176, -95, -79, -78, 65, 66, -80,
	65, -78, 55, 55, -144, -101, -94, -261, -261, -261,
	-128, -68, -95, 288, 292, 293, -228, -229, -232, -231,
	-176, -236, 155, -223, -223, 67, 81, -101, 9, 45,
	45, 72, 69, -203, -203, -202, -197, -203, 70, 122,
	-203, 69, 68, 69, 68, 69, 68, -88, -135, -135,
	65, 69, 68, -189, 70, 70, 70, -88, -159, -101,
	-202, -88, -63, 67, -214, 70, -171, -223, -162, 70,
	70, -171, 70, -176, 45, 70, -88, -176, -214, 70,
	-68, -176, -119, 126, -125, 13, -71, -136, -136, -262,
	-101, 126, -262, -197, -197, -197, -207, -197, 222, -197,
	222, -262, -262, 19, 19, 19, 19, -261, -60, 311,
	-68, 68, 68, -128, 171, -134, -134, -134, -134, -134,
	28, -145, 68, -262, -262, -262, -262, 68, -128, -68,
	67, -68, -262, -94, -167, -141, -176, -141, -141, -138,
	69, 68, -197, -141, -105, -203, -202, 72, -202, 73,
	73, 67, -2, -88, -250, -251, -252, 79, 349, 87,
	192, 193, 156, 194, 195, 196, -249, -189, -189, -189,
	-253, -158, 11, -214, -130, 159, 160, -189, -180, -220,
	-218, 70, -166, 143, 23, 143, -130, -214, 27, -176,
	-126, 14, 16, -95, -66, 113, -202, 70, -101, -101,
	-101, -101, -101, -262, 72, -101, -101, -262, 16, 45,
	-117, 47, -2, -261, -176, -138, -141, -93, -184, 68,
	-262, -262, -262, -234, -233, 66, 150, 79, -231, -137,
	69, -203, -203, 69, 69, -232, -135, 19, -135, -252,
	72, 196, 192, 196, 196, 196, 196, 197, -254, 38,
	-256, 39, -71, 69, -171, 70, -190, 67, -223, 70,
	-176, -171, -130, -261, -127, -68, -175, -114, -70, -68,
	-175, -125, -136, -262, -262, -262, -262, -59, 106, 350,
	-262, -262, -113, 9, -115, -2, 69, -94, -176, -233,
	70, -224, 72, 157, 69, 183, -19, -2, -7, -8,
	-9, -10, -12, -35, -13, -14, -20, -21, -15, -40,
	-41, -50, -48, -49, -45, -44, -22, -17, -23, 90,
	145, 212, 36, 36, 188, 189, -199, 144, -257, 43,
	-255, -211, 42, 16, -95, -171, -232, -180, -171, -237,
	-238, 171, 68, -126, -262, 348, 62, 351, -128, -146,
	-262, 73, -88, -235, -234, 184, -135, -68, -68, -24,
	-19, -142, 67, 73, -256, 16, -258, 40, 41, 72,
	-125, 69, 67, -262, 68, -176, -70, 52, 349, 352,
	-262, 67, -131, 186, 187, -25, -26, 91, 92, 420,
	-141, 38, 72, 16, 16, -126, -235, -232, -238, 47,
	52, -141, -135, 70, 70, 95, 93, -26, -68, -24,
	95, -19, 69, 72, 72, 69, 173, 350, 69, -11,
	-18, -10, -7, -8, -9, 212, 90, -24, 92, 420,
	-235, 174, 351, -242, -243, 65, -135, -24, 420, -24,
	95, 93, -27, -28, 94, -261, 352, -243, 65, -242,
	65, 10, 9, 420, 95, 420, 145, -24, 95, 93,
	-28, -68, -101, 170, -241, 158, 153, 156, 30, -241,
	95, 90, 420, 145, -24, 92, -262, -262, 152, 29,
	81, 95, 420, -24, 145, 95, 420, 145,
}
var yyDef = [...]int{

	28, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 774, 0, 473,
	473, 473, 473, 473, 473, 0, -2, 352, 353, 0,
	0, 0, 0, -2, 448, 449, 450, 452, 453, 462,
	-2, 1246, 1246, 0, 0, 1246, 0, 0, 0, 0,
	0, 48, 49, 826, 0, 465, 454, 455, 0, 1244,
	1, 3, 783, 0, 0, 477, 480, 475, 0, 826,
	826, 0, 0, 82, 0, 0, 0, 0, 0, 824,
	824, 0, 824, 848, 0, 844, 845, 846, 0, 822,
	0, 822, 822, 822, 822, 822, 0, 400, 561, 855,
	856, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 0, 0, 0, 441,
	0, 1247, 1247, 415, 0, 417, 0, 0, 0, 1247,
	0, 426, 429, 1247, 310, 311, 312, 445, 446, 435,
	447, 0, 0, 0, 466, 467, 468, 469, 1246, 1246,
	472, 142, 0, 162, 861, 473, 42, 0, 0, 827,
	451, 37, 38, 0, 545, 546, 547, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 787, 0, 0, 774, 44,
	0, 473, 478, 479, 483, 481, 482, 474, 0, 494,
	503, 0, 570, 0, 575, 577, -2, -2, 0, 616,
	617, 618, 619, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 645, 646, 647, 648, 649, 753, 754,
	755, 756, 757, 758, 759, 760, 579, 580, 750, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 712, 712, 712, 712, 712, 712, 712,
	712, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 61, 561, 65, 0, 1196, 808, -2, -2,
	0, 0, 750, 0, -2, 1028, -2, 83, 0, 191,
	0, 853, 854, 851, 852, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 399,
	0, 401, 1247, 441, 404, 0, 0, 824, 824, 1247,
	1247, 1247, 0, 0, 0, 413, 1248, 1249, 414, 0,
	329, 330, 441, 441, 1247, 1247, 421, 0, 438, 438,
	436, 437, 432, 433, 0, 428, 0, 430, 456, -2,
	459, 460, 461, -2, 0, 470, 471, 0, 144, 0,
	161, 0, 859, 862, 480, 43, 1245, 0, 1247, 0,
	0, 0, 30, 0, 0, 784, 0, 775, 776, 780,
	780, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 783,
	42, 480, 0, 486, 484, 485, 476, 0, 495, 0,
	0, 0, 504, 0, 506, 507, 508, 509, 0, 573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 597,
	598, 599, 600, 601, 602, 603, 576, 0, 590, 0,
	0, 0, 636, 637, 638, 639, 640, 641, 642, 0,
	483, 42, 0, 614, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 483, 0, 742, 0, 695, 704,
	0, 696, 705, 697, 706, 698, 0, 699, 707, 700,
	708, 701, 702, 709, 703, 0, 0, 0, 610, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 483, 483, 0, 0, 0, 483, 0, 0,
	483, 0, 0, 0, 0, 483, 0, 0, 0, 63,
	0, 560, 0, 510, 512, 513, 514, -2, 0, 564,
	-2, 0, 0, 0, 55, 56, 0, 0, 0, 0,
	66, 1196, 68, 69, 0, 0, 0, 286, 817, 818,
	819, 0, 815, 341, 0, 197, 274, 205, 206, 207,
	267, 209, 267, 267, 0, 267, 267, 267, 267, 267,
	283, 283, 283, 283, 283, 250, 251, 252, 253, 254,
	0, 0, 227, 267, 267, 267, 231, 257, 258, 259,
	260, 261, 262, 263, 264, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 269, 269, 271, 271, 271, 271,
	271, 849, 80, 0, 1247, 0, 1247, 0, 0, 189,
	115, 0, 0, 392, 823, 0, 394, 57, 395, 396,
	397, 398, 562, 857, 858, 402, 403, 442, 443, 0,
	0, 407, 408, 409, 410, 411, 412, 331, 418, 419,
	420, 425, 0, 525, 0, 0, 441, 427, 604, 463,
	143, 146, 0, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 145, 163, 0, 0, 0,
	483, 0, 376, 39, 40, 0, 796, 788, 0, 0,
	0, 0, 0, 778, 781, 782, 779, 787, 45, 483,
	0, 761, 0, 0, 81, 487, 33, 571, 572, 574,
	591, 0, 593, 595, 505, 496, 0, 751, -2, 581,
	582, 606, 607, 608, 0, 0, 0, 0, 604, 586,
	0, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 635, 726, 727, 0, 633, 634, 643,
	610, 609, 0, 806, 42, 0, 612, 490, 491, 0,
	0, 682, 0, 0, 618, 753, 0, 618, 753, 0,
	0, 0, 0, 748, 745, 0, 0, 713, 0, 0,
	0, 0, 0, 611, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 0, 0, 0,
	0, 0, 0, 548, 0, 0, 551, 0, 0, 0,
	0, 544, 0, 0, 518, 1130, 520, 0, 564, 0,
	0, 0, 568, 0, 568, 60, 568, 62, 0, 563,
	809, 67, 0, 0, 72, 73, 810, 811, 812, 813,
	0, 751, 0, 190, 342, 344, 347, 348, 349, 192,
	193, 194, 0, 1040, 323, 1140, 1177, -2, 317, 1066,
	-2, -2, 196, 276, 275, 208, 0, 283, 283, 267,
	267, 267, 267, 236, 283, 239, 242, 243, 286, 0,
	286, 286, 286, 286, 283, 0, 0, 228, 229, 230,
	219, 0, 220, 269, 222, 0, 223, 224, 225, 226,
	0, 0, 0, 0, 87, 825, 88, 0, 116, 117,
	91, 0, 390, 1247, 0, 1247, 1247, 568, 0, 0,
	438, 441, 0, 439, 440, 424, 431, 0, 0, 0,
	164, 63, 0, 860, 486, 1246, -2, 377, 841, 377,
	377, 369, 303, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 0, 0, 0, 0, 0, 785, 786, 777,
	31, 0, 820, 821, 762, 763, 568, 0, 592, 594,
	596, 0, 610, 583, 604, 587, 0, 584, 0, 578,
	0, 615, -2, 0, 680, 0, 681, 0, 0, 0,
	0, 0, 719, 0, 0, 720, 0, 691, 774, 0,
	746, 0, 0, 694, 714, 0, 0, 715, 716, 717,
	718, 669, 0, 670, 0, 0, 0, 0, 0, 676,
	677, 678, 679, 0, 0, 501, 501, 501, 0, 501,
	501, 0, 501, 501, 501, 501, 0, 501, 501, 501,
	800, 0, 0, -2, 0, 0, 568, 511, 539, 541,
	0, 536, 549, 550, 552, 0, 554, 0, 556, 557,
	515, 517, 0, 0, 564, 524, 0, 0, 0, 774,
	0, 568, 53, 54, 0, 70, 71, 0, 0, 77,
	287, 288, 0, 0, 345, 0, 0, 0, 305, 317,
	313, 314, 317, 308, 318, 309, 0, 198, 199, 200,
	201, 202, 203, 278, 0, 0, 0, 282, 0, 290,
	292, 0, 204, 277, 0, 286, 286, 283, 234, 235,
	267, 240, 286, 244, 0, 245, 246, 247, 248, 286,
	0, 265, 0, 0, 221, 0, 0, 850, -2, 80,
	0, 118, 119, 120, 0, 92, 93, 0, 0, 0,
	0, 0, 393, 58, 405, 406, 416, 332, 333, 441,
	423, 0, 605, 147, 148, 283, 0, 81, 354, 0,
	1246, 317, 0, 370, 378, 379, 380, 381, 382, 383,
	0, 1246, 380, 0, 381, 0, 0, 0, 842, 843,
	0, 0, 0, 304, 0, 0, 798, 797, 789, 32,
	764, 0, 81, 81, 497, 752, 0, 585, 0, 588,
	650, 613, 492, 0, 0, 267, 267, 731, 267, 271,
	734, 267, 736, 267, 739, 0, 0, 0, 0, 0,
	0, 0, 743, 693, 749, 0, 0, 0, 498, 774,
	671, 672, 673, 674, 675, 501, 501, 654, 502, 655,
	656, 501, 658, 659, 501, 661, 662, 663, 664, 501,
	666, 667, 668, 46, 0, 800, 790, 802, 804, 0,
	42, 0, 0, 531, 774, 533, 540, 0, 0, 534,
	0, 535, 553, 555, 0, -2, 523, 0, 0, 0,
	783, 569, 52, 74, 75, 76, 343, 346, 0, 319,
	267, 322, 0, 306, 307, 0, 279, 280, 0, 289,
	291, 293, 268, 232, 233, 286, 241, 237, 284, 285,
	249, 283, 0, 283, 0, 272, 0, 0, 85, 0,
	0, 99, 0, 95, 0, 0, 0, 391, 422, 526,
	871, 558, 0, 0, 373, 0, 357, 849, 315, 351,
	358, 359, 364, 365, 0, 0, 361, 0, 373, 0,
	372, 0, 41, 0, 770, 0, 568, 0, 488, 651,
	589, 0, 683, 728, 283, 732, 733, 735, 737, 738,
	740, 685, 684, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 652, 653, 657, 660, 665,
	0, 47, 0, 805, -2, 0, 64, 0, 783, 537,
	0, 542, 564, 521, 0, 0, 529, 0, 0, 51,
	295, 0, 780, 0, 281, 238, 286, 266, 286, 0,
	0, 0, -2, 0, 80, 100, 101, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 94, 96, 97, 98,
	873, 867, 0, 0, 1246, 374, 0, 197, 0, 317,
	316, 371, 0, 839, 840, 0, 1246, 373, 0, 799,
	34, 0, 0, 764, 81, 493, 729, 730, 0, 0,
	0, 0, 721, 692, 744, 0, 0, 499, 0, 0,
	803, 0, -2, 0, 532, 50, 0, 519, 564, 0,
	565, 566, 567, 294, 298, 0, 303, 0, 320, 321,
	0, 255, 256, 270, 273, 0, 86, 0, 0, 102,
	103, 104, 105, 107, 108, 0, 0, 0, 828, 875,
	-2, 0, 568, 1246, 356, 375, 195, 0, 849, 360,
	366, 367, 1246, 0, 771, 772, 773, 765, 766, 768,
	769, 770, 489, 686, 688, 687, 689, 0, 0, 0,
	710, 711, 774, 0, 793, 42, 538, 522, 530, 299,
	300, 0, 302, 0, 296, 0, 80, -2, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 0,
	0, 0, 109, 110, 111, 112, 527, 0, 867, 0,
	869, 0, 866, 0, 764, 355, 0, 0, 368, 0,
	385, 0, 0, 35, 690, 0, 0, 0, 0, 801,
	-2, 301, 0, 84, 297, 121, 90, 0, 0, 0,
	165, 29, 0, 0, 874, 0, 872, 0, 0, 868,
	770, 296, 0, 384, 0, 0, 767, 722, 0, 725,
	500, 0, 80, 0, 0, 0, 132, 0, 0, 0,
	0, 829, 876, 0, 0, 36, 362, 0, 386, 0,
	723, 0, 0, 122, 123, 0, 0, 133, 0, 0,
	113, 166, 528, 870, 864, 296, 0, 0, 324, 80,
	124, 125, 126, 127, 128, 0, 130, 0, 0, 0,
	363, 0, 0, 325, 326, 0, 89, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 724, 327, 0, 328,
	0, 0, 0, 0, 0, 134, 135, 0, 0, 0,
	140, 0, 0, 0, 334, 336, 337, 0, 0, 335,
	129, 131, 0, 137, 0, 0, 387, 388, 338, 339,
	340, 0, 0, 0, 136, 0, 141, 138,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 88, 3, 3, 3, 116, 108, 3,
	67, 69, 113, 111, 68, 112, 126, 114, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 420,
	97, 96, 98, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 118, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 119,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 89, 90, 91, 92, 93, 94, 95,
	99, 100, 101, 102, 103, 104, 105, 106, 109, 110,
	115, 117, 120, 121, 122, 123, 124, 125, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:384
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:389
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:421
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &Load{Local: yyDollar[3].boolVal, Infile: yyDollar[4].str, Table: yyDollar[5].tableName, Partition: yyDollar[6].partitions, Charset: yyDollar[7].str, Fields: yyDollar[8].Fields, Lines: yyDollar[9].Lines, IgnoreNum: yyDollar[10].sqlVal, Columns: yyDollar[11].columns}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:433
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:441
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:458
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}, Where: NewWhere(WhereStr, yyDollar[7].expr), GroupBy: GroupBy(yyDollar[8].exprs), Having: NewWhere(HavingStr, yyDollar[9].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:462
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[8].tableExprs, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:466
		{
			yyVAL.selStmt = &Select{CommonTableExprs: yyDollar[1].tableExprs, Comments: Comments(yyDollar[3].bytes2), Cache: yyDollar[4].str, Distinct: yyDollar[5].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[9].tableExprs, Where: NewWhere(WhereStr, yyDollar[10].expr), GroupBy: GroupBy(yyDollar[11].exprs), Having: NewWhere(HavingStr, yyDollar[12].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:472
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:482
		{
			yyVAL.tableExprs = append(yyDollar[1].tableExprs, yyDollar[3].tableExpr)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:488
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[3].subquery, As: yyDollar[1].tableIdent}, nil}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:492
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[6].subquery, As: yyDollar[1].tableIdent}, yyDollar[3].columns}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:502
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:508
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:512
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:519
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:531
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.str = InsertStr
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.str = ReplaceStr
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:559
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:563
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:567
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:576
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:581
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:585
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:591
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:595
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:605
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:610
		{
			yyVAL.partitions = nil
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:614
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:628
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:632
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:638
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:648
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:656
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:662
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:666
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:670
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:680
		{
			yyVAL.str = SessionStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:684
		{
			yyVAL.str = GlobalStr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:689
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:694
		{
			yyVAL.int = yyOldPosition(yylex)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:700
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:708
		{
			yyDollar[1].ddl.OptLike = &OptLike{LikeTable: yyDollar[3].tableName}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:713
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:717
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:721
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:725
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:733
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 89:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:741
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:745
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:750
		{
			yyVAL.procedureParams = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:760
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:764
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:774
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:778
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:782
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:787
		{
			yyVAL.characteristics = nil
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:801
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:811
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:823
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:831
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:835
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:839
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:849
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:854
		{
			yyVAL.str = ""
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:858
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.str = BeforeStr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.str = AfterStr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.str = InsertStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.str = UpdateStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.str = DeleteStr
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:887
		{
			yyVAL.triggerOrder = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:891
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:895
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:911
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:917
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 131:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:921
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:931
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:937
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:943
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 136:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:948
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:953
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 138:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:959
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:971
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:977
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:987
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:997
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1007
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1013
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1036
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.exprs = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.exprs = nil
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1049
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1055
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1059
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1065
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1092
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1103
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1110
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1115
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1119
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1123
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1148
		{
			yyVAL.columnType = ColumnType{}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1152
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1161
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1208
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1219
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1268
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1286
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1326
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1330
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1334
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1364
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1368
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1372
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1376
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1384
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1388
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1392
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1396
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1400
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1404
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1408
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1416
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1424
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1432
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1467
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1477
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1482
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1487
		{
			yyVAL.sqlVal = nil
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1491
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1496
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1500
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1508
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1512
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1518
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1526
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1535
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1568
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1573
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1577
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1581
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1586
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1600
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1604
		{
			yyVAL.colKeyOpt = colKey
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1608
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1618
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1624
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1628
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1633
		{
			yyVAL.indexOptions = nil
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1647
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1653
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1657
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1668
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1678
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1682
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1686
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1690
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1694
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1708
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = yyDollar[1].str
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1742
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1746
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1758
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1762
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 324:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1769
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 325:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1773
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 326:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1777
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 327:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1781
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 328:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1785
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1814
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1820
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1838
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1842
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = yyDollar[1].str
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1904
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 355:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1908
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 356:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1915
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 357:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1922
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1926
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1930
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1934
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 361:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1938
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 362:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 363:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 364:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1951
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 365:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1956
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 366:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1960
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 367:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1964
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 368:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1971
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1977
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1981
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 371:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1987
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1992
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1997
		{
			yyVAL.columnOrder = nil
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2005
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2011
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2017
		{
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
		}
	case 384:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2030
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2040
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 387:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2046
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 388:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2050
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2062
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2066
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2074
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2082
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2086
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2094
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2102
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2110
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2118
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2128
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2132
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2143
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2148
		{
			yyVAL.statement = &Show{Type: CharsetStr, Filter: yyDollar[4].showFilter}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Filter: yyDollar[3].showFilter}
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2156
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2160
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2165
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2169
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2173
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2177
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2181
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2185
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2197
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2201
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2205
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2209
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2213
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2217
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2225
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2230
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2240
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2244
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2248
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2252
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2298
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.str = "full "
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2326
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2332
		{
			yyVAL.showFilter = nil
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2346
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = SessionStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = GlobalStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2360
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2370
		{
			yyVAL.statement = &Begin{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.statement = &Begin{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2386
		{
			yyVAL.statement = &Commit{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.statement = &Rollback{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2398
		{
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2406
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2412
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2420
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2424
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.statement = &OtherRead{}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2467
		{
			setAllowComments(yylex, true)
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2477
		{
			yyVAL.bytes2 = nil
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = UnionStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = UnionAllStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			yyVAL.str = UnionDistinctStr
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = SQLCacheStr
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2513
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.str = DistinctStr
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2526
		{
			yyVAL.str = ""
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.str = StraightJoinHint
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2536
		{
			if ae, ok := yyDollar[2].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[1].int
				ae.EndParsePos = yyDollar[3].int - 1
			}
			yyVAL.selectExprs = SelectExprs{yyDollar[2].selectExpr}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2544
		{
			if ae, ok := yyDollar[4].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[3].int
				ae.EndParsePos = yyDollar[5].int - 1
			}
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[4].selectExpr)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2555
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2563
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2567
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2573
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2577
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2581
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2585
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2592
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2596
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2600
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2605
		{
			yyVAL.over = nil
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.over = yyDollar[1].over
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2614
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2628
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2632
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2640
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2646
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2650
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2664
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2668
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 519:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2685
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2696
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2700
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 522:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2704
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2708
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = nil
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2732
		{
			yyVAL.columns = nil
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2746
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2752
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2769
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2773
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2777
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2781
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2789
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2793
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2799
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2804
		{
			yyVAL.empty = struct{}{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2806
		{
			yyVAL.empty = struct{}{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2821
		{
			yyVAL.str = JoinStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2825
		{
			yyVAL.str = JoinStr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.str = JoinStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.str = StraightJoinStr
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2841
		{
			yyVAL.str = LeftJoinStr
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.str = LeftJoinStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.str = RightJoinStr
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2853
		{
			yyVAL.str = RightJoinStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.str = NaturalJoinStr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2873
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2879
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2889
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2899
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2904
		{
			yyVAL.indexHints = nil
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2908
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2912
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2916
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2961
		{
			yyVAL.str = ""
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2965
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2989
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2993
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2997
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3009
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3013
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3017
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.str = IsNullStr
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3027
		{
			yyVAL.str = IsNotNullStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.str = IsTrueStr
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			yyVAL.str = IsNotTrueStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.str = IsFalseStr
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3043
		{
			yyVAL.str = IsNotFalseStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3049
		{
			yyVAL.str = EqualStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.str = LessThanStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3057
		{
			yyVAL.str = GreaterThanStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3061
		{
			yyVAL.str = LessEqualStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3065
		{
			yyVAL.str = GreaterEqualStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.str = NotEqualStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3073
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3088
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3102
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3107
		{
			yyVAL.selectExprs = nil
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3118
		{
			yyVAL.selectExprs = append(yyDollar[1].selectExprs, yyDollar[3].selectExpr)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3128
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3154
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3158
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3162
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3166
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3170
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3174
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3178
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3182
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3186
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3210
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3226
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3234
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3252
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3256
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3276
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3280
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3290
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3294
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3298
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3302
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3306
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3310
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3314
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3322
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3326
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3330
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3334
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3338
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3342
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3346
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3350
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3354
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3363
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3367
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3371
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3375
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3379
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3387
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3395
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3399
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3403
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3414
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 683:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3426
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 684:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3430
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 685:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3434
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 686:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3438
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 687:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3442
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 688:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3446
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 689:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3450
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 690:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3454
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 692:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3462
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3466
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3493
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3503
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3518
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3523
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3527
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3531
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3536
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3541
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3546
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 710:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3550
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 711:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3554
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3565
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3601
		{
			yyVAL.str = ""
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3605
		{
			yyVAL.str = BooleanModeStr
		}
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3609
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 724:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3613
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3617
		{
			yyVAL.str = QueryExpansionStr
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3633
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3637
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3688
		{
			yyVAL.expr = nil
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3692
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3697
		{
			yyVAL.str = string("")
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3701
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3707
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3711
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3717
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3722
		{
			yyVAL.expr = nil
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3726
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3732
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3736
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3740
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3746
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3750
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3754
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3758
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3762
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3766
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3770
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3774
		{
			yyVAL.expr = &NullVal{}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3780
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3784
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3788
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3793
		{
			yyVAL.exprs = nil
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3797
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3803
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3807
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3813
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3817
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3822
		{
			yyVAL.expr = nil
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3826
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3832
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3836
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3841
		{
			yyVAL.orderBy = nil
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3845
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3851
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3855
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3861
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3865
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3870
		{
			yyVAL.str = AscScr
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3874
		{
			yyVAL.str = AscScr
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3878
		{
			yyVAL.str = DescScr
		}
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3883
		{
			yyVAL.limit = nil
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3887
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3891
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3895
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3900
		{
			yyVAL.str = ""
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3904
		{
			yyVAL.str = ForUpdateStr
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3908
		{
			yyVAL.str = ShareModeStr
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3921
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3925
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3929
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3934
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3938
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3942
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3949
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3953
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3957
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3961
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3966
		{
			yyVAL.setExprs = nil
		}
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3970
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3976
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3980
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3986
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3990
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3996
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4002
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4012
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4016
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4022
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4026
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4030
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4034
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4041
		{
			yyVAL.bytes = []byte("charset")
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4048
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4052
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4056
		{
			yyVAL.expr = &Default{}
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4065
		{
			yyVAL.byt = 0
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4067
		{
			yyVAL.byt = 1
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4070
		{
			yyVAL.byt = 0
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4072
		{
			yyVAL.byt = 1
		}
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4075
		{
			yyVAL.str = ""
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4077
		{
			yyVAL.str = IgnoreStr
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4080
		{
			yyVAL.sqlVal = nil
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4082
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4086
		{
			yyVAL.empty = struct{}{}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4088
		{
			yyVAL.empty = struct{}{}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4090
		{
			yyVAL.empty = struct{}{}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4092
		{
			yyVAL.empty = struct{}{}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4094
		{
			yyVAL.empty = struct{}{}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4096
		{
			yyVAL.empty = struct{}{}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4098
		{
			yyVAL.empty = struct{}{}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4100
		{
			yyVAL.empty = struct{}{}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4102
		{
			yyVAL.empty = struct{}{}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4106
		{
			yyVAL.empty = struct{}{}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4108
		{
			yyVAL.empty = struct{}{}
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4111
		{
			yyVAL.empty = struct{}{}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4113
		{
			yyVAL.empty = struct{}{}
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4115
		{
			yyVAL.empty = struct{}{}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4119
		{
			yyVAL.str = UniqueStr
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4121
		{
			yyVAL.str = FulltextStr
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4123
		{
			yyVAL.str = SpatialStr
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4126
		{
			yyVAL.str = ""
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4128
		{
			yyVAL.str = yyDollar[1].str
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4131
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4133
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4137
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4141
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4148
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4154
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4158
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4165
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4170
		{
			yyVAL.str = string("")
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4172
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4175
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4177
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4180
		{
			yyVAL.EnclosedBy = nil
		}
	case 864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4184
		{
			yyVAL.EnclosedBy = &EnclosedBy{Optionally: yyDollar[1].boolVal, Delim: NewStrVal(yyDollar[4].bytes)}
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4189
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4193
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4198
		{
			yyVAL.sqlVal = nil
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4202
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4207
		{
			yyVAL.sqlVal = nil
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4211
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4216
		{
			yyVAL.Fields = nil
		}
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4220
		{
			yyVAL.Fields = &Fields{TerminatedBy: yyDollar[2].sqlVal, EnclosedBy: yyDollar[3].EnclosedBy, EscapedBy: yyDollar[4].sqlVal}
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4225
		{
			yyVAL.Lines = nil
		}
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4229
		{
			yyVAL.Lines = &Lines{StartingBy: yyDollar[2].sqlVal, TerminatedBy: yyDollar[3].sqlVal}
		}
	case 875:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4234
		{
			yyVAL.sqlVal = nil
		}
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4238
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4635
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4644
		{
			decNesting(yylex)
		}
	case 1246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4649
		{
			skipToEnd(yylex)
		}
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4654
		{
			skipToEnd(yylex)
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4658
		{
			skipToEnd(yylex)
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4662
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
